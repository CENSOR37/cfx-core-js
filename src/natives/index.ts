
import { Vector3 } from "../shared";
import { _i, _f, _v, _r, _ri, _rf, _rl, _s, _rv, _ro, _in, _ii, _fi, _ch, _obj, _ts, _fv, _mfr, _mv } from "../shared/header";

export function abortVehicleCrewEmblemRequest(p0: number): [boolean, number] { 
	const [retval, p0_out] = _in(0x82acc484, 0xffa3b05f, _ii(p0), _r);
	return [retval as boolean, p0_out as number]; 
}

export function absf(value: number): number { 
	return _in(0x73d57cff, 0xdd12c355, _fv(value), _r, _rf); 
}

export function absi(value: number): number { 
	return _in(0xf0d31ad1, 0x91a74f87, value, _r, _ri); 
}

export function acos(p0: number): number { 
	return _in(0x1d08b970, 0x013c34b6, _fv(p0), _r, _rf); 
}

/**
 * Appears to remove stealth kill action from memory
 * @param hash
 * @param enable
 */
export function actionManagerEnableAction(hash: number, enable: boolean): void { 
	return _in(0xa6a12939, 0xf16d85be, _ch(hash), enable); 
}

/**
 * mode can be any of these:
 * SLOWMO_T1_TRAILER_SMASH
 * SLOWMO_T1_RAYFIRE_EXPLOSION
 * SLOWMO_PROLOGUE_VAULT
 * NIGEL_02_SLOWMO_SETTING
 * JSH_EXIT_TUNNEL_SLOWMO
 * SLOWMO_BIG_SCORE_JUMP
 * SLOWMO_FIB4_TRUCK_SMASH
 * SLOWMO_EXTREME_04
 * SLOW_MO_METH_HOUSE_RAYFIRE
 * BARRY_02_SLOWMO
 * BARRY_01_SLOWMO
 * @param mode
 */
export function activateAudioSlowmoMode(mode: string): void { 
	return _in(0xd01005d2, 0xba2eb778, _ts(mode)); 
}

export function activateCamWithInterpAndFovCurve(camTo: number, camFrom: number, duration: number, easeLocation: number, easeRotation: number, easeFov: number): void { 
	return _in(0x34cfc4c2, 0xa38e83e3, camTo, camFrom, duration, easeLocation, easeRotation, easeFov); 
}

export function activateDamageTrackerOnNetworkId(netID: number, toggle: boolean): void { 
	return _in(0xd45b1ffc, 0xcd52ff19, netID, toggle); 
}

export function activateDamageTrackerOnPlayer(player: number, toggle: boolean): void { 
	return _in(0xbec0816f, 0xf5acbcda, player, toggle); 
}

/**
 * Does stuff like this:
 * gyazo.com/7fcb78ea3520e3dbc5b2c0c0f3712617
 * 
 * Example:
 * int GetHash = GET_HASH_KEY("fe_menu_version_corona_lobby");
 * ACTIVATE_FRONTEND_MENU(GetHash, 0, -1);
 * 
 * BOOL p1 is a toggle to define the game in pause.
 * int p2 is unknown but -1 always works, not sure why though.
 * 
 * [30/03/2017] ins1de :
 * 
 * the int p2 is actually a component variable. When the pause menu is visible, it opens the tab related to it.
 * 
 * Example : Function.Call(Hash.ACTIVATE_FRONTEND_MENU,-1171018317, 0, 42);
 * Result : Opens the "Online" tab without pausing the menu, with -1 it opens the map.Below is a list of all known Frontend Menu Hashes.
 * - FE_MENU_VERSION_SP_PAUSE
 * - FE_MENU_VERSION_MP_PAUSE
 * - FE_MENU_VERSION_CREATOR_PAUSE
 * - FE_MENU_VERSION_CUTSCENE_PAUSE
 * - FE_MENU_VERSION_SAVEGAME
 * - FE_MENU_VERSION_PRE_LOBBY
 * - FE_MENU_VERSION_LOBBY
 * - FE_MENU_VERSION_MP_CHARACTER_SELECT
 * - FE_MENU_VERSION_MP_CHARACTER_CREATION
 * - FE_MENU_VERSION_EMPTY
 * - FE_MENU_VERSION_EMPTY_NO_BACKGROUND
 * - FE_MENU_VERSION_TEXT_SELECTION
 * - FE_MENU_VERSION_CORONA
 * - FE_MENU_VERSION_CORONA_LOBBY
 * - FE_MENU_VERSION_CORONA_JOINED_PLAYERS
 * - FE_MENU_VERSION_CORONA_INVITE_PLAYERS
 * - FE_MENU_VERSION_CORONA_INVITE_FRIENDS
 * - FE_MENU_VERSION_CORONA_INVITE_CREWS
 * - FE_MENU_VERSION_CORONA_INVITE_MATCHED_PLAYERS
 * - FE_MENU_VERSION_CORONA_INVITE_LAST_JOB_PLAYERS
 * - FE_MENU_VERSION_CORONA_RACE
 * - FE_MENU_VERSION_CORONA_BETTING
 * - FE_MENU_VERSION_JOINING_SCREEN
 * - FE_MENU_VERSION_LANDING_MENU
 * - FE_MENU_VERSION_LANDING_KEYMAPPING_MENU
 * @param menuhash
 * @param togglePause
 * @param component
 */
export function activateFrontendMenu(menuhash: number, togglePause: boolean, component: number): void { 
	return _in(0xef01d36b, 0x9c9d0c7b, _ch(menuhash), togglePause, component); 
}

/**
 * More info: http://gtaforums.com/topic/836367-adding-props-to-interiors/
 * 
 * Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json
 * @param interior
 * @param entitySetName
 */
export function activateInteriorEntitySet(interior: number, entitySetName: string): void { 
	return _in(0x55e86af2, 0x712b36a1, interior, _ts(entitySetName)); 
}

export function activateInteriorGroupsUsingCamera(): void { 
	return _in(0x483aca11, 0x76ca93f1); 
}

export function activatePhysics(entity: number): void { 
	return _in(0x710311ad, 0xf0e20730, entity); 
}

/**
 * Please note that you will need to call DO_SCREEN_FADE_IN after exiting the Rockstar Editor when you call this.
 * @param p0
 */
export function activateRockstarEditor(p0: number): void { 
	return _in(0x49da8145, 0x672b2725, p0); 
}

/**
 * Does nothing (it's a nullsub). Seems to be PS4 specific.
 * @param p0
 * @param p1
 */
export function activityFeedActionStartWithCommandLine(p0: string, p1: string): void { 
	return _in(0xeb078ca2, 0xb5e82add, _ts(p0), _ts(p1)); 
}

/**
 * Does nothing (it's a nullsub). Seems to be PS4 specific.
 * @param p0
 */
export function activityFeedActionStartWithCommandLineAdd(p0: string): void { 
	return _in(0x703cc7f6, 0x0cbb2b57, _ts(p0)); 
}

/**
 * Does nothing (it's a nullsub). Seems to be PS4 specific.
 * @param p0
 */
export function activityFeedAddIntToCaption(p0: number): void { 
	return _in(0x97e7e2c0, 0x4245115b, p0); 
}

/**
 * Does nothing (it's a nullsub). Seems to be PS4 specific.
 * @param p0
 */
export function activityFeedAddLiteralSubstringToCaption(p0: string): void { 
	return _in(0xebd3205a, 0x207939ed, _ts(p0)); 
}

/**
 * Does nothing (it's a nullsub). Seems to be PS4 specific.
 * @param p0
 */
export function activityFeedAddSubstringToCaption(p0: string): void { 
	return _in(0x31125fd5, 0x09d9043f, _ts(p0)); 
}

/**
 * Does nothing (it's a nullsub). Seems to be PS4 specific.
 * @param p0
 * @param p1
 */
export function activityFeedCreate(p0: string, p1: string): void { 
	return _in(0x4dcdf92b, 0xf64236cd, _ts(p0), _ts(p1)); 
}

/**
 * Does nothing (it's a nullsub). Seems to be PS4 specific.
 * @param p0
 */
export function activityFeedLargeImageUrl(p0: string): void { 
	return _in(0x916ca67d, 0x26fd1e37, _ts(p0)); 
}

/**
 * Does nothing (it's a nullsub). Seems to be PS4 specific.
 * 
 * Used only once in the scripts (ingamehud) with p0 = "AF_GAMEMODE"
 * @param p0
 */
export function activityFeedOnlinePlayedWithPost(p0: string): void { 
	return _in(0xba4b8d83, 0xbdc75551, _ts(p0)); 
}

/**
 * Does nothing (it's a nullsub). Seems to be PS4 specific.
 */
export function activityFeedPost(): void { 
	return _in(0x8951eb9c, 0x6906d3c8); 
}

/**
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param ammo
 */
export function addAmmoToPed(ped: number, weaponHash: number, ammo: number): void { 
	return _in(0x78f0424c, 0x34306220, ped, _ch(weaponHash), ammo); 
}

/**
 * Same as SET_PED_ARMOUR, but ADDS 'amount' to the armor the Ped already has.
 * @param ped
 * @param amount
 */
export function addArmourToPed(ped: number, amount: number): void { 
	return _in(0x5ba652a0, 0xcd14df2f, ped, amount); 
}

/**
 * Adds a rectangular blip for the specified coordinates/area.
 * 
 * It is recommended to use SET_BLIP_ROTATION and SET_BLIP_COLOUR to make the blip not rotate along with the camera.
 * 
 * By default, the blip will show as a _regular_ blip with the specified color/sprite if it is outside of the minimap view.
 * 
 * Example image:
 * minimap https://w.wew.wtf/pdcjig.png
 * big map https://w.wew.wtf/zgcjcm.png
 * 
 * (Native name is _likely_ to actually be ADD_BLIP_FOR_AREA, but due to the usual reasons this can't be confirmed)
 * @param x
 * @param y
 * @param z
 * @param width
 * @param height
 */
export function addBlipForArea(x: number, y: number, z: number, width: number, height: number): number { 
	return _in(0xce5d0e5e, 0x315db238, _fv(x), _fv(y), _fv(z), _fv(width), _fv(height), _r, _ri); 
}

/**
 * Creates an orange ( default ) Blip-object. Returns a Blip-object which can then be modified.
 * @param x
 * @param y
 * @param z
 */
export function addBlipForCoord(x: number, y: number, z: number): number { 
	return _in(0x5a039bb0, 0xbca604b6, _fv(x), _fv(y), _fv(z), _r, _ri); 
}

/**
 * Returns red ( default ) blip attached to entity.
 * 
 * Example:
 * Blip blip; //Put this outside your case or option
 * blip = HUD::ADD_BLIP_FOR_ENTITY(YourPedOrBodyguardName);
 * HUD::SET_BLIP_AS_FRIENDLY(blip, true);
 * @param entity
 */
export function addBlipForEntity(entity: number): number { 
	return _in(0x5cde92c7, 0x02a8fce7, entity, _r, _ri); 
}

export function addBlipForPickup(pickup: number): number { 
	return _in(0xbe339365, 0xc863bd36, pickup, _r, _ri); 
}

export function addBlipForRadius(posX: number, posY: number, posZ: number, radius: number): number { 
	return _in(0x46818d79, 0xb1f7499a, _fv(posX), _fv(posY), _fv(posZ), _fv(radius), _r, _ri); 
}

/**
 * I filled p1-p6 (the floats) as they are as other natives with 6 floats in a row are similar and I see no other method. So if a test from anyone proves them wrong please correct.
 * 
 * p7 (length) determines the length of the spline, affects camera path and duration of transition between previous node and this one
 * 
 * p8 big values ~100 will slow down the camera movement before reaching this node
 * 
 * p9 != 0 seems to override the rotation/pitch (bool?)
 * @param camera
 * @param x
 * @param y
 * @param z
 * @param xRot
 * @param yRot
 * @param zRot
 * @param length
 * @param smoothingStyle
 * @param rotationOrder
 */
export function addCamSplineNode(camera: number, x: number, y: number, z: number, xRot: number, yRot: number, zRot: number, length: number, smoothingStyle: number, rotationOrder: number): void { 
	return _in(0x8609c75e, 0xc438fb3b, camera, _fv(x), _fv(y), _fv(z), _fv(xRot), _fv(yRot), _fv(zRot), length, smoothingStyle, rotationOrder); 
}

/**
 * p0 is the spline camera to which the node is being added.
 * p1 is the camera used to create the node.
 * p3 is always 3 in scripts. It might be smoothing style or rotation order.
 * @param cam
 * @param cam2
 * @param length
 * @param p3
 */
export function addCamSplineNodeUsingCamera(cam: number, cam2: number, length: number, p3: number): void { 
	return _in(0x0fb82563, 0x989cf4fb, cam, cam2, length, p3); 
}

/**
 * p0 is the spline camera to which the node is being added.
 * p1 is the camera used to create the node.
 * p3 is always 3 in scripts. It might be smoothing style or rotation order.
 * @param cam
 * @param cam2
 * @param length
 * @param p3
 */
export function addCamSplineNodeUsingCameraFrame(cam: number, cam2: number, length: number, p3: number): void { 
	return _in(0x0a9f2a46, 0x8b328e74, cam, cam2, length, p3); 
}

/**
 * p2 is always 2 in scripts. It might be smoothing style or rotation order.
 * @param cam
 * @param length
 * @param p2
 */
export function addCamSplineNodeUsingGameplayFrame(cam: number, length: number, p2: number): void { 
	return _in(0x60927824, 0x6a29ca34, cam, length, p2); 
}

export function addCoverBlockingArea(startX: number, startY: number, startZ: number, endX: number, endY: number, endZ: number, blockObjects: boolean, blockVehicles: boolean, blockMap: boolean, blockPlayer: boolean): void { 
	return _in(0x45c59709, 0x7dd7cb81, _fv(startX), _fv(startY), _fv(startZ), _fv(endX), _fv(endY), _fv(endZ), blockObjects, blockVehicles, blockMap, blockPlayer); 
}

export function addCoverPoint(x: number, y: number, z: number, direction: number, usage: number, height: number, arc: number, isPriority: boolean): number { 
	return _in(0xd5c12a75, 0xc7b9497f, _fv(x), _fv(y), _fv(z), _fv(direction), usage, height, arc, isPriority, _r, _ri); 
}

/**
 * decal types:
 * 
 * public enum DecalTypes
 * {
 * splatters_blood = 1010,
 * splatters_blood_dir = 1015,
 * splatters_blood_mist = 1017,
 * splatters_mud = 1020,
 * splatters_paint = 1030,
 * splatters_water = 1040,
 * splatters_water_hydrant = 1050,
 * splatters_blood2 = 1110,
 * weapImpact_metal = 4010,
 * weapImpact_concrete = 4020,
 * weapImpact_mattress = 4030,
 * weapImpact_mud = 4032,
 * weapImpact_wood = 4050,
 * weapImpact_sand = 4053,
 * weapImpact_cardboard = 4040,
 * weapImpact_melee_glass = 4100,
 * weapImpact_glass_blood = 4102,
 * weapImpact_glass_blood2 = 4104,
 * weapImpact_shotgun_paper = 4200,
 * weapImpact_shotgun_mattress,
 * weapImpact_shotgun_metal,
 * weapImpact_shotgun_wood,
 * weapImpact_shotgun_dirt,
 * weapImpact_shotgun_tvscreen,
 * weapImpact_shotgun_tvscreen2,
 * weapImpact_shotgun_tvscreen3,
 * weapImpact_melee_concrete = 4310,
 * weapImpact_melee_wood = 4312,
 * weapImpact_melee_metal = 4314,
 * burn1 = 4421,
 * burn2,
 * burn3,
 * burn4,
 * burn5,
 * bang_concrete_bang = 5000,
 * bang_concrete_bang2,
 * bang_bullet_bang,
 * bang_bullet_bang2 = 5004,
 * bang_glass = 5031,
 * bang_glass2,
 * solidPool_water = 9000,
 * solidPool_blood,
 * solidPool_oil,
 * solidPool_petrol,
 * solidPool_mud,
 * porousPool_water,
 * porousPool_blood,
 * porousPool_oil,
 * porousPool_petrol,
 * porousPool_mud,
 * porousPool_water_ped_drip,
 * liquidTrail_water = 9050
 * }
 * @param decalType
 * @param posX
 * @param posY
 * @param posZ
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 * @param p9
 * @param width
 * @param height
 * @param rCoef
 * @param gCoef
 * @param bCoef
 * @param opacity
 * @param timeout
 * @param p17
 * @param p18
 * @param p19
 */
export function addDecal(decalType: number, posX: number, posY: number, posZ: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number, width: number, height: number, rCoef: number, gCoef: number, bCoef: number, opacity: number, timeout: number, p17: boolean, p18: boolean, p19: boolean): number { 
	return _in(0xb302244a, 0x1839bdad, decalType, _fv(posX), _fv(posY), _fv(posZ), _fv(p4), _fv(p5), _fv(p6), _fv(p7), _fv(p8), _fv(p9), _fv(width), _fv(height), _fv(rCoef), _fv(gCoef), _fv(bCoef), _fv(opacity), _fv(timeout), p17, p18, p19, _r, _ri); 
}

/**
 * To remove, see: REMOVE_DISPATCH_SPAWN_BLOCKING_AREA
 * See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param width
 */
export function addDispatchSpawnAngledBlockingArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number): number { 
	return _in(0x918c7b2d, 0x2ff3928b, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(width), _r, _ri); 
}

export function addDispatchSpawnSphereBlockingArea(x1: number, y1: number, x2: number, y2: number): number { 
	return _in(0x2d4259f1, 0xfeb81da9, _fv(x1), _fv(y1), _fv(x2), _fv(y2), _r, _ri); 
}

/**
 * doorHash has to be unique. scriptDoor false; relies upon getNetworkGameScriptHandler. isLocal On true disables the creation CRequestDoorEvent's in DOOR_SYSTEM_SET_DOOR_STATE.
 * p5 only set to true in single player native scripts.
 * If scriptDoor is true, register the door on the script handler host (note: there's a hardcap on the number of script IDs that can be added to the system at a given time). If scriptDoor and isLocal are both false, the door is considered to be in a "Persists w/o netobj" state.
 * 
 * door hashes normally look like PROP_[int]_DOOR_[int] for interior doors and PROP_BUILDING_[int]_DOOR_[int] exterior doors but you can just make up your own hash if you want
 * All doors need to be registered with ADD_DOOR_TO_SYSTEM before they can be manipulated with the door natives and the easiest way to get door models is just find the door in codewalker.
 * 
 * Example: AddDoorToSystem("PROP_43_DOOR_0", "hei_v_ilev_fh_heistdoor2", -1456.818, -520.5037, 69.67043, 0, 0, 0)
 * @param doorHash
 * @param modelHash
 * @param x
 * @param y
 * @param z
 * @param p5
 * @param scriptDoor
 * @param isLocal
 * @param p8
 */
export function addDoorToSystem(doorHash: number, modelHash: number, x: number, y: number, z: number, p5: boolean, scriptDoor: boolean, isLocal: boolean, p8: number): void { 
	return _in(0x6f8838d0, 0x3d1dc226, _ch(doorHash), _ch(modelHash), _fv(x), _fv(y), _fv(z), p5, scriptDoor, isLocal, p8); 
}

/**
 * Example:
 * GRAPHICS::ADD_ENTITY_ICON(a_0, "MP_Arrow");
 * 
 * I tried this and nothing happened...
 * @param entity
 * @param icon
 */
export function addEntityIcon(entity: number, icon: string): number { 
	return _in(0x9cd43eee, 0x12bf4dd0, entity, _ts(icon), _r, _ri); 
}

/**
 * All found occurrences in b678d:
 * https://pastebin.com/ceu67jz8
 * @param entity
 * @param groupName
 * @param p2
 */
export function addEntityToAudioMixGroup(entity: number, groupName: string, p2: number): void { 
	return _in(0x153973ab, 0x99fe8980, entity, _ts(groupName), _fv(p2)); 
}

/**
 * BOOL isAudible = If explosion makes a sound.
 * BOOL isInvisible = If the explosion is invisible or not.
 * 
 * explosionType: https://alloc8or.re/gta5/doc/enums/eExplosionTag.txt
 * @param x
 * @param y
 * @param z
 * @param explosionType
 * @param damageScale
 * @param isAudible
 * @param isInvisible
 * @param cameraShake
 * @param noDamage
 */
export function addExplosion(x: number, y: number, z: number, explosionType: number, damageScale: number, isAudible: boolean, isInvisible: boolean, cameraShake: number, noDamage: boolean): void { 
	return _in(0xe3ad2bdb, 0xaee269ac, _fv(x), _fv(y), _fv(z), explosionType, _fv(damageScale), isAudible, isInvisible, _fv(cameraShake), noDamage); 
}

/**
 * isAudible: If explosion makes a sound.
 * isInvisible: If the explosion is invisible or not.
 * explosionType: See ADD_EXPLOSION.
 * @param x
 * @param y
 * @param z
 * @param explosionType
 * @param explosionFx
 * @param damageScale
 * @param isAudible
 * @param isInvisible
 * @param cameraShake
 */
export function addExplosionWithUserVfx(x: number, y: number, z: number, explosionType: number, explosionFx: number, damageScale: number, isAudible: boolean, isInvisible: boolean, cameraShake: number): void { 
	return _in(0x36dd3fe5, 0x8b5e5212, _fv(x), _fv(y), _fv(z), explosionType, _ch(explosionFx), _fv(damageScale), isAudible, isInvisible, _fv(cameraShake)); 
}

/**
 * Adds an area that seems to be related to pickup physics behavior.
 * Max amount of areas is 10. Only works in multiplayer.
 * @param x
 * @param y
 * @param z
 * @param radius
 */
export function addExtendedPickupProbeArea(x: number, y: number, z: number, radius: number): void { 
	return _in(0xd4a7a435, 0xb3710d05, _fv(x), _fv(y), _fv(z), _fv(radius)); 
}

export function addExtraCalmingQuad(xLow: number, yLow: number, xHigh: number, yHigh: number, height: number): number { 
	return _in(0xfdbf4cdb, 0xc07e1706, _fv(xLow), _fv(yLow), _fv(xHigh), _fv(yHigh), _fv(height), _r, _ri); 
}

/**
 * Returns the index of the newly created hospital spawn point.
 * 
 * p3 might be radius?
 * @param x
 * @param y
 * @param z
 * @param p3
 * @param p4
 */
export function addHospitalRestart(x: number, y: number, z: number, p3: number, p4: number): number { 
	return _in(0x1f464ef9, 0x88465a81, _fv(x), _fv(y), _fv(z), _fv(p3), p4, _r, _ri); 
}

/**
 * NOTE: ones that are -1, 0 - 35 are determined by a function where it gets a TextLabel from a global then runs,
 * GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME and depending on what the result is it goes in check order of 0 - 9 then A - Z then z (lowercase). So it will then return 0 - 35 or -1 if it's 'z'. The func to handle that ^^ is func_67 in dialog_handler.c atleast in TU27 Xbox360 scripts.
 * 
 * p0 is -1, 0 - 35
 * p1 is a char or string (whatever you wanna call it)
 * p2 is Global 10597 + i * 6. 'i' is a while(i < 70) loop
 * p3 is again -1, 0 - 35
 * p4 is again -1, 0 - 35
 * p5 is either 0 or 1 (bool ?)
 * p6 is either 0 or 1 (The func to determine this is bool)
 * p7 is either 0 or 1 (The func to determine this is bool)
 * p8 is either 0 or 1 (The func to determine this is bool)
 * p9 is 0 - 3 (Determined by func_60 in dialogue_handler.c)
 * p10 is either 0 or 1 (The func to determine this is bool)
 * p11 is either 0 or 1 (The func to determine this is bool)
 * p12 is unknown as in TU27 X360 scripts it only goes to p11.
 * @param index
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 * @param p9
 * @param p10
 * @param p11
 * @param p12
 */
export function addLineToConversation(index: number, p1: string, p2: string, p3: number, p4: number, p5: boolean, p6: boolean, p7: boolean, p8: boolean, p9: number, p10: boolean, p11: boolean, p12: boolean): void { 
	return _in(0xc5ef9634, 0x05593646, index, _ts(p1), _ts(p2), p3, p4, p5, p6, p7, p8, p9, p10, p11, p12); 
}

export function addModelToCreatorBudget(modelHash: number): boolean { 
	return _in(0x0bc3144d, 0xeb678666, _ch(modelHash), _r); 
}

export function addNavmeshBlockingObject(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: boolean, p8: number): number { 
	return _in(0xfcd5c8e0, 0x6e502f5a, _fv(p0), _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), _fv(p6), p7, p8, _r, _ri); 
}

export function addNavmeshRequiredRegion(x: number, y: number, radius: number): void { 
	return _in(0x387ead7e, 0xe42f6685, _fv(x), _fv(y), _fv(radius)); 
}

export function addNextMessageToPreviousBriefs(p0: boolean): void { 
	return _in(0x60296af4, 0xba14abc5, p0); 
}

export function addOilDecal(x: number, y: number, z: number, groundLvl: number, width: number, transparency: number): number { 
	return _in(0x126d7f89, 0xfe859a5e, _fv(x), _fv(y), _fv(z), _fv(groundLvl), _fv(width), _fv(transparency), _r, _ri); 
}

/**
 * isAudible: If explosion makes a sound.
 * isInvisible: If the explosion is invisible or not.
 * explosionType: See ADD_EXPLOSION.
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param explosionType
 * @param damageScale
 * @param isAudible
 * @param isInvisible
 * @param cameraShake
 */
export function addOwnedExplosion(ped: number, x: number, y: number, z: number, explosionType: number, damageScale: number, isAudible: boolean, isInvisible: boolean, cameraShake: number): void { 
	return _in(0x172aa1b6, 0x24fa1013, ped, _fv(x), _fv(y), _fv(z), explosionType, _fv(damageScale), isAudible, isInvisible, _fv(cameraShake)); 
}

export function addPatrolRouteLink(nodeId1: number, nodeId2: number): void { 
	return _in(0x23083260, 0xdec3a551, nodeId1, nodeId2); 
}

/**
 * Example:
 * TASK::ADD_PATROL_ROUTE_NODE(2, "WORLD_HUMAN_GUARD_STAND", -193.4915, -2378.864990234375, 10.9719, -193.4915, -2378.864990234375, 10.9719, 3000);
 * 
 * p0 is between 0 and 4 in the scripts.
 * 
 * p1 is "WORLD_HUMAN_GUARD_STAND" or "StandGuard".
 * 
 * p2, p3 and p4 is only one parameter sometimes in the scripts. Most likely a Vector3 hence p2, p3 and p4 are coordinates.
 * Examples:
 * TASK::ADD_PATROL_ROUTE_NODE(1, "WORLD_HUMAN_GUARD_STAND", l_739[7 -- [[3]] ], 0.0, 0.0, 0.0, 0);
 * 
 * TASK::ADD_PATROL_ROUTE_NODE(1, "WORLD_HUMAN_GUARD_STAND", l_B0[17 -- [[44]] ]._f3, l_B0[17 -- [[44]] ]._f3, 2000);
 * 
 * p5, p6 and p7 are for example set to: 1599.0406494140625, 2713.392578125, 44.4309.
 * 
 * p8 is an int, often random set to for example: MISC::GET_RANDOM_INT_IN_RANGE(5000, 10000).
 * @param nodeId
 * @param nodeType
 * @param posX
 * @param posY
 * @param posZ
 * @param headingX
 * @param headingY
 * @param headingZ
 * @param duration
 */
export function addPatrolRouteNode(nodeId: number, nodeType: string, posX: number, posY: number, posZ: number, headingX: number, headingY: number, headingZ: number, duration: number): void { 
	return _in(0x8edf9501, 0x67586b7c, nodeId, _ts(nodeType), _fv(posX), _fv(posY), _fv(posZ), _fv(headingX), _fv(headingY), _fv(headingZ), duration); 
}

/**
 * Ammo types: https://gist.github.com/root-cause/faf41f59f7a6d818b7db0b839bd147c1
 * @param ped
 * @param ammoTypeHash
 * @param ammo
 */
export function addPedAmmoByType(ped: number, ammoTypeHash: number, ammo: number): void { 
	return _in(0x2472622c, 0xe1f2d45f, ped, _ch(ammoTypeHash), ammo); 
}

/**
 * Applies an Item from a PedDecorationCollection to a ped. These include tattoos and shirt decals.
 * 
 * collection - PedDecorationCollection filename hash
 * overlay - Item name hash
 * 
 * Example:
 * Entry inside "mpbeach_overlays.xml" -
 * <Item>
 * <uvPos x="0.500000" y="0.500000" />
 * <scale x="0.600000" y="0.500000" />
 * <rotation value="0.000000" />
 * <nameHash>FM_Hair_Fuzz</nameHash>
 * <txdHash>mp_hair_fuzz</txdHash>
 * <txtHash>mp_hair_fuzz</txtHash>
 * <zone>ZONE_HEAD</zone>
 * <type>TYPE_TATTOO</type>
 * <faction>FM</faction>
 * <garment>All</garment>
 * <gender>GENDER_DONTCARE</gender>
 * <award />
 * <awardLevel />
 * </Item>
 * 
 * Code:
 * PED::ADD_PED_DECORATION_FROM_HASHES(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("mpbeach_overlays"), MISC::GET_HASH_KEY("fm_hair_fuzz"))
 * 
 * Full list of ped overlays / decorations by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedOverlayCollections.json
 * @param ped
 * @param collection
 * @param overlay
 */
export function addPedDecorationFromHashes(ped: number, collection: number, overlay: number): void { 
	return _in(0x5f5d1665, 0xe352a839, ped, _ch(collection), _ch(overlay)); 
}

/**
 * Full list of ped overlays / decorations by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedOverlayCollections.json
 * @param ped
 * @param collection
 * @param overlay
 */
export function addPedDecorationFromHashesInCorona(ped: number, collection: number, overlay: number): void { 
	return _in(0x5619bfa0, 0x7cfd7833, ped, _ch(collection), _ch(overlay)); 
}

/**
 * 4 calls in the b617d scripts. The only one with p0 and p2 in clear text:
 * 
 * AUDIO::ADD_PED_TO_CONVERSATION(5, l_AF, "DINAPOLI");
 * 
 * =================================================
 * One of the 2 calls in dialogue_handler.c p0 is in a while-loop, and so is determined to also possibly be 0 - 15.
 * @param index
 * @param ped
 * @param p2
 */
export function addPedToConversation(index: number, ped: number, p2: string): void { 
	return _in(0x95d9f4bc, 0x443956e7, index, ped, _ts(p2)); 
}

export function addPetrolDecal(x: number, y: number, z: number, groundLvl: number, width: number, transparency: number): number { 
	return _in(0x4f5212c7, 0xad880df8, _fv(x), _fv(y), _fv(z), _fv(groundLvl), _fv(width), _fv(transparency), _r, _ri); 
}

export function addPetrolTrailDecalInfo(x: number, y: number, z: number, p3: number): void { 
	return _in(0x96727868, 0x2cb6967a, _fv(x), _fv(y), _fv(z), _fv(p3)); 
}

export function addPickupToInteriorRoomByName(pickup: number, roomName: string): void { 
	return _in(0x3f6167f3, 0x51168730, pickup, _ts(roomName)); 
}

export function addPlayerTargetableEntity(player: number, entity: number): void { 
	return _in(0x9097eb6d, 0x4bb9a12a, player, entity); 
}

export function addPointToGpsCustomRoute(x: number, y: number, z: number): void { 
	return _in(0x311438a0, 0x71dd9b1a, _fv(x), _fv(y), _fv(z)); 
}

export function addPointToGpsMultiRoute(x: number, y: number, z: number): void { 
	return _in(0xa905192a, 0x6781c41b, _fv(x), _fv(y), _fv(z)); 
}

export function addPoliceRestart(p0: number, p1: number, p2: number, p3: number, p4: number): number { 
	return _in(0x45273676, 0x5b31fc4b, _fv(p0), _fv(p1), _fv(p2), _fv(p3), p4, _r, _ri); 
}

export function addPopMultiplierArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, p6: number, p7: number, p8: boolean, p9: boolean): number { 
	return _in(0x67f6413d, 0x3220e18d, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(p6), _fv(p7), p8, p9, _r, _ri); 
}

/**
 * This native is adding a zone, where you can change density settings. For example, you can add a zone on 0.0, 0.0, 0.0 with radius 900.0 and vehicleMultiplier 0.0, and you will not see any new population vehicle spawned in a radius of 900.0 from 0.0, 0.0, 0.0. Returns the id. You can have only 15 zones at the same time. You can remove zone using REMOVE_POP_MULTIPLIER_SPHERE
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param pedMultiplier
 * @param vehicleMultiplier
 * @param p6
 * @param p7
 */
export function addPopMultiplierSphere(x: number, y: number, z: number, radius: number, pedMultiplier: number, vehicleMultiplier: number, p6: boolean, p7: boolean): number { 
	return _in(0x32c7a7e8, 0xc43a1f80, _fv(x), _fv(y), _fv(z), _fv(radius), _fv(pedMultiplier), _fv(vehicleMultiplier), p6, p7, _r, _ri); 
}

/**
 * Can't select void. This function returns nothing. The hash of the created relationship group is output in the second parameter.
 * @param name
 * @param groupHash
 */
export function addRelationshipGroup(name: string, groupHash: number): [boolean, number] { 
	const [retval, groupHash_out] = _in(0xf372bc22, 0xfcb88606, _ts(name), _i, _r);
	return [retval as boolean, groupHash_out as number]; 
}

export function addReplayStatValue(value: number): void { 
	return _in(0x69fe6dc8, 0x7bd2a5e9, value); 
}

export function addRoadNodeSpeedZone(x: number, y: number, z: number, radius: number, speed: number, p5: boolean): number { 
	return _in(0x2ce544c6, 0x8fb812a0, _fv(x), _fv(y), _fv(z), _fv(radius), _fv(speed), p5, _r, _ri); 
}

/**
 * Creates a rope at the specific position, that extends in the specified direction when not attached to any entities.
 * __
 * 
 * Add_Rope(pos.x,pos.y,pos.z,0.0,0.0,0.0,20.0,4,20.0,1.0,0.0,false,false,false,5.0,false,NULL)
 * 
 * When attached, Position<vector> does not matter
 * When attached, Angle<vector> does not matter
 * 
 * Rope Type:
 * 4 and bellow is a thick rope
 * 5 and up are small metal wires
 * 0 crashes the game
 * 
 * Max_length - Rope is forced to this length, generally best to keep this the same as your rope length.
 * 
 * windingSpeed - Speed the Rope is being winded, using native START_ROPE_WINDING. Set positive for winding and negative for unwinding.
 * 
 * Rigid - If max length is zero, and this is set to false the rope will become rigid (it will force a specific distance, what ever length is, between the objects).
 * 
 * breakable - Whether or not shooting the rope will break it.
 * 
 * unkPtr - unknown ptr, always 0 in orig scripts
 * __
 * 
 * Lengths can be calculated like so:
 * 
 * float distance = abs(x1 - x2) + abs(y1 - y2) + abs(z1 - z2); // Rope length
 * 
 * 
 * NOTES:
 * 
 * Rope does NOT interact with anything you attach it to, in some cases it make interact with the world AFTER it breaks (seems to occur if you set the type to -1).
 * 
 * Rope will sometimes contract and fall to the ground like you'd expect it to, but since it doesn't interact with the world the effect is just jaring.
 * @param x
 * @param y
 * @param z
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param length
 * @param ropeType
 * @param maxLength
 * @param minLength
 * @param windingSpeed
 * @param p11
 * @param p12
 * @param rigid
 * @param p14
 * @param breakWhenShot
 * @param unkPtr
 */
export function addRope(x: number, y: number, z: number, rotX: number, rotY: number, rotZ: number, length: number, ropeType: number, maxLength: number, minLength: number, windingSpeed: number, p11: boolean, p12: boolean, rigid: boolean, p14: number, breakWhenShot: boolean, unkPtr: number): [number, number] { 
	const [retval, unkPtr_out] = _in(0xe832d760, 0x399eb220, _fv(x), _fv(y), _fv(z), _fv(rotX), _fv(rotY), _fv(rotZ), _fv(length), ropeType, _fv(maxLength), _fv(minLength), _fv(windingSpeed), p11, p12, rigid, _fv(p14), breakWhenShot, _ii(unkPtr), _r, _ri);
	return [retval as number, unkPtr_out as number]; 
}

export function addScenarioBlockingArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, p6: boolean, p7: boolean, p8: boolean, p9: boolean, p10: number): number { 
	return _in(0x1b5c85c6, 0x12e5256e, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), p6, p7, p8, p9, p10, _r, _ri); 
}

/**
 * BRAIN::ADD_SCRIPT_TO_RANDOM_PED("pb_prostitute", ${s_f_y_hooker_01}, 100, 0);
 * 
 * - Nacorpio
 * 
 * -----
 * 
 * Hardcoded to not work in Multiplayer.
 * @param name
 * @param model
 * @param p2
 * @param p3
 */
export function addScriptToRandomPed(name: string, model: number, p2: number, p3: number): void { 
	return _in(0x4ee53674, 0x68a65ccc, _ts(name), _ch(model), _fv(p2), _fv(p3)); 
}

export function addScriptedCoverArea(x: number, y: number, z: number, radius: number): void { 
	return _in(0x28b7b9bf, 0xdaf274aa, _fv(x), _fv(y), _fv(z), _fv(radius)); 
}

/**
 * eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
 * @param eventType
 * @param x
 * @param y
 * @param z
 * @param duration
 */
export function addShockingEventAtPosition(eventType: number, x: number, y: number, z: number, duration: number): number { 
	return _in(0xd9f84554, 0x09b525e9, eventType, _fv(x), _fv(y), _fv(z), _fv(duration), _r, _ri); 
}

/**
 * eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
 * @param eventType
 * @param entity
 * @param duration
 */
export function addShockingEventForEntity(eventType: number, entity: number, duration: number): number { 
	return _in(0x7fd8f3be, 0x76f89422, eventType, entity, _fv(duration), _r, _ri); 
}

/**
 * See description of `ADD_STUNT_JUMP_ANGLED` for detailed info. The only difference really is this one does not have the radius (or angle, not sure) floats parameters for entry and landing zones.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param x3
 * @param y3
 * @param z3
 * @param x4
 * @param y4
 * @param z4
 * @param camX
 * @param camY
 * @param camZ
 * @param p15
 * @param p16
 * @param p17
 */
export function addStuntJump(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, x3: number, y3: number, z3: number, x4: number, y4: number, z4: number, camX: number, camY: number, camZ: number, p15: number, p16: number, p17: number): number { 
	return _in(0x1a992da2, 0x97a4630c, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(x3), _fv(y3), _fv(z3), _fv(x4), _fv(y4), _fv(z4), _fv(camX), _fv(camY), _fv(camZ), p15, p16, p17, _r, _ri); 
}

/**
 * Creates a new stunt jump.
 * 
 * The radius1 and radius2 might actually not be a radius at all, but that's what it seems to me testing them in-game. But they may be 'angle' floats instead, considering this native is named ADD_STUNT_JUMP_**ANGLED**.
 * 
 * Info about the specific 'parameter sections':
 * 
 * 
 * **x1, y1, z1, x2, y2, z2 and radius1:**
 * 
 * First coordinates are for the jump entry area, and the radius that will be checked around that area. So if you're not exactly within the coordinates, but you are within the outter radius limit then it will still register as entering the stunt jump. Note as mentioned above, the radius is just a guess, I'm not really sure about it's exact purpose.
 * 
 * 
 * **x3, y3, z3, x4, y4, z4 and radius2:**
 * 
 * Next part is the landing area, again starting with the left bottom (nearest to the stunt jump entry zone) coordinate, and the second one being the top right furthest away part of the landing area. Followed by another (most likely) radius float, this is usually slightly larger than the entry zone 'radius' float value, just because you have quite a lot of places where you can land (I'm guessing).
 * 
 * 
 * **camX, camY and camZ:**
 * 
 * The final coordinate in this native is the Camera position. Rotation and zoom/FOV is managed by the game itself, you just need to provide the camera location.
 * 
 * 
 * **unk1, unk2 and unk3:**
 * 
 * Not sure what these are for, but they're always `150, 0, 0` in decompiled scripts.
 * 
 * Here is a list of almost all of the stunt jumps from GTA V (taken from decompiled scripts): https://pastebin.com/EW1jBPkY
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param radius1
 * @param x3
 * @param y3
 * @param z3
 * @param x4
 * @param y4
 * @param z4
 * @param radius2
 * @param camX
 * @param camY
 * @param camZ
 * @param p17
 * @param p18
 * @param p19
 */
export function addStuntJumpAngled(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, radius1: number, x3: number, y3: number, z3: number, x4: number, y4: number, z4: number, radius2: number, camX: number, camY: number, camZ: number, p17: number, p18: number, p19: number): number { 
	return _in(0xbbe5d803, 0xa5360cbf, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(radius1), _fv(x3), _fv(y3), _fv(z3), _fv(x4), _fv(y4), _fv(z4), _fv(radius2), _fv(camX), _fv(camY), _fv(camZ), p17, p18, p19, _r, _ri); 
}

export function addTacticalNavMeshPoint(x: number, y: number, z: number): void { 
	return _in(0xb8721407, 0xee9c3ff6, _fv(x), _fv(y), _fv(z)); 
}

export function addTcmodifierOverride(modifierName1: string, modifierName2: string): void { 
	return _in(0x1a8e2c8b, 0x9cf4549c, _ts(modifierName1), _ts(modifierName2)); 
}

export function addTextComponentFloat(value: number, decimalPlaces: number): void { 
	return _in(0xe7dcb5b8, 0x74bcd96e, _fv(value), decimalPlaces); 
}

export function addTextComponentFormattedInteger(value: number, commaSeparated: boolean): void { 
	return _in(0x0e4c749f, 0xf9de9cc4, value, commaSeparated); 
}

export function addTextComponentInteger(value: number): void { 
	return _in(0x03b504cf, 0x259931bc, value); 
}

export function addTextComponentSubstringBlipName(blip: number): void { 
	return _in(0x80ead8e2, 0xe1d5d52e, blip); 
}

export function addTextComponentSubstringKeyboardDisplay(string: string): void { 
	return _in(0x5f685208, 0x88e69014, _ts(string)); 
}

/**
 * p1 was always -1
 * @param p0
 * @param p1
 */
export function addTextComponentSubstringPhoneNumber(p0: string, p1: number): void { 
	return _in(0x761b7745, 0x4205a61d, _ts(p0), p1); 
}

export function addTextComponentSubstringPlayerName(text: string): void { 
	return _in(0x6c188be1, 0x34e074aa, _ts(text)); 
}

export function addTextComponentSubstringTextLabel(labelName: string): void { 
	return _in(0xc63cd5d2, 0x920acbe7, _ts(labelName)); 
}

/**
 * It adds the localized text of the specified GXT entry name. Eg. if the argument is GET_HASH_KEY("ES_HELP"), adds "Continue". Just uses a text labels hash key
 * @param gxtEntryHash
 */
export function addTextComponentSubstringTextLabelHashKey(gxtEntryHash: number): void { 
	return _in(0x17299b63, 0xc7683a2b, _ch(gxtEntryHash)); 
}

/**
 * Adds a timer (e.g. "00:00:00:000"). The appearance of the timer depends on the flags, which needs more research.
 * @param timestamp
 * @param flags
 */
export function addTextComponentSubstringTime(timestamp: number, flags: number): void { 
	return _in(0x1115f16b, 0x8ab9e8bf, timestamp, flags); 
}

/**
 * This native (along with ADD_TEXT_COMPONENT_SUBSTRING_KEYBOARD_DISPLAY and ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME) do not actually filter anything. They simply add the provided text (as of 944)
 * @param website
 */
export function addTextComponentSubstringWebsite(website: string): void { 
	return _in(0x94cf4ac0, 0x34c9c986, _ts(website)); 
}

export function addToClockTime(hours: number, minutes: number, seconds: number): void { 
	return _in(0xd716f30d, 0x8c8980e2, hours, minutes, seconds); 
}

export function addToItemset(item: number, itemset: number): boolean { 
	return _in(0xe3945201, 0xf14637dd, item, itemset, _r); 
}

export function addValidVehicleHitHash(p0: number): void { 
	return _in(0xe4c3b169, 0x876d33d7, p0); 
}

export function addVehicleCombatAngledAvoidanceArea(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): number { 
	return _in(0x54b0f614, 0x960f4a5f, _fv(p0), _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), _fv(p6), _r, _ri); 
}

/**
 * boneIndex is always chassis_dummy in the scripts. The x/y/z params are location relative to the chassis bone.
 * @param vehicle
 * @param ped
 * @param boneIndex
 * @param x1
 * @param x2
 * @param x3
 * @param y1
 * @param y2
 * @param y3
 * @param z1
 * @param z2
 * @param z3
 * @param scale
 * @param p13
 * @param alpha
 */
export function addVehicleCrewEmblem(vehicle: number, ped: number, boneIndex: number, x1: number, x2: number, x3: number, y1: number, y2: number, y3: number, z1: number, z2: number, z3: number, scale: number, p13: number, alpha: number): boolean { 
	return _in(0x428bdcb9, 0xda58da53, vehicle, ped, boneIndex, _fv(x1), _fv(x2), _fv(x3), _fv(y1), _fv(y2), _fv(y3), _fv(z1), _fv(z2), _fv(z3), _fv(scale), p13, alpha, _r); 
}

export function addVehiclePhoneExplosiveDevice(vehicle: number): void { 
	return _in(0x99ad4ccc, 0xb128cbc9, vehicle); 
}

export function addVehicleStuckCheckWithWarp(p0: number, p1: number, p2: number, p3: boolean, p4: boolean, p5: boolean, p6: number): void { 
	return _in(0x2fa99230, 0x62dd396c, p0, _fv(p1), p2, p3, p4, p5, p6); 
}

/**
 * x, y, z: offset in world coords from some entity.
 * @param ped
 * @param x
 * @param y
 * @param z
 */
export function addVehicleSubtaskAttackCoord(ped: number, x: number, y: number, z: number): void { 
	return _in(0x5cf0d8f9, 0xbba0dd75, ped, _fv(x), _fv(y), _fv(z)); 
}

export function addVehicleSubtaskAttackPed(ped: number, target: number): void { 
	return _in(0x85f462ba, 0xdc7da47f, ped, target); 
}

export function addVehicleUpsidedownCheck(vehicle: number): void { 
	return _in(0xb72e26d8, 0x1006005b, vehicle); 
}

export function adjustAmbientPedSpawnDensitiesThisFrame(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): void { 
	return _in(0xaa76052d, 0xda9bfc3e, p0, p1, p2, p3, p4, p5, p6); 
}

export function adjustNextPosSizeAsNormalized169(): void { 
	return _in(0xefabc772, 0x2293da7c); 
}

export function advanceClockTimeTo(hour: number, minute: number, second: number): void { 
	return _in(0xc8ca9670, 0xb9d83b3b, hour, minute, second); 
}

/**
 * Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
 * @param pickupHash
 */
export function allowAllPlayersToCollectPickupsOfType(pickupHash: number): void { 
	return _in(0xfdc07c58, 0xe8aab715, _ch(pickupHash)); 
}

/**
 * control: see IS_CONTROL_ENABLED
 * @param control
 */
export function allowAlternativeScriptControlsLayout(control: number): void { 
	return _in(0x7f472403, 0x5fdca1dd, control); 
}

/**
 * This native doesn't seem to do anything, might be a debug-only native.
 * 
 * Confirmed, it is a debug native.
 * @param vehicle
 */
export function allowAmbientVehiclesToAvoidAdverseConditions(vehicle: number): void { 
	return _in(0xb264c4d2, 0xf2b0a78b, vehicle); 
}

export function allowBoatBoomToAnimate(vehicle: number, toggle: boolean): void { 
	return _in(0x0f3b4d4e, 0x43177236, vehicle, toggle); 
}

export function allowDamageEventsForNonNetworkedObjects(value: boolean): void { 
	return _in(0xabdabf4e, 0x1edecbfa, value); 
}

/**
 * Controls whether to display 'Cash'/'Bank' next to the money balance HUD in Multiplayer (https://i.imgur.com/MiYUtNl.png)
 * @param allow
 */
export function allowDisplayOfMultiplayerCashText(allow: boolean): void { 
	return _in(0xe67c6dfd, 0x386ea5e7, allow); 
}

export function allowEvasionHudIfDisablingHiddenEvasionThisFrame(player: number, p1: number): void { 
	return _in(0x2f41a3ba, 0xe005e5fa, player, p1); 
}

export function allowMissionCreatorWarp(toggle: boolean): void { 
	return _in(0xdea36202, 0xfc3382df, toggle); 
}

export function allowMotionBlurDecay(p0: number, p1: boolean): void { 
	return _in(0x271017b9, 0xba825366, p0, p1); 
}

/**
 * Allows opening the pause menu this frame, when the player is dead.
 */
export function allowPauseWhenNotInStateOfPlayThisFrame(): void { 
	return _in(0xcc3fdded, 0x67bcfc63); 
}

export function allowPickupArrowMarkerWhenUncollectable(pickup: number, toggle: boolean): void { 
	return _in(0x834344a4, 0x14c7c85d, pickup, toggle); 
}

export function allowPickupByNoneParticipant(pickup: number, toggle: boolean): void { 
	return _in(0xaa059c61, 0x5de9dd03, pickup, toggle); 
}

export function allowPlayerSwitchAscent(): void { 
	return _in(0x8e2a065a, 0xbdae6994); 
}

export function allowPlayerSwitchDescent(): void { 
	return _in(0xad5fdf34, 0xb81bfe79); 
}

export function allowPlayerSwitchOutro(): void { 
	return _in(0x74de2e87, 0x39086740); 
}

export function allowPlayerSwitchPan(): void { 
	return _in(0x43d1680c, 0x6d19a8e9); 
}

export function allowPortablePickupToMigrateToNonParticipants(pickup: number, toggle: boolean): void { 
	return _in(0x641f272b, 0x52e2f0f8, pickup, toggle); 
}

export function allowSonarBlips(toggle: boolean): void { 
	return _in(0x60734cc2, 0x07c9833c, toggle); 
}

export function allowTrainToBeRemovedByPopulation(p0: number): void { 
	return _in(0x2310a8f9, 0x421ebf43, p0); 
}

/**
 * Example from michael2 script.
 * 
 * CAM::ANIMATED_SHAKE_CAM(l_5069, "shake_cam_all@", "light", "", 1f);
 * @param cam
 * @param p1
 * @param p2
 * @param p3
 * @param amplitude
 */
export function animatedShakeCam(cam: number, p1: string, p2: string, p3: string, amplitude: number): void { 
	return _in(0xa2746eea, 0xe3e577cd, cam, _ts(p1), _ts(p2), _ts(p3), _fv(amplitude)); 
}

/**
 * CAM::ANIMATED_SHAKE_SCRIPT_GLOBAL("SHAKE_CAM_medium", "medium", "", 0.5f);
 * 
 * Full list of cam shake types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/camShakeTypesCompact.json
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function animatedShakeScriptGlobal(p0: string, p1: string, p2: string, p3: number): void { 
	return _in(0xc2eae3fb, 0x8cdbed31, _ts(p0), _ts(p1), _ts(p2), _fv(p3)); 
}

/**
 * See ANIMPOSTFX_PLAY
 * 
 * Full list of animpostFX / screen effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animPostFxNamesCompact.json
 * @param effectName
 */
export function animpostfxGetCurrentTime(effectName: string): number { 
	return _in(0xe35b38a2, 0x7e8e7179, _ts(effectName), _r, _rf); 
}

/**
 * Returns whether the specified effect is active.
 * See ANIMPOSTFX_PLAY
 * 
 * Full list of animpostFX / screen effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animPostFxNamesCompact.json
 * @param effectName
 */
export function animpostfxIsRunning(effectName: string): boolean { 
	return _in(0x36ad3e69, 0x0da5aceb, _ts(effectName), _r); 
}

/**
 * duration - is how long to play the effect for in milliseconds. If 0, it plays the default length
 * if loop is true, the effect won't stop until you call ANIMPOSTFX_STOP on it. (only loopable effects)
 * 
 * Full list of animpostFX / screen effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animPostFxNamesCompact.json
 * @param effectName
 * @param duration
 * @param looped
 */
export function animpostfxPlay(effectName: string, duration: number, looped: boolean): void { 
	return _in(0x2206bf9a, 0x37b7f724, _ts(effectName), duration, looped); 
}

/**
 * See ANIMPOSTFX_PLAY
 * 
 * Full list of animpostFX / screen effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animPostFxNamesCompact.json
 * @param effectName
 */
export function animpostfxStop(effectName: string): void { 
	return _in(0x068e835a, 0x1d0dc0e3, _ts(effectName)); 
}

/**
 * Stops ALL currently playing effects.
 */
export function animpostfxStopAll(): void { 
	return _in(0xb4eddc19, 0x532bfb85); 
}

/**
 * Stops the effect and sets a value (bool) in its data (+0x199) to false.
 * See ANIMPOSTFX_PLAY
 * 
 * Full list of animpostFX / screen effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animPostFxNamesCompact.json
 * @param effectName
 */
export function animpostfxStopAndFlushRequests(effectName: string): void { 
	return _in(0xd2209be1, 0x28b5418c, _ts(effectName)); 
}

export function appClearBlock(): void { 
	return _in(0x5fe1df33, 0x42db7dba); 
}

export function appCloseApp(): void { 
	return _in(0xe41c65e0, 0x7a5f05fc); 
}

export function appCloseBlock(): void { 
	return _in(0xe8e3fcf7, 0x2eac0ef8); 
}

export function appDataValid(): boolean { 
	return _in(0x846aa8e7, 0xd55ee5b6, _r); 
}

export function appDeleteAppData(appName: string): boolean { 
	return _in(0x44151aea, 0x95c8a003, _ts(appName), _r); 
}

export function appGetDeletedFileStatus(): number { 
	return _in(0xc9853a2b, 0xe3ded1a6, _r, _ri); 
}

export function appGetFloat(property: string): number { 
	return _in(0x1514fb24, 0xc02c2322, _ts(property), _r, _rf); 
}

export function appGetInt(property: string): number { 
	return _in(0xd3a58a12, 0xc77d9d4b, _ts(property), _r, _ri); 
}

export function appGetString(property: string): string { 
	return _in(0x749b0239, 0x50d2311c, _ts(property), _r, _s); 
}

export function appHasLinkedSocialClubAccount(): boolean { 
	return _in(0x71eee697, 0x45088da0, _r); 
}

export function appHasSyncedData(appName: string): boolean { 
	return _in(0xca52279a, 0x7271517f, _ts(appName), _r); 
}

export function appSaveData(): void { 
	return _in(0x95c5d356, 0xcda6e85f); 
}

/**
 * Called in the gamescripts like:
 * APP::APP_SET_APP("car");
 * APP::APP_SET_APP("dog");
 * @param appName
 */
export function appSetApp(appName: string): void { 
	return _in(0xcfd0406a, 0xdaf90d2b, _ts(appName)); 
}

export function appSetBlock(blockName: string): void { 
	return _in(0x262ab456, 0xa3d21f93, _ts(blockName)); 
}

export function appSetFloat(property: string, value: number): void { 
	return _in(0x25d7687c, 0x68e0daa4, _ts(property), _fv(value)); 
}

export function appSetInt(property: string, value: number): void { 
	return _in(0x607e8e3d, 0x3e4f9611, _ts(property), value); 
}

export function appSetString(property: string, value: string): void { 
	return _in(0x3ff2fcec, 0x4b7721b4, _ts(property), _ts(value)); 
}

/**
 * damages a ped with the given amount
 * @param ped
 * @param damageAmount
 * @param p2
 * @param p3
 * @param weaponType
 */
export function applyDamageToPed(ped: number, damageAmount: number, p2: boolean, p3: number, weaponType: number): void { 
	return _in(0x697157ce, 0xd63f18d4, ped, damageAmount, p2, p3, _ch(weaponType)); 
}

export function applyEmpEffect(vehicle: number): void { 
	return _in(0x249249d7, 0x4f813eb2, vehicle); 
}

/**
 * Documented here:
 * gtaforums.com/topic/885669-precisely-define-object-physics/
 * gtaforums.com/topic/887362-apply-forces-and-momentums-to-entityobject/
 * 
 * forceFlags:
 * First bit (lowest): Strong force flag, factor 100
 * Second bit: Unkown flag
 * Third bit: Momentum flag=1 (vector (x,y,z) is a momentum, more research needed)
 * If higher bits are unequal 0 the function doesn't applay any forces at all.
 * (As integer possible values are 0-7)
 * 
 * 0: weak force
 * 1: strong force
 * 2: same as 0 (2nd bit?)
 * 3: same as 1
 * 4: weak momentum
 * 5: strong momentum
 * 6: same as 4
 * 7: same as 5
 * 
 * isLocal: vector defined in local (body-fixed) coordinate frame
 * isMassRel: if true the force gets multiplied with the objects mass (this is why it was known as highForce) and different objects will have the same acceleration.
 * 
 * p8 !!! Whenever I set this !=0, my script stopped.
 * @param entity
 * @param forceFlags
 * @param x
 * @param y
 * @param z
 * @param offX
 * @param offY
 * @param offZ
 * @param boneIndex
 * @param isDirectionRel
 * @param ignoreUpVec
 * @param isForceRel
 * @param p12
 * @param p13
 */
export function applyForceToEntity(entity: number, forceFlags: number, x: number, y: number, z: number, offX: number, offY: number, offZ: number, boneIndex: number, isDirectionRel: boolean, ignoreUpVec: boolean, isForceRel: boolean, p12: boolean, p13: boolean): void { 
	return _in(0xc5f68be9, 0x613e2d18, entity, forceFlags, _fv(x), _fv(y), _fv(z), _fv(offX), _fv(offY), _fv(offZ), boneIndex, isDirectionRel, ignoreUpVec, isForceRel, p12, p13); 
}

/**
 * Applies a force to the specified entity.
 * 
 * **List of force types (p1)**:
 * public enum ForceType
 * {
 * MinForce = 0,
 * MaxForceRot = 1,
 * MinForce2 = 2,
 * MaxForceRot2 = 3,
 * ForceNoRot = 4,
 * ForceRotPlusForce = 5
 * }
 * Research/documentation on the gtaforums can be found here https://gtaforums.com/topic/885669-precisely-define-object-physics/) and here https://gtaforums.com/topic/887362-apply-forces-and-momentums-to-entityobject/.
 * 
 * p6/relative - makes the xyz force not relative to world coords, but to something else
 * p7/highForce - setting false will make the force really low
 * @param entity
 * @param forceType
 * @param x
 * @param y
 * @param z
 * @param p5
 * @param isDirectionRel
 * @param isForceRel
 * @param p8
 */
export function applyForceToEntityCenterOfMass(entity: number, forceType: number, x: number, y: number, z: number, p5: boolean, isDirectionRel: boolean, isForceRel: boolean, p8: boolean): void { 
	return _in(0x18ff00fc, 0x7eff559e, entity, forceType, _fv(x), _fv(y), _fv(z), p5, isDirectionRel, isForceRel, p8); 
}

export function applyImpulseToCloth(posX: number, posY: number, posZ: number, vecX: number, vecY: number, vecZ: number, impulse: number): void { 
	return _in(0xe37f7218, 0x24571784, _fv(posX), _fv(posY), _fv(posZ), _fv(vecX), _fv(vecY), _fv(vecZ), _fv(impulse)); 
}

/**
 * woundTypes:
 * - soak_splat
 * - wound_sheet
 * - BulletSmall
 * - BulletLarge
 * - ShotgunSmall
 * - ShotgunSmallMonolithic
 * - ShotgunLarge
 * - ShotgunLargeMonolithic
 * - NonFatalHeadshot
 * - stab
 * - BasicSlash
 * - Scripted_Ped_Splash_Back
 * - BackSplash
 * @param ped
 * @param boneIndex
 * @param xRot
 * @param yRot
 * @param zRot
 * @param woundType
 */
export function applyPedBlood(ped: number, boneIndex: number, xRot: number, yRot: number, zRot: number, woundType: string): void { 
	return _in(0x83f7e01c, 0x7b769a26, ped, boneIndex, _fv(xRot), _fv(yRot), _fv(zRot), _ts(woundType)); 
}

export function applyPedBloodByZone(ped: number, p1: number, p2: number, p3: number, p4: string): void { 
	return _in(0x3311e47b, 0x91edcbbc, ped, p1, _fv(p2), _fv(p3), _ts(p4)); 
}

export function applyPedBloodDamageByZone(ped: number, p1: number, p2: number, p3: number, p4: number): void { 
	return _in(0x816f6981, 0xc60bf53b, ped, p1, _fv(p2), _fv(p3), p4); 
}

export function applyPedBloodSpecific(ped: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: string): void { 
	return _in(0xef0d582c, 0xbf2d9b0f, ped, p1, _fv(p2), _fv(p3), _fv(p4), _fv(p5), p6, _fv(p7), _ts(p8)); 
}

/**
 * enum eDamageZone
 * {
 * DZ_Torso = 0,
 * DZ_Head,
 * DZ_LeftArm,
 * DZ_RightArm,
 * DZ_LeftLeg,
 * DZ_RightLeg,
 * };
 * 
 * Decal Names:
 * scar
 * blushing
 * cs_flush_anger
 * cs_flush_anger_face
 * bruise
 * bruise_large
 * herpes
 * ArmorBullet
 * basic_dirt_cloth
 * basic_dirt_skin
 * cs_trev1_dirt
 * 
 * APPLY_PED_DAMAGE_DECAL(ped, 1, 0.5f, 0.513f, 0f, 1f, unk, 0, 0, "blushing");
 * @param ped
 * @param damageZone
 * @param xOffset
 * @param yOffset
 * @param heading
 * @param scale
 * @param alpha
 * @param variation
 * @param fadeIn
 * @param decalName
 */
export function applyPedDamageDecal(ped: number, damageZone: number, xOffset: number, yOffset: number, heading: number, scale: number, alpha: number, variation: number, fadeIn: boolean, decalName: string): void { 
	return _in(0x397c38aa, 0x7b4a5f83, ped, damageZone, _fv(xOffset), _fv(yOffset), _fv(heading), _fv(scale), _fv(alpha), variation, fadeIn, _ts(decalName)); 
}

/**
 * Damage Packs:
 * 
 * "SCR_TrevorTreeBang"
 * "HOSPITAL_0"
 * "HOSPITAL_1"
 * "HOSPITAL_2"
 * "HOSPITAL_3"
 * "HOSPITAL_4"
 * "HOSPITAL_5"
 * "HOSPITAL_6"
 * "HOSPITAL_7"
 * "HOSPITAL_8"
 * "HOSPITAL_9"
 * "SCR_Dumpster"
 * "BigHitByVehicle"
 * "SCR_Finale_Michael_Face"
 * "SCR_Franklin_finb"
 * "SCR_Finale_Michael"
 * "SCR_Franklin_finb2"
 * "Explosion_Med"
 * "SCR_Torture"
 * "SCR_TracySplash"
 * "Skin_Melee_0"
 * 
 * Additional damage packs:
 * 
 * gist.github.com/alexguirre/f3f47f75ddcf617f416f3c8a55ae2227
 * Full list of ped damage packs by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedDamagePacks.json
 * @param ped
 * @param damagePack
 * @param damage
 * @param mult
 */
export function applyPedDamagePack(ped: number, damagePack: string, damage: number, mult: number): void { 
	return _in(0x46df9187, 0x88cb093f, ped, _ts(damagePack), _fv(damage), _fv(mult)); 
}

export function areAllNavmeshRegionsLoaded(): boolean { 
	return _in(0x8415d95b, 0x194a3aea, _r); 
}

/**
 * Appears to return false if any window is broken.
 * @param vehicle
 */
export function areAllVehicleWindowsIntact(vehicle: number): boolean { 
	return _in(0x11d862a3, 0xe977a9ef, vehicle, _r); 
}

export function areAnyCcsPending(): boolean { 
	return _in(0x241fca5b, 0x1aa14f75, _r); 
}

/**
 * Returns false if every seat is occupied.
 * @param vehicle
 */
export function areAnyVehicleSeatsFree(vehicle: number): boolean { 
	return _in(0x2d34fc3b, 0xc4adb780, vehicle, _r); 
}

export function areCreditsRunning(): boolean { 
	return _in(0xd19c0826, 0xdc20cf1c, _r); 
}

/**
 * Getter for SET_NETWORK_CUTSCENE_ENTITIES.
 */
export function areCutsceneEntitiesNetworked(): boolean { 
	return _in(0x66d6a5e9, 0xc511214a, _r); 
}

export function areEntitiesEntirelyInsideGarage(garageHash: number, p1: boolean, p2: boolean, p3: boolean, p4: number): boolean { 
	return _in(0x85b6c850, 0x546fdde2, _ch(garageHash), p1, p2, p3, p4, _r); 
}

/**
 * Only used with the "akula" and "annihilator2" in the decompiled native scripts.
 * @param vehicle
 */
export function areFoldingWingsDeployed(vehicle: number): boolean { 
	return _in(0xaef12960, 0xfa943792, vehicle, _r); 
}

export function areMissileBaysDeployed(vehicle: number): boolean { 
	return _in(0xea474387, 0x4d515f13, vehicle, _r); 
}

export function areNodesLoadedForArea(x1: number, y1: number, x2: number, y2: number): boolean { 
	return _in(0xf7b79a50, 0xb905a30d, _fv(x1), _fv(y1), _fv(x2), _fv(y2), _r); 
}

export function areOnlinePoliciesUpToDate(): boolean { 
	return _in(0xf13fe2a8, 0x0c05c561, _r); 
}

export function arePlaneControlPanelsIntact(vehicle: number, p1: boolean): boolean { 
	return _in(0xf78f94d6, 0x0248c737, vehicle, p1, _r); 
}

export function arePlanePropellersIntact(plane: number): boolean { 
	return _in(0x755d6d52, 0x67cbbd7e, plane, _r); 
}

export function arePlayerFlashingStarsAboutToDrop(player: number): boolean { 
	return _in(0xafaf8604, 0x3e5874e9, player, _r); 
}

export function arePlayerStarsGreyedOut(player: number): boolean { 
	return _in(0x0a6eb355, 0xee14a2db, player, _r); 
}

export function areProfileSettingsValid(): boolean { 
	return _in(0x5aa3befa, 0x29f03ad4, _r); 
}

export function areStringsEqual(string1: string, string2: string): boolean { 
	return _in(0x0c515fab, 0x3ff9ea92, _ts(string1), _ts(string2), _r); 
}

export function areWidescreenBordersActive(): boolean { 
	return _in(0x4879e4fe, 0x39074cdf, _r); 
}

export function areWingsOfPlaneIntact(plane: number): boolean { 
	return _in(0x5991a014, 0x34ce9677, plane, _r); 
}

export function asin(p0: number): number { 
	return _in(0xc843060b, 0x5765dce7, _fv(p0), _r, _rf); 
}

export function assistedMovementCloseRoute(): void { 
	return _in(0xaebf081f, 0xfc0a0e5e); 
}

export function assistedMovementFlushRoute(): void { 
	return _in(0x8621390f, 0x0cdcfe1f); 
}

export function assistedMovementIsRouteLoaded(route: string): boolean { 
	return _in(0x60f9a439, 0x3a21f741, _ts(route), _r); 
}

export function assistedMovementOverrideLoadDistanceThisFrame(dist: number): void { 
	return _in(0x13945951, 0xe16ef912, _fv(dist)); 
}

export function assistedMovementRemoveRoute(route: string): void { 
	return _in(0x35485364, 0x85dd792b, _ts(route)); 
}

/**
 * Routes: "1_FIBStairs", "2_FIBStairs", "3_FIBStairs", "4_FIBStairs", "5_FIBStairs", "5_TowardsFire", "6a_FIBStairs", "7_FIBStairs", "8_FIBStairs", "Aprtmnt_1", "AssAfterLift", "ATM_1", "coroner2", "coroner_stairs", "f5_jimmy1", "fame1", "family5b", "family5c", "Family5d", "family5d", "FIB_Glass1", "FIB_Glass2", "FIB_Glass3", "finaBroute1A", "finalb1st", "finalB1sta", "finalbround", "finalbroute2", "Hairdresser1", "jan_foyet_ft_door", "Jo_3", "Lemar1", "Lemar2", "mansion_1", "Mansion_1", "pols_1", "pols_2", "pols_3", "pols_4", "pols_5", "pols_6", "pols_7", "pols_8", "Pro_S1", "Pro_S1a", "Pro_S2", "Towards_case", "trev_steps", "tunrs1", "tunrs2", "tunrs3", "Wave01457s"
 * @param route
 */
export function assistedMovementRequestRoute(route: string): void { 
	return _in(0x81726896, 0x8605947a, _ts(route)); 
}

export function assistedMovementSetRouteProperties(route: string, props: number): void { 
	return _in(0xd5002d78, 0xb7162e1b, _ts(route), props); 
}

export function atan(p0: number): number { 
	return _in(0xa9d1795c, 0xd5043663, _fv(p0), _r, _rf); 
}

export function atan2(p0: number, p1: number): number { 
	return _in(0x8927cbf9, 0xd22261a4, _fv(p0), _fv(p1), _r, _rf); 
}

/**
 * Last param determines if its relative to the Entity
 * @param cam
 * @param entity
 * @param xOffset
 * @param yOffset
 * @param zOffset
 * @param isRelative
 */
export function attachCamToEntity(cam: number, entity: number, xOffset: number, yOffset: number, zOffset: number, isRelative: boolean): void { 
	return _in(0xfedb7d26, 0x9e8c60e3, cam, entity, _fv(xOffset), _fv(yOffset), _fv(zOffset), isRelative); 
}

export function attachCamToPedBone(cam: number, ped: number, boneIndex: number, x: number, y: number, z: number, heading: boolean): void { 
	return _in(0x61a3dba1, 0x4ab7f411, cam, ped, boneIndex, _fv(x), _fv(y), _fv(z), heading); 
}

/**
 * This native works with vehicles only. Bone indexes are usually given by this native GET_ENTITY_BONE_INDEX_BY_NAME.
 * @param cam
 * @param vehicle
 * @param boneIndex
 * @param relativeRotation
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param offsetX
 * @param offsetY
 * @param offsetZ
 * @param fixedDirection
 */
export function attachCamToVehicleBone(cam: number, vehicle: number, boneIndex: number, relativeRotation: boolean, rotX: number, rotY: number, rotZ: number, offsetX: number, offsetY: number, offsetZ: number, fixedDirection: boolean): void { 
	return _in(0x8db3f12a, 0x02caef72, cam, vehicle, boneIndex, relativeRotation, _fv(rotX), _fv(rotY), _fv(rotZ), _fv(offsetX), _fv(offsetY), _fv(offsetZ), fixedDirection); 
}

export function attachContainerToHandlerFrameWhenLinedUp(vehicle: number, entity: number): void { 
	return _in(0x6a98c2ec, 0xf57fa5d4, vehicle, entity); 
}

/**
 * Attaches entity 1 to entity 2.
 * @param ropeId
 * @param ent1
 * @param ent2
 * @param ent1_x
 * @param ent1_y
 * @param ent1_z
 * @param ent2_x
 * @param ent2_y
 * @param ent2_z
 * @param length
 * @param p10
 * @param p11
 * @param p12
 * @param p13
 */
export function attachEntitiesToRope(ropeId: number, ent1: number, ent2: number, ent1_x: number, ent1_y: number, ent1_z: number, ent2_x: number, ent2_y: number, ent2_z: number, length: number, p10: boolean, p11: boolean): [number, number] { 
	const [p12_out, p13_out] = _in(0x3d95ec8b, 0x6d940ac3, ropeId, ent1, ent2, _fv(ent1_x), _fv(ent1_y), _fv(ent1_z), _fv(ent2_x), _fv(ent2_y), _fv(ent2_z), _fv(length), p10, p11, _i, _i);
	return [p12_out as number, p13_out as number]; 
}

export function attachEntityBoneToEntityBone(entity1: number, entity2: number, boneIndex1: number, boneIndex2: number, p4: boolean, p5: boolean): void { 
	return _in(0x5c48b757, 0x32c8456c, entity1, entity2, boneIndex1, boneIndex2, p4, p5); 
}

export function attachEntityBoneToEntityBoneYForward(entity1: number, entity2: number, boneIndex1: number, boneIndex2: number, p4: boolean, p5: boolean): void { 
	return _in(0xfd1695c5, 0xd3b05439, entity1, entity2, boneIndex1, boneIndex2, p4, p5); 
}

export function attachEntityToCargobob(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number): void { 
	return _in(0xa1dd82f3, 0xccf9a01e, p0, p1, p2, p3, p4, p5); 
}

/**
 * Attaches entity1 to bone (boneIndex) of entity2.
 * 
 * boneIndex - this is different to boneID, use GET_PED_BONE_INDEX to get the index from the ID. use the index for attaching to specific bones. entity1 will be attached to entity2's centre if bone index given doesn't correspond to bone indexes for that entity type.
 * 
 * useSoftPinning - if set to false attached entity will not detach when fixed
 * collision - controls collision between the two entities (FALSE disables collision).
 * isPed - pitch doesnt work when false and roll will only work on negative numbers (only peds)
 * vertexIndex - position of vertex
 * fixedRot - if false it ignores entity vector
 * 
 * @param entity1
 * @param entity2
 * @param boneIndex
 * @param xPos
 * @param yPos
 * @param zPos
 * @param xRot
 * @param yRot
 * @param zRot
 * @param p9
 * @param useSoftPinning
 * @param collision
 * @param isPed
 * @param vertexIndex
 * @param fixedRot
 * @param p15
 */
export function attachEntityToEntity(entity1: number, entity2: number, boneIndex: number, xPos: number, yPos: number, zPos: number, xRot: number, yRot: number, zRot: number, p9: boolean, useSoftPinning: boolean, collision: boolean, isPed: boolean, vertexIndex: number, fixedRot: boolean, p15: number): void { 
	return _in(0x6b9bbd38, 0xab0796df, entity1, entity2, boneIndex, _fv(xPos), _fv(yPos), _fv(zPos), _fv(xRot), _fv(yRot), _fv(zRot), p9, useSoftPinning, collision, isPed, vertexIndex, fixedRot, p15); 
}

/**
 * breakForce is the amount of force required to break the bond.
 * p14 - is always 1 in scripts
 * p15 - is 1 or 0 in scripts - unknoun what it does
 * p16 - controls collision between the two entities (FALSE disables collision).
 * p17 - do not teleport entity to be attached to the position of the bone Index of the target entity (if 1, entity will not be teleported to target bone)
 * p18 - is always 2 in scripts.
 * 
 * 
 * @param entity1
 * @param entity2
 * @param boneIndex1
 * @param boneIndex2
 * @param xPos1
 * @param yPos1
 * @param zPos1
 * @param xPos2
 * @param yPos2
 * @param zPos2
 * @param xRot
 * @param yRot
 * @param zRot
 * @param breakForce
 * @param fixedRot
 * @param p15
 * @param collision
 * @param p17
 * @param p18
 */
export function attachEntityToEntityPhysically(entity1: number, entity2: number, boneIndex1: number, boneIndex2: number, xPos1: number, yPos1: number, zPos1: number, xPos2: number, yPos2: number, zPos2: number, xRot: number, yRot: number, zRot: number, breakForce: number, fixedRot: boolean, p15: boolean, collision: boolean, p17: boolean, p18: number): void { 
	return _in(0xc3675780, 0xc92f90f9, entity1, entity2, boneIndex1, boneIndex2, _fv(xPos1), _fv(yPos1), _fv(zPos1), _fv(xPos2), _fv(yPos2), _fv(zPos2), _fv(xRot), _fv(yRot), _fv(zRot), _fv(breakForce), fixedRot, p15, collision, p17, p18); 
}

export function attachEntityToEntityPhysicallyOverrideInverseMass(firstEntityIndex: number, secondEntityIndex: number, firstEntityBoneIndex: number, secondEntityBoneIndex: number, secondEntityOffsetX: number, secondEntityOffsetY: number, secondEntityOffsetZ: number, firstEntityOffsetX: number, firstEntityOffsetY: number, firstEntityOffsetZ: number, vecRotationX: number, vecRotationY: number, vecRotationZ: number, physicalStrength: number, constrainRotation: boolean, doInitialWarp: boolean, collideWithEntity: boolean, addInitialSeperation: boolean, rotOrder: number, invMassScaleA: number, invMassScaleB: number): void { 
	return _in(0x168a09d1, 0xb25b0ba4, firstEntityIndex, secondEntityIndex, firstEntityBoneIndex, secondEntityBoneIndex, _fv(secondEntityOffsetX), _fv(secondEntityOffsetY), _fv(secondEntityOffsetZ), _fv(firstEntityOffsetX), _fv(firstEntityOffsetY), _fv(firstEntityOffsetZ), _fv(vecRotationX), _fv(vecRotationY), _fv(vecRotationZ), _fv(physicalStrength), constrainRotation, doInitialWarp, collideWithEntity, addInitialSeperation, rotOrder, _fv(invMassScaleA), _fv(invMassScaleB)); 
}

export function attachPortablePickupToPed(pickupObject: number, ped: number): void { 
	return _in(0x8dc39368, 0xbdd57755, pickupObject, ped); 
}

/**
 * The position supplied can be anywhere, and the entity should anchor relative to that point from it's origin.
 * @param ropeId
 * @param entity
 * @param x
 * @param y
 * @param z
 * @param p5
 */
export function attachRopeToEntity(ropeId: number, entity: number, x: number, y: number, z: number, p5: boolean): void { 
	return _in(0x4b490a68, 0x32559a65, ropeId, entity, _fv(x), _fv(y), _fv(z), p5); 
}

export function attachSynchronizedSceneToEntity(sceneID: number, entity: number, boneIndex: number): void { 
	return _in(0x272e4723, 0xb56a3b96, sceneID, entity, boneIndex); 
}

/**
 * Might be more appropriate in AUDIO?
 * @param entity
 */
export function attachTvAudioToEntity(entity: number): void { 
	return _in(0x845bad77, 0xcc770633, entity); 
}

/**
 * This is the proper way of attaching vehicles to the car carrier, it's what Rockstar uses. Video Demo: https://www.youtube.com/watch?v=2lVEIzf7bgo
 * @param vehicle
 * @param trailer
 * @param offsetX
 * @param offsetY
 * @param offsetZ
 * @param coordsX
 * @param coordsY
 * @param coordsZ
 * @param rotationX
 * @param rotationY
 * @param rotationZ
 * @param disableCollisions
 */
export function attachVehicleOnToTrailer(vehicle: number, trailer: number, offsetX: number, offsetY: number, offsetZ: number, coordsX: number, coordsY: number, coordsZ: number, rotationX: number, rotationY: number, rotationZ: number, disableCollisions: number): void { 
	return _in(0x16b5e274, 0xbde402f8, vehicle, trailer, _fv(offsetX), _fv(offsetY), _fv(offsetZ), _fv(coordsX), _fv(coordsY), _fv(coordsZ), _fv(rotationX), _fv(rotationY), _fv(rotationZ), _fv(disableCollisions)); 
}

export function attachVehicleToCargobob(cargobob: number, vehicle: number, p2: number, x: number, y: number, z: number): void { 
	return _in(0x4127f1d8, 0x4e347769, cargobob, vehicle, p2, _fv(x), _fv(y), _fv(z)); 
}

/**
 * HookOffset defines where the hook is attached. leave at 0 for default attachment.
 * @param towTruck
 * @param vehicle
 * @param rear
 * @param hookOffsetX
 * @param hookOffsetY
 * @param hookOffsetZ
 */
export function attachVehicleToTowTruck(towTruck: number, vehicle: number, rear: boolean, hookOffsetX: number, hookOffsetY: number, hookOffsetZ: number): void { 
	return _in(0x29a16f8d, 0x621c4508, towTruck, vehicle, rear, _fv(hookOffsetX), _fv(hookOffsetY), _fv(hookOffsetZ)); 
}

export function attachVehicleToTrailer(vehicle: number, trailer: number, radius: number): void { 
	return _in(0x3c7d42d5, 0x8f770b54, vehicle, trailer, _fv(radius)); 
}

export function audioIsMusicPlaying(): boolean { 
	return _in(0x845ffc3a, 0x4feefa3e, _r); 
}

/**
 * This is an alias of AUDIO_IS_MUSIC_PLAYING.
 */
export function audioIsScriptedMusicPlaying(): boolean { 
	return _in(0x2dd39bf3, 0xe2f9c47f, _r); 
}

export function badSportPlayerLeftDetected(event: number, amountReceived: number): [boolean, number] { 
	const [retval, gamerHandle_out] = _in(0xec5e3af5, 0x289dca81, _i, event, amountReceived, _r);
	return [retval as boolean, gamerHandle_out as number]; 
}

export function beginCreateLowQualityCopyOfPhoto(p0: number): boolean { 
	return _in(0x75965063, 0x4f07b6b4, p0, _r); 
}

export function beginCreateMissionCreatorPhotoPreview(): boolean { 
	return _in(0x7fa5d82b, 0x8f58ec06, _r); 
}

export function beginReplayStats(p0: number, p1: number): void { 
	return _in(0xe0e50024, 0x6ff73d66, p0, p1); 
}

/**
 * Push a function from the Scaleform onto the stack
 * 
 * @param scaleform
 * @param methodName
 */
export function beginScaleformMovieMethod(scaleform: number, methodName: string): boolean { 
	return _in(0xf6e48914, 0xc7a8694e, scaleform, _ts(methodName), _r); 
}

/**
 * Starts frontend (pause menu) scaleform movie methods.
 * This can be used when you want to make custom frontend menus, and customize things like images or text in the menus etc.
 * Use `BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND_HEADER` for header scaleform functions.
 * @param methodName
 */
export function beginScaleformMovieMethodOnFrontend(methodName: string): boolean { 
	return _in(0xab58c27c, 0x2e6123c6, _ts(methodName), _r); 
}

/**
 * Starts frontend (pause menu) scaleform movie methods for header options.
 * Use `BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND` to customize the content inside the frontend menus.
 * @param methodName
 */
export function beginScaleformMovieMethodOnFrontendHeader(methodName: string): boolean { 
	return _in(0xb9449845, 0xf73f5e9c, _ts(methodName), _r); 
}

/**
 * Pushes a function from the Hud component Scaleform onto the stack. Same behavior as GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD, just a hud component id instead of a Scaleform.
 * 
 * Known components:
 * 19 - MP_RANK_BAR
 * 20 - HUD_DIRECTOR_MODE
 * 
 * This native requires more research - all information can be found inside of 'hud.gfx'. Using a decompiler, the different components are located under "scripts\__Packages\com\rockstargames\gtav\hud\hudComponents" and "scripts\__Packages\com\rockstargames\gtav\Multiplayer".
 * @param hudComponent
 * @param methodName
 */
export function beginScaleformScriptHudMovieMethod(hudComponent: number, methodName: string): boolean { 
	return _in(0x98c494fd, 0x5bdfbfd5, hudComponent, _ts(methodName), _r); 
}

export function beginSrl(): void { 
	return _in(0x9baddc94, 0xef83b823); 
}

export function beginTakeHighQualityPhoto(): boolean { 
	return _in(0xa67c35c5, 0x6eb1bd9d, _r); 
}

export function beginTakeMissionCreatorPhoto(): boolean { 
	return _in(0x1dd2139a, 0x9a20dce8, _r); 
}

export function beginTextCommandAddDirectlyToPreviousBriefs(p0: string): void { 
	return _in(0x23d69e04, 0x65570028, _ts(p0)); 
}

/**
 * Initializes the text entry for the the text next to a loading prompt. All natives for building UI texts can be used here
 * 
 * 
 * e.g
 * void StartLoadingMessage(char *text, int spinnerType = 3)
 * {
 * BEGIN_TEXT_COMMAND_BUSYSPINNER_ON("STRING");
 * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
 * END_TEXT_COMMAND_BUSYSPINNER_ON(spinnerType);
 * }
 *  -- [[OR]] 
 * void ShowLoadingMessage(char *text, int spinnerType = 3, int timeMs = 10000)
 * {
 * BEGIN_TEXT_COMMAND_BUSYSPINNER_ON("STRING");
 * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
 * END_TEXT_COMMAND_BUSYSPINNER_ON(spinnerType);
 * WAIT(timeMs);
 * BUSYSPINNER_OFF();
 * }
 * 
 * 
 * These are some localized strings used in the loading spinner.
 * "PM_WAIT"                   = Please Wait
 * "CELEB_WPLYRS"              = Waiting For Players.
 * "CELL_SPINNER2"             = Scanning storage.
 * "ERROR_CHECKYACHTNAME" = Registering your yacht's name. Please wait.
 * "ERROR_CHECKPROFANITY"   = Checking your text for profanity. Please wait.
 * "FM_COR_AUTOD"                        = Just spinner no text
 * "FM_IHELP_WAT2"                        = Waiting for other players
 * "FM_JIP_WAITO"                            = Game options are being set
 * "FMMC_DOWNLOAD"                    = Downloading
 * "FMMC_PLYLOAD"                         = Loading
 * "FMMC_STARTTRAN"                    = Launching session
 * "HUD_QUITTING"                           =  Quiting session
 * "KILL_STRIP_IDM"                         = Waiting for to accept
 * "MP_SPINLOADING"                      = Loading
 * @param string
 */
export function beginTextCommandBusyspinnerOn(string: string): void { 
	return _in(0xaba17d7c, 0xe615adbf, _ts(string)); 
}

/**
 * clears a print text command with this text
 * @param text
 */
export function beginTextCommandClearPrint(text: string): void { 
	return _in(0xe124fa80, 0xa759019c, _ts(text)); 
}

/**
 * Used to be known as _SET_TEXT_COMPONENT_FORMAT
 * @param inputType
 */
export function beginTextCommandDisplayHelp(inputType: string): void { 
	return _in(0x8509b634, 0xfbe7da11, _ts(inputType)); 
}

/**
 * The following were found in the decompiled script files:
 * STRING, TWOSTRINGS, NUMBER, PERCENTAGE, FO_TWO_NUM, ESMINDOLLA, ESDOLLA, MTPHPER_XPNO, AHD_DIST, CMOD_STAT_0, CMOD_STAT_1, CMOD_STAT_2, CMOD_STAT_3, DFLT_MNU_OPT, F3A_TRAFDEST, ES_HELP_SOC3
 * 
 * ESDOLLA - cash
 * ESMINDOLLA - cash (negative)
 * 
 * Used to be known as _SET_TEXT_ENTRY
 * @param text
 */
export function beginTextCommandDisplayText(text: string): void { 
	return _in(0x25fbb336, 0xdf1804cb, _ts(text)); 
}

/**
 * int GetLineCount(char *text, float x, float y)
 * {
 * BEGIN_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING("STRING");
 * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
 * return BEGIN_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING(x, y);
 * }
 * @param entry
 */
export function beginTextCommandGetNumberOfLinesForString(entry: string): void { 
	return _in(0x521fb041, 0xd93dd0e4, _ts(entry)); 
}

export function beginTextCommandGetScreenWidthOfDisplayText(text: string): void { 
	return _in(0x54ce8ac9, 0x8e120cab, _ts(text)); 
}

/**
 * nothin doin.
 * 
 * BOOL Message(const char* text)
 * {
 * BEGIN_TEXT_COMMAND_IS_MESSAGE_DISPLAYED("STRING");
 * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
 * return END_TEXT_COMMAND_IS_MESSAGE_DISPLAYED();
 * }
 * @param text
 */
export function beginTextCommandIsMessageDisplayed(text: string): void { 
	return _in(0x853648fd, 0x1063a213, _ts(text)); 
}

/**
 * BOOL IsContextActive(char *ctx)
 * {
 * BEGIN_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(ctx);
 * return END_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(0);
 * }
 * @param labelName
 */
export function beginTextCommandIsThisHelpMessageBeingDisplayed(labelName: string): void { 
	return _in(0x0a24da3a, 0x41b718f5, _ts(labelName)); 
}

export function beginTextCommandOverrideButtonText(gxtEntry: string): void { 
	return _in(0x8f9ee568, 0x7f8eeccd, _ts(gxtEntry)); 
}

/**
 * void ShowSubtitle(const char *text)
 * {
 * BEGIN_TEXT_COMMAND_PRINT("STRING");
 * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
 * END_TEXT_COMMAND_PRINT(2000, true);
 * }
 * @param GxtEntry
 */
export function beginTextCommandPrint(GxtEntry: string): void { 
	return _in(0xb87a37ee, 0xb7faa67d, _ts(GxtEntry)); 
}

/**
 * Called prior to adding a text component to the UI. After doing so, GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING is called.
 * 
 * Examples:
 * GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("NUMBER");
 * HUD::ADD_TEXT_COMPONENT_INTEGER(MISC::ABSI(a_1));
 * GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();
 * 
 * GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("STRING");
 * HUD::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(a_2);
 * GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();
 * 
 * GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("STRTNM2");
 * HUD::ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL_HASH_KEY(v_3);
 * HUD::ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL_HASH_KEY(v_4);
 * GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();
 * 
 * GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("STRTNM1");
 * HUD::ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL_HASH_KEY(v_3);
 * GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();
 * @param componentType
 */
export function beginTextCommandScaleformString(componentType: string): void { 
	return _in(0x80338406, 0xf3475e55, _ts(componentType)); 
}

/**
 * Starts a text command to change the name of a blip displayed in the pause menu.
 * This should be paired with `END_TEXT_COMMAND_SET_BLIP_NAME`, once adding all required text components.
 * Example:
 * 
 * HUD::BEGIN_TEXT_COMMAND_SET_BLIP_NAME("STRING");
 * HUD::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("Name");
 * HUD::END_TEXT_COMMAND_SET_BLIP_NAME(blip);
 * @param textLabel
 */
export function beginTextCommandSetBlipName(textLabel: string): void { 
	return _in(0xf9113a30, 0xde5c6670, _ts(textLabel)); 
}

/**
 * Declares the entry type of a notification, for example "STRING".
 * 
 * int ShowNotification(char *text)
 * {
 * BEGIN_TEXT_COMMAND_THEFEED_POST("STRING");
 * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
 * return END_TEXT_COMMAND_THEFEED_POST_TICKER(1, 1);
 * }
 * @param text
 */
export function beginTextCommandThefeedPost(text: string): void { 
	return _in(0x202709f4, 0xc58a0424, _ts(text)); 
}

export function bgDoesLaunchParamExist(scriptIndex: number, p1: string): boolean { 
	return _in(0x0f6f1ebb, 0xc4e1d5e6, scriptIndex, _ts(p1), _r); 
}

/**
 * Deletes the given context from the background scripts context map.
 * @param contextName
 */
export function bgEndContext(contextName: string): void { 
	return _in(0xdc2bacd9, 0x20d0a0dd, _ts(contextName)); 
}

/**
 * Hashed version of BG_END_CONTEXT.
 * @param contextHash
 */
export function bgEndContextHash(contextHash: number): void { 
	return _in(0x107e5cc7, 0xca942bc1, _ch(contextHash)); 
}

export function bgGetLaunchParamValue(scriptIndex: number, p1: string): number { 
	return _in(0x22e21fbc, 0xfc88c149, scriptIndex, _ts(p1), _r, _ri); 
}

export function bgGetScriptIdFromNameHash(p0: number): number { 
	return _in(0x829cd22e, 0x043a2577, _ch(p0), _r, _ri); 
}

/**
 * Returns true if bit 0 in GtaThread+0x154 is set.
 */
export function bgIsExitflagSet(): boolean { 
	return _in(0x836b6271, 0x3e0534ca, _r); 
}

/**
 * Sets bit 1 in GtaThread+0x154
 */
export function bgSetExitflagResponse(): void { 
	return _in(0x760910b4, 0x9d2b98ea); 
}

/**
 * Inserts the given context into the background scripts context map.
 * @param contextName
 */
export function bgStartContext(contextName: string): void { 
	return _in(0x9d5a25ba, 0xdb742acd, _ts(contextName)); 
}

/**
 * Hashed version of BG_START_CONTEXT.
 * @param contextHash
 */
export function bgStartContextHash(contextHash: number): void { 
	return _in(0x75b18e49, 0x607874c7, _ch(contextHash)); 
}

/**
 * Plays the siren sound of a vehicle which is otherwise activated when fastly double-pressing the horn key.
 * Only works on vehicles with a police siren.
 * @param vehicle
 */
export function blipSiren(vehicle: number): void { 
	return _in(0x1b9025bd, 0xa76822b6, vehicle); 
}

export function blockAllSpeechFromPed(ped: number, p1: boolean, p2: boolean): void { 
	return _in(0xf8ad2eed, 0x7c47e8fe, ped, p1, p2); 
}

export function blockDeathJingle(toggle: boolean): void { 
	return _in(0xf154b8d1, 0x775b2dec, toggle); 
}

/**
 * eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
 * 
 * This is limited to 4 blocked events at a time.
 * @param name
 * @param eventType
 */
export function blockDecisionMakerEvent(name: number, eventType: number): void { 
	return _in(0xe42fcdfd, 0x0e4196f7, _ch(name), eventType); 
}

export function blockDispatchServiceResourceCreation(dispatchService: number, toggle: boolean): void { 
	return _in(0x9b2bd377, 0x3123ea2f, dispatchService, toggle); 
}

export function blockFirstPersonOrientationResetThisUpdate(): void { 
	return _in(0x9f97da93, 0x681f87ea); 
}

export function blockPedFromGeneratingDeadBodyEventsWhenDead(ped: number, toggle: boolean): void { 
	return _in(0xe43a13c9, 0xe4cccbcf, ped, toggle); 
}

export function blockPlayersForAmbientPickup(p0: number, p1: number): void { 
	return _in(0x1e3f1b1b, 0x891a2aaa, p0, p1); 
}

export function blockSpeechContextGroup(p0: string, p1: number): void { 
	return _in(0xa8a7d434, 0xafb4b97b, _ts(p0), p1); 
}

export function breakEntityGlass(entity: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number, p10: boolean): void { 
	return _in(0x2e648d16, 0xf6e308f3, entity, _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), _fv(p6), _fv(p7), _fv(p8), p9, p10); 
}

export function breakObjectFragmentChild(p0: number, p1: number, p2: boolean): void { 
	return _in(0xe7e4c198, 0xb0185900, p0, p1, p2); 
}

/**
 * This native makes the vehicle stop immediately, as happens when we enter a MP garage.
 * 
 * . distance defines how far it will travel until stopping. Garage doors use 3.0.
 * 
 * . If killEngine is set to 1, you cannot resume driving the vehicle once it stops. This looks like is a bitmapped integer.
 * @param vehicle
 * @param distance
 * @param duration
 * @param p3
 */
export function bringVehicleToHalt(vehicle: number, distance: number, duration: number, p3: boolean): void { 
	return _in(0x260be8f0, 0x9e326a20, vehicle, _fv(distance), duration, p3); 
}

export function busyspinnerIsDisplaying(): boolean { 
	return _in(0xb2a592b0, 0x4648a9cb, _r); 
}

export function busyspinnerIsOn(): boolean { 
	return _in(0xd422fcc5, 0xf239a915, _r); 
}

/**
 * Removes the loading prompt at the bottom right of the screen.
 */
export function busyspinnerOff(): void { 
	return _in(0x10d37332, 0x3e5b9c0d); 
}

export function bypassCameraCollisionBuoyancyTestThisUpdate(): void { 
	return _in(0xa7092afe, 0x81944852); 
}

export function bypassCutsceneCamRenderingThisUpdate(): void { 
	return _in(0xdb629ffd, 0x9285fa06); 
}

/**
 * Calculates the travel distance between a set of points.
 * 
 * Doesn't seem to correlate with distance on gps sometimes.
 * This function returns the value 100000.0 over long distances, seems to be a failure mode result, potentially occurring when not all path nodes are loaded into pathfind.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 */
export function calculateTravelDistanceBetweenPoints(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): number { 
	return _in(0xadd95c70, 0x05c4a197, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _r, _rf); 
}

/**
 * Calls the Scaleform function.
 * @param scaleform
 * @param method
 */
export function callScaleformMovieMethod(scaleform: number, method: string): void { 
	return _in(0xfbd96d87, 0xac96d533, scaleform, _ts(method)); 
}

/**
 * Calls the Scaleform function and passes the parameters as floats.
 * 
 * The number of parameters passed to the function varies, so the end of the parameter list is represented by -1.0.
 * @param scaleform
 * @param methodName
 * @param param1
 * @param param2
 * @param param3
 * @param param4
 * @param param5
 */
export function callScaleformMovieMethodWithNumber(scaleform: number, methodName: string, param1: number, param2: number, param3: number, param4: number, param5: number): void { 
	return _in(0xd0837058, 0xae2e4bee, scaleform, _ts(methodName), _fv(param1), _fv(param2), _fv(param3), _fv(param4), _fv(param5)); 
}

/**
 * Calls the Scaleform function and passes both float and string parameters (in their respective order).
 * 
 * The number of parameters passed to the function varies, so the end of the float parameters is represented by -1.0, and the end of the string parameters is represented by 0 (NULL).
 * 
 * NOTE: The order of parameters in the function prototype is important! All float parameters must come first, followed by the string parameters.
 * 
 * Examples:
 * // function MY_FUNCTION(floatParam1, floatParam2, stringParam)
 * GRAPHICS::CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER_AND_STRING(scaleform, "MY_FUNCTION", 10.0, 20.0, -1.0, -1.0, -1.0, "String param", 0, 0, 0, 0);
 * 
 * // function MY_FUNCTION_2(floatParam, stringParam1, stringParam2)
 * GRAPHICS::CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER_AND_STRING(scaleform, "MY_FUNCTION_2", 10.0, -1.0, -1.0, -1.0, -1.0, "String param #1", "String param #2", 0, 0, 0);
 * @param scaleform
 * @param methodName
 * @param floatParam1
 * @param floatParam2
 * @param floatParam3
 * @param floatParam4
 * @param floatParam5
 * @param stringParam1
 * @param stringParam2
 * @param stringParam3
 * @param stringParam4
 * @param stringParam5
 */
export function callScaleformMovieMethodWithNumberAndString(scaleform: number, methodName: string, floatParam1: number, floatParam2: number, floatParam3: number, floatParam4: number, floatParam5: number, stringParam1: string, stringParam2: string, stringParam3: string, stringParam4: string, stringParam5: string): void { 
	return _in(0xef662d8d, 0x57e290b1, scaleform, _ts(methodName), _fv(floatParam1), _fv(floatParam2), _fv(floatParam3), _fv(floatParam4), _fv(floatParam5), _ts(stringParam1), _ts(stringParam2), _ts(stringParam3), _ts(stringParam4), _ts(stringParam5)); 
}

/**
 * Calls the Scaleform function and passes the parameters as strings.
 * 
 * The number of parameters passed to the function varies, so the end of the parameter list is represented by 0 (NULL).
 * @param scaleform
 * @param methodName
 * @param param1
 * @param param2
 * @param param3
 * @param param4
 * @param param5
 */
export function callScaleformMovieMethodWithString(scaleform: number, methodName: string, param1: string, param2: string, param3: string, param4: string, param5: string): void { 
	return _in(0x51bc1ed3, 0xcc44e8f7, scaleform, _ts(methodName), _ts(param1), _ts(param2), _ts(param3), _ts(param4), _ts(param5)); 
}

export function cameraPreventCollisionSettingsForTripleheadInInteriorsThisUpdate(): void { 
	return _in(0x62374889, 0xa4d59f72); 
}

export function canAnchorBoatHere(vehicle: number): boolean { 
	return _in(0x26c10ecb, 0xda5d043b, vehicle, _r); 
}

export function canAnchorBoatHereIgnorePlayers(vehicle: number): boolean { 
	return _in(0x24f4121d, 0x07579880, vehicle, _r); 
}

export function canCargobobPickUpEntity(p0: number, p1: number): boolean { 
	return _in(0x2c1d8b3b, 0x19e517cc, p0, p1, _r); 
}

export function canCreateRandomBikeRider(): boolean { 
	return _in(0xeaceeda8, 0x1751915c, _r); 
}

export function canCreateRandomCops(): boolean { 
	return _in(0x5ee2caff, 0x7f17770d, _r); 
}

export function canCreateRandomDriver(): boolean { 
	return _in(0xb8eb95e5, 0xb4e56978, _r); 
}

export function canCreateRandomPed(p0: boolean): boolean { 
	return _in(0x3e8349c0, 0x8e4b82e4, p0, _r); 
}

export function canKnockPedOffVehicle(ped: number): boolean { 
	return _in(0x51ac07a4, 0x4d4f5b8a, ped, _r); 
}

export function canPayAmountToBoss(p0: number, p1: number, amount: number, p3: number): [boolean, number] { 
	const [retval, p3_out] = _in(0x9777734d, 0xad16992f, p0, p1, amount, _ii(p3), _r);
	return [retval as boolean, p3_out as number]; 
}

export function canPedHearPlayer(player: number, ped: number): boolean { 
	return _in(0xf297383a, 0xa91dca29, player, ped, _r); 
}

export function canPedInCombatSeeTarget(ped: number, target: number): boolean { 
	return _in(0xead42de3, 0x610d0721, ped, target, _r); 
}

/**
 * Prevents the ped from going limp.
 * 
 * [Example: Can prevent peds from falling when standing on moving vehicles.]
 * @param ped
 */
export function canPedRagdoll(ped: number): boolean { 
	return _in(0x128f79ed, 0xcece4fd5, ped, _r); 
}

export function canPedSeeHatedPed(ped1: number, ped2: number): boolean { 
	return _in(0x6cd5a433, 0x374d4cfb, ped1, ped2, _r); 
}

export function canPedShuffleToOrFromExtraSeat(ped: number, p1: number): [boolean, number] { 
	const [retval, p1_out] = _in(0x2dfc81c9, 0xb9608549, ped, _ii(p1), _r);
	return [retval as boolean, p1_out as number]; 
}

export function canPedShuffleToOrFromTurretSeat(ped: number, p1: number): [boolean, number] { 
	const [retval, p1_out] = _in(0x9c6a6c19, 0xb6c0c496, ped, _ii(p1), _r);
	return [retval as boolean, p1_out as number]; 
}

/**
 * This one is weird and seems to return a TRUE state regardless of whether the phone is visible on screen or tucked away.
 * 
 * 
 * I can confirm the above. This function is hard-coded to always return 1.
 */
export function canPhoneBeSeenOnScreen(): boolean { 
	return _in(0xc4e28138, 0x98c97a4b, _r); 
}

export function canPlayerStartMission(player: number): boolean { 
	return _in(0xde7465a2, 0x7d403c06, player, _r); 
}

export function canRegisterMissionDoors(p0: number): boolean { 
	return _in(0xe16aa70c, 0xe9beedc3, p0, _r); 
}

export function canRegisterMissionEntities(ped_amt: number, vehicle_amt: number, object_amt: number, pickup_amt: number): boolean { 
	return _in(0x69778e75, 0x64bade6d, ped_amt, vehicle_amt, object_amt, pickup_amt, _r); 
}

export function canRegisterMissionObjects(amount: number): boolean { 
	return _in(0x800dd472, 0x1a8b008b, amount, _r); 
}

export function canRegisterMissionPeds(amount: number): boolean { 
	return _in(0xbcbf4fef, 0x9fa5d781, amount, _r); 
}

export function canRegisterMissionPickups(amount: number): boolean { 
	return _in(0x0a49d1cb, 0x6e34af72, amount, _r); 
}

export function canRegisterMissionVehicles(amount: number): boolean { 
	return _in(0x7277f1f2, 0xe085ee74, amount, _r); 
}

export function canRequestAssetsForCutsceneEntity(): boolean { 
	return _in(0xb56bbbcc, 0x2955d9cb, _r); 
}

/**
 * modelHash (p1) was always 0 in R* scripts
 * @param cutsceneEntName
 * @param modelHash
 */
export function canSetEnterStateForRegisteredEntity(cutsceneEntName: string, modelHash: number): boolean { 
	return _in(0x645d0b45, 0x8d8e17b5, _ts(cutsceneEntName), _ch(modelHash), _r); 
}

export function canSetExitStateForCamera(p0: boolean): boolean { 
	return _in(0xb2cbcd09, 0x30dfb420, p0, _r); 
}

export function canSetExitStateForRegisteredEntity(cutsceneEntName: string, modelHash: number): boolean { 
	return _in(0x4c6a6451, 0xc79e4662, _ts(cutsceneEntName), _ch(modelHash), _r); 
}

export function canShuffleSeat(vehicle: number, seatIndex: number): boolean { 
	return _in(0x30785d90, 0xc956bf35, vehicle, seatIndex, _r); 
}

export function canUseMobilePhoneDuringCutscene(): boolean { 
	return _in(0x5edef0cf, 0x8c1dab3c, _r); 
}

/**
 * this returns if you can use the weapon while using a parachute
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param weaponHash
 */
export function canUseWeaponOnParachute(weaponHash: number): boolean { 
	return _in(0xbc7be5ab, 0xc0879f74, _ch(weaponHash), _r); 
}

export function canVehicleReceiveCbRadio(vehicle: number): boolean { 
	return _in(0x032a1166, 0x63a4d5ac, vehicle, _r); 
}

export function cancelAllPoliceReports(): void { 
	return _in(0xb4f90faf, 0x7670b16f); 
}

/**
 * All music event names found in the b617d scripts: https://pastebin.com/GnYt0R3P
 * Full list of music event names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/musicEventNames.json
 * @param eventName
 */
export function cancelMusicEvent(eventName: string): boolean { 
	return _in(0x5b17a902, 0x91133da5, _ts(eventName), _r); 
}

/**
 * DO NOT use this as it doesn't clean up the text input box properly and your script will get stuck in the UPDATE_ONSCREEN_KEYBOARD() loop.
 * Use FORCE_CLOSE_TEXT_INPUT_BOX instead.
 */
export function cancelOnscreenKeyboard(): void { 
	return _in(0x58a39be5, 0x97ce99cd); 
}

/**
 * Stops recording and discards the recorded clip.
 */
export function cancelReplayRecording(): void { 
	return _in(0x88bb3507, 0xed41a240); 
}

export function cancelStuntJump(): void { 
	return _in(0xe6b7b0ac, 0xd4e4b75e); 
}

/**
 * Does something similar to INTERIOR::DISABLE_INTERIOR
 * @param interior
 * @param toggle
 */
export function capInterior(interior: number, toggle: boolean): void { 
	return _in(0xd9175f94, 0x1610db54, interior, toggle); 
}

export function cascadeShadowsClearShadowSampleType(): void { 
	return _in(0x27cb7722, 0x18215325); 
}

/**
 * When this is set to ON, shadows only draw as you get nearer.
 * 
 * When OFF, they draw from a further distance.
 * @param toggle
 */
export function cascadeShadowsEnableEntityTracker(toggle: boolean): void { 
	return _in(0x80ecbc0c, 0x856d3b0b, toggle); 
}

export function cascadeShadowsEnableFreezer(p0: boolean): void { 
	return _in(0x0ae73d8d, 0xf3a762b2, p0); 
}

export function cascadeShadowsInitSession(): void { 
	return _in(0x03fc694a, 0xe06c5a20); 
}

export function cascadeShadowsSetAircraftMode(p0: boolean): void { 
	return _in(0x6ddbf9df, 0xfc4ac080, p0); 
}

export function cascadeShadowsSetBoundPosition(p0: number): void { 
	return _in(0x259ba6d4, 0xe6f808f1, p0); 
}

export function cascadeShadowsSetCascadeBounds(p0: number, p1: boolean, p2: number, p3: number, p4: number, p5: number, p6: boolean, p7: number): void { 
	return _in(0xd2936cab, 0x8b58fcbd, p0, p1, _fv(p2), _fv(p3), _fv(p4), _fv(p5), p6, _fv(p7)); 
}

export function cascadeShadowsSetCascadeBoundsScale(p0: number): void { 
	return _in(0x5f0f3f56, 0x635809ef, _fv(p0)); 
}

export function cascadeShadowsSetDynamicDepthMode(p0: boolean): void { 
	return _in(0xd39d13c9, 0xfebf0511, p0); 
}

export function cascadeShadowsSetDynamicDepthValue(p0: number): void { 
	return _in(0x02ac28f3, 0xa01fa04a, _fv(p0)); 
}

export function cascadeShadowsSetEntityTrackerScale(p0: number): void { 
	return _in(0x5e9daf5a, 0x20f15908, _fv(p0)); 
}

export function cascadeShadowsSetScreenSizeCheckEnabled(p0: boolean): void { 
	return _in(0x25fc3e33, 0xa31ad0c9, p0); 
}

/**
 * Possible values:
 * "CSM_ST_POINT"
 * "CSM_ST_LINEAR"
 * "CSM_ST_TWOTAP"
 * "CSM_ST_BOX3x3"
 * "CSM_ST_BOX4x4"
 * "CSM_ST_DITHER2_LINEAR"
 * "CSM_ST_CUBIC"
 * "CSM_ST_DITHER4"
 * "CSM_ST_DITHER16"
 * "CSM_ST_SOFT16"
 * "CSM_ST_DITHER16_RPDB"
 * "CSM_ST_POISSON16_RPDB_GNORM"
 * "CSM_ST_HIGHRES_BOX4x4"
 * "CSM_ST_CLOUDS_SIMPLE"
 * "CSM_ST_CLOUDS_LINEAR"
 * "CSM_ST_CLOUDS_TWOTAP"
 * "CSM_ST_CLOUDS_BOX3x3"
 * "CSM_ST_CLOUDS_BOX4x4"
 * "CSM_ST_CLOUDS_DITHER2_LINEAR"
 * "CSM_ST_CLOUDS_SOFT16"
 * "CSM_ST_CLOUDS_DITHER16_RPDB"
 * "CSM_ST_CLOUDS_POISSON16_RPDB_GNORM"
 * @param type
 */
export function cascadeShadowsSetShadowSampleType(type: string): void { 
	return _in(0xb11d94bc, 0x55f41932, _ts(type)); 
}

export function cascadeShadowsSetSplitZExpWeight(p0: number): void { 
	return _in(0x36f66264, 0x59d91457, _fv(p0)); 
}

/**
 * I'm guessing this rounds a float value up to the next whole number, and FLOOR rounds it down
 * @param value
 */
export function ceil(value: number): number { 
	return _in(0x11e019c8, 0xf43acc8a, _fv(value), _r, _ri); 
}

export function cellCamActivate(p0: boolean, p1: boolean): void { 
	return _in(0xfde8f069, 0xc542d126, p0, p1); 
}

export function cellCamActivateSelfieMode(toggle: boolean): void { 
	return _in(0x015c49a9, 0x3e3e086e, toggle); 
}

export function cellCamActivateShallowDofMode(toggle: boolean): void { 
	return _in(0xa2ccbe62, 0xcd4c91a4, toggle); 
}

export function cellCamIsCharVisibleNoFaceCheck(entity: number): boolean { 
	return _in(0x439e9bc9, 0x5b7e7fbe, entity, _r); 
}

export function cellCamSetSelfieModeDistanceScaling(distanceScaling: number): void { 
	return _in(0xac289047, 0x1901861c, _fv(distanceScaling)); 
}

export function cellCamSetSelfieModeHeadPitchOffset(pitch: number): void { 
	return _in(0x466da42c, 0x89865553, _fv(pitch)); 
}

export function cellCamSetSelfieModeHeadRollOffset(roll: number): void { 
	return _in(0xf1e22dc1, 0x3f5eebad, _fv(roll)); 
}

export function cellCamSetSelfieModeHeadYawOffset(yaw: number): void { 
	return _in(0xd6ade981, 0x781fca09, _fv(yaw)); 
}

export function cellCamSetSelfieModeHorzPanOffset(horizontalPan: number): void { 
	return _in(0x53f4892d, 0x18ec90a4, _fv(horizontalPan)); 
}

export function cellCamSetSelfieModeRollOffset(roll: number): void { 
	return _in(0x15e69e28, 0x02c24b8d, _fv(roll)); 
}

export function cellCamSetSelfieModeSideOffsetScaling(p0: number): void { 
	return _in(0x1b0b4aee, 0xd5b9b41c, _fv(p0)); 
}

export function cellCamSetSelfieModeVertPanOffset(vertPan: number): void { 
	return _in(0x3117d84e, 0xfa60f77b, _fv(vertPan)); 
}

/**
 * if the bool "Toggle" is "true" so the phone is lean.
 * if the bool "Toggle" is "false" so the phone is not lean.
 * @param toggle
 */
export function cellHorizontalModeToggle(toggle: boolean): void { 
	return _in(0x44e44169, 0xef70138e, toggle); 
}

/**
 * For move the finger of player, the value of int goes 1 at 5.
 * @param direction
 */
export function cellSetInput(direction: number): void { 
	return _in(0x95c9e72f, 0x3d7dec9b, direction); 
}

/**
 * Displays cash change notifications on HUD.
 * @param cash
 * @param bank
 */
export function changeFakeMpCash(cash: number, bank: number): void { 
	return _in(0x0772df77, 0x852c2e30, cash, bank); 
}

export function changeGoonLookingForWork(p0: number): void { 
	return _in(0x44919cc0, 0x79bb60bf, p0); 
}

export function changePlayerPed(player: number, ped: number, p2: boolean, resetDamage: boolean): void { 
	return _in(0x048189fa, 0xc643deee, player, ped, p2, resetDamage); 
}

export function changeUniform(p0: number, p1: number, p2: number): void { 
	return _in(0xd1c9b92b, 0xdd3f151d, p0, p1, p2); 
}

export function cleanItemset(itemset: number): void { 
	return _in(0x41bc0d72, 0x2fc04221, itemset); 
}

export function cleanupAsyncInstall(): void { 
	return _in(0xc79ae219, 0x74b01fb2); 
}

export function clearAdditionalText(p0: number, p1: boolean): void { 
	return _in(0x2a179df1, 0x7ccf04cd, p0, p1); 
}

export function clearAllBlipRoutes(): void { 
	return _in(0xd12882d3, 0xff82bf11); 
}

export function clearAllBrokenGlass(): void { 
	return _in(0xb32209ef, 0xfdc04913); 
}

export function clearAllHelpMessages(): void { 
	return _in(0x6178f68a, 0x87a4d3a0); 
}

/**
 * List of component/props ID
 * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
 * @param ped
 * @param p1
 */
export function clearAllPedProps(ped: number, p1: number): void { 
	return _in(0xcd8a7537, 0xa9b52f06, ped, p1); 
}

export function clearAllPedVehicleForcedSeatUsage(ped: number): void { 
	return _in(0xe6ca85e7, 0x259ce16b, ped); 
}

export function clearAllPickupRewardTypeSuppression(): void { 
	return _in(0xa2c1f5e9, 0x2afe49ed); 
}

export function clearAllTcmodifierOverrides(p0: string): void { 
	return _in(0x15e33297, 0xc3e8dc60, _ts(p0)); 
}

export function clearAmbientZoneListState(ambientZone: string, p1: boolean): void { 
	return _in(0x120c48c6, 0x14909fa4, _ts(ambientZone), p1); 
}

/**
 * This function also has a p2, unknown. Signature AUDIO::CLEAR_AMBIENT_ZONE_STATE(const char* zoneName, bool p1, Any p2);
 * 
 * Still needs more research.
 * 
 * Full list of ambient zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientZones.json
 * @param zoneName
 * @param p1
 */
export function clearAmbientZoneState(zoneName: string, p1: boolean): void { 
	return _in(0x218dd44a, 0xaac964ff, _ts(zoneName), p1); 
}

export function clearAngledAreaOfVehicles(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number, p7: boolean, p8: boolean, p9: boolean, p10: boolean, p11: boolean, p12: number, p13: number): void { 
	return _in(0x11db3500, 0xf042a8aa, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(width), p7, p8, p9, p10, p11, p12, p13); 
}

/**
 * Example: CLEAR_AREA(0, 0, 0, 30, true, false, false, false);
 * @param X
 * @param Y
 * @param Z
 * @param radius
 * @param p4
 * @param ignoreCopCars
 * @param ignoreObjects
 * @param p7
 */
export function clearArea(X: number, Y: number, Z: number, radius: number, p4: boolean, ignoreCopCars: boolean, ignoreObjects: boolean, p7: boolean): void { 
	return _in(0xa56f01f3, 0x765b93a0, _fv(X), _fv(Y), _fv(Z), _fv(radius), p4, ignoreCopCars, ignoreObjects, p7); 
}

/**
 * MISC::CLEAR_AREA_LEAVE_VEHICLE_HEALTH(x, y, z, radius, false, false, false, false); seem to make all objects go away, peds, vehicles etc. All booleans set to true doesn't seem to change anything.
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 */
export function clearAreaLeaveVehicleHealth(x: number, y: number, z: number, radius: number, p4: boolean, p5: boolean, p6: boolean, p7: boolean): void { 
	return _in(0x957838aa, 0xf91bd12d, _fv(x), _fv(y), _fv(z), _fv(radius), p4, p5, p6, p7); 
}

/**
 * flags appears to always be 0
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param flags
 */
export function clearAreaOfCops(x: number, y: number, z: number, radius: number, flags: number): void { 
	return _in(0x04f8fc8f, 0xcf58f88d, _fv(x), _fv(y), _fv(z), _fv(radius), flags); 
}

/**
 * I looked through the PC scripts that this site provides you with a link to find. It shows the last param mainly uses, (0, 2, 6, 16, and 17) so I am going to assume it is a type of flag.
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param flags
 */
export function clearAreaOfObjects(x: number, y: number, z: number, radius: number, flags: number): void { 
	return _in(0xdd9b9b38, 0x5aac7f5b, _fv(x), _fv(y), _fv(z), _fv(radius), flags); 
}

/**
 * Example:       CLEAR_AREA_OF_PEDS(0, 0, 0, 10000, 1);
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param flags
 */
export function clearAreaOfPeds(x: number, y: number, z: number, radius: number, flags: number): void { 
	return _in(0xbe31fd6c, 0xe464ac59, _fv(x), _fv(y), _fv(z), _fv(radius), flags); 
}

/**
 * flags is usually 0 in the scripts.
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param flags
 */
export function clearAreaOfProjectiles(x: number, y: number, z: number, radius: number, flags: number): void { 
	return _in(0x0a1cb909, 0x4635d1a6, _fv(x), _fv(y), _fv(z), _fv(radius), flags); 
}

/**
 * Example:
 * CLEAR_AREA_OF_VEHICLES(0.0f, 0.0f, 0.0f, 10000.0f, false, false, false, false, false, false);
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 * @param p9
 * @param p10
 */
export function clearAreaOfVehicles(x: number, y: number, z: number, radius: number, p4: boolean, p5: boolean, p6: boolean, p7: boolean, p8: boolean, p9: boolean, p10: number): void { 
	return _in(0x01c7b9b3, 0x8428aeb6, _fv(x), _fv(y), _fv(z), _fv(radius), p4, p5, p6, p7, p8, p9, p10); 
}

/**
 * This sets bit [offset] of [address] to off.
 * 
 * Example:
 * MISC::CLEAR_BIT(&bitAddress, 1);
 * 
 * To check if this bit has been enabled:
 * MISC::IS_BIT_SET(bitAddress, 1); // will return 0 afterwards
 * @param address
 * @param offset
 */
export function clearBit(offset: number): number { 
	return _in(0xe80492a9, 0xac099a93, _i, offset); 
}

export function clearBrief(): void { 
	return _in(0x9d292f73, 0xadbd9313); 
}

export function clearCodeRequestedAutosave(): void { 
	return _in(0x06462a96, 0x1e94b67c); 
}

/**
 * control: see IS_CONTROL_ENABLED
 * @param control
 */
export function clearControlLightEffect(control: number): void { 
	return _in(0xcb0360ef, 0xefb2580d, control); 
}

/**
 * control: see IS_CONTROL_ENABLED
 * @param control
 */
export function clearControlShakeSuppressedId(control: number): void { 
	return _in(0xa0cefcea, 0x390aab9b, control); 
}

export function clearCoverPointForPed(ped: number): void { 
	return _in(0x637822dc, 0x2afeebf8, ped); 
}

/**
 * 3 calls in the b617d scripts, removed duplicate.
 * 
 * AUDIO::CLEAR_CUSTOM_RADIO_TRACK_LIST("RADIO_16_SILVERLAKE");
 * AUDIO::CLEAR_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK");
 * @param radioStation
 */
export function clearCustomRadioTrackList(radioStation: string): void { 
	return _in(0x1654f24a, 0x88a8e3fe, _ts(radioStation)); 
}

/**
 * eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
 * @param name
 * @param eventType
 */
export function clearDecisionMakerEventResponse(name: number, eventType: number): void { 
	return _in(0x4fc9381a, 0x7aee8968, _ch(name), eventType); 
}

export function clearDefaultPrimaryTask(ped: number): void { 
	return _in(0x6100b3ce, 0xfd43452e, ped); 
}

/**
 * Resets the screen's draw-origin which was changed by the function GRAPHICS::SET_DRAW_ORIGIN(...) back to x=0,y=0.
 * 
 * See GRAPHICS::SET_DRAW_ORIGIN(...) for further information.
 */
export function clearDrawOrigin(): void { 
	return _in(0xff0b610f, 0x6be0d7af); 
}

export function clearDrivebyTaskUnderneathDrivingTask(ped: number): void { 
	return _in(0xc35b5cdb, 0x2824cf69, ped); 
}

export function clearDynamicPauseMenuErrorMessage(): void { 
	return _in(0x7792424a, 0xa0eac32e); 
}

export function clearEntityLastDamageEntity(entity: number): void { 
	return _in(0xa72cd9ca, 0x74a5ecba, entity); 
}

export function clearEntityLastWeaponDamage(entity: number): void { 
	return _in(0xac678e40, 0xbe7c74d2, entity); 
}

/**
 * Clears all areas created by ADD_EXTENDED_PICKUP_PROBE_AREA
 */
export function clearExtendedPickupProbeAreas(): void { 
	return _in(0xb7c6d80f, 0xb371659a); 
}

/**
 * Clears the secondary timecycle modifier usually set with _SET_EXTRA_TIMECYCLE_MODIFIER
 */
export function clearExtraTcmodifier(): void { 
	return _in(0x92ccc17a, 0x7a2285da); 
}

export function clearFacialIdleAnimOverride(ped: number): void { 
	return _in(0x726256cc, 0x1eeb182f, ped); 
}

export function clearFakeConeArray(): void { 
	return _in(0x8410c5e0, 0xcd847b9d); 
}

export function clearFloatingHelp(hudIndex: number, p1: boolean): void { 
	return _in(0x50085246, 0xabd3fefa, hudIndex, p1); 
}

export function clearFocus(): void { 
	return _in(0x31b73d1e, 0xa9f01da2); 
}

export function clearGarage(garageHash: number, isNetwork: boolean): void { 
	return _in(0xda051942, 0x60cdcdf9, _ch(garageHash), isNetwork); 
}

export function clearGpsCustomRoute(): void { 
	return _in(0xe6de0561, 0xd9232a64); 
}

/**
 * Clears a disabled GPS route area from a certain index previously set using `SET_GPS_DISABLED_ZONE_AT_INDEX`.
 * @param index
 */
export function clearGpsDisabledZoneAtIndex(index: number): void { 
	return _in(0x2801d001, 0x2266df07, index); 
}

/**
 * Clears the GPS flags. Only the script that originally called SET_GPS_FLAGS can clear them.
 * 
 * Doesn't seem like the flags are actually read by the game at all.
 */
export function clearGpsFlags(): void { 
	return _in(0x21986729, 0xd6a3a830); 
}

/**
 * Does the same as SET_GPS_MULTI_ROUTE_RENDER(false);
 */
export function clearGpsMultiRoute(): void { 
	return _in(0x67eedea1, 0xb9bafd94); 
}

export function clearGpsPlayerWaypoint(): void { 
	return _in(0xff4fb7c8, 0xcdfa3da7); 
}

/**
 * Does the same as SET_RACE_TRACK_RENDER(false);
 */
export function clearGpsRaceTrack(): void { 
	return _in(0x7aa5b4ce, 0x533c858b); 
}

export function clearHdArea(): void { 
	return _in(0xce58b1cf, 0xb9290813); 
}

export function clearHelp(toggle: boolean): void { 
	return _in(0x8dfced7a, 0x656f8802, toggle); 
}

/**
 * Immediately removes entity from an interior. Like sets entity to `limbo` room.
 * @param entity
 */
export function clearInteriorStateOfEntity(entity: number): void { 
	return _in(0x85d5422b, 0x2039a70d, entity); 
}

export function clearLastDrivenVehicle(): void { 
	return _in(0xe01903c4, 0x7c7ac89e); 
}

export function clearNitrous(vehicle: number): void { 
	return _in(0xc889ae92, 0x1400e1ed, vehicle); 
}

export function clearObjectsInsideGarage(garageHash: number, vehicles: boolean, peds: boolean, objects: boolean, isNetwork: boolean): void { 
	return _in(0x19042851, 0x2b240692, _ch(garageHash), vehicles, peds, objects, isNetwork); 
}

export function clearOverrideWeather(): void { 
	return _in(0x338d2e34, 0x77711050); 
}

export function clearParticleFxShootoutBoat(): void { 
	return _in(0x2a251aa4, 0x8b2b46db); 
}

export function clearPedAlternateMovementAnim(ped: number, stance: number, p2: number): void { 
	return _in(0xd8d19675, 0xed5fbdce, ped, stance, _fv(p2)); 
}

export function clearPedAlternateWalkAnim(ped: number, p1: number): void { 
	return _in(0x8844bbfc, 0xe30aa9e9, ped, _fv(p1)); 
}

export function clearPedBloodDamage(ped: number): void { 
	return _in(0x8fe22675, 0xa5a45817, ped); 
}

/**
 * Somehow related to changing ped's clothes.
 * @param ped
 * @param p1
 */
export function clearPedBloodDamageByZone(ped: number, p1: number): void { 
	return _in(0x56e3b78c, 0x5408d9f4, ped, p1); 
}

/**
 * p1: from 0 to 5 in the b617d scripts.
 * p2: "blushing" and "ALL" found in the b617d scripts.
 * @param ped
 * @param p1
 * @param p2
 */
export function clearPedDamageDecalByZone(ped: number, p1: number, p2: string): void { 
	return _in(0x523c79ae, 0xefcc4a2a, ped, p1, _ts(p2)); 
}

export function clearPedDecorations(ped: number): void { 
	return _in(0x0e5173c1, 0x63976e38, ped); 
}

export function clearPedDecorationsLeaveScars(ped: number): void { 
	return _in(0xe3b27e70, 0xceab9f0c, ped); 
}

export function clearPedDriveByClipsetOverride(ped: number): void { 
	return _in(0x4afe3690, 0xd7e0b5ac, ped); 
}

export function clearPedEnvDirt(ped: number): void { 
	return _in(0x6585d955, 0xa68452a5, ped); 
}

export function clearPedFallUpperBodyClipsetOverride(ped: number): void { 
	return _in(0x80054d7f, 0xcc70eec6, ped); 
}

export function clearPedInPauseMenu(): void { 
	return _in(0x5e62be5d, 0xc58e9e06); 
}

export function clearPedLastDamageBone(ped: number): void { 
	return _in(0x8ef6b7ac, 0x68e2f01b, ped); 
}

/**
 * Does NOT seem to work with HAS_PED_BEEN_DAMAGED_BY_WEAPON. Use CLEAR_ENTITY_LAST_WEAPON_DAMAGE and HAS_ENTITY_BEEN_DAMAGED_BY_WEAPON instead.
 * @param ped
 */
export function clearPedLastWeaponDamage(ped: number): void { 
	return _in(0x0e98f88a, 0x24c5f4b8, ped); 
}

export function clearPedMotionInCoverClipsetOverride(ped: number): void { 
	return _in(0xc79196dc, 0xb36f6121, ped); 
}

export function clearPedNonCreationArea(): void { 
	return _in(0x2e052080, 0x86ba0651); 
}

export function clearPedParachutePackVariation(ped: number): void { 
	return _in(0x1280804f, 0x7cfd2d6c, ped); 
}

/**
 * List of component/props ID
 * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
 * @param ped
 * @param propId
 * @param p2
 */
export function clearPedProp(ped: number, propId: number, p2: number): void { 
	return _in(0x0943e5b8, 0xe078e76e, ped, propId, p2); 
}

export function clearPedScriptTaskIfRunningThreatResponseNonTempTask(ped: number): void { 
	return _in(0xf6dc48e5, 0x6be1243a, ped); 
}

/**
 * Removes the scubagear (for mp male: component id: 8, drawableId: 123, textureId: any) from peds. Does not play the 'remove scuba gear' animation, but instantly removes it.
 * @param ped
 */
export function clearPedScubaGearVariation(ped: number): void { 
	return _in(0xb50eb4cc, 0xb29704ac, ped); 
}

export function clearPedSecondaryTask(ped: number): void { 
	return _in(0x176cecf6, 0xf920d707, ped); 
}

export function clearPedStoredHatProp(ped: number): void { 
	return _in(0x687c0b59, 0x4907d2e8, ped); 
}

export function clearPedTasks(ped: number): void { 
	return _in(0xe1ef3c12, 0x16aff2cd, ped); 
}

/**
 * Immediately stops the pedestrian from whatever it's doing. They stop fighting, animations, etc. they forget what they were doing.
 * @param ped
 */
export function clearPedTasksImmediately(ped: number): void { 
	return _in(0xaaa34f8a, 0x7cb32098, ped); 
}

/**
 * It clears the wetness of the selected Ped/Player. Clothes have to be wet to notice the difference.
 * @param ped
 */
export function clearPedWetness(ped: number): void { 
	return _in(0x9c720776, 0xdaa43e7e, ped); 
}

export function clearPickupRewardTypeSuppression(rewardType: number): void { 
	return _in(0x762db2d3, 0x80b48d04, rewardType); 
}

export function clearPlayerHasDamagedAtLeastOneNonAnimalPed(player: number): void { 
	return _in(0x4aacb962, 0x03d11a31, player); 
}

export function clearPlayerHasDamagedAtLeastOnePed(player: number): void { 
	return _in(0xf0b67a4d, 0xe6ab5f98, player); 
}

export function clearPlayerParachuteModelOverride(player: number): void { 
	return _in(0x8753997e, 0xb5f6ee3f, player); 
}

export function clearPlayerParachutePackModelOverride(player: number): void { 
	return _in(0x10c54e43, 0x89c12b42, player); 
}

export function clearPlayerParachuteVariationOverride(player: number): void { 
	return _in(0x0f4cc924, 0xcf8c7b21, player); 
}

export function clearPlayerReserveParachuteModelOverride(player: number): void { 
	return _in(0x290d248e, 0x25815ae8, player); 
}

/**
 * This executes at the same as speed as PLAYER::SET_PLAYER_WANTED_LEVEL(player, 0, false);
 * 
 * PLAYER::GET_PLAYER_WANTED_LEVEL(player); executes in less than half the time. Which means that it's worth first checking if the wanted level needs to be cleared before clearing. However, this is mostly about good code practice and can important in other situations. The difference in time in this example is negligible.
 * @param player
 */
export function clearPlayerWantedLevel(player: number): void { 
	return _in(0xb3025405, 0x97885499, player); 
}

/**
 * Only used once in the decompiled scripts. Seems to be related to scripted vehicle generators.
 * 
 * Modified example from "am_imp_exp.c4", line 6418:
 *  -- [[ popSchedules[0] = ZONE::GET_ZONE_POPSCHEDULE(ZONE::GET_ZONE_AT_COORDS(891.3, 807.9, 188.1));
 * etc.
 * ]] 
 * STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(vehicleHash);
 * ZONE::CLEAR_POPSCHEDULE_OVERRIDE_VEHICLE_MODEL(popSchedules[index]);
 * @param scheduleId
 */
export function clearPopscheduleOverrideVehicleModel(scheduleId: number): void { 
	return _in(0x5c0de367, 0xaa0d911c, scheduleId); 
}

/**
 * This native is very useful when switching the player to a ped inside a vehicle that has a task assigned prior to the player switch.
 * It is necessary to clear the ped's tasks AND call this native with the vehicle the player is switching into in order to allow the player to control the vehicle after the player switches.
 * @param vehicle
 */
export function clearPrimaryVehicleTask(vehicle: number): void { 
	return _in(0xdbbc7a24, 0x32524127, vehicle); 
}

export function clearPrints(): void { 
	return _in(0xcc33fa79, 0x1322b9d9); 
}

/**
 * See SET_RAGDOLL_BLOCKING_FLAGS for flags
 * @param ped
 * @param blockingFlag
 */
export function clearRagdollBlockingFlags(ped: number, blockingFlag: number): void { 
	return _in(0xd86d101f, 0xcfd00a4b, ped, blockingFlag); 
}

/**
 * Clears the relationship between two groups. This should be called twice (once for each group).
 * 
 * Relationship types:
 * 0 = Companion
 * 1 = Respect
 * 2 = Like
 * 3 = Neutral
 * 4 = Dislike
 * 5 = Hate
 * 255 = Pedestrians
 * (Credits: Inco)
 * 
 * Example:
 * PED::CLEAR_RELATIONSHIP_BETWEEN_GROUPS(2, l_1017, 0xA49E591C);
 * PED::CLEAR_RELATIONSHIP_BETWEEN_GROUPS(2, 0xA49E591C, l_1017);
 * @param relationship
 * @param group1
 * @param group2
 */
export function clearRelationshipBetweenGroups(relationship: number, group1: number, group2: number): void { 
	return _in(0x5e29243f, 0xb56fc6d4, relationship, _ch(group1), _ch(group2)); 
}

/**
 * This native does absolutely nothing, just a nullsub
 */
export function clearReminderMessage(): void { 
	return _in(0xb57d8dd6, 0x45cfa2cf); 
}

export function clearReplayStats(): void { 
	return _in(0x1b1ab132, 0xa16fda55); 
}

export function clearRestartCoordOverride(): void { 
	return _in(0xa2716d40, 0x842eaf79); 
}

export function clearRoomForEntity(entity: number): void { 
	return _in(0xb365fc0c, 0x4e27ffa7, entity); 
}

export function clearRoomForGameViewport(): void { 
	return _in(0x23b59d89, 0x12f94246); 
}

/**
 * Possibly used to clear scenario points.
 */
export function clearScenarioSpawnHistory(): void { 
	return _in(0x7ec6f9a4, 0x78a6a512); 
}

export function clearSequenceTask(taskSequenceId: number): number { 
	return _in(0x3841422e, 0x9c488d8c, _ii(taskSequenceId)); 
}

/**
 * This native does absolutely nothing, just a nullsub
 */
export function clearServiceEventArguments(): void { 
	return _in(0x966dd84f, 0xb6a46017); 
}

export function clearSmallPrints(): void { 
	return _in(0x2cea2839, 0x313c09ac); 
}

export function clearStatusOfSortedListOperation(): void { 
	return _in(0x4af92acd, 0x3141d96c); 
}

export function clearTacticalNavMeshPoints(): void { 
	return _in(0xb3cd58cc, 0xa6cda852); 
}

/**
 * p0: found arguments in the b617d scripts: https://pastebin.com/X5akCN7z
 * @param p0
 */
export function clearThisPrint(p0: string): void { 
	return _in(0xcf708001, 0xe1e536dd, _ts(p0)); 
}

export function clearTimecycleModifier(): void { 
	return _in(0x0f07e774, 0x5a236711); 
}

export function clearTvChannelPlaylist(tvChannel: number): void { 
	return _in(0xbeb3d46b, 0xb7f043c0, tvChannel); 
}

export function clearValidVehicleHitHashes(): void { 
	return _in(0xeb81a3da, 0xdd503187); 
}

export function clearVehicleCrashTask(vehicle: number): void { 
	return _in(0x53ddc75b, 0xc3ac0a90, vehicle); 
}

export function clearVehicleCustomPrimaryColour(vehicle: number): void { 
	return _in(0x55e1d275, 0x8f34e437, vehicle); 
}

export function clearVehicleCustomSecondaryColour(vehicle: number): void { 
	return _in(0x5ffbdeec, 0x3e8e2009, vehicle); 
}

export function clearVehicleGeneratorAreaOfInterest(): void { 
	return _in(0x0a436b86, 0x43716d14); 
}

export function clearVehiclePetroltankFireCulprit(vehicle: number): void { 
	return _in(0x4419966c, 0x9936071a, vehicle); 
}

export function clearVehiclePhoneExplosiveDevice(): void { 
	return _in(0xaa3f739a, 0xbddcf21f); 
}

export function clearVehicleRouteHistory(vehicle: number): void { 
	return _in(0x6d6af961, 0xb72728ae, vehicle); 
}

export function clearWeatherTypeNowPersistNetwork(milliseconds: number): void { 
	return _in(0x0cf97f49, 0x7fe7d048, milliseconds); 
}

export function clearWeatherTypePersist(): void { 
	return _in(0xccc39339, 0xbef76cf5); 
}

export function clonePed(ped: number, isNetwork: boolean, bScriptHostPed: boolean, copyHeadBlendFlag: boolean): number { 
	return _in(0xef29a163, 0x37facadb, ped, isNetwork, bScriptHostPed, copyHeadBlendFlag, _r, _ri); 
}

export function clonePedAlt(ped: number, isNetwork: boolean, bScriptHostPed: boolean, copyHeadBlendFlag: boolean, p4: boolean): number { 
	return _in(0x668fd40b, 0xcba5de48, ped, isNetwork, bScriptHostPed, copyHeadBlendFlag, p4, _r, _ri); 
}

/**
 * Copies ped's components and props to targetPed.
 * @param ped
 * @param targetPed
 */
export function clonePedToTarget(ped: number, targetPed: number): void { 
	return _in(0xe952d643, 0x1689ad9a, ped, targetPed); 
}

export function clonePedToTargetAlt(ped: number, targetPed: number, p2: boolean): void { 
	return _in(0x148b08c2, 0xd2acb884, ped, targetPed, p2); 
}

/**
 * Clears the fields sets by 0xC7F29CA00F46350E (1604 retail: 0x1424A7A10, 0x1424A7A11) and iterates over the global CDoor's bucket-list.
 * Related to its "Pre-networked state"?
 */
export function closeAllBarriersForRace(): void { 
	return _in(0x701fda1e, 0x82076ba4); 
}

export function closeBombBayDoors(vehicle: number): void { 
	return _in(0x35560417, 0x42a0dc74, vehicle); 
}

export function closeMpTextChat(): void { 
	return _in(0x1ac8f4ad, 0x40e22127); 
}

export function closePatrolRoute(): void { 
	return _in(0xb043eca8, 0x01b8cbc1); 
}

export function closeSafehouseGarages(): void { 
	return _in(0x66a49d02, 0x1870fe88); 
}

export function closeSequenceTask(taskSequenceId: number): void { 
	return _in(0x39e72bc9, 0x9e6360cb, taskSequenceId); 
}

export function closeSocialClubMenu(): void { 
	return _in(0xd2b32be3, 0xfc1626c6); 
}

/**
 * Downloads prod.cloud.rockstargames.com/titles/gta5/[platform]/check.json
 */
export function cloudCheckAvailability(): void { 
	return _in(0x4f18196c, 0x8d38768d); 
}

export function cloudDeleteMemberFile(p0: string): number { 
	return _in(0xc64ded7e, 0xf0d2fe37, _ts(p0), _r, _ri); 
}

export function cloudDidRequestSucceed(requestId: number): boolean { 
	return _in(0x3a3d5568, 0xaf297cd5, requestId, _r); 
}

export function cloudGetAvailabilityCheckResult(): boolean { 
	return _in(0x0b0cc107, 0x20653f3b, _r); 
}

export function cloudHasRequestCompleted(requestId: number): boolean { 
	return _in(0x4c61b399, 0x30d045da, requestId, _r); 
}

export function cloudIsCheckingAvailability(): boolean { 
	return _in(0xc7abac5d, 0xe675ee3b, _r); 
}

export function codeWantsScriptToTakeControl(): boolean { 
	return _in(0x66e7cb63, 0xc97b7d20, _r); 
}

export function commitToLoadingscreenSelction(): void { 
	return _in(0xb1577667, 0xc3708f9b); 
}

/**
 * Compares two strings up to a specified number of characters.
 * 
 * Parameters:
 * str1 - String to be compared.
 * str2 - String to be compared.
 * matchCase - Comparison will be case-sensitive.
 * maxLength - Maximum number of characters to compare. A value of -1 indicates an infinite length.
 * 
 * Returns:
 * A value indicating the relationship between the strings:
 * <0 - The first non-matching character in 'str1' is less than the one in 'str2'. (e.g. 'A' < 'B', so result = -1)
 * 0 - The contents of both strings are equal.
 * >0 - The first non-matching character in 'str1' is less than the one in 'str2'. (e.g. 'B' > 'A', so result = 1)
 * 
 * Examples:
 * MISC::COMPARE_STRINGS("STRING", "string", false, -1); // 0; equal
 * MISC::COMPARE_STRINGS("TESTING", "test", false, 4); // 0; equal
 * MISC::COMPARE_STRINGS("R2D2", "R2xx", false, 2); // 0; equal
 * MISC::COMPARE_STRINGS("foo", "bar", false, -1); // 4; 'f' > 'b'
 * MISC::COMPARE_STRINGS("A", "A", true, 1); // 0; equal
 * 
 * When comparing case-sensitive strings, lower-case characters are greater than upper-case characters:
 * MISC::COMPARE_STRINGS("A", "a", true, 1); // -1; 'A' < 'a'
 * MISC::COMPARE_STRINGS("a", "A", true, 1); // 1; 'a' > 'A'
 * @param str1
 * @param str2
 * @param matchCase
 * @param maxLength
 */
export function compareStrings(str1: string, str2: string, matchCase: boolean, maxLength: number): number { 
	return _in(0x1e34710e, 0xcd4ab0eb, _ts(str1), _ts(str2), matchCase, maxLength, _r, _ri); 
}

/**
 * Works for vehicles with a retractable landing gear
 * 
 * Landing gear states:
 * 
 * 0: Deployed
 * 1: Closing
 * 2: Opening
 * 3: Retracted
 * @param vehicle
 * @param state
 */
export function controlLandingGear(vehicle: number, state: number): void { 
	return _in(0xcfc8be9a, 0x5e1fe575, vehicle, state); 
}

/**
 * Forces the ped to use the mounted weapon.
 * Returns false if task is not possible.
 * @param ped
 */
export function controlMountedWeapon(ped: number): boolean { 
	return _in(0xdcfe4206, 0x8fe0135a, ped, _r); 
}

/**
 * returns pickup hash.
 * 
 * Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
 * @param pickupHash
 */
export function convertOldPickupTypeToNew(pickupHash: number): number { 
	return _in(0x5eaad83f, 0x8cfb4575, _ch(pickupHash), _r, _ri); 
}

/**
 * Takes the specified time and writes it to the structure specified in the second argument.
 * 
 * struct date_time
 * {
 * int year;
 * int PADDING1;
 * int month;
 * int PADDING2;
 * int day;
 * int PADDING3;
 * int hour;
 * int PADDING4;
 * int minute;
 * int PADDING5;
 * int second;
 * int PADDING6;
 * };
 * @param posixTime
 * @param timeStructure
 */
export function convertPosixTime(posixTime: number, timeStructure: number): number { 
	return _in(0xac97af97, 0xfa68e5d5, posixTime, _ii(timeStructure)); 
}

export function copyScriptStruct(size: number): [number, number] { 
	const [dst_out, src_out] = _in(0x213aeb2b, 0x90cba7ac, _i, _i, size);
	return [dst_out as number, src_out as number]; 
}

/**
 * Copies sourceVehicle's damage (broken bumpers, broken lights, etc.) to targetVehicle.
 * @param sourceVehicle
 * @param targetVehicle
 */
export function copyVehicleDamages(sourceVehicle: number, targetVehicle: number): void { 
	return _in(0xe44a9823, 0x68a4af23, sourceVehicle, targetVehicle); 
}

export function cos(value: number): number { 
	return _in(0xd0ffb162, 0xf40a139c, _fv(value), _r, _rf); 
}

export function countPedsInCombatWithTarget(ped: number): number { 
	return _in(0x5407b728, 0x8d0478b7, ped, _r, _ri); 
}

export function countPedsInCombatWithTargetWithinRadius(ped: number, x: number, y: number, z: number, radius: number): number { 
	return _in(0x336b3d20, 0x0ab007cb, ped, _fv(x), _fv(y), _fv(z), _fv(radius), _r, _ri); 
}

/**
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 * @param radius
 * @param weaponHash
 */
export function createAirDefenceAngledArea(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, radius: number, weaponHash: number): number { 
	return _in(0x9da58cdb, 0xf6bdbc08, _fv(p0), _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), _fv(p6), _fv(p7), _fv(p8), _fv(radius), _ch(weaponHash), _r, _ri); 
}

/**
 * Both coordinates are from objects in the decompiled scripts. Native related to 0xECDC202B25E5CF48 p1 value. The only weapon hash used in the decompiled scripts is weapon_air_defence_gun. These two natives are used by the yacht script, decompiled scripts suggest it and the weapon hash used (valkyrie's rockets) are also used by yachts.
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param p4
 * @param p5
 * @param p6
 * @param weaponHash
 */
export function createAirDefenceSphere(x: number, y: number, z: number, radius: number, p4: number, p5: number, p6: number, weaponHash: number): number { 
	return _in(0x91ef3458, 0x4710be99, _fv(x), _fv(y), _fv(z), _fv(radius), _fv(p4), _fv(p5), _fv(p6), _ch(weaponHash), _r, _ri); 
}

/**
 * Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
 * @param pickupHash
 * @param posX
 * @param posY
 * @param posZ
 * @param flags
 * @param value
 * @param modelHash
 * @param p7
 * @param p8
 */
export function createAmbientPickup(pickupHash: number, posX: number, posY: number, posZ: number, flags: number, value: number, modelHash: number, p7: boolean, p8: boolean): number { 
	return _in(0x673966a0, 0xc0fd7171, _ch(pickupHash), _fv(posX), _fv(posY), _fv(posZ), flags, value, _ch(modelHash), p7, p8, _r, _ri); 
}

/**
 * "DEFAULT_SCRIPTED_CAMERA"
 * "DEFAULT_ANIMATED_CAMERA"
 * "DEFAULT_SPLINE_CAMERA"
 * "DEFAULT_SCRIPTED_FLY_CAMERA"
 * "TIMED_SPLINE_CAMERA"
 * @param camName
 * @param p1
 */
export function createCam(camName: string, p1: boolean): number { 
	return _in(0xc3981dce, 0x61d9e13f, _ts(camName), p1, _r, _ri); 
}

/**
 * camName is always set to "DEFAULT_SCRIPTED_CAMERA" in Rockstar's scripts.
 * ------------
 * Camera names found in the b617d scripts:
 * "DEFAULT_ANIMATED_CAMERA"
 * "DEFAULT_SCRIPTED_CAMERA"
 * "DEFAULT_SCRIPTED_FLY_CAMERA"
 * "DEFAULT_SPLINE_CAMERA"
 * ------------
 * Side Note: It seems p8 is basically to represent what would be the bool p1 within CREATE_CAM native. As well as the p9 since it's always 2 in scripts seems to represent what would be the last param within SET_CAM_ROT native which normally would be 2.
 * @param camName
 * @param posX
 * @param posY
 * @param posZ
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param fov
 * @param p8
 * @param p9
 */
export function createCamWithParams(camName: string, posX: number, posY: number, posZ: number, rotX: number, rotY: number, rotZ: number, fov: number, p8: boolean, p9: number): number { 
	return _in(0xb5119480, 0x0b257161, _ts(camName), _fv(posX), _fv(posY), _fv(posZ), _fv(rotX), _fv(rotY), _fv(rotZ), _fv(fov), p8, p9, _r, _ri); 
}

export function createCamera(camHash: number, p1: boolean): number { 
	return _in(0x5e3cf89c, 0x6bcca67d, _ch(camHash), p1, _r, _ri); 
}

/**
 * p9 uses 2 by default
 * @param camHash
 * @param posX
 * @param posY
 * @param posZ
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param fov
 * @param p8
 * @param p9
 */
export function createCameraWithParams(camHash: number, posX: number, posY: number, posZ: number, rotX: number, rotY: number, rotZ: number, fov: number, p8: boolean, p9: number): number { 
	return _in(0x6abfa3e1, 0x6460f22d, _ch(camHash), _fv(posX), _fv(posY), _fv(posZ), _fv(rotX), _fv(rotY), _fv(rotZ), _fv(fov), p8, p9, _r, _ri); 
}

/**
 * Creates a checkpoint. Returns the handle of the checkpoint.
 * 
 * 20/03/17 : Attention, checkpoints are already handled by the game itself, so you must not loop it like markers.
 * 
 * Parameters:
 * * type - The type of checkpoint to create. See below for a list of checkpoint types.
 * * pos1 - The position of the checkpoint.
 * * pos2 - The position of the next checkpoint to point to.
 * * radius - The radius of the checkpoint.
 * * color - The color of the checkpoint.
 * * reserved - Special parameter, see below for details. Usually set to 0 in the scripts.
 * 
 * Checkpoint types:
 * 0-4---------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
 * 5-9---------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
 * 10-14-------Ring: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
 * 15-19-------1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
 * 20-24-------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
 * 25-29-------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
 * 30-34-------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
 * 35-38-------Ring: Airplane Up, Left, Right, UpsideDown
 * 39----------?
 * 40----------Ring: just a ring
 * 41----------?
 * 42-44-------Cylinder w/ number (uses 'reserved' parameter)
 * 45-47-------Cylinder no arrow or number
 * 
 * If using type 42-44, reserved sets number / number and shape to display
 * 
 * 0-99------------Just numbers (0-99)
 * 100-109-----------------Arrow (0-9)
 * 110-119------------Two arrows (0-9)
 * 120-129----------Three arrows (0-9)
 * 130-139----------------Circle (0-9)
 * 140-149------------CycleArrow (0-9)
 * 150-159----------------Circle (0-9)
 * 160-169----Circle  w/ pointer (0-9)
 * 170-179-------Perforated ring (0-9)
 * 180-189----------------Sphere (0-9)
 * @param type
 * @param posX1
 * @param posY1
 * @param posZ1
 * @param posX2
 * @param posY2
 * @param posZ2
 * @param diameter
 * @param red
 * @param green
 * @param blue
 * @param alpha
 * @param reserved
 */
export function createCheckpoint(type: number, posX1: number, posY1: number, posZ1: number, posX2: number, posY2: number, posZ2: number, diameter: number, red: number, green: number, blue: number, alpha: number, reserved: number): number { 
	return _in(0x0134f083, 0x5ab6bfcb, type, _fv(posX1), _fv(posY1), _fv(posZ1), _fv(posX2), _fv(posY2), _fv(posZ2), _fv(diameter), red, green, blue, alpha, reserved, _r, _ri); 
}

/**
 * hash is always JOAAT("CAMERA_MAN_SHOT") in decompiled scripts
 * @param p0
 * @param time
 * @param p2
 * @param entity
 */
export function createCinematicShot(p0: number, time: number, p2: boolean, entity: number): void { 
	return _in(0x741b0129, 0xd4560f31, _ch(p0), time, p2, entity); 
}

/**
 * clanFlag: takes a number 0-5
 * @param ped
 * @param username
 * @param pointedClanTag
 * @param isRockstarClan
 * @param clanTag
 * @param clanFlag
 */
export function createFakeMpGamerTag(ped: number, username: string, pointedClanTag: boolean, isRockstarClan: boolean, clanTag: string, clanFlag: number): number { 
	return _in(0xbfefe332, 0x1a3f5015, ped, _ts(username), pointedClanTag, isRockstarClan, _ts(clanTag), clanFlag, _r, _ri); 
}

export function createForcedObject(x: number, y: number, z: number, p3: number, modelHash: number, p5: boolean): void { 
	return _in(0x150e808b, 0x375a385a, _fv(x), _fv(y), _fv(z), p3, _ch(modelHash), p5); 
}

/**
 * Creates a new ped group.
 * Groups can contain up to 8 peds.
 * 
 * The parameter is unused.
 * 
 * Returns a handle to the created group, or 0 if a group couldn't be created.
 * @param unused
 */
export function createGroup(unused: number): number { 
	return _in(0x90370ebe, 0x0fee1a3d, unused, _r, _ri); 
}

/**
 * As for the 'police' incident, it will call police cars to you, but unlike PedsInCavalcades & Merryweather they won't start shooting at you unless you shoot first or shoot at them. The top 2 however seem to cancel theirselves if there is noone dead around you or a fire. I only figured them out as I found out the 3rd param is definately the amountOfPeople and they called incident 3 in scripts with 4 people (which the firetruck has) and incident 5 with 2 people (which the ambulence has). The 4 param I cant say is radius, but for the pedsInCavalcades and Merryweather R* uses 0.0f and for the top 3 (Emergency Services) they use 3.0f.
 * 
 * Side Note: It seems calling the pedsInCavalcades or Merryweather then removing it seems to break you from calling the EmergencyEvents and I also believe pedsInCavalcades. (The V cavalcades of course not IV).
 * 
 * Side Note 2: I say it breaks as if you call this proper,
 * if(CREATE_INCIDENT) etc it will return false if you do as I said above.
 * =====================================================
 * @param dispatchService
 * @param x
 * @param y
 * @param z
 * @param numUnits
 * @param radius
 * @param outIncidentID
 * @param p7
 * @param p8
 */
export function createIncident(dispatchService: number, x: number, y: number, z: number, numUnits: number, radius: number, p7: number, p8: number): [boolean, number] { 
	const [retval, outIncidentID_out] = _in(0x3f892caf, 0x67444ae7, dispatchService, _fv(x), _fv(y), _fv(z), numUnits, _fv(radius), _i, p7, p8, _r);
	return [retval as boolean, outIncidentID_out as number]; 
}

/**
 * As for the 'police' incident, it will call police cars to you, but unlike PedsInCavalcades & Merryweather they won't start shooting at you unless you shoot first or shoot at them. The top 2 however seem to cancel theirselves if there is noone dead around you or a fire. I only figured them out as I found out the 3rd param is definately the amountOfPeople and they called incident 3 in scripts with 4 people (which the firetruck has) and incident 5 with 2 people (which the ambulence has). The 4 param I cant say is radius, but for the pedsInCavalcades and Merryweather R* uses 0.0f and for the top 3 (Emergency Services) they use 3.0f.
 * 
 * Side Note: It seems calling the pedsInCavalcades or Merryweather then removing it seems to break you from calling the EmergencyEvents and I also believe pedsInCavalcades. (The V cavalcades of course not IV).
 * 
 * Side Note 2: I say it breaks as if you call this proper,
 * if(CREATE_INCIDENT) etc it will return false if you do as I said above.
 * =====================================================
 * @param dispatchService
 * @param ped
 * @param numUnits
 * @param radius
 * @param outIncidentID
 * @param p5
 * @param p6
 */
export function createIncidentWithEntity(dispatchService: number, ped: number, numUnits: number, radius: number, p5: number, p6: number): [boolean, number] { 
	const [retval, outIncidentID_out] = _in(0x05983472, 0xf0494e60, dispatchService, ped, numUnits, _fv(radius), _i, p5, p6, _r);
	return [retval as boolean, outIncidentID_out as number]; 
}

export function createItemset(p0: boolean): number { 
	return _in(0x35ad299f, 0x50d91b24, p0, _r, _ri); 
}

/**
 * Train models HAVE TO be loaded (requested) before you use this.
 * For variation 15 - request:
 * 
 * freight
 * freightcar
 * freightgrain
 * freightcont1
 * freightcont2
 * freighttrailer
 * 
 * 
 * @param variation
 * @param x
 * @param y
 * @param z
 * @param direction
 * @param p5
 * @param p6
 */
export function createMissionTrain(variation: number, x: number, y: number, z: number, direction: boolean, p5: number, p6: number): number { 
	return _in(0x63c6cca8, 0xe68ae8c8, variation, _fv(x), _fv(y), _fv(z), direction, p5, p6, _r, _ri); 
}

/**
 * Creates a mobile phone of the specified type.
 * 
 * Possible phone types:
 * 
 * 0 - Default phone / Michael's phone
 * 1 - Trevor's phone
 * 2 - Franklin's phone
 * 3 - Unused police phone
 * 4 - Prologue phone
 * 
 * Higher values may crash your game.
 * @param phoneType
 */
export function createMobilePhone(phoneType: number): void { 
	return _in(0xa4e8e696, 0xc532fbc7, phoneType); 
}

/**
 * p5 = sets as true in scripts
 * Same as the comment for CREATE_MODEL_SWAP unless for some reason p5 affects it this only works with objects as well.
 * 
 * Network players do not see changes done with this.
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param modelHash
 * @param p5
 */
export function createModelHide(x: number, y: number, z: number, radius: number, modelHash: number, p5: boolean): void { 
	return _in(0x8a97bca3, 0x0a0ce478, _fv(x), _fv(y), _fv(z), _fv(radius), _ch(modelHash), p5); 
}

export function createModelHideExcludingScriptObjects(x: number, y: number, z: number, radius: number, modelHash: number, p5: boolean): void { 
	return _in(0x3a52ae58, 0x8830bf7f, _fv(x), _fv(y), _fv(z), _fv(radius), _ch(modelHash), p5); 
}

/**
 * Only works with objects!
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param originalModel
 * @param newModel
 * @param p6
 */
export function createModelSwap(x: number, y: number, z: number, radius: number, originalModel: number, newModel: number, p6: boolean): void { 
	return _in(0x92c47782, 0xfda8b2a3, _fv(x), _fv(y), _fv(z), _fv(radius), _ch(originalModel), _ch(newModel), p6); 
}

/**
 * Spawns one or more money pickups.
 * 
 * x: The X-component of the world position to spawn the money pickups at.
 * y: The Y-component of the world position to spawn the money pickups at.
 * z: The Z-component of the world position to spawn the money pickups at.
 * value: The combined value of the pickups (in dollars).
 * amount: The number of pickups to spawn.
 * model: The model to use, or 0 for default money model.
 * 
 * Example:
 * CREATE_MONEY_PICKUPS(x, y, z, 1000, 3, 0x684a97ae);
 * 
 * Spawns 3 spray cans that'll collectively give $1000 when picked up. (Three spray cans, each giving $334, $334, $332 = $1000).
 * 
 * ==============================================
 * 
 * Max is 2000 in MP. So if you put the amount to 20, but the value to $400,000 eg. They will only be able to pickup 20 - $2,000 bags. So, $40,000
 * @param x
 * @param y
 * @param z
 * @param value
 * @param amount
 * @param model
 */
export function createMoneyPickups(x: number, y: number, z: number, value: number, amount: number, model: number): void { 
	return _in(0x0589b5e7, 0x91ce9b2b, _fv(x), _fv(y), _fv(z), value, amount, _ch(model)); 
}

/**
 * clanFlag: takes a number 0-5
 * @param player
 * @param username
 * @param pointedClanTag
 * @param isRockstarClan
 * @param clanTag
 * @param clanFlag
 * @param r
 * @param g
 * @param b
 */
export function createMpGamerTagWithCrewColor(player: number, username: string, pointedClanTag: boolean, isRockstarClan: boolean, clanTag: string, clanFlag: number, r: number, g: number, b: number): void { 
	return _in(0x6dd05e9d, 0x83efa4c9, player, _ts(username), pointedClanTag, isRockstarClan, _ts(clanTag), clanFlag, r, g, b); 
}

export function createNewScriptedConversation(): void { 
	return _in(0xd2c91a0b, 0x572aae56); 
}

/**
 * Creates a new NaturalMotion message.
 * 
 * startImmediately: If set to true, the character will perform the message the moment it receives it by GIVE_PED_NM_MESSAGE. If false, the Ped will get the message but won't perform it yet. While it's a boolean value, if negative, the message will not be initialized.
 * messageId: The ID of the NaturalMotion message.
 * 
 * If a message already exists, this function does nothing. A message exists until the point it has been successfully dispatched by GIVE_PED_NM_MESSAGE.
 * @param startImmediately
 * @param messageId
 */
export function createNmMessage(startImmediately: boolean, messageId: number): void { 
	return _in(0x418ef2a1, 0xbce56685, startImmediately, messageId); 
}

export function createNonNetworkedAmbientPickup(pickupHash: number, posX: number, posY: number, posZ: number, flags: number, value: number, modelHash: number, p7: boolean, p8: boolean): number { 
	return _in(0x9c937642, 0x23e29c50, _ch(pickupHash), _fv(posX), _fv(posY), _fv(posZ), flags, value, _ch(modelHash), p7, p8, _r, _ri); 
}

/**
 * Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
 * @param pickupHash
 * @param x
 * @param y
 * @param z
 * @param placeOnGround
 * @param modelHash
 */
export function createNonNetworkedPortablePickup(pickupHash: number, x: number, y: number, z: number, placeOnGround: boolean, modelHash: number): number { 
	return _in(0x125494b9, 0x8a21aaf7, _ch(pickupHash), _fv(x), _fv(y), _fv(z), placeOnGround, _ch(modelHash), _r, _ri); 
}

/**
 * List of object models that can be created without any additional effort like making sure ytyp is loaded etc: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ObjectList.ini
 * @param modelHash
 * @param x
 * @param y
 * @param z
 * @param isNetwork
 * @param bScriptHostObj
 * @param dynamic
 */
export function createObject(modelHash: number, x: number, y: number, z: number, isNetwork: boolean, bScriptHostObj: boolean, dynamic: boolean): number { 
	return _in(0x509d5878, 0xeb39e842, _ch(modelHash), _fv(x), _fv(y), _fv(z), isNetwork, bScriptHostObj, dynamic, _r, _ri); 
}

/**
 * List of object models that can be created without any additional effort like making sure ytyp is loaded etc: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ObjectList.ini
 * @param modelHash
 * @param x
 * @param y
 * @param z
 * @param isNetwork
 * @param bScriptHostObj
 * @param dynamic
 * @param p7
 */
export function createObjectNoOffset(modelHash: number, x: number, y: number, z: number, isNetwork: boolean, bScriptHostObj: boolean, dynamic: boolean, p7: number): number { 
	return _in(0x9a294b21, 0x38abb884, _ch(modelHash), _fv(x), _fv(y), _fv(z), isNetwork, bScriptHostObj, dynamic, p7, _r, _ri); 
}

export function createParachuteBagObject(ped: number, p1: boolean, p2: boolean): number { 
	return _in(0x8c4f3bf2, 0x3b6237db, ped, p1, p2, _r, _ri); 
}

export function createPatrolRoute(): void { 
	return _in(0xaf8a443c, 0xcc8018dc); 
}

/**
 * https://alloc8or.re/gta5/doc/enums/ePedType.txt
 * 
 * Full list of peds by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/peds.json
 * @param pedType
 * @param modelHash
 * @param x
 * @param y
 * @param z
 * @param heading
 * @param isNetwork
 * @param bScriptHostPed
 */
export function createPed(pedType: number, modelHash: number, x: number, y: number, z: number, heading: number, isNetwork: boolean, bScriptHostPed: boolean): number { 
	return _in(0xd49f9b09, 0x55c367de, pedType, _ch(modelHash), _fv(x), _fv(y), _fv(z), _fv(heading), isNetwork, bScriptHostPed, _r, _ri); 
}

/**
 * pedType: see CREATE_PED
 * 
 * Full list of peds by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/peds.json
 * @param vehicle
 * @param pedType
 * @param modelHash
 * @param seat
 * @param isNetwork
 * @param bScriptHostPed
 */
export function createPedInsideVehicle(vehicle: number, pedType: number, modelHash: number, seat: number, isNetwork: boolean, bScriptHostPed: boolean): number { 
	return _in(0x7dd95987, 0x4c1fd534, vehicle, pedType, _ch(modelHash), seat, isNetwork, bScriptHostPed, _r, _ri); 
}

/**
 * Drops the Hook/Magnet on a cargobob
 * 
 * state
 * enum eCargobobHook
 * {
 * CARGOBOB_HOOK = 0,
 * CARGOBOB_MAGNET = 1,
 * };
 * @param cargobob
 * @param state
 */
export function createPickUpRopeForCargobob(cargobob: number, state: number): void { 
	return _in(0x7beb0c7a, 0x235f6f3b, cargobob, state); 
}

/**
 * Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
 * @param pickupHash
 * @param posX
 * @param posY
 * @param posZ
 * @param p4
 * @param value
 * @param p6
 * @param modelHash
 */
export function createPickup(pickupHash: number, posX: number, posY: number, posZ: number, p4: number, value: number, p6: boolean, modelHash: number): number { 
	return _in(0xfba08c50, 0x3dd5fa58, _ch(pickupHash), _fv(posX), _fv(posY), _fv(posZ), p4, value, p6, _ch(modelHash), _r, _ri); 
}

/**
 * flags:
 * 8 (1 << 3): place on ground
 * 512 (1 << 9): spin around
 * 
 * Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
 * @param pickupHash
 * @param posX
 * @param posY
 * @param posZ
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param flag
 * @param amount
 * @param p9
 * @param p10
 * @param modelHash
 */
export function createPickupRotate(pickupHash: number, posX: number, posY: number, posZ: number, rotX: number, rotY: number, rotZ: number, flag: number, amount: number, p9: number, p10: boolean, modelHash: number): number { 
	return _in(0x89180472, 0x7e0a98b7, _ch(pickupHash), _fv(posX), _fv(posY), _fv(posZ), _fv(rotX), _fv(rotY), _fv(rotZ), flag, amount, p9, p10, _ch(modelHash), _r, _ri); 
}

/**
 * Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
 * @param pickupHash
 * @param x
 * @param y
 * @param z
 * @param placeOnGround
 * @param modelHash
 */
export function createPortablePickup(pickupHash: number, x: number, y: number, z: number, placeOnGround: boolean, modelHash: number): number { 
	return _in(0x2eaf1fdb, 0x2fb55698, _ch(pickupHash), _fv(x), _fv(y), _fv(z), placeOnGround, _ch(modelHash), _r, _ri); 
}

/**
 * vb.net
 * Dim ped_handle As Integer
 * With Game.Player.Character
 * Dim pos As Vector3 = .Position + .ForwardVector * 3
 * ped_handle = Native.Function.Call(Of Integer)(Hash.CREATE_RANDOM_PED, pos.X, pos.Y, pos.Z)
 * End With
 * 
 * Creates a Ped at the specified location, returns the Ped Handle.
 * Ped will not act until SET_PED_AS_NO_LONGER_NEEDED is called.
 * @param posX
 * @param posY
 * @param posZ
 */
export function createRandomPed(posX: number, posY: number, posZ: number): number { 
	return _in(0xb4ac7d0c, 0xf06bfe8f, _fv(posX), _fv(posY), _fv(posZ), _r, _ri); 
}

export function createRandomPedAsDriver(vehicle: number, returnHandle: boolean): number { 
	return _in(0x9b62392b, 0x474f44a0, vehicle, returnHandle, _r, _ri); 
}

/**
 * Creates a script vehicle generator at the given coordinates. Most parameters after the model hash are unknown.
 * 
 * Parameters:
 * x/y/z - Generator position
 * heading - Generator heading
 * p4 - Unknown (always 5.0)
 * p5 - Unknown (always 3.0)
 * modelHash - Vehicle model hash
 * p7/8/9/10 - Unknown (always -1)
 * p11 - Unknown (usually TRUE, only one instance of FALSE)
 * p12/13 - Unknown (always FALSE)
 * p14 - Unknown (usally FALSE, only two instances of TRUE)
 * p15 - Unknown (always TRUE)
 * p16 - Unknown (always -1)
 * 
 * Vector3 coords = GET_ENTITY_COORDS(PLAYER_PED_ID(), 0);    CREATE_SCRIPT_VEHICLE_GENERATOR(coords.x, coords.y, coords.z, 1.0f, 5.0f, 3.0f, GET_HASH_KEY("adder"), -1. -1, -1, -1, -1, true, false, false, false, true, -1);
 * @param x
 * @param y
 * @param z
 * @param heading
 * @param p4
 * @param p5
 * @param modelHash
 * @param p7
 * @param p8
 * @param p9
 * @param p10
 * @param p11
 * @param p12
 * @param p13
 * @param p14
 * @param p15
 * @param p16
 */
export function createScriptVehicleGenerator(x: number, y: number, z: number, heading: number, p4: number, p5: number, modelHash: number, p7: number, p8: number, p9: number, p10: number, p11: boolean, p12: boolean, p13: boolean, p14: boolean, p15: boolean, p16: number): number { 
	return _in(0x9def8831, 0x14668116, _fv(x), _fv(y), _fv(z), _fv(heading), _fv(p4), _fv(p5), _ch(modelHash), p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, _r, _ri); 
}

/**
 * p6 always 2 (but it doesnt seem to matter...)
 * 
 * roll and pitch 0
 * yaw to Ped.rotation
 * @param x
 * @param y
 * @param z
 * @param roll
 * @param pitch
 * @param yaw
 * @param p6
 */
export function createSynchronizedScene(x: number, y: number, z: number, roll: number, pitch: number, yaw: number, p6: number): number { 
	return _in(0x8c18e0f9, 0x080add73, _fv(x), _fv(y), _fv(z), _fv(roll), _fv(pitch), _fv(yaw), p6, _r, _ri); 
}

export function createSynchronizedSceneAtMapObject(x: number, y: number, z: number, radius: number, object: number): number { 
	return _in(0x62ec273d, 0x00187dca, _fv(x), _fv(y), _fv(z), _fv(radius), _ch(object), _r, _ri); 
}

/**
 * Creates a tracked point, useful for checking the visibility of a 3D point on screen.
 */
export function createTrackedPoint(): number { 
	return _in(0xe2c9439e, 0xd45dea60, _r, _ri); 
}

/**
 * p7 when set to true allows you to spawn vehicles under -100 z.
 * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
 * @param modelHash
 * @param x
 * @param y
 * @param z
 * @param heading
 * @param isNetwork
 * @param bScriptHostVeh
 * @param p7
 */
export function createVehicle(modelHash: number, x: number, y: number, z: number, heading: number, isNetwork: boolean, bScriptHostVeh: boolean, p7: boolean): number { 
	return _in(0xaf35d0d2, 0x583051b0, _ch(modelHash), _fv(x), _fv(y), _fv(z), _fv(heading), isNetwork, bScriptHostVeh, p7, _r, _ri); 
}

/**
 * Now has 8 params.
 * @param weaponHash
 * @param ammoCount
 * @param x
 * @param y
 * @param z
 * @param showWorldModel
 * @param scale
 * @param p7
 * @param p8
 * @param p9
 */
export function createWeaponObject(weaponHash: number, ammoCount: number, x: number, y: number, z: number, showWorldModel: boolean, scale: number, p7: number, p8: number, p9: number): number { 
	return _in(0x9541d3cf, 0x0d398f36, _ch(weaponHash), ammoCount, _fv(x), _fv(y), _fv(z), showWorldModel, _fv(scale), p7, p8, p9, _r, _ri); 
}

export function customMinimapClearBlips(): void { 
	return _in(0x2708fc08, 0x3123f9ff); 
}

/**
 * Add a BLIP_GALLERY at the specific coordinate. Used in fm_maintain_transition_players to display race track points.
 * @param x
 * @param y
 * @param z
 */
export function customMinimapCreateBlip(x: number, y: number, z: number): number { 
	return _in(0x551df996, 0x58db6ee8, _fv(x), _fv(y), _fv(z), _r, _ri); 
}

/**
 * If toggle is true, the map is shown in full screen
 * If toggle is false, the map is shown in normal mode
 * @param toggle
 */
export function customMinimapSetActive(toggle: boolean): void { 
	return _in(0x5354c5ba, 0x2ea868a4, toggle); 
}

/**
 * Sets the sprite of the next BLIP_GALLERY blip, values used in the native scripts: 143 (ObjectiveBlue), 144 (ObjectiveGreen), 145 (ObjectiveRed), 146 (ObjectiveYellow).
 * @param spriteId
 */
export function customMinimapSetBlipObject(spriteId: number): void { 
	return _in(0x1eae6dd1, 0x7b7a5efa, spriteId); 
}

export function damageObjectFragmentChild(p0: number, p1: number, p2: number): void { 
	return _in(0xe05f6aee, 0xfeb0bb02, p0, p1, p2); 
}

export function dataarrayAddBool(value: boolean): number { 
	return _in(0xf8b0f5a4, 0x3e928c76, _i, value); 
}

export function dataarrayAddDict(arrayData: number): [number, number] { 
	const [retval, arrayData_out] = _in(0x6889498b, 0x3e19c797, _ii(arrayData), _r, _ri);
	return [retval as number, arrayData_out as number]; 
}

export function dataarrayAddFloat(value: number): number { 
	return _in(0x57a995fd, 0x75d37f56, _i, _fv(value)); 
}

export function dataarrayAddInt(value: number): number { 
	return _in(0xcabdb751, 0xd86fe93b, _i, value); 
}

export function dataarrayAddString(value: string): number { 
	return _in(0x2f0661c1, 0x55aeeeaa, _i, _ts(value)); 
}

export function dataarrayAddVector(valueX: number, valueY: number, valueZ: number): number { 
	return _in(0x407f8d03, 0x4f70f0c2, _i, _fv(valueX), _fv(valueY), _fv(valueZ)); 
}

export function dataarrayGetBool(arrayIndex: number): [boolean, number] { 
	const [retval, arrayData_out] = _in(0x50c1b287, 0x4e50c114, _i, arrayIndex, _r);
	return [retval as boolean, arrayData_out as number]; 
}

export function dataarrayGetCount(arrayData: number): [number, number] { 
	const [retval, arrayData_out] = _in(0x065db281, 0x590cea2d, _ii(arrayData), _r, _ri);
	return [retval as number, arrayData_out as number]; 
}

export function dataarrayGetDict(arrayIndex: number): [number, number] { 
	const [retval, arrayData_out] = _in(0x8b5fadcc, 0x4e3a145f, _i, arrayIndex, _r, _ri);
	return [retval as number, arrayData_out as number]; 
}

export function dataarrayGetFloat(arrayIndex: number): [number, number] { 
	const [retval, arrayData_out] = _in(0xc0c527b5, 0x25d7cfb5, _i, arrayIndex, _r, _rf);
	return [retval as number, arrayData_out as number]; 
}

export function dataarrayGetInt(arrayIndex: number): [number, number] { 
	const [retval, arrayData_out] = _in(0x3e5ae194, 0x25cd74be, _i, arrayIndex, _r, _ri);
	return [retval as number, arrayData_out as number]; 
}

export function dataarrayGetString(arrayIndex: number): [string, number] { 
	const [retval, arrayData_out] = _in(0xd3f2ffeb, 0x8d836f52, _i, arrayIndex, _r, _s);
	return [retval as string, arrayData_out as number]; 
}

/**
 * Types:
 * 1 = Boolean
 * 2 = Integer
 * 3 = Float
 * 4 = String
 * 5 = Vector3
 * 6 = Object
 * 7 = Array
 * @param arrayData
 * @param arrayIndex
 */
export function dataarrayGetType(arrayIndex: number): [number, number] { 
	const [retval, arrayData_out] = _in(0x3a0014ad, 0xb172a3c5, _i, arrayIndex, _r, _ri);
	return [retval as number, arrayData_out as number]; 
}

export function dataarrayGetVector(arrayIndex: number): [Vector3, number] { 
	const [retval, arrayData_out] = _in(0x8d2064e5, 0xb64a628a, _i, arrayIndex, _r, _rv);
	return [_mv(retval), arrayData_out as number]; 
}

export function datadictCreateArray(key: string): [number, number] { 
	const [retval, objectData_out] = _in(0x5b117285, 0x27ca6e5f, _i, _ts(key), _r, _ri);
	return [retval as number, objectData_out as number]; 
}

export function datadictCreateDict(key: string): [number, number] { 
	const [retval, objectData_out] = _in(0xa358f56f, 0x10732ee1, _i, _ts(key), _r, _ri);
	return [retval as number, objectData_out as number]; 
}

export function datadictGetArray(key: string): [number, number] { 
	const [retval, objectData_out] = _in(0x7a983aa9, 0xda2659ed, _i, _ts(key), _r, _ri);
	return [retval as number, objectData_out as number]; 
}

export function datadictGetBool(key: string): [boolean, number] { 
	const [retval, objectData_out] = _in(0x1186940e, 0xd72ffeec, _i, _ts(key), _r);
	return [retval as boolean, objectData_out as number]; 
}

export function datadictGetDict(key: string): [number, number] { 
	const [retval, objectData_out] = _in(0xb6b9ddc4, 0x12fceee2, _i, _ts(key), _r, _ri);
	return [retval as number, objectData_out as number]; 
}

export function datadictGetFloat(key: string): [number, number] { 
	const [retval, objectData_out] = _in(0x06610343, 0xe73b9727, _i, _ts(key), _r, _rf);
	return [retval as number, objectData_out as number]; 
}

export function datadictGetInt(key: string): [number, number] { 
	const [retval, objectData_out] = _in(0x78f06f6b, 0x1fb5a80c, _i, _ts(key), _r, _ri);
	return [retval as number, objectData_out as number]; 
}

export function datadictGetString(key: string): [string, number] { 
	const [retval, objectData_out] = _in(0x3d2fd9e7, 0x63b24472, _i, _ts(key), _r, _s);
	return [retval as string, objectData_out as number]; 
}

/**
 * Types:
 * 1 = Boolean
 * 2 = Integer
 * 3 = Float
 * 4 = String
 * 5 = Vector3
 * 6 = Object
 * 7 = Array
 * @param objectData
 * @param key
 */
export function datadictGetType(key: string): [number, number] { 
	const [retval, objectData_out] = _in(0x031c55ed, 0x33227371, _i, _ts(key), _r, _ri);
	return [retval as number, objectData_out as number]; 
}

export function datadictGetVector(key: string): [Vector3, number] { 
	const [retval, objectData_out] = _in(0x46cd3cb6, 0x6e0825cc, _i, _ts(key), _r, _rv);
	return [_mv(retval), objectData_out as number]; 
}

export function datadictSetBool(key: string, value: boolean): number { 
	return _in(0x35124302, 0xa556a325, _i, _ts(key), value); 
}

export function datadictSetFloat(key: string, value: number): number { 
	return _in(0xc27e1cc2, 0xd795105e, _i, _ts(key), _fv(value)); 
}

export function datadictSetInt(key: string, value: number): number { 
	return _in(0xe7e03545, 0x0a7948d5, _i, _ts(key), value); 
}

export function datadictSetString(key: string, value: string): number { 
	return _in(0x8ff3847d, 0xadd8e30c, _i, _ts(key), _ts(value)); 
}

export function datadictSetVector(key: string, valueX: number, valueY: number, valueZ: number): number { 
	return _in(0x4cd49b76, 0x338c7dee, _i, _ts(key), _fv(valueX), _fv(valueY), _fv(valueZ)); 
}

export function datafileClearWatchList(): void { 
	return _in(0x6cc86e78, 0x358d5119); 
}

export function datafileCreate(p0: number): void { 
	return _in(0xd27058a1, 0xca2b13ee, p0); 
}

export function datafileDelete(p0: number): void { 
	return _in(0x9ab9c1cf, 0xc8862dfb, p0); 
}

export function datafileDeleteForAdditionalDataFile(p0: number): void { 
	return _in(0x6ad0bd5e, 0x087866cb, p0); 
}

export function datafileDeleteRequestedFile(requestId: number): boolean { 
	return _in(0x8f5ea1c0, 0x1d65a100, requestId, _r); 
}

export function datafileFlushMissionHeader(): void { 
	return _in(0xc55854c7, 0xd7274882); 
}

export function datafileGetFileDict(p0: number): number { 
	return _in(0x906b778c, 0xa1dc72b6, p0, _r, _ri); 
}

export function datafileGetFileDictForAdditionalDataFile(p0: number): number { 
	return _in(0xdbf860cf, 0x1db8e599, p0, _r, _ri); 
}

export function datafileHasLoadedFileData(requestId: number): boolean { 
	return _in(0x15ff52b8, 0x09db2353, requestId, _r); 
}

export function datafileHasValidFileData(requestId: number): boolean { 
	return _in(0xf8cc1ebe, 0x0b62e29f, requestId, _r); 
}

export function datafileIsSavePending(): boolean { 
	return _in(0xbedb96a7, 0x584aa8cf, _r); 
}

export function datafileIsValidRequestId(index: number): boolean { 
	return _in(0xfccae5b9, 0x2a830878, index, _r); 
}

/**
 * Loads a User-Generated Content (UGC) file. These files can be found in "[GTA5]\data\ugc" and "[GTA5]\common\patch\ugc". They seem to follow a naming convention, most likely of "[name]_[part].ugc". See example below for usage.
 * 
 * Returns whether or not the file was successfully loaded.
 * 
 * Example:
 * DATAFILE::DATAFILE_LOAD_OFFLINE_UGC("RockstarPlaylists") // loads "rockstarplaylists_00.ugc"
 * @param filename
 * @param p1
 */
export function datafileLoadOfflineUgc(filename: string, p1: number): boolean { 
	return _in(0xc5238c01, 0x1af405e4, _ts(filename), p1, _r); 
}

export function datafileLoadOfflineUgcForAdditionalDataFile(p0: number, p1: number): boolean { 
	return _in(0xa6eef010, 0x87181edd, p0, p1, _r); 
}

export function datafileSelectActiveFile(requestId: number, p1: number): boolean { 
	return _in(0x22da6693, 0x6e0fff37, requestId, p1, _r); 
}

export function datafileSelectCreatorStats(p0: number, p1: number): boolean { 
	return _in(0x01095c95, 0xcd46b624, p0, p1, _r); 
}

export function datafileSelectUgcData(p0: number, p1: number): boolean { 
	return _in(0xa69ac4ad, 0xe82b57a4, p0, p1, _r); 
}

export function datafileSelectUgcPlayerData(p0: number, p1: number): boolean { 
	return _in(0x52818819, 0x057f2b40, p0, p1, _r); 
}

export function datafileSelectUgcStats(p0: number, p1: boolean, p2: number): boolean { 
	return _in(0x9cb0bfa7, 0xa9342c3d, p0, p1, p2, _r); 
}

export function datafileStartSaveToCloud(filename: string, p1: number): boolean { 
	return _in(0x83bcce32, 0x24735f05, _ts(filename), p1, _r); 
}

export function datafileStoreMissionHeader(p0: number): void { 
	return _in(0x2ed61456, 0x317b8178, p0); 
}

export function datafileUpdateSaveToCloud(p0: boolean): [boolean, boolean] { 
	const [retval, p0_out] = _in(0x4dfdd9eb, 0x705f8140, _i, _r);
	return [retval as boolean, p0_out as boolean]; 
}

/**
 * Adds the given requestID to the watch list.
 * @param requestId
 */
export function datafileWatchRequestId(requestId: number): void { 
	return _in(0xad6875bb, 0xc0fc899c, requestId); 
}

/**
 * see ACTIVATE_AUDIO_SLOWMO_MODE for modes
 * @param mode
 */
export function deactivateAudioSlowmoMode(mode: string): void { 
	return _in(0xddc635d5, 0xb3262c56, _ts(mode)); 
}

/**
 * Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json
 * @param interior
 * @param entitySetName
 */
export function deactivateInteriorEntitySet(interior: number, entitySetName: string): void { 
	return _in(0x420bd372, 0x89eee162, interior, _ts(entitySetName)); 
}

/**
 * Returns whether or not the specified property is set for the entity.
 * @param entity
 * @param propertyName
 */
export function decorExistOn(entity: number, propertyName: string): boolean { 
	return _in(0x05661b80, 0xa8c9165f, entity, _ts(propertyName), _r); 
}

export function decorGetBool(entity: number, propertyName: string): boolean { 
	return _in(0xdace6716, 0x63f2f5db, entity, _ts(propertyName), _r); 
}

export function decorGetFloat(entity: number, propertyName: string): number { 
	return _in(0x6524a2f1, 0x14706f43, entity, _ts(propertyName), _r, _rf); 
}

export function decorGetInt(entity: number, propertyName: string): number { 
	return _in(0xa06c969b, 0x02a97298, entity, _ts(propertyName), _r, _ri); 
}

/**
 * type: see DECOR_REGISTER
 * @param propertyName
 * @param type
 */
export function decorIsRegisteredAsType(propertyName: string, type: number): boolean { 
	return _in(0x4f14f9f8, 0x70d6fbc8, _ts(propertyName), type, _r); 
}

/**
 * https://alloc8or.re/gta5/doc/enums/eDecorType.txt
 * @param propertyName
 * @param type
 */
export function decorRegister(propertyName: string, type: number): void { 
	return _in(0x9fd90732, 0xf56403ce, _ts(propertyName), type); 
}

/**
 * Called after all decorator type initializations.
 */
export function decorRegisterLock(): void { 
	return _in(0xa9d14eea, 0x259f9248); 
}

export function decorRemove(entity: number, propertyName: string): boolean { 
	return _in(0x00ee9f29, 0x7c738720, entity, _ts(propertyName), _r); 
}

/**
 * This function sets metadata of type bool to specified entity.
 * 
 * @param entity
 * @param propertyName
 * @param value
 */
export function decorSetBool(entity: number, propertyName: string, value: boolean): boolean { 
	return _in(0x6b1e8e2e, 0xd1335b71, entity, _ts(propertyName), value, _r); 
}

export function decorSetFloat(entity: number, propertyName: string, value: number): boolean { 
	return _in(0x211ab1dd, 0x8d0f363a, entity, _ts(propertyName), _fv(value), _r); 
}

/**
 * Sets property to int.
 * @param entity
 * @param propertyName
 * @param value
 */
export function decorSetInt(entity: number, propertyName: string, value: number): boolean { 
	return _in(0x0ce3aa5e, 0x1ca19e10, entity, _ts(propertyName), value, _r); 
}

export function decorSetTime(entity: number, propertyName: string, timestamp: number): boolean { 
	return _in(0x95aed7b8, 0xe39ecaa4, entity, _ts(propertyName), timestamp, _r); 
}

export function delayMpStoreOpen(): void { 
	return _in(0x26563515, 0x0fb0d82e); 
}

export function deleteAllTrains(): void { 
	return _in(0x736a7185, 0x77f39c7d); 
}

export function deleteCheckpoint(checkpoint: number): void { 
	return _in(0xf5ed37f5, 0x4cd4d52e, checkpoint); 
}

export function deleteChildRope(ropeId: number): void { 
	return _in(0xaa5d6b18, 0x88e4db20, ropeId); 
}

/**
 * Deletes the specified entity, then sets the handle pointed to by the pointer to NULL.
 * @param entity
 */
export function deleteEntity(entity: number): number { 
	return _in(0xae3cbe5b, 0xf394c9c9, _ii(entity)); 
}

/**
 * Delete an incident with a given id.
 * 
 * =======================================================
 * Correction, I have change this to int, instead of int*
 * as it doesn't use a pointer to the createdIncident.
 * If you try it you will crash (or) freeze.
 * =======================================================
 * @param incidentId
 */
export function deleteIncident(incidentId: number): void { 
	return _in(0x556c1aa2, 0x70d5a207, incidentId); 
}

export function deleteMissionTrain(train: number): number { 
	return _in(0x5b76b14a, 0xe875c795, _ii(train)); 
}

/**
 * Deletes the specified object, then sets the handle pointed to by the pointer to NULL.
 * @param object
 */
export function deleteObject(object: number): number { 
	return _in(0x539e0ae3, 0xe6634b9f, _ii(object)); 
}

/**
 * From the b617d scripts:
 * 
 * TASK::DELETE_PATROL_ROUTE("miss_merc0");
 * TASK::DELETE_PATROL_ROUTE("miss_merc1");
 * TASK::DELETE_PATROL_ROUTE("miss_merc2");
 * TASK::DELETE_PATROL_ROUTE("miss_dock");
 * @param patrolRoute
 */
export function deletePatrolRoute(patrolRoute: string): void { 
	return _in(0x7767dd9d, 0x65e91319, _ts(patrolRoute)); 
}

/**
 * Deletes the specified ped, then sets the handle pointed to by the pointer to NULL.
 * @param ped
 */
export function deletePed(ped: number): number { 
	return _in(0x9614299d, 0xcb53e54b, _ii(ped)); 
}

export function deleteRope(ropeId: number): number { 
	return _in(0x52b48292, 0x81364649, _ii(ropeId)); 
}

export function deleteScriptVehicleGenerator(vehicleGenerator: number): void { 
	return _in(0x22102c9a, 0xbfcf125d, vehicleGenerator); 
}

export function deleteStuntJump(p0: number): void { 
	return _in(0xdc518000, 0xe39dae1f, p0); 
}

/**
 * Deletes a vehicle.
 * The vehicle must be a mission entity to delete, so call this before deleting: SET_ENTITY_AS_MISSION_ENTITY(vehicle, true, true);
 * 
 * eg how to use:
 * SET_ENTITY_AS_MISSION_ENTITY(vehicle, true, true);
 * DELETE_VEHICLE(&vehicle);
 * 
 * Deletes the specified vehicle, then sets the handle pointed to by the pointer to NULL.
 * @param vehicle
 */
export function deleteVehicle(vehicle: number): number { 
	return _in(0xea386986, 0xe786a54f, _ii(vehicle)); 
}

export function deleteWaypointsFromThisPlayer(): void { 
	return _in(0xd8e69475, 0x7bcea8e9); 
}

/**
 * Does nothing and always returns false.
 * @param amount
 */
export function depositVc(amount: number): boolean { 
	return _in(0xe260e0bb, 0x9cd995ac, amount, _r); 
}

/**
 * BOOL param indicates whether the cam should be destroyed if it belongs to the calling script.
 * @param bScriptHostCam
 */
export function destroyAllCams(bScriptHostCam: boolean): void { 
	return _in(0x8e5fb156, 0x63f79120, bScriptHostCam); 
}

/**
 * BOOL param indicates whether the cam should be destroyed if it belongs to the calling script.
 * @param cam
 * @param bScriptHostCam
 */
export function destroyCam(cam: number, bScriptHostCam: boolean): void { 
	return _in(0x865908c8, 0x1a2c22e9, cam, bScriptHostCam); 
}

export function destroyItemset(itemset: number): void { 
	return _in(0xde18220b, 0x1c183eda, itemset); 
}

/**
 * Destroys the currently active mobile phone.
 */
export function destroyMobilePhone(): void { 
	return _in(0x3bc861df, 0x703e5097); 
}

export function destroyTrackedPoint(point: number): void { 
	return _in(0xb25dc90b, 0xad56ca42, point); 
}

export function detachCam(cam: number): void { 
	return _in(0xa2fabbe8, 0x7f4bad82, cam); 
}

export function detachContainerFromHandlerFrame(vehicle: number): void { 
	return _in(0x7c0043fd, 0xff6436bc, vehicle); 
}

/**
 * If `collision` is set to true, both entities won't collide with the other until the distance between them is above 4 meters.
 * Set `dynamic` to true to keep velocity after dettaching
 * @param entity
 * @param dynamic
 * @param collision
 */
export function detachEntity(entity: number, dynamic: boolean, collision: boolean): void { 
	return _in(0x961ac54b, 0xf0613f5d, entity, dynamic, collision); 
}

export function detachEntityFromCargobob(cargobob: number, entity: number): boolean { 
	return _in(0xaf030117, 0x01811146, cargobob, entity, _r); 
}

export function detachPortablePickupFromPed(pickupObject: number): void { 
	return _in(0xcf463d1e, 0x9a0aecb1, pickupObject); 
}

export function detachRopeFromEntity(ropeId: number, entity: number): void { 
	return _in(0xbcf30269, 0x12a8647d, ropeId, entity); 
}

export function detachSynchronizedScene(sceneID: number): void { 
	return _in(0x6d38f1f0, 0x4cbb37ea, sceneID); 
}

export function detachVehicleFromAnyCargobob(vehicle: number): boolean { 
	return _in(0xadf7be45, 0x0512c12f, vehicle, _r); 
}

export function detachVehicleFromAnyTowTruck(vehicle: number): boolean { 
	return _in(0xd0e9ce05, 0xa1e68cd8, vehicle, _r); 
}

export function detachVehicleFromCargobob(vehicle: number, cargobob: number): void { 
	return _in(0x0e21d3df, 0x1051399d, vehicle, cargobob); 
}

/**
 * First two parameters swapped. Scripts verify that towTruck is the first parameter, not the second.
 * @param towTruck
 * @param vehicle
 */
export function detachVehicleFromTowTruck(towTruck: number, vehicle: number): void { 
	return _in(0xc2db6b67, 0x08350ed8, towTruck, vehicle); 
}

export function detachVehicleFromTrailer(vehicle: number): void { 
	return _in(0x90532edf, 0x0d2bdd86, vehicle); 
}

export function detonateVehiclePhoneExplosiveDevice(): void { 
	return _in(0xef49cf02, 0x70307cbe); 
}

export function disableAimCamThisUpdate(): void { 
	return _in(0x1a31fe00, 0x49e542f6); 
}

/**
 * control: see IS_CONTROL_ENABLED
 * @param control
 */
export function disableAllControlActions(control: number): void { 
	return _in(0x5f4b6931, 0x816e599b, control); 
}

export function disableCamCollisionForObject(entity: number): void { 
	return _in(0x49482f9f, 0xcd825aaa, entity); 
}

export function disableCameraViewModeCycle(player: number): void { 
	return _in(0x5501b7a5, 0xcdb79d37, player); 
}

export function disableCinematicBonnetCameraThisUpdate(): void { 
	return _in(0xadff1b2a, 0x555f5fba); 
}

export function disableCinematicSlowMoThisUpdate(): boolean { 
	return _in(0x17fca719, 0x9a530203, _r); 
}

export function disableCinematicVehicleIdleModeThisUpdate(): void { 
	return _in(0x62ecfcfd, 0xee7885d6); 
}

export function disableCompositeShotgunDecals(toggle: boolean): void { 
	return _in(0x0e4299c5, 0x49f0d1f1, toggle); 
}

/**
 * control: see IS_CONTROL_ENABLED
 * @param control
 * @param action
 * @param disableRelatedActions
 */
export function disableControlAction(control: number, action: number, disableRelatedActions: boolean): void { 
	return _in(0xfe99b66d, 0x079cf6bc, control, action, disableRelatedActions); 
}

export function disableDownwashPtfx(toggle: boolean): void { 
	return _in(0x5f6df3d9, 0x2271e8a1, toggle); 
}

/**
 * Sets some flag on cinematic camera
 */
export function disableFirstPersonCameraWaterClippingTestThisUpdate(): void { 
	return _in(0xb1381b97, 0xf70c7b30); 
}

export function disableFirstPersonFlashEffectThisUpdate(): void { 
	return _in(0x59424bd7, 0x5174c9b1); 
}

export function disableFrontendThisFrame(): void { 
	return _in(0x6d3465a7, 0x3092f0e6); 
}

/**
 * Shows the crosshair even if it wouldn't show normally. Only works for one frame, so make sure to call it repeatedly.
 */
export function disableGameplayCamAltitudeFovScalingThisUpdate(): void { 
	return _in(0xea7f0ad7, 0xe9ba676f); 
}

export function disableHdtexThisFrame(): void { 
	return _in(0xc35a6d07, 0xc93802b2); 
}

export function disableHeadBlendPaletteColor(ped: number): void { 
	return _in(0xa21c1185, 0x53bbdf02, ped); 
}

/**
 * The game by default has 5 hospital respawn points. Disabling them all will cause the player to respawn at the last position they were.
 * @param hospitalIndex
 * @param toggle
 */
export function disableHospitalRestart(hospitalIndex: number, toggle: boolean): void { 
	return _in(0xc8535819, 0xc450eba8, hospitalIndex, toggle); 
}

export function disableInWaterPtfx(toggle: boolean): void { 
	return _in(0xcfd16f0d, 0xb5a3535c, toggle); 
}

export function disableIndividualPlanePropeller(vehicle: number, propeller: number): void { 
	return _in(0x500873a4, 0x5724c863, vehicle, propeller); 
}

/**
 * Example:
 * This removes the interior from the strip club and when trying to walk inside the player just falls:
 * 
 * INTERIOR::DISABLE_INTERIOR(118018, true);
 * @param interior
 * @param toggle
 */
export function disableInterior(interior: number, toggle: boolean): void { 
	return _in(0x61709414, 0x19d7d8ec, interior, toggle); 
}

export function disableMetroSystem(toggle: boolean): void { 
	return _in(0x9e6542f0, 0xce8e70a3, toggle); 
}

/**
 * Resets the extra timecycle modifier strength normally set with 0x2C328AF17210F009
 */
export function disableMoonCycleOverride(): void { 
	return _in(0x2bf72ad5, 0xb41aa739); 
}

/**
 * Set toggle true to disable navmesh.
 * Set toggle false to enable navmesh.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param toggle
 */
export function disableNavmeshInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, toggle: boolean): void { 
	return _in(0x4c8872d8, 0xcdbe1b8b, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), toggle); 
}

export function disableNearClipScanThisUpdate(): void { 
	return _in(0x5a43c76f, 0x7fc7ba5f); 
}

export function disableOcclusionThisFrame(): void { 
	return _in(0x3669f1b1, 0x98dcaa4f); 
}

/**
 * Disables first person camera for the current frame.
 * 
 * Found in decompiled scripts:
 * GRAPHICS::DRAW_DEBUG_TEXT_2D("Disabling First Person Cam", 0.5, 0.8, 0.0, 0, 0, 255, 255);
 * CAM::DISABLE_ON_FOOT_FIRST_PERSON_VIEW_THIS_UPDATE();
 */
export function disableOnFootFirstPersonViewThisUpdate(): void { 
	return _in(0xde2ef5da, 0x284cc8df); 
}

export function disablePausemenuSpinner(p0: boolean): void { 
	return _in(0x9245e810, 0x72704b8a, p0); 
}

export function disablePedHeatscaleOverride(ped: number): void { 
	return _in(0x600048c6, 0x0d5c2c51, ped); 
}

export function disablePedInjuredOnGroundBehaviour(ped: number): void { 
	return _in(0x733c87d4, 0xce22bea2, ped); 
}

export function disablePedPainAudio(ped: number, toggle: boolean): void { 
	return _in(0xa9a41c1e, 0x940fb0e8, ped, toggle); 
}

export function disablePlaneAileron(vehicle: number, p1: boolean, p2: boolean): void { 
	return _in(0x23428fc5, 0x3c60919c, vehicle, p1, p2); 
}

/**
 * Inhibits the player from using any method of combat including melee and firearms.
 * 
 * NOTE: Only disables the firing for one frame
 * @param player
 * @param toggle
 */
export function disablePlayerFiring(player: number, toggle: boolean): void { 
	return _in(0x5e6cc076, 0x46bbeab8, player, toggle); 
}

/**
 * Needs to be called every frame.
 * @param player
 */
export function disablePlayerHealthRecharge(player: number): void { 
	return _in(0xbcb06442, 0xf7e52666, player); 
}

/**
 * Used only once in R* scripts (freemode.ysc).
 */
export function disablePlayerThrowGrenadeWhileUsingGun(): void { 
	return _in(0xb885852c, 0x39cc265d); 
}

export function disablePlayerVehicleRewards(player: number): void { 
	return _in(0xc142be3b, 0xb9ce125f, player); 
}

/**
 * Disables the spawn point at the police house on the specified index.
 * 
 * policeIndex: The police house index.
 * toggle: true to enable the spawn point, false to disable.
 * 
 * - Nacorpio
 * @param policeIndex
 * @param toggle
 */
export function disablePoliceRestart(policeIndex: number, toggle: boolean): void { 
	return _in(0x23285ded, 0x6ebd7ea3, policeIndex, toggle); 
}

export function disableProcobjCreation(): void { 
	return _in(0x1612c45f, 0x9e3e0d44); 
}

export function disableRegionVfx(p0: number): void { 
	return _in(0xefd97ff4, 0x7b745b8d, p0); 
}

/**
 * Does nothing (it's a nullsub).
 */
export function disableScreenDimmingThisFrame(): void { 
	return _in(0x23227df0, 0xb2115469); 
}

export function disableScreenblurFade(): void { 
	return _in(0xde812394, 0x37e8c5a8); 
}

export function disableScriptBrainSet(brainSet: number): void { 
	return _in(0x14d8518e, 0x9760f08f, brainSet); 
}

export function disableScuffDecals(toggle: boolean): void { 
	return _in(0x02369d5c, 0x8a51fdcf, toggle); 
}

export function disableStuntJumpSet(p0: number): void { 
	return _in(0xa5272ebe, 0xdd4747f6, p0); 
}

export function disableSwitchOutroFx(): void { 
	return _in(0xbd605b8e, 0x0e18b3bb); 
}

/**
 * Sets a flag. A valid id is 0x157DC10D
 * @param id
 * @param toggle
 */
export function disableTidyingUpInGarage(id: number, toggle: boolean): void { 
	return _in(0x659f9d71, 0xf52843f8, id, toggle); 
}

/**
 * Adds some kind of shadow to the vehicle.
 * 
 * p1 and p2 use values from 0-255 and both make the shadow darker the lower the value is. -1 disables the effect.
 * @param vehicle
 * @param p1
 * @param p2
 */
export function disableVehcileDynamicAmbientScales(vehicle: number, p1: number, p2: number): void { 
	return _in(0xf0e4ba16, 0xd1db546c, vehicle, p1, p2); 
}

export function disableVehicleDistantlights(toggle: boolean): void { 
	return _in(0xc9f98ac1, 0x884e73a2, toggle); 
}

export function disableVehicleExplosionBreakOffParts(): void { 
	return _in(0xf25e02cb, 0x9c5818f8); 
}

export function disableVehicleTurretMovementThisFrame(vehicle: number): void { 
	return _in(0x32caedf2, 0x4a583345, vehicle); 
}

/**
 * Full list of weapons by DurtyFree (Search for VEHICLE_*): https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param disabled
 * @param weaponHash
 * @param vehicle
 * @param owner
 */
export function disableVehicleWeapon(disabled: boolean, weaponHash: number, vehicle: number, owner: number): void { 
	return _in(0xf4fc6a6f, 0x67d8d856, disabled, _ch(weaponHash), vehicle, owner); 
}

export function displayAmmoThisFrame(display: boolean): void { 
	return _in(0xa5e78ba2, 0xb1331c55, display); 
}

export function displayAreaName(toggle: boolean): void { 
	return _in(0x276b6ce3, 0x69c33678, toggle); 
}

/**
 * "DISPLAY_CASH(false);" makes the cash amount render on the screen when appropriate
 * "DISPLAY_CASH(true);" disables cash amount rendering
 * @param toggle
 */
export function displayCash(toggle: boolean): void { 
	return _in(0x96dec8d5, 0x430208b7, toggle); 
}

/**
 * The messages are localized strings.
 * Examples:
 * "No_bus_money"
 * "Enter_bus"
 * "Tour_help"
 * "LETTERS_HELP2"
 * "Dummy"
 * 
 * **The bool appears to always be false (if it even is a bool, as it's represented by a zero)**
 * --------
 * p1 doesn't seem to make a difference, regardless of the state it's in.
 * 
 * 
 * picture of where on the screen this is displayed?
 * @param message
 * @param p1
 */
export function displayHelpTextThisFrame(message: string, p1: boolean): void { 
	return _in(0x960c9ff8, 0xf616e41c, _ts(message), p1); 
}

/**
 * If Hud should be displayed
 * @param toggle
 */
export function displayHud(toggle: boolean): void { 
	return _in(0xa6294919, 0xe56ff02a, toggle); 
}

/**
 * Enables drawing some hud components, such as help labels, this frame, when the player is dead.
 */
export function displayHudWhenNotInStateOfPlayThisFrame(): void { 
	return _in(0x7669f9e3, 0x9dc17063); 
}

export function displayHudWhenPausedThisFrame(): void { 
	return _in(0x402f9ed6, 0x2087e898); 
}

/**
 * sfink: note, p0 is set to 6 for PC platform in at least 1 script, or to `unk::_get_ui_language_id() == 0` otherwise.
 * 
 * NOTE: windowTitle uses text labels, and an invalid value will display nothing.
 * 
 * www.gtaforums.com/topic/788343-vrel-script-hook-v/?p=1067380474
 * 
 * windowTitle's
 * -----------------
 * CELL_EMAIL_BOD  =   "Enter your Eyefind message"
 * CELL_EMAIL_BODE =   "Message too long. Try again"
 * CELL_EMAIL_BODF    =   "Forbidden message. Try again"
 * CELL_EMAIL_SOD    =   "Enter your Eyefind subject"
 * CELL_EMAIL_SODE =   "Subject too long. Try again"
 * CELL_EMAIL_SODF    =   "Forbidden text. Try again"
 * CELL_EMASH_BOD   =   "Enter your Eyefind message"
 * CELL_EMASH_BODE =   "Message too long. Try again"
 * CELL_EMASH_BODF    =   "Forbidden message. Try again"
 * CELL_EMASH_SOD    =   "Enter your Eyefind subject"
 * CELL_EMASH_SODE =   "Subject too long. Try again"
 * CELL_EMASH_SODF    =   "Forbidden Text. Try again"
 * FMMC_KEY_TIP10   =   "Enter Synopsis"
 * FMMC_KEY_TIP12  =   "Enter Custom Team Name"
 * FMMC_KEY_TIP12F =   "Forbidden Text. Try again"
 * FMMC_KEY_TIP12N  =   "Custom Team Name"
 * FMMC_KEY_TIP8 =   "Enter Message"
 * FMMC_KEY_TIP8F   =   "Forbidden Text. Try again"
 * FMMC_KEY_TIP8FS  =   "Invalid Message. Try again"
 * FMMC_KEY_TIP8S  =   "Enter Message"
 * FMMC_KEY_TIP9    =   "Enter Outfit Name"
 * FMMC_KEY_TIP9F   =   "Invalid Outfit Name. Try again"
 * FMMC_KEY_TIP9N  =   "Outfit Name"
 * PM_NAME_CHALL  =   "Enter Challenge Name"
 * @param p0
 * @param windowTitle
 * @param p2
 * @param defaultText
 * @param defaultConcat1
 * @param defaultConcat2
 * @param defaultConcat3
 * @param maxInputLength
 */
export function displayOnscreenKeyboard(p0: number, windowTitle: string, p2: string, defaultText: string, defaultConcat1: string, defaultConcat2: string, defaultConcat3: string, maxInputLength: number): void { 
	return _in(0x00dc833f, 0x2568dbf6, p0, _ts(windowTitle), _ts(p2), _ts(defaultText), _ts(defaultConcat1), _ts(defaultConcat2), _ts(defaultConcat3), maxInputLength); 
}

export function displayOnscreenKeyboardWithLongerInitialString(p0: number, windowTitle: string, defaultText: string, defaultConcat1: string, defaultConcat2: string, defaultConcat3: string, defaultConcat4: string, defaultConcat5: string, defaultConcat6: string, defaultConcat7: string, maxInputLength: number): number { 
	return _in(0xca78cfa0, 0x366592fe, p0, _ts(windowTitle), _i, _ts(defaultText), _ts(defaultConcat1), _ts(defaultConcat2), _ts(defaultConcat3), _ts(defaultConcat4), _ts(defaultConcat5), _ts(defaultConcat6), _ts(defaultConcat7), maxInputLength); 
}

/**
 * Toggles whether or not name labels are shown on the expanded minimap next to player blips, like in GTA:O.
 * Doesn't need to be called every frame.
 * Preview: https://i.imgur.com/DfqKWfJ.png
 * 
 * Make sure to call SET_BLIP_CATEGORY with index 7 for this to work on the desired blip.
 * @param toggle
 */
export function displayPlayerNameTagsOnBlips(toggle: boolean): void { 
	return _in(0x82cedc33, 0x687e1f50, toggle); 
}

/**
 * If Minimap / Radar should be displayed.
 * @param toggle
 */
export function displayRadar(toggle: boolean): void { 
	return _in(0xa0ebb943, 0xc300e693, toggle); 
}

/**
 * Displays the crosshair for this frame.
 */
export function displaySniperScopeThisFrame(): void { 
	return _in(0x73115226, 0xf4814e62); 
}

/**
 * Purpose of the BOOL currently unknown.
 * Both, true and false, work
 * @param p0
 */
export function displaySystemSigninUi(p0: boolean): void { 
	return _in(0x94dd7888, 0xc10a979e, p0); 
}

/**
 * If value is set to true, and ambient siren sound will be played.
 * Appears to enable/disable an audio flag.
 * @param value
 */
export function distantCopCarSirens(value: boolean): void { 
	return _in(0x552369f5, 0x49563ad5, value); 
}

/**
 * This function is hard-coded to always return 1.
 */
export function dlcCheckCloudDataCorrect(): boolean { 
	return _in(0xf2e07819, 0xef1a5289, _r); 
}

/**
 * This function is hard-coded to always return 1.
 */
export function dlcCheckCompatPackConfiguration(): boolean { 
	return _in(0xa213b11d, 0xff526300, _r); 
}

export function doAutoSave(): void { 
	return _in(0x50eeaad8, 0x6232ee55); 
}

/**
 * Fades the screen in.
 * 
 * duration: The time the fade should take, in milliseconds.
 * @param duration
 */
export function doScreenFadeIn(duration: number): void { 
	return _in(0xd4e8e249, 0x55024033, duration); 
}

/**
 * Fades the screen out.
 * 
 * duration: The time the fade should take, in milliseconds.
 * @param duration
 */
export function doScreenFadeOut(duration: number): void { 
	return _in(0x891b5b39, 0xac6302af, duration); 
}

export function doesAirDefenceSphereExist(zoneId: number): boolean { 
	return _in(0xcd79a550, 0x999d7d4f, zoneId, _r); 
}

/**
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param animDict
 */
export function doesAnimDictExist(animDict: string): boolean { 
	return _in(0x2da49c3b, 0x79856961, _ts(animDict), _r); 
}

export function doesBlipExist(blip: number): boolean { 
	return _in(0xa6db27d1, 0x9ecbb7da, blip, _r); 
}

export function doesBlipHaveGpsRoute(blip: number): boolean { 
	return _in(0xdd2238f5, 0x7b977751, blip, _r); 
}

/**
 * Returns whether or not the passed camera handle exists.
 * @param cam
 */
export function doesCamExist(cam: number): boolean { 
	return _in(0xa7a93217, 0x0592b50e, cam, _r); 
}

/**
 * Returns true only when the hook is active, will return false if the magnet is active
 * @param cargobob
 */
export function doesCargobobHavePickUpRope(cargobob: number): boolean { 
	return _in(0x1821d91a, 0xd4b56108, cargobob, _r); 
}

/**
 * Returns true only when the magnet is active, will return false if the hook is active
 * @param cargobob
 */
export function doesCargobobHavePickupMagnet(cargobob: number): boolean { 
	return _in(0x6e08bf5b, 0x3722bac9, cargobob, _r); 
}

/**
 * Checks if the ped can play the speech or has the speech file, p2 is usually false.
 * @param ped
 * @param speechName
 * @param p2
 */
export function doesContextExistForThisPed(ped: number, speechName: string, p2: boolean): boolean { 
	return _in(0x49b99bf3, 0xfda89a7a, ped, _ts(speechName), p2, _r); 
}

export function doesCurrentPedComponentHaveRestrictionTag(ped: number, componentId: number, restrictionTagHash: number): boolean { 
	return _in(0x7796b21b, 0x76221bc5, ped, componentId, _ch(restrictionTagHash), _r); 
}

export function doesCurrentPedPropHaveRestrictionTag(ped: number, componentId: number, restrictionTagHash: number): boolean { 
	return _in(0xd726bab4, 0x554da580, ped, componentId, _ch(restrictionTagHash), _r); 
}

export function doesCutsceneEntityExist(cutsceneEntName: string, modelHash: number): boolean { 
	return _in(0x499ef20c, 0x5db25c59, _ts(cutsceneEntName), _ch(modelHash), _r); 
}

export function doesCutsceneHandleExist(cutsceneHandle: number): number { 
	return _in(0x4fcd976d, 0xa686580c, cutsceneHandle, _r, _ri); 
}

export function doesEntityBelongToThisScript(entity: number, p1: boolean): boolean { 
	return _in(0xdde6df5a, 0xe89981d2, entity, p1, _r); 
}

/**
 * Checks whether an entity exists in the game world.
 * @param entity
 */
export function doesEntityExist(entity: number): boolean { 
	return _in(0x7239b21a, 0x38f536ba, entity, _r); 
}

export function doesEntityHaveAnimDirector(entity: number): boolean { 
	return _in(0x2158e81a, 0x6af65ea9, entity, _r); 
}

export function doesEntityHaveDrawable(entity: number): boolean { 
	return _in(0x060d6e96, 0xf8b8e48d, entity, _r); 
}

export function doesEntityHavePhysics(entity: number): boolean { 
	return _in(0xda95ea33, 0x17cc5064, entity, _r); 
}

export function doesEntityHaveSkeleton(entity: number): boolean { 
	return _in(0x764eb968, 0x74effdc1, entity, _r); 
}

/**
 * Checks via CVehicleModelInfo
 * @param vehicle
 * @param extraId
 */
export function doesExtraExist(vehicle: number, extraId: number): boolean { 
	return _in(0x1262d557, 0x92428154, vehicle, extraId, _r); 
}

export function doesGroupExist(groupId: number): boolean { 
	return _in(0x7c6b0c22, 0xf9f40bbe, groupId, _r); 
}

export function doesLatestBriefStringExist(p0: number): boolean { 
	return _in(0x5e657ef1, 0x099edd65, p0, _r); 
}

export function doesNavmeshBlockingObjectExist(p0: number): boolean { 
	return _in(0x0eaeb0db, 0x4b132399, p0, _r); 
}

/**
 * p5 is usually 0.
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param hash
 * @param p5
 */
export function doesObjectOfTypeExistAtCoords(x: number, y: number, z: number, radius: number, hash: number, p5: boolean): boolean { 
	return _in(0xbfa48e2f, 0xf417213f, _fv(x), _fv(y), _fv(z), _fv(radius), _ch(hash), p5, _r); 
}

export function doesParticleFxLoopedExist(ptfxHandle: number): boolean { 
	return _in(0x74afef0d, 0x2e1e409b, ptfxHandle, _r); 
}

export function doesPedHaveAiBlip(ped: number): boolean { 
	return _in(0x15b8ecf8, 0x44ee67ed, ped, _r); 
}

export function doesPickupExist(pickup: number): boolean { 
	return _in(0xafc1ca75, 0xad4074d1, pickup, _r); 
}

export function doesPickupObjectExist(pickupObject: number): boolean { 
	return _in(0xd9efb6db, 0xf7daaea3, pickupObject, _r); 
}

/**
 * Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
 * @param pickupHash
 * @param x
 * @param y
 * @param z
 * @param radius
 */
export function doesPickupOfTypeExistInArea(pickupHash: number, x: number, y: number, z: number, radius: number): boolean { 
	return _in(0xf9c36251, 0xf6e48e33, _ch(pickupHash), _fv(x), _fv(y), _fv(z), _fv(radius), _r); 
}

export function doesPlayerVehHaveRadio(): boolean { 
	return _in(0x109697e2, 0xffbac8a1, _r); 
}

export function doesPopMultiplierAreaExist(id: number): boolean { 
	return _in(0x1327e2fe, 0x9746baee, id, _r); 
}

export function doesPopMultiplierSphereExist(id: number): boolean { 
	return _in(0x171bafb3, 0xc60389f4, id, _r); 
}

/**
 * Returns true if a destructible object with this handle exists, false otherwise.
 * @param object
 */
export function doesRayfireMapObjectExist(object: number): boolean { 
	return _in(0x52af537a, 0x0c5b8aad, object, _r); 
}

export function doesRelationshipGroupExist(groupHash: number): boolean { 
	return _in(0xcc6e3b6b, 0xb69501f1, _ch(groupHash), _r); 
}

export function doesRopeExist(ropeId: number): [boolean, number] { 
	const [retval, ropeId_out] = _in(0xfd5448be, 0x3111ed96, _ii(ropeId), _r);
	return [retval as boolean, ropeId_out as number]; 
}

export function doesScenarioBlockingAreaExists(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): boolean { 
	return _in(0x8a24b067, 0xd175a7bd, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _r); 
}

export function doesScenarioExistInArea(x: number, y: number, z: number, radius: number, mustBeFree: boolean): boolean { 
	return _in(0x5a59271f, 0xfadd33c1, _fv(x), _fv(y), _fv(z), _fv(radius), mustBeFree, _r); 
}

/**
 * Full list of scenario groups used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenarioGroupNames.json
 * Occurrences in the b617d scripts:
 * 
 * "ARMY_GUARD",
 * "ARMY_HELI",
 * "Cinema_Downtown",
 * "Cinema_Morningwood",
 * "Cinema_Textile",
 * "City_Banks",
 * "Countryside_Banks",
 * "DEALERSHIP",
 * "GRAPESEED_PLANES",
 * "KORTZ_SECURITY",
 * "LOST_BIKERS",
 * "LSA_Planes",
 * "LSA_Planes",
 * "MP_POLICE",
 * "Observatory_Bikers",
 * "POLICE_POUND1",
 * "POLICE_POUND2",
 * "POLICE_POUND3",
 * "POLICE_POUND4",
 * "POLICE_POUND5"
 * "QUARRY",
 * "SANDY_PLANES",
 * "SCRAP_SECURITY",
 * "SEW_MACHINE",
 * "SOLOMON_GATE",
 * "Triathlon_1_Start",
 * "Triathlon_2_Start",
 * "Triathlon_3_Start"
 * 
 * Sometimes used with IS_SCENARIO_GROUP_ENABLED:
 * if (TASK::DOES_SCENARIO_GROUP_EXIST("Observatory_Bikers") && (!TASK::IS_SCENARIO_GROUP_ENABLED("Observatory_Bikers"))) {
 * else if (TASK::IS_SCENARIO_GROUP_ENABLED("BLIMP")) {
 * 
 * @param scenarioGroup
 */
export function doesScenarioGroupExist(scenarioGroup: string): boolean { 
	return _in(0xf9034c13, 0x6c9e00d3, _ts(scenarioGroup), _r); 
}

export function doesScenarioOfTypeExistInArea(x: number, y: number, z: number, scenarioName: string, radius: number, mustBeFree: boolean): boolean { 
	return _in(0x0a9d0c2a, 0x3bbc86c1, _fv(x), _fv(y), _fv(z), _ts(scenarioName), _fv(radius), mustBeFree, _r); 
}

export function doesScriptExist(scriptName: string): boolean { 
	return _in(0xfc04745f, 0xbe67c19a, _ts(scriptName), _r); 
}

export function doesScriptOwnRope(ropeId: number): boolean { 
	return _in(0x271c9d3a, 0xca5d6409, ropeId, _r); 
}

export function doesScriptVehicleGeneratorExist(vehicleGenerator: number): boolean { 
	return _in(0xf6086bc8, 0x36400876, vehicleGenerator, _r); 
}

export function doesScriptWithNameHashExist(scriptHash: number): boolean { 
	return _in(0xf86aa3c5, 0x6ba31381, _ch(scriptHash), _r); 
}

/**
 * Checks if there is a cover point at position
 * @param x
 * @param y
 * @param z
 */
export function doesScriptedCoverPointExistAtCoords(x: number, y: number, z: number): boolean { 
	return _in(0xa98b8e3c, 0x088e5a31, _fv(x), _fv(y), _fv(z), _r); 
}

/**
 * Full list of restriction tags by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedApparelRestrictionTags.json
 * 
 * componentId/last parameter seems to be unused.
 * @param componentHash
 * @param restrictionTagHash
 * @param componentId
 */
export function doesShopPedApparelHaveRestrictionTag(componentHash: number, restrictionTagHash: number, componentId: number): boolean { 
	return _in(0x341de7ed, 0x1d2a1bfd, _ch(componentHash), _ch(restrictionTagHash), componentId, _r); 
}

export function doesTextBlockExist(gxt: string): boolean { 
	return _in(0x1c7302e7, 0x25259789, _ts(gxt), _r); 
}

/**
 * Checks if the passed gxt name exists in the game files.
 * @param gxt
 */
export function doesTextLabelExist(gxt: string): boolean { 
	return _in(0xac09ca97, 0x3c564252, _ts(gxt), _r); 
}

/**
 * This function is hard-coded to always return 0.
 * @param p0
 */
export function doesThisPhotoSlotContainAValidPhoto(p0: number): boolean { 
	return _in(0xe791df1f, 0x73ed2c8b, p0, _r); 
}

/**
 * Returns true if the vehicle has the FLAG_ALLOWS_RAPPEL flag set.
 * @param vehicle
 */
export function doesVehicleAllowRappel(vehicle: number): boolean { 
	return _in(0x4e417c54, 0x7182c84d, vehicle, _r); 
}

export function doesVehicleExistWithDecorator(decorator: string): number { 
	return _in(0x956b409b, 0x984d9bf7, _ts(decorator), _r, _ri); 
}

export function doesVehicleHaveCrewEmblem(vehicle: number, p1: number): boolean { 
	return _in(0x060d935d, 0x3981a275, vehicle, p1, _r); 
}

export function doesVehicleHaveRoof(vehicle: number): boolean { 
	return _in(0x8ac862b0, 0xb32c5b80, vehicle, _r); 
}

export function doesVehicleHaveSearchlight(vehicle: number): boolean { 
	return _in(0x99015ed7, 0xdbea5113, vehicle, _r); 
}

/**
 * Maximum amount of vehicles with vehicle stuck check appears to be 16.
 * @param vehicle
 */
export function doesVehicleHaveStuckVehicleCheck(vehicle: number): boolean { 
	return _in(0x57e4c39d, 0xe5ee8470, vehicle, _r); 
}

export function doesVehicleHaveWeapons(vehicle: number): boolean { 
	return _in(0x25ecb9f8, 0x017d98e0, vehicle, _r); 
}

/**
 * Full list of weapons & components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param weaponHash
 * @param componentHash
 */
export function doesWeaponTakeWeaponComponent(weaponHash: number, componentHash: number): boolean { 
	return _in(0x5cee3df5, 0x69cecab0, _ch(weaponHash), _ch(componentHash), _r); 
}

export function dontRenderInGameUi(p0: boolean): void { 
	return _in(0x22a249a5, 0x3034450a, p0); 
}

/**
 * When calling this, the current frame will have the players "arrow icon" be focused on the dead center of the radar.
 */
export function dontTiltMinimapThisFrame(): void { 
	return _in(0x6d14bfdc, 0x33b34f55); 
}

export function dontZoomMinimapWhenRunningThisFrame(): void { 
	return _in(0x89da85d9, 0x49ce57a0); 
}

export function dontZoomMinimapWhenSnipingThisFrame(): void { 
	return _in(0x55f5a5f0, 0x7134de60); 
}

/**
 * Search radius: 0.5
 * @param x
 * @param y
 * @param z
 * @param modelHash
 * @param outDoorHash
 */
export function doorSystemFindExistingDoor(x: number, y: number, z: number, modelHash: number, outDoorHash: number): [boolean, number] { 
	const [retval, outDoorHash_out] = _in(0x589f80b3, 0x25cc82c5, _fv(x), _fv(y), _fv(z), _ch(modelHash), _i, _r);
	return [retval as boolean, outDoorHash_out as number]; 
}

export function doorSystemGetAutomaticDistance(doorHash: number): number { 
	return _in(0xe851471a, 0xefc3374f, _ch(doorHash), _r, _rf); 
}

export function doorSystemGetDoorPendingState(doorHash: number): number { 
	return _in(0x4bc28544, 0x78f3a749, _ch(doorHash), _r, _ri); 
}

export function doorSystemGetDoorState(doorHash: number): number { 
	return _in(0x160aa1b3, 0x2f6139b8, _ch(doorHash), _r, _ri); 
}

export function doorSystemGetIsPhysicsLoaded(p0: number): boolean { 
	return _in(0xdf97cdd4, 0xfc08fd34, p0, _r); 
}

export function doorSystemGetIsSpringRemoved(doorHash: number): boolean { 
	return _in(0x8562fd8a, 0xb1e94d39, _ch(doorHash), _r); 
}

export function doorSystemGetOpenRatio(doorHash: number): number { 
	return _in(0x65499865, 0xfca6e5ec, _ch(doorHash), _r, _rf); 
}

/**
 * `forceUpdate` on true invokes DOOR_SYSTEM_SET_DOOR_STATE otherwise requestDoor is unused.
 * @param doorHash
 * @param distance
 * @param requestDoor
 * @param forceUpdate
 */
export function doorSystemSetAutomaticDistance(doorHash: number, distance: number, requestDoor: boolean, forceUpdate: boolean): void { 
	return _in(0x9ba001cb, 0x45cbf627, _ch(doorHash), _fv(distance), requestDoor, forceUpdate); 
}

/**
 * Includes networking check: ownership vs. or the door itself **isn't** networked.
 * `forceUpdate` on true invokes DOOR_SYSTEM_SET_DOOR_STATE otherwise requestDoor is unused.
 * @param doorHash
 * @param rate
 * @param requestDoor
 * @param forceUpdate
 */
export function doorSystemSetAutomaticRate(doorHash: number, rate: number, requestDoor: boolean, forceUpdate: boolean): void { 
	return _in(0x03c27e13, 0xb42a0e82, _ch(doorHash), _fv(rate), requestDoor, forceUpdate); 
}

/**
 * Some property related to gates. Native name between ``DOOR_SYSTEM_SET_AUTOMATIC_RATE`` and ``DOOR_SYSTEM_SET_DOOR_STATE``.
 * @param doorHash
 * @param p1
 */
export function doorSystemSetDoorOpenForRaces(doorHash: number, p1: boolean): void { 
	return _in(0xa85a2158, 0x2451e951, _ch(doorHash), p1); 
}

/**
 * Lockstates not applied and CNetObjDoor's not created until DOOR_SYSTEM_GET_IS_PHYSICS_LOADED returns true.
 * `requestDoor` on true, and when door system is configured to, i.e., "persists w/o netobj", generate a CRequestDoorEvent.
 * `forceUpdate` on true, forces an update on the door system (same path as netObjDoor_applyDoorStuff)
 * Door lock states:
 * 0: UNLOCKED
 * 1: LOCKED
 * 2: DOORSTATE_FORCE_LOCKED_UNTIL_OUT_OF_AREA
 * 3: DOORSTATE_FORCE_UNLOCKED_THIS_FRAME
 * 4: DOORSTATE_FORCE_LOCKED_THIS_FRAME
 * 5: DOORSTATE_FORCE_OPEN_THIS_FRAME
 * 6: DOORSTATE_FORCE_CLOSED_THIS_FRAME
 * @param doorHash
 * @param state
 * @param requestDoor
 * @param forceUpdate
 */
export function doorSystemSetDoorState(doorHash: number, state: number, requestDoor: boolean, forceUpdate: boolean): void { 
	return _in(0x6bab9442, 0x830c7f53, _ch(doorHash), state, requestDoor, forceUpdate); 
}

/**
 * Includes networking check: ownership vs. or the door itself **isn't** networked.
 * @param doorHash
 * @param toggle
 */
export function doorSystemSetHoldOpen(doorHash: number, toggle: boolean): void { 
	return _in(0xd9b71952, 0xf78a2640, _ch(doorHash), toggle); 
}

/**
 * Sets the ajar angle of a door.
 * Ranges from -1.0 to 1.0, and 0.0 is closed / default.
 * `forceUpdate` on true invokes DOOR_SYSTEM_SET_DOOR_STATE otherwise requestDoor is unused.
 * @param doorHash
 * @param ajar
 * @param requestDoor
 * @param forceUpdate
 */
export function doorSystemSetOpenRatio(doorHash: number, ajar: number, requestDoor: boolean, forceUpdate: boolean): void { 
	return _in(0xb6e6fba9, 0x5c7324ac, _ch(doorHash), _fv(ajar), requestDoor, forceUpdate); 
}

/**
 * Includes networking check: ownership vs. or the door itself **isn't** networked.
 * `forceUpdate` on true invokes DOOR_SYSTEM_SET_DOOR_STATE otherwise requestDoor is unused.
 * @param doorHash
 * @param removed
 * @param requestDoor
 * @param forceUpdate
 */
export function doorSystemSetSpringRemoved(doorHash: number, removed: boolean, requestDoor: boolean, forceUpdate: boolean): void { 
	return _in(0xc485e07e, 0x4f0b7958, _ch(doorHash), removed, requestDoor, forceUpdate); 
}

export function drawBinkMovie(binkMovie: number, p1: number, p2: number, p3: number, p4: number, p5: number, r: number, g: number, b: number, a: number): void { 
	return _in(0x7118e83e, 0xeb9f7238, binkMovie, _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), r, g, b, a); 
}

/**
 * x,y,z = start pos
 * x2,y2,z2 = end pos
 * 
 * Draw's a 3D Box between the two x,y,z coords.
 * --------------
 * Keep in mind that the edges of the box do only align to the worlds base-vectors. Therefore something like rotation cannot be applied. That means this function is pretty much useless, unless you want a static unicolor box somewhere.
 * I recommend using a predefined function to call this.
 * [VB.NET]
 * Public Sub DrawBox(a As Vector3, b As Vector3, col As Color)
 * [Function].Call(Hash.DRAW_BOX,a.X, a.Y, a.Z,b.X, b.Y, b.Z,col.R, col.G, col.B, col.A)
 * End Sub
 * 
 * [C#]
 * public void DrawBox(Vector3 a, Vector3 b, Color col)
 * {
 * Function.Call(Hash.DRAW_BOX,a.X, a.Y, a.Z,b.X, b.Y, b.Z,col.R, col.G, col.B, col.A);
 * }
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param red
 * @param green
 * @param blue
 * @param alpha
 */
export function drawBox(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, red: number, green: number, blue: number, alpha: number): void { 
	return _in(0xd3a9971c, 0xadac7252, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), red, green, blue, alpha); 
}

export function drawDebugBox(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, r: number, g: number, b: number, alpha: number): void { 
	return _in(0x083a2ca4, 0xf2e573bd, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), r, g, b, alpha); 
}

/**
 * NOTE: Debugging functions are not present in the retail version of the game.
 * @param x
 * @param y
 * @param z
 * @param size
 * @param red
 * @param green
 * @param blue
 * @param alpha
 */
export function drawDebugCross(x: number, y: number, z: number, size: number, red: number, green: number, blue: number, alpha: number): void { 
	return _in(0x73b11896, 0x23049839, _fv(x), _fv(y), _fv(z), _fv(size), red, green, blue, alpha); 
}

export function drawDebugLine(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, r: number, g: number, b: number, alpha: number): void { 
	return _in(0x7fdfade6, 0x76aa3cb0, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), r, g, b, alpha); 
}

/**
 * NOTE: Debugging functions are not present in the retail version of the game.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param r1
 * @param g1
 * @param b1
 * @param r2
 * @param g2
 * @param b2
 * @param alpha1
 * @param alpha2
 */
export function drawDebugLineWithTwoColours(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, r1: number, g1: number, b1: number, r2: number, g2: number, b2: number, alpha1: number, alpha2: number): void { 
	return _in(0xd8b9a8ac, 0x5608ff94, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), r1, g1, b1, r2, g2, b2, alpha1, alpha2); 
}

/**
 * NOTE: Debugging functions are not present in the retail version of the game.
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param red
 * @param green
 * @param blue
 * @param alpha
 */
export function drawDebugSphere(x: number, y: number, z: number, radius: number, red: number, green: number, blue: number, alpha: number): void { 
	return _in(0xaad68e1a, 0xb39da632, _fv(x), _fv(y), _fv(z), _fv(radius), red, green, blue, alpha); 
}

/**
 * NOTE: Debugging functions are not present in the retail version of the game.
 * @param text
 * @param x
 * @param y
 * @param z
 * @param red
 * @param green
 * @param blue
 * @param alpha
 */
export function drawDebugText(text: string, x: number, y: number, z: number, red: number, green: number, blue: number, alpha: number): void { 
	return _in(0x3903e216, 0x620488e8, _ts(text), _fv(x), _fv(y), _fv(z), red, green, blue, alpha); 
}

/**
 * NOTE: Debugging functions are not present in the retail version of the game.
 * @param text
 * @param x
 * @param y
 * @param z
 * @param red
 * @param green
 * @param blue
 * @param alpha
 */
export function drawDebugText2d(text: string, x: number, y: number, z: number, red: number, green: number, blue: number, alpha: number): void { 
	return _in(0xa3bb2e95, 0x55c05a8f, _ts(text), _fv(x), _fv(y), _fv(z), red, green, blue, alpha); 
}

/**
 * This native does absolutely nothing, just a nullsub
 */
export function drawFrontendBackgroundThisFrame(): void { 
	return _in(0x211c4ef4, 0x50086857); 
}

export function drawHudOverFadeThisFrame(): void { 
	return _in(0xbf4f34a8, 0x5ca2970c); 
}

export function drawLightWithRange(posX: number, posY: number, posZ: number, colorR: number, colorG: number, colorB: number, range: number, intensity: number): void { 
	return _in(0xf2a1b277, 0x1a01dbd4, _fv(posX), _fv(posY), _fv(posZ), colorR, colorG, colorB, _fv(range), _fv(intensity)); 
}

export function drawLightWithRangeex(x: number, y: number, z: number, r: number, g: number, b: number, range: number, intensity: number, shadow: number): void { 
	return _in(0xf49e9a97, 0x16a04595, _fv(x), _fv(y), _fv(z), r, g, b, _fv(range), _fv(intensity), _fv(shadow)); 
}

/**
 * Draws a depth-tested line from one point to another.
 * ----------------
 * x1, y1, z1 : Coordinates for the first point
 * x2, y2, z2 : Coordinates for the second point
 * r, g, b, alpha : Color with RGBA-Values
 * I recommend using a predefined function to call this.
 * [VB.NET]
 * Public Sub DrawLine(from As Vector3, [to] As Vector3, col As Color)
 * [Function].Call(Hash.DRAW_LINE, from.X, from.Y, from.Z, [to].X, [to].Y, [to].Z, col.R, col.G, col.B, col.A)
 * End Sub
 * 
 * [C#]
 * public void DrawLine(Vector3 from, Vector3 to, Color col)
 * {
 * Function.Call(Hash.DRAW_LINE, from.X, from.Y, from.Z, to.X, to.Y, to.Z, col.R, col.G, col.B, col.A);
 * }
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param red
 * @param green
 * @param blue
 * @param alpha
 */
export function drawLine(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, red: number, green: number, blue: number, alpha: number): void { 
	return _in(0x6b725607, 0x4ae34680, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), red, green, blue, alpha); 
}

export function drawLowQualityPhotoToPhone(p0: boolean, p1: boolean): void { 
	return _in(0x1072f115, 0xdab0717e, p0, p1); 
}

/**
 * enum MarkerTypes
 * {
 * MarkerTypeUpsideDownCone = 0,
 * MarkerTypeVerticalCylinder = 1,
 * MarkerTypeThickChevronUp = 2,
 * MarkerTypeThinChevronUp = 3,
 * MarkerTypeCheckeredFlagRect = 4,
 * MarkerTypeCheckeredFlagCircle = 5,
 * MarkerTypeVerticleCircle = 6,
 * MarkerTypePlaneModel = 7,
 * MarkerTypeLostMCDark = 8,
 * MarkerTypeLostMCLight = 9,
 * MarkerTypeNumber0 = 10,
 * MarkerTypeNumber1 = 11,
 * MarkerTypeNumber2 = 12,
 * MarkerTypeNumber3 = 13,
 * MarkerTypeNumber4 = 14,
 * MarkerTypeNumber5 = 15,
 * MarkerTypeNumber6 = 16,
 * MarkerTypeNumber7 = 17,
 * MarkerTypeNumber8 = 18,
 * MarkerTypeNumber9 = 19,
 * MarkerTypeChevronUpx1 = 20,
 * MarkerTypeChevronUpx2 = 21,
 * MarkerTypeChevronUpx3 = 22,
 * MarkerTypeHorizontalCircleFat = 23,
 * MarkerTypeReplayIcon = 24,
 * MarkerTypeHorizontalCircleSkinny = 25,
 * MarkerTypeHorizontalCircleSkinny_Arrow = 26,
 * MarkerTypeHorizontalSplitArrowCircle = 27,
 * MarkerTypeDebugSphere = 28,
 * MarkerTypeDallorSign = 29,
 * MarkerTypeHorizontalBars = 30,
 * MarkerTypeWolfHead = 31
 * };
 * 
 * dirX/Y/Z represent a heading on each axis in which the marker should face, alternatively you can rotate each axis independently with rotX/Y/Z (and set dirX/Y/Z all to 0).
 * 
 * faceCamera - Rotates only the y-axis (the heading) towards the camera
 * 
 * p19 - no effect, default value in script is 2
 * 
 * rotate - Rotates only on the y-axis (the heading)
 * 
 * textureDict - Name of texture dictionary to load texture from (e.g. "GolfPutting")
 * 
 * textureName - Name of texture inside dictionary to load (e.g. "PuttingMarker")
 * 
 * drawOnEnts - Draws the marker onto any entities that intersect it
 * 
 * basically what he said, except textureDict and textureName are totally not const char*, or if so, then they are always set to 0/NULL/nullptr in every script I checked, eg:
 * 
 * bj.c: graphics::draw_marker(6, vParam0, 0f, 0f, 1f, 0f, 0f, 0f, 4f, 4f, 4f, 240, 200, 80, iVar1, 0, 0, 2, 0, 0, 0, false);
 * 
 * his is what I used to draw an amber downward pointing chevron "V", has to be redrawn every frame.  The 180 is for 180 degrees rotation around the Y axis, the 50 is alpha, assuming max is 100, but it will accept 255.
 * 
 * GRAPHICS::DRAW_MARKER(2, v.x, v.y, v.z + 2, 0, 0, 0, 0, 180, 0, 2, 2, 2, 255, 128, 0, 50, 0, 1, 1, 0, 0, 0, 0);
 * 
 * 
 * @param type
 * @param posX
 * @param posY
 * @param posZ
 * @param dirX
 * @param dirY
 * @param dirZ
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param scaleX
 * @param scaleY
 * @param scaleZ
 * @param red
 * @param green
 * @param blue
 * @param alpha
 * @param bobUpAndDown
 * @param faceCamera
 * @param p19
 * @param rotate
 * @param textureDict
 * @param textureName
 * @param drawOnEnts
 */
export function drawMarker(type: number, posX: number, posY: number, posZ: number, dirX: number, dirY: number, dirZ: number, rotX: number, rotY: number, rotZ: number, scaleX: number, scaleY: number, scaleZ: number, red: number, green: number, blue: number, alpha: number, bobUpAndDown: boolean, faceCamera: boolean, p19: number, rotate: boolean, textureDict: string, textureName: string, drawOnEnts: boolean): void { 
	return _in(0x28477ec2, 0x3d892089, type, _fv(posX), _fv(posY), _fv(posZ), _fv(dirX), _fv(dirY), _fv(dirZ), _fv(rotX), _fv(rotY), _fv(rotZ), _fv(scaleX), _fv(scaleY), _fv(scaleZ), red, green, blue, alpha, bobUpAndDown, faceCamera, p19, rotate, _ts(textureDict), _ts(textureName), drawOnEnts); 
}

export function drawMarkerEx(type: number, posX: number, posY: number, posZ: number, dirX: number, dirY: number, dirZ: number, rotX: number, rotY: number, rotZ: number, scaleX: number, scaleY: number, scaleZ: number, red: number, green: number, blue: number, alpha: number, bobUpAndDown: boolean, faceCamera: boolean, p19: number, rotate: boolean, textureDict: string, textureName: string, drawOnEnts: boolean, p24: boolean, p25: boolean): void { 
	return _in(0xe82728f0, 0xde75d13a, type, _fv(posX), _fv(posY), _fv(posZ), _fv(dirX), _fv(dirY), _fv(dirZ), _fv(rotX), _fv(rotY), _fv(rotZ), _fv(scaleX), _fv(scaleY), _fv(scaleZ), red, green, blue, alpha, bobUpAndDown, faceCamera, p19, rotate, _ts(textureDict), _ts(textureName), drawOnEnts, p24, p25); 
}

/**
 * Draws a 3D sphere, typically seen in the GTA:O freemode event "Penned In".
 * Example https://imgur.com/nCbtS4H
 * 
 * alpha - The alpha for the sphere. Goes from 0.0 to 1.0.
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param red
 * @param green
 * @param blue
 * @param alpha
 */
export function drawMarkerSphere(x: number, y: number, z: number, radius: number, red: number, green: number, blue: number, alpha: number): void { 
	return _in(0x799017f9, 0xe3b10112, _fv(x), _fv(y), _fv(z), _fv(radius), red, green, blue, _fv(alpha)); 
}

/**
 * x/y/z - Location of a vertex (in world coords), presumably.
 * ----------------
 * x1, y1, z1     : Coordinates for the first point
 * x2, y2, z2     : Coordinates for the second point
 * x3, y3, z3     : Coordinates for the third point
 * r, g, b, alpha : Color with RGBA-Values
 * 
 * Keep in mind that only one side of the drawn triangle is visible: It's the side, in which the vector-product of the vectors heads to: (b-a)x(c-a) Or (b-a)x(c-b).
 * But be aware: The function seems to work somehow differently. I have trouble having them drawn in rotated orientation. Try it yourself and if you somehow succeed, please edit this and post your solution.
 * I recommend using a predefined function to call this.
 * [VB.NET]
 * Public Sub DrawPoly(a As Vector3, b As Vector3, c As Vector3, col As Color)
 * [Function].Call(Hash.DRAW_POLY, a.X, a.Y, a.Z, b.X, b.Y, b.Z, c.X, c.Y, c.Z, col.R, col.G, col.B, col.A)
 * End Sub
 * 
 * [C#]
 * public void DrawPoly(Vector3 a, Vector3 b, Vector3 c, Color col)
 * {
 * Function.Call(Hash.DRAW_POLY, a.X, a.Y, a.Z, b.X, b.Y, b.Z, c.X, c.Y, c.Z, col.R, col.G, col.B, col.A);
 * }
 * BTW: Intersecting triangles are not supported: They overlap in the order they were called.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param x3
 * @param y3
 * @param z3
 * @param red
 * @param green
 * @param blue
 * @param alpha
 */
export function drawPoly(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, x3: number, y3: number, z3: number, red: number, green: number, blue: number, alpha: number): void { 
	return _in(0xac267160, 0x48436851, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(x3), _fv(y3), _fv(z3), red, green, blue, alpha); 
}

/**
 * Draws a rectangle on the screen.
 * 
 * -x: The relative X point of the center of the rectangle. (0.0-1.0, 0.0 is the left edge of the screen, 1.0 is the right edge of the screen)
 * 
 * -y: The relative Y point of the center of the rectangle. (0.0-1.0, 0.0 is the top edge of the screen, 1.0 is the bottom edge of the screen)
 * 
 * -width: The relative width of the rectangle. (0.0-1.0, 1.0 means the whole screen width)
 * 
 * -height: The relative height of the rectangle. (0.0-1.0, 1.0 means the whole screen height)
 * 
 * -R: Red part of the color. (0-255)
 * 
 * -G: Green part of the color. (0-255)
 * 
 * -B: Blue part of the color. (0-255)
 * 
 * -A: Alpha part of the color. (0-255, 0 means totally transparent, 255 means totally opaque)
 * 
 * The total number of rectangles to be drawn in one frame is apparently limited to 399.
 * 
 * @param x
 * @param y
 * @param width
 * @param height
 * @param r
 * @param g
 * @param b
 * @param a
 * @param p8
 */
export function drawRect(x: number, y: number, width: number, height: number, r: number, g: number, b: number, a: number, p8: boolean): void { 
	return _in(0x3a618a21, 0x7e5154f0, _fv(x), _fv(y), _fv(width), _fv(height), r, g, b, a, p8); 
}

export function drawScaleformMovie(scaleformHandle: number, x: number, y: number, width: number, height: number, red: number, green: number, blue: number, alpha: number, p9: number): void { 
	return _in(0x54972ada, 0xf0294a93, scaleformHandle, _fv(x), _fv(y), _fv(width), _fv(height), red, green, blue, alpha, p9); 
}

export function drawScaleformMovie3d(scaleform: number, posX: number, posY: number, posZ: number, rotX: number, rotY: number, rotZ: number, p7: number, p8: number, p9: number, scaleX: number, scaleY: number, scaleZ: number, rotationOrder: number): void { 
	return _in(0x87d51d72, 0x255d4e78, scaleform, _fv(posX), _fv(posY), _fv(posZ), _fv(rotX), _fv(rotY), _fv(rotZ), _fv(p7), _fv(p8), _fv(p9), _fv(scaleX), _fv(scaleY), _fv(scaleZ), rotationOrder); 
}

export function drawScaleformMovie3dSolid(scaleform: number, posX: number, posY: number, posZ: number, rotX: number, rotY: number, rotZ: number, p7: number, p8: number, p9: number, scaleX: number, scaleY: number, scaleZ: number, rotationOrder: number): void { 
	return _in(0x1ce592fd, 0xc749d6f5, scaleform, _fv(posX), _fv(posY), _fv(posZ), _fv(rotX), _fv(rotY), _fv(rotZ), _fv(p7), _fv(p8), _fv(p9), _fv(scaleX), _fv(scaleY), _fv(scaleZ), rotationOrder); 
}

/**
 * unk is not used so no need
 * @param scaleform
 * @param red
 * @param green
 * @param blue
 * @param alpha
 * @param p5
 */
export function drawScaleformMovieFullscreen(scaleform: number, red: number, green: number, blue: number, alpha: number, p5: number): void { 
	return _in(0x0df60692, 0x9c105be1, scaleform, red, green, blue, alpha, p5); 
}

export function drawScaleformMovieFullscreenMasked(scaleform1: number, scaleform2: number, red: number, green: number, blue: number, alpha: number): void { 
	return _in(0xcf537fde, 0x4fbd4ce5, scaleform1, scaleform2, red, green, blue, alpha); 
}

export function drawShadowedSpotLight(posX: number, posY: number, posZ: number, dirX: number, dirY: number, dirZ: number, colorR: number, colorG: number, colorB: number, distance: number, brightness: number, roundness: number, radius: number, falloff: number, shadowId: number): void { 
	return _in(0x5bca583a, 0x583194db, _fv(posX), _fv(posY), _fv(posZ), _fv(dirX), _fv(dirY), _fv(dirZ), colorR, colorG, colorB, _fv(distance), _fv(brightness), _fv(roundness), _fv(radius), _fv(falloff), shadowId); 
}

/**
 * Parameters:
 * * pos - coordinate where the spotlight is located
 * * dir - the direction vector the spotlight should aim at from its current position
 * * r,g,b - color of the spotlight
 * * distance - the maximum distance the light can reach
 * * brightness - the brightness of the light
 * * roundness - "smoothness" of the circle edge
 * * radius - the radius size of the spotlight
 * * falloff - the falloff size of the light's edge (example: www.i.imgur.com/DemAWeO.jpg)
 * 
 * Example in C# (spotlight aims at the closest vehicle):
 * Vector3 myPos = Game.Player.Character.Position;
 * Vehicle nearest = World.GetClosestVehicle(myPos , 1000f);
 * Vector3 destinationCoords = nearest.Position;
 * Vector3 dirVector = destinationCoords - myPos;
 * dirVector.Normalize();
 * Function.Call(Hash.DRAW_SPOT_LIGHT, pos.X, pos.Y, pos.Z, dirVector.X, dirVector.Y, dirVector.Z, 255, 255, 255, 100.0f, 1f, 0.0f, 13.0f, 1f);
 * @param posX
 * @param posY
 * @param posZ
 * @param dirX
 * @param dirY
 * @param dirZ
 * @param colorR
 * @param colorG
 * @param colorB
 * @param distance
 * @param brightness
 * @param hardness
 * @param radius
 * @param falloff
 */
export function drawSpotLight(posX: number, posY: number, posZ: number, dirX: number, dirY: number, dirZ: number, colorR: number, colorG: number, colorB: number, distance: number, brightness: number, hardness: number, radius: number, falloff: number): void { 
	return _in(0xd0f64b26, 0x5c8c8b33, _fv(posX), _fv(posY), _fv(posZ), _fv(dirX), _fv(dirY), _fv(dirZ), colorR, colorG, colorB, _fv(distance), _fv(brightness), _fv(hardness), _fv(radius), _fv(falloff)); 
}

/**
 * Draws a 2D sprite on the screen.
 * 
 * Parameters:
 * textureDict - Name of texture dictionary to load texture from (e.g. "CommonMenu", "MPWeaponsCommon", etc.)
 * 
 * textureName - Name of texture to load from texture dictionary (e.g. "last_team_standing_icon", "tennis_icon", etc.)
 * 
 * screenX/Y - Screen offset (0.5 = center)
 * scaleX/Y - Texture scaling. Negative values can be used to flip the texture on that axis. (0.5 = half)
 * 
 * heading - Texture rotation in degrees (default = 0.0) positive is clockwise, measured in degrees
 * 
 * red,green,blue - Sprite color (default = 255/255/255)
 * 
 * alpha - opacity level
 * @param textureDict
 * @param textureName
 * @param screenX
 * @param screenY
 * @param width
 * @param height
 * @param heading
 * @param red
 * @param green
 * @param blue
 * @param alpha
 * @param p11
 * @param p12
 */
export function drawSprite(textureDict: string, textureName: string, screenX: number, screenY: number, width: number, height: number, heading: number, red: number, green: number, blue: number, alpha: number, p11: boolean, p12: number): void { 
	return _in(0xe7ffae5e, 0xbf23d890, _ts(textureDict), _ts(textureName), _fv(screenX), _fv(screenY), _fv(width), _fv(height), _fv(heading), red, green, blue, alpha, p11, p12); 
}

/**
 * Used in arcade games and Beam hack minigame in Doomsday Heist. I will most certainly dive into this to try replicate arcade games.
 * x position must be between 0.0 and 1.0 (1.0 being the most right side of the screen)
 * y position must be between 0.0 and 1.0 (1.0 being the most bottom side of the screen)
 * width 0.0 - 1.0 is the reasonable amount generally
 * height 0.0 - 1.0 is the reasonable amount generally
 * p6 almost always 0.0
 * p11 seems to be unknown but almost always 0 int
 * @param textureDict
 * @param textureName
 * @param x
 * @param y
 * @param width
 * @param height
 * @param p6
 * @param red
 * @param green
 * @param blue
 * @param alpha
 * @param p11
 * @param p12
 */
export function drawSpriteArx(textureDict: string, textureName: string, x: number, y: number, width: number, height: number, p6: number, red: number, green: number, blue: number, alpha: number, p11: number, p12: number): void { 
	return _in(0x2d3b147a, 0xfad49de0, _ts(textureDict), _ts(textureName), _fv(x), _fv(y), _fv(width), _fv(height), _fv(p6), red, green, blue, alpha, p11, p12); 
}

/**
 * Similar to DRAW_SPRITE, but allows to specify the texture coordinates used to draw the sprite.
 * 
 * u1, v1 - texture coordinates for the top-left corner
 * u2, v2 - texture coordinates for the bottom-right corner
 * @param textureDict
 * @param textureName
 * @param x
 * @param y
 * @param width
 * @param height
 * @param u1
 * @param v1
 * @param u2
 * @param v2
 * @param heading
 * @param red
 * @param green
 * @param blue
 * @param alpha
 * @param p15
 */
export function drawSpriteArxWithUv(textureDict: string, textureName: string, x: number, y: number, width: number, height: number, u1: number, v1: number, u2: number, v2: number, heading: number, red: number, green: number, blue: number, alpha: number, p15: number): void { 
	return _in(0x95812f9b, 0x26074726, _ts(textureDict), _ts(textureName), _fv(x), _fv(y), _fv(width), _fv(height), _fv(u1), _fv(v1), _fv(u2), _fv(v2), _fv(heading), red, green, blue, alpha, p15); 
}

/**
 * Similar to _DRAW_SPRITE, but seems to be some kind of "interactive" sprite, at least used by render targets.
 * These seem to be the only dicts ever requested by this native:
 * 
 * prop_screen_biker_laptop
 * Prop_Screen_GR_Disruption
 * Prop_Screen_TaleOfUs
 * prop_screen_nightclub
 * Prop_Screen_IE_Adhawk
 * prop_screen_sm_free_trade_shipping
 * prop_screen_hacker_truck
 * MPDesktop
 * Prop_Screen_Nightclub
 * And a few others
 * 
 * @param textureDict
 * @param textureName
 * @param screenX
 * @param screenY
 * @param width
 * @param height
 * @param heading
 * @param red
 * @param green
 * @param blue
 * @param alpha
 * @param p11
 */
export function drawSpriteNamedRendertarget(textureDict: string, textureName: string, screenX: number, screenY: number, width: number, height: number, heading: number, red: number, green: number, blue: number, alpha: number, p11: number): void { 
	return _in(0x2bc54a81, 0x88768488, _ts(textureDict), _ts(textureName), _fv(screenX), _fv(screenY), _fv(width), _fv(height), _fv(heading), red, green, blue, alpha, p11); 
}

/**
 * Used for drawling Deadline trailing lights, see deadline.ytd
 * 
 * p15 through p23 are values that appear to be related to illiumation, scaling, and rotation; more testing required.
 * For UVW mapping (u,v,w parameters), reference your favourite internet resource for more details.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param x3
 * @param y3
 * @param z3
 * @param red
 * @param green
 * @param blue
 * @param alpha
 * @param textureDict
 * @param textureName
 * @param u1
 * @param v1
 * @param w1
 * @param u2
 * @param v2
 * @param w2
 * @param u3
 * @param v3
 * @param w3
 */
export function drawTexturedPoly(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, x3: number, y3: number, z3: number, red: number, green: number, blue: number, alpha: number, textureDict: string, textureName: string, u1: number, v1: number, w1: number, u2: number, v2: number, w2: number, u3: number, v3: number, w3: number): void { 
	return _in(0x29280002, 0x282f1928, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(x3), _fv(y3), _fv(z3), red, green, blue, alpha, _ts(textureDict), _ts(textureName), _fv(u1), _fv(v1), _fv(w1), _fv(u2), _fv(v2), _fv(w2), _fv(u3), _fv(v3), _fv(w3)); 
}

/**
 * Used for drawling Deadline trailing lights, see deadline.ytd
 * 
 * Each vertex has its own colour that is blended/illuminated on the texture. Additionally, the R, G, and B components are floats that are int-casted internally.
 * For UVW mapping (u,v,w parameters), reference your favourite internet resource for more details.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param x3
 * @param y3
 * @param z3
 * @param red1
 * @param green1
 * @param blue1
 * @param alpha1
 * @param red2
 * @param green2
 * @param blue2
 * @param alpha2
 * @param red3
 * @param green3
 * @param blue3
 * @param alpha3
 * @param textureDict
 * @param textureName
 * @param u1
 * @param v1
 * @param w1
 * @param u2
 * @param v2
 * @param w2
 * @param u3
 * @param v3
 * @param w3
 */
export function drawTexturedPolyWithThreeColours(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, x3: number, y3: number, z3: number, red1: number, green1: number, blue1: number, alpha1: number, red2: number, green2: number, blue2: number, alpha2: number, red3: number, green3: number, blue3: number, alpha3: number, textureDict: string, textureName: string, u1: number, v1: number, w1: number, u2: number, v2: number, w2: number, u3: number, v3: number, w3: number): void { 
	return _in(0x736d7aa1, 0xb750856b, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(x3), _fv(y3), _fv(z3), _fv(red1), _fv(green1), _fv(blue1), alpha1, _fv(red2), _fv(green2), _fv(blue2), alpha2, _fv(red3), _fv(green3), _fv(blue3), alpha3, _ts(textureDict), _ts(textureName), _fv(u1), _fv(v1), _fv(w1), _fv(u2), _fv(v2), _fv(w2), _fv(u3), _fv(v3), _fv(w3)); 
}

/**
 * All calls to this native are preceded by calls to GRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER and GRAPHICS::SET_SCRIPT_GFX_DRAW_BEHIND_PAUSEMENU, respectively.
 * 
 * "act_cinema.ysc", line 1483:
 * HUD::SET_HUD_COMPONENT_POSITION(15, 0.0, -0.0375);
 * HUD::SET_TEXT_RENDER_ID(l_AE);
 * GRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER(4);
 * GRAPHICS::SET_SCRIPT_GFX_DRAW_BEHIND_PAUSEMENU(1);
 * if (GRAPHICS::IS_TVSHOW_CURRENTLY_PLAYING(${movie_arthouse})) {
 * GRAPHICS::DRAW_TV_CHANNEL(0.5, 0.5, 0.7375, 1.0, 0.0, 255, 255, 255, 255);
 * } else {
 * GRAPHICS::DRAW_TV_CHANNEL(0.5, 0.5, 1.0, 1.0, 0.0, 255, 255, 255, 255);
 * }
 * 
 * "am_mp_property_int.ysc", line 102545:
 * if (ENTITY::DOES_ENTITY_EXIST(a_2._f3)) {
 * if (HUD::IS_NAMED_RENDERTARGET_LINKED(ENTITY::GET_ENTITY_MODEL(a_2._f3))) {
 * HUD::SET_TEXT_RENDER_ID(a_2._f1);
 * GRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER(4);
 * GRAPHICS::SET_SCRIPT_GFX_DRAW_BEHIND_PAUSEMENU(1);
 * GRAPHICS::DRAW_TV_CHANNEL(0.5, 0.5, 1.0, 1.0, 0.0, 255, 255, 255, 255);
 * if (GRAPHICS::GET_TV_CHANNEL() == -1) {
 * sub_a8fa5(a_2, 1);
 * } else {
 * sub_a8fa5(a_2, 1);
 * GRAPHICS::ATTACH_TV_AUDIO_TO_ENTITY(a_2._f3);
 * }
 * HUD::SET_TEXT_RENDER_ID(HUD::GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID());
 * }
 * }
 * 
 * @param xPos
 * @param yPos
 * @param xScale
 * @param yScale
 * @param rotation
 * @param red
 * @param green
 * @param blue
 * @param alpha
 */
export function drawTvChannel(xPos: number, yPos: number, xScale: number, yScale: number, rotation: number, red: number, green: number, blue: number, alpha: number): void { 
	return _in(0xfddc2b4e, 0xd3c69df0, _fv(xPos), _fv(yPos), _fv(xScale), _fv(yScale), _fv(rotation), red, green, blue, alpha); 
}

export function dropAmbientProp(ped: number): void { 
	return _in(0xaff4710e, 0x2a0a6c12, ped); 
}

/**
 * Creates a motion-blur sort of effect, this native does not seem to work, however by using the `START_SCREEN_EFFECT` native with `DrugsMichaelAliensFight` as the effect parameter, you should be able to get the effect.
 * @param toggle
 */
export function enableAlienBloodVfx(toggle: boolean): void { 
	return _in(0x9dce1f0f, 0x78260875, toggle); 
}

/**
 * control: see IS_CONTROL_ENABLED
 * @param control
 */
export function enableAllControlActions(control: number): void { 
	return _in(0xa5ffe9b0, 0x5f199de7, control); 
}

/**
 * Creates cartoon effect when Michel smokes the weed
 * @param toggle
 */
export function enableClownBloodVfx(toggle: boolean): void { 
	return _in(0xd8214905, 0x79791273, toggle); 
}

/**
 * control: see IS_CONTROL_ENABLED
 * @param control
 * @param action
 * @param enableRelatedActions
 */
export function enableControlAction(control: number, action: number, enableRelatedActions: boolean): void { 
	return _in(0x35122025, 0x5d64c155, control, action, enableRelatedActions); 
}

/**
 * https://alloc8or.re/gta5/doc/enums/DispatchType.txt
 * @param dispatchService
 * @param toggle
 */
export function enableDispatchService(dispatchService: number, toggle: boolean): void { 
	return _in(0xdc0f8178, 0x84cdd856, dispatchService, toggle); 
}

export function enableDragRaceStationaryWarningSounds(vehicle: number, enable: boolean): void { 
	return _in(0xbefb8029, 0x0414fd4f, vehicle, enable); 
}

export function enableEntityBulletCollision(entity: number): void { 
	return _in(0x6ce177d0, 0x14502e8a, entity); 
}

/**
 * This is the native that is used to hide the exterior of GTA Online apartment buildings when you are inside an apartment.
 * 
 * More info: http://gtaforums.com/topic/836301-hiding-gta-online-apartment-exteriors/
 * @param mapObjectHash
 */
export function enableExteriorCullModelThisFrame(mapObjectHash: number): void { 
	return _in(0xa97f257d, 0x0151a6ab, _ch(mapObjectHash)); 
}

export function enableIndividualPlanePropeller(vehicle: number, propeller: number): void { 
	return _in(0xdc05d277, 0x7f855f44, vehicle, propeller); 
}

/**
 * Enables laser sight on any weapon.
 * 
 * It doesn't work. Neither on tick nor OnKeyDown
 * @param toggle
 */
export function enableLaserSightRendering(toggle: boolean): void { 
	return _in(0xc8b46d77, 0x27d864aa, toggle); 
}

/**
 * The same as SET_TIMECYCLE_MODIFIER_STRENGTH but for the secondary timecycle modifier.
 * @param strength
 */
export function enableMoonCycleOverride(strength: number): void { 
	return _in(0x2c328af1, 0x7210f009, _fv(strength)); 
}

export function enableMovieKeyframeWait(toggle: boolean): void { 
	return _in(0x74c18003, 0x0fde4b69, toggle); 
}

export function enableMovieSubtitles(toggle: boolean): void { 
	return _in(0x873fa65c, 0x778ad970, toggle); 
}

export function enableMpLight(ped: number, toggle: boolean): void { 
	return _in(0xee2476b9, 0xee4a094f, ped, toggle); 
}

export function enableProcobjCreation(): void { 
	return _in(0x5debd9c4, 0xdc995692); 
}

export function enableSavingInGarage(garageHash: number, toggle: boolean): void { 
	return _in(0xf2e1a713, 0x3dd356a6, _ch(garageHash), toggle); 
}

export function enableScriptBrainSet(brainSet: number): void { 
	return _in(0x67aa4d73, 0xf0cfa86b, brainSet); 
}

export function enableShadowCullModelThisFrame(mapObjectHash: number): void { 
	return _in(0x50c37553, 0x7449f369, _ch(mapObjectHash)); 
}

export function enableSpecialAbility(player: number, toggle: boolean, p2: number): void { 
	return _in(0x181ec197, 0xdaefe121, player, toggle, p2); 
}

export function enableStadiumProbesThisFrame(toggle: boolean): void { 
	return _in(0x7ecdf985, 0x87e92dec, toggle); 
}

/**
 * Works for planes only.
 * @param vehicle
 * @param toggle
 */
export function enableStallWarningSounds(vehicle: number, toggle: boolean): void { 
	return _in(0xc15907d6, 0x67f7cfb2, vehicle, toggle); 
}

export function enableStuntJumpAudio(): void { 
	return _in(0xb81cf134, 0xaeb56ffb); 
}

export function enableStuntJumpSet(p0: number): void { 
	return _in(0xe369a578, 0x3b866016, p0); 
}

export function enableSwitchPauseBeforeDescent(): void { 
	return _in(0xd4793dff, 0x3af2abcd); 
}

/**
 * Makes the ped jump around like they're in a tennis match
 * @param ped
 * @param toggle
 * @param p2
 */
export function enableTennisMode(ped: number, toggle: boolean, p2: boolean): void { 
	return _in(0x28a04b41, 0x1933f8a6, ped, toggle, p2); 
}

/**
 * Remove the weird shadow applied by DISABLE_VEHCILE_DYNAMIC_AMBIENT_SCALES.
 * @param vehicle
 */
export function enableVehicleDynamicAmbientScales(vehicle: number): void { 
	return _in(0xf87d9f23, 0x01f7d206, vehicle); 
}

export function enableVehicleExhaustPops(vehicle: number, toggle: boolean): void { 
	return _in(0x2be4bc73, 0x1d039d5a, vehicle, toggle); 
}

export function enableVehicleFanbeltDamage(vehicle: number, toggle: boolean): void { 
	return _in(0x1c073274, 0xe065c6d2, vehicle, toggle); 
}

export function endBeingBoss(p0: number, p1: number, p2: number): void { 
	return _in(0xa3c53804, 0xbdb68ed2, p0, p1, p2); 
}

export function endBeingGoon(p0: number, p1: number, p2: number, p3: number, p4: number): void { 
	return _in(0x6bccf994, 0x8492fd85, p0, p1, p2, p3, p4); 
}

export function endPetrolTrailDecals(): void { 
	return _in(0x0a123435, 0xa26c36cd); 
}

export function endReplayStats(): void { 
	return _in(0xa23e821f, 0xbdf8a5f2); 
}

/**
 * Pops and calls the Scaleform function on the stack
 */
export function endScaleformMovieMethod(): void { 
	return _in(0xc6796a8f, 0xfa375e53); 
}

export function endScaleformMovieMethodReturnValue(): number { 
	return _in(0xc50aa39a, 0x577af886, _r, _ri); 
}

/**
 * Clear the current srl and stop rendering the area selected by PREFETCH_SRL and started with BEGIN_SRL.
 */
export function endSrl(): void { 
	return _in(0x0a41540e, 0x63c9ee17); 
}

export function endTextCommandAddDirectlyToPreviousBriefs(p0: boolean): void { 
	return _in(0xcfdbdf5a, 0xe59ba0f4, p0); 
}

/**
 * enum eBusySpinnerType
 * {
 * BUSY_SPINNER_LEFT,
 * BUSY_SPINNER_LEFT_2,
 * BUSY_SPINNER_LEFT_3,
 * BUSY_SPINNER_SAVE,
 * BUSY_SPINNER_RIGHT,
 * };
 * @param busySpinnerType
 */
export function endTextCommandBusyspinnerOn(busySpinnerType: number): void { 
	return _in(0xbd12f822, 0x8410d9b4, busySpinnerType); 
}

export function endTextCommandClearPrint(): void { 
	return _in(0xfcc75460, 0xaba29378); 
}

/**
 * shape goes from -1 to 50 (may be more).
 * p0 is always 0.
 * 
 * Example:
 * void FloatingHelpText(const char* text)
 * {
 * BEGIN_TEXT_COMMAND_DISPLAY_HELP("STRING");
 * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
 * END_TEXT_COMMAND_DISPLAY_HELP (0, 0, 1, -1);
 * }
 * 
 * Image:
 * - imgbin.org/images/26209.jpg
 * 
 * more inputs/icons:
 * - https://pastebin.com/nqNYWMSB
 * 
 * Used to be known as _DISPLAY_HELP_TEXT_FROM_STRING_LABEL
 * @param p0
 * @param loop
 * @param beep
 * @param shape
 */
export function endTextCommandDisplayHelp(p0: number, loop: boolean, beep: boolean, shape: number): void { 
	return _in(0x238ffe5c, 0x7b0498a6, p0, loop, beep, shape); 
}

/**
 * After applying the properties to the text (See HUD::SET_TEXT_), this will draw the text in the applied position. Also 0.0f < x, y < 1.0f, percentage of the axis.
 * 
 * Used to be known as _DRAW_TEXT
 * @param x
 * @param y
 * @param p2
 */
export function endTextCommandDisplayText(x: number, y: number, p2: number): void { 
	return _in(0xcd015e5b, 0xb0d96a57, _fv(x), _fv(y), p2); 
}

/**
 * Determines how many lines the text string will use when drawn on screen.
 * Must use 0x521FB041D93DD0E4 for setting up
 * @param x
 * @param y
 */
export function endTextCommandGetNumberOfLinesForString(x: number, y: number): number { 
	return _in(0x9040dfb0, 0x9be75706, _fv(x), _fv(y), _r, _ri); 
}

export function endTextCommandGetScreenWidthOfDisplayText(p0: boolean): number { 
	return _in(0x85f061da, 0x64ed2f67, p0, _r, _rf); 
}

export function endTextCommandIsMessageDisplayed(): boolean { 
	return _in(0x8a9ba1ab, 0x3e237613, _r); 
}

export function endTextCommandIsThisHelpMessageBeingDisplayed(p0: number): boolean { 
	return _in(0x10bddbfc, 0x529428dd, p0, _r); 
}

export function endTextCommandOverrideButtonText(p0: number): void { 
	return _in(0xa8691197, 0x9638106f, p0); 
}

/**
 * Draws the subtitle at middle center of the screen.
 * 
 * int duration = time in milliseconds to show text on screen before disappearing
 * 
 * drawImmediately = If true, the text will be drawn immediately, if false, the text will be drawn after the previous subtitle has finished
 * 
 * Used to be known as _DRAW_SUBTITLE_TIMED
 * @param duration
 * @param drawImmediately
 */
export function endTextCommandPrint(duration: number, drawImmediately: boolean): void { 
	return _in(0x9d77056a, 0x530643f6, duration, drawImmediately); 
}

export function endTextCommandScaleformString(): void { 
	return _in(0x362e2d3f, 0xe93a9959); 
}

/**
 * Finalizes a text command started with BEGIN_TEXT_COMMAND_SET_BLIP_NAME, setting the name of the specified blip.
 * @param blip
 */
export function endTextCommandSetBlipName(blip: number): void { 
	return _in(0xbc38b49b, 0xcb83bc9b, blip); 
}

/**
 * Shows an "award" notification above the minimap, example: https://i.imgur.com/e2DNaKX.png
 * Example:
 * 
 * HUD::BEGIN_TEXT_COMMAND_THEFEED_POST("HUNT");
 * HUD::END_TEXT_COMMAND_THEFEED_POST_AWARD("Hunting", "Hunting_Gold_128", 0, 109, "HUD_MED_UNLKED");
 * @param textureDict
 * @param textureName
 * @param rpBonus
 * @param colorOverlay
 * @param titleLabel
 */
export function endTextCommandThefeedPostAward(textureDict: string, textureName: string, rpBonus: number, colorOverlay: number, titleLabel: string): number { 
	return _in(0xaa295b6f, 0x28bd587d, _ts(textureDict), _ts(textureName), rpBonus, colorOverlay, _ts(titleLabel), _r, _ri); 
}

export function endTextCommandThefeedPostCrewRankupWithLiteralFlag(p0: string, p1: string, p2: string, p3: boolean, p4: boolean): number { 
	return _in(0x8efccf6e, 0xc66d85e4, _ts(p0), _ts(p1), _ts(p2), p3, p4, _r, _ri); 
}

export function endTextCommandThefeedPostCrewtag(p0: boolean, p1: boolean, p3: number, isLeader: boolean, unk0: boolean, clanDesc: number, R: number, G: number, B: number): [number, number] { 
	const [retval, p2_out] = _in(0x97c9e4e7, 0x024a8f2c, p0, p1, _i, p3, isLeader, unk0, clanDesc, R, G, B, _r, _ri);
	return [retval as number, p2_out as number]; 
}

export function endTextCommandThefeedPostCrewtagWithGameName(p0: boolean, p1: boolean, p3: number, isLeader: boolean, unk0: boolean, clanDesc: number, playerName: string, R: number, G: number, B: number): [number, number] { 
	const [retval, p2_out] = _in(0x137bc355, 0x89e34e1e, p0, p1, _i, p3, isLeader, unk0, clanDesc, _ts(playerName), R, G, B, _r, _ri);
	return [retval as number, p2_out as number]; 
}

/**
 * This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.
 * 
 * List of picNames: https://pastebin.com/XdpJVbHz
 * 
 * 
 * flash is a bool for fading in.
 * iconTypes:
 * 1 : Chat Box
 * 2 : Email
 * 3 : Add Friend Request
 * 4 : Nothing
 * 5 : Nothing
 * 6 : Nothing
 * 7 : Right Jumping Arrow
 * 8 : RP Icon
 * 9 : $ Icon
 * 
 * "sender" is the very top header. This can be any old string.
 * "subject" is the header under the sender.
 * @param txdName
 * @param textureName
 * @param flash
 * @param iconType
 * @param sender
 * @param subject
 */
export function endTextCommandThefeedPostMessagetext(txdName: string, textureName: string, flash: boolean, iconType: number, sender: string, subject: string): number { 
	return _in(0x1ccd9a37, 0x359072cf, _ts(txdName), _ts(textureName), flash, iconType, _ts(sender), _ts(subject), _r, _ri); 
}

/**
 * This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.
 * 
 * Needs more research.
 * 
 * Only one type of usage in the scripts:
 * 
 * HUD::END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_SUBTITLE_LABEL("CHAR_ACTING_UP", "CHAR_ACTING_UP", 0, 0, "DI_FEED_CHAR", a_0);
 * @param txdName
 * @param textureName
 * @param flash
 * @param iconType
 * @param sender
 * @param subject
 */
export function endTextCommandThefeedPostMessagetextSubtitleLabel(txdName: string, textureName: string, flash: boolean, iconType: number, sender: string, subject: string): number { 
	return _in(0xc6f580e4, 0xc94926ac, _ts(txdName), _ts(textureName), flash, iconType, _ts(sender), _ts(subject), _r, _ri); 
}

/**
 * This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.
 * 
 * NOTE: 'duration' is a multiplier, so 1.0 is normal, 2.0 is twice as long (very slow), and 0.5 is half as long.
 * 
 * Example, only occurrence in the scripts:
 * v_8 = HUD::END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_TU("CHAR_SOCIAL_CLUB", "CHAR_SOCIAL_CLUB", 0, 0, &v_9, "", a_5);
 * @param txdName
 * @param textureName
 * @param flash
 * @param iconType
 * @param sender
 * @param subject
 * @param duration
 */
export function endTextCommandThefeedPostMessagetextTu(txdName: string, textureName: string, flash: boolean, iconType: number, sender: string, subject: string, duration: number): number { 
	return _in(0x1e661114, 0x9db3db6b, _ts(txdName), _ts(textureName), flash, iconType, _ts(sender), _ts(subject), _fv(duration), _r, _ri); 
}

/**
 * This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.
 * 
 * List of picNames https://pastebin.com/XdpJVbHz
 * 
 * flash is a bool for fading in.
 * iconTypes:
 * 1 : Chat Box
 * 2 : Email
 * 3 : Add Friend Request
 * 4 : Nothing
 * 5 : Nothing
 * 6 : Nothing
 * 7 : Right Jumping Arrow
 * 8 : RP Icon
 * 9 : $ Icon
 * 
 * "sender" is the very top header. This can be any old string.
 * "subject" is the header under the sender.
 * "duration" is a multiplier, so 1.0 is normal, 2.0 is twice as long (very slow), and 0.5 is half as long.
 * "clanTag" shows a crew tag in the "sender" header, after the text. You need to use 3 underscores as padding. Maximum length of this field seems to be 7. (e.g. "MK" becomes "___MK", "ACE" becomes "___ACE", etc.)
 * @param txdName
 * @param textureName
 * @param flash
 * @param iconType
 * @param sender
 * @param subject
 * @param duration
 * @param clanTag
 */
export function endTextCommandThefeedPostMessagetextWithCrewTag(txdName: string, textureName: string, flash: boolean, iconType: number, sender: string, subject: string, duration: number, clanTag: string): number { 
	return _in(0x5cbf7bad, 0xe20db93e, _ts(txdName), _ts(textureName), flash, iconType, _ts(sender), _ts(subject), _fv(duration), _ts(clanTag), _r, _ri); 
}

/**
 * This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.
 * 
 * List of picNames:  https://pastebin.com/XdpJVbHz
 * 
 * flash is a bool for fading in.
 * iconTypes:
 * 1 : Chat Box
 * 2 : Email
 * 3 : Add Friend Request
 * 4 : Nothing
 * 5 : Nothing
 * 6 : Nothing
 * 7 : Right Jumping Arrow
 * 8 : RP Icon
 * 9 : $ Icon
 * 
 * "sender" is the very top header. This can be any old string.
 * "subject" is the header under the sender.
 * "duration" is a multiplier, so 1.0 is normal, 2.0 is twice as long (very slow), and 0.5 is half as long.
 * "clanTag" shows a crew tag in the "sender" header, after the text. You need to use 3 underscores as padding. Maximum length of this field seems to be 7. (e.g. "MK" becomes "___MK", "ACE" becomes "___ACE", etc.)
 * iconType2 is a mirror of iconType. It shows in the "subject" line, right under the original iconType.
 * 
 * 
 * int IconNotification(char *text, char *text2, char *Subject)
 * {
 * BEGIN_TEXT_COMMAND_THEFEED_POST("STRING");
 * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
 * _SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_SOCIAL_CLUB", "CHAR_SOCIAL_CLUB", 1, 7, text2, Subject, 1.0f, "__EXAMPLE", 7);
 * return END_TEXT_COMMAND_THEFEED_POST_TICKER(1, 1);
 * }
 * @param txdName
 * @param textureName
 * @param flash
 * @param iconType1
 * @param sender
 * @param subject
 * @param duration
 * @param clanTag
 * @param iconType2
 * @param p9
 */
export function endTextCommandThefeedPostMessagetextWithCrewTagAndAdditionalIcon(txdName: string, textureName: string, flash: boolean, iconType1: number, sender: string, subject: string, duration: number, clanTag: string, iconType2: number, p9: number): number { 
	return _in(0x531b84e7, 0xda981fb6, _ts(txdName), _ts(textureName), flash, iconType1, _ts(sender), _ts(subject), _fv(duration), _ts(clanTag), iconType2, p9, _r, _ri); 
}

export function endTextCommandThefeedPostMpticker(blink: boolean, p1: boolean): number { 
	return _in(0xf020c969, 0x15705b3a, blink, p1, _r, _ri); 
}

/**
 * returns a notification handle, prints out a notification like below:
 * type range: 0 - 2
 * if you set type to 1, image goes from 0 - 39 - Xbox you can add text to
 * 
 * example:
 * HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(1, 20, "Who you trynna get crazy with, ese? Don't you know I'm LOCO?!");
 * - https://imgur.com/lGBPCz3
 * @param type
 * @param image
 * @param text
 */
export function endTextCommandThefeedPostReplay(type: number, image: number, text: string): number { 
	return _in(0xd202b92c, 0xbf1d816f, type, image, _ts(text), _r, _ri); 
}

/**
 * returns a notification handle, prints out a notification like below:
 * type range: 0 - 2
 * if you set type to 1, button accepts "~INPUT_SOMETHING~"
 * 
 * example:
 * HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(1, "~INPUT_TALK~", "Who you trynna get crazy with, ese? Don't you know I'm LOCO?!");
 * - https://imgur.com/UPy0Ial
 * 
 * 
 * Examples from the scripts:
 * l_D1[1 -- [[1]] ]=HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(1,"~INPUT_REPLAY_START_STOP_RECORDING~","");
 * l_D1[2 -- [[1]] ]=HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(1,"~INPUT_SAVE_REPLAY_CLIP~","");
 * l_D1[1 -- [[1]] ]=HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(1,"~INPUT_REPLAY_START_STOP_RECORDING~","");
 * l_D1[2 -- [[1]] ]=HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(1,"~INPUT_REPLAY_START_STOP_RECORDING_SECONDARY~","");
 * 
 * @param type
 * @param button
 * @param text
 */
export function endTextCommandThefeedPostReplayInput(type: number, button: string, text: string): number { 
	return _in(0xdd6cb2cc, 0xe7c2735c, type, _ts(button), _ts(text), _r, _ri); 
}

/**
 * List of picture names: https://pastebin.com/XdpJVbHz
 * Example result: https://i.imgur.com/SdEZ22m.png
 * @param statTitle
 * @param iconEnum
 * @param stepVal
 * @param barValue
 * @param isImportant
 * @param pictureTextureDict
 * @param pictureTextureName
 */
export function endTextCommandThefeedPostStats(statTitle: string, iconEnum: number, stepVal: boolean, barValue: number, isImportant: boolean, pictureTextureDict: string, pictureTextureName: string): number { 
	return _in(0x2b7e9a4e, 0xaaa93c89, _ts(statTitle), iconEnum, stepVal, barValue, isImportant, _ts(pictureTextureDict), _ts(pictureTextureName), _r, _ri); 
}

export function endTextCommandThefeedPostTicker(blink: boolean, p1: boolean): number { 
	return _in(0x2ed7843f, 0x8f801023, blink, p1, _r, _ri); 
}

export function endTextCommandThefeedPostTickerForced(blink: boolean, p1: boolean): number { 
	return _in(0x44fa0397, 0x5424a0ee, blink, p1, _r, _ri); 
}

export function endTextCommandThefeedPostTickerWithTokens(blink: boolean, p1: boolean): number { 
	return _in(0x378e809b, 0xf61ec840, blink, p1, _r, _ri); 
}

export function endTextCommandThefeedPostUnlock(gxtLabel1: string, p1: number, gxtLabel2: string): number { 
	return _in(0x33ee1274, 0x3ccd6343, _ts(gxtLabel1), p1, _ts(gxtLabel2), _r, _ri); 
}

export function endTextCommandThefeedPostUnlockTu(gxtLabel1: string, p1: number, gxtLabel2: string, p3: number): number { 
	return _in(0xc8f3aaf9, 0x3d0600bf, _ts(gxtLabel1), p1, _ts(gxtLabel2), p3, _r, _ri); 
}

export function endTextCommandThefeedPostUnlockTuWithColor(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number): number { 
	return _in(0x7ae05890, 0x93a2e088, p0, p1, p2, p3, p4, p5, _r, _ri); 
}

/**
 * This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.
 * 
 * List of picNames: https://pastebin.com/XdpJVbHz
 * HUD colors and their values: https://pastebin.com/d9aHPbXN
 * 
 * Shows a deathmatch score above the minimap, example: https://i.imgur.com/YmoMklG.png
 * @param txdName1
 * @param textureName1
 * @param count1
 * @param txdName2
 * @param textureName2
 * @param count2
 * @param hudColor1
 * @param hudColor2
 */
export function endTextCommandThefeedPostVersusTu(txdName1: string, textureName1: string, count1: number, txdName2: string, textureName2: string, count2: number, hudColor1: number, hudColor2: number): number { 
	return _in(0xb6871b05, 0x55b02996, _ts(txdName1), _ts(textureName1), count1, _ts(txdName2), _ts(textureName2), count2, hudColor1, hudColor2, _r, _ri); 
}

/**
 * Same as END_TEXT_COMMAND_SCALEFORM_STRING but does not perform HTML conversion for text tokens.
 * 
 * END_TEXT_COMMAND_VIA_SPECIAL_MODIFIABLE_STRING?
 */
export function endTextCommandUnparsedScaleformString(): void { 
	return _in(0xae4e8157, 0xd9ecf087); 
}

/**
 * From fm_deathmatch_creator and fm_race_creator:
 * 
 * FILES::REVERT_CONTENT_CHANGESET_GROUP_FOR_ALL(joaat("GROUP_MAP_SP"));
 * FILES::EXECUTE_CONTENT_CHANGESET_GROUP_FOR_ALL(joaat("GROUP_MAP"));
 * @param hash
 */
export function executeContentChangesetGroupForAll(hash: number): void { 
	return _in(0x6bedf576, 0x9ac2dc07, _ch(hash)); 
}

/**
 * Forces the ped to fall back and kills it.
 * 
 * It doesn't really explode the ped's head but it kills the ped
 * @param ped
 * @param weaponHash
 */
export function explodePedHead(ped: number, weaponHash: number): void { 
	return _in(0x2d05ced3, 0xa38d0f3a, ped, _ch(weaponHash)); 
}

/**
 * WEAPON::EXPLODE_PROJECTILES(PLAYER::PLAYER_PED_ID(), func_221(0x00000003), 0x00000001);
 * @param ped
 * @param weaponHash
 * @param p2
 */
export function explodeProjectiles(ped: number, weaponHash: number, p2: boolean): void { 
	return _in(0xfc4bd125, 0xde7611e4, ped, _ch(weaponHash), p2); 
}

/**
 * Explodes a selected vehicle.
 * 
 * Vehicle vehicle = Vehicle you want to explode.
 * BOOL isAudible = If explosion makes a sound.
 * BOOL isInvisible = If the explosion is invisible or not.
 * 
 * First BOOL does not give any visual explosion, the vehicle just falls apart completely but slowly and starts to burn.
 * @param vehicle
 * @param isAudible
 * @param isInvisible
 */
export function explodeVehicle(vehicle: number, isAudible: boolean, isInvisible: boolean): void { 
	return _in(0xba71116a, 0xdf5b514c, vehicle, isAudible, isInvisible); 
}

export function explodeVehicleInCutscene(vehicle: number, p1: boolean): void { 
	return _in(0x786a4eb6, 0x7b01bf0b, vehicle, p1); 
}

/**
 * Appears only 3 times in the scripts, more specifically in michael1.ysc
 * 
 * -
 * This can be used to prevent dying if you are "out of the world"
 * @param x
 * @param y
 * @param z
 */
export function extendWorldBoundaryForPlayer(x: number, y: number, z: number): void { 
	return _in(0x5006d96c, 0x995a5827, _fv(x), _fv(y), _fv(z)); 
}

export function facebookCanPostToFacebook(): boolean { 
	return _in(0x43865688, 0xae10f0d7, _r); 
}

export function facebookDidPostSucceed(): boolean { 
	return _in(0xa75e2b67, 0x33da5142, _r); 
}

export function facebookHasPostCompleted(): boolean { 
	return _in(0x62b9fec9, 0xa11f10ef, _r); 
}

export function facebookPostCompletedHeist(heistName: string, cashEarned: number, xpEarned: number): boolean { 
	return _in(0x098ab65b, 0x9ed9a9ec, _ts(heistName), cashEarned, xpEarned, _r); 
}

export function facebookPostCompletedMilestone(milestoneId: number): boolean { 
	return _in(0x0ae1f165, 0x3b554ab9, milestoneId, _r); 
}

export function facebookPostCreateCharacter(): boolean { 
	return _in(0xdc484731, 0x42545431, _r); 
}

/**
 * Fades nearby decals within the range specified
 * @param x
 * @param y
 * @param z
 * @param p3
 * @param p4
 */
export function fadeDecalsInRange(x: number, y: number, z: number, p3: number, p4: number): void { 
	return _in(0xd77edadb, 0x0420e6e0, _fv(x), _fv(y), _fv(z), _fv(p3), _fv(p4)); 
}

/**
 * Hardcoded to not work in SP.
 * @param p0
 */
export function fadeOutLocalPlayer(p0: boolean): void { 
	return _in(0x416dbd4c, 0xd6ed8dd2, p0); 
}

export function fadeUpPedLight(p0: number): void { 
	return _in(0xc9b18b46, 0x19f48f7b, _fv(p0)); 
}

export function filloutPmPlayerList(p1: number, p2: number): [boolean, number] { 
	const [retval, gamerHandle_out] = _in(0xcbbd7c49, 0x91b64809, _i, p1, p2, _r);
	return [retval as boolean, gamerHandle_out as number]; 
}

export function filloutPmPlayerListWithNames(p2: number, p3: number): [boolean, number, number] { 
	const [retval, p0_out, p1_out] = _in(0x716b6db9, 0xd1886106, _i, _i, p2, p3, _r);
	return [retval as boolean, p0_out as number, p1_out as number]; 
}

export function finalizeHeadBlend(ped: number): void { 
	return _in(0x4668d804, 0x30d6c299, ped); 
}

/**
 * In the script "player_scene_t_bbfight.c4":
 * "if (ENTITY::FIND_ANIM_EVENT_PHASE(&l_16E, &l_19F[v_4 -- [[16]] ], v_9, &v_A, &v_B))"
 * -- &l_16E (p0) is requested as an anim dictionary earlier in the script.
 * -- &l_19F[v_4 -- [[16]] ] (p1) is used in other natives in the script as the "animation" param.
 * -- v_9 (p2) is instantiated as "victim_fall"; I'm guessing that's another anim
 * --v_A and v_B (p3 & p4) are both set as -1.0, but v_A is used immediately after this native for:
 * "if (v_A < ENTITY::GET_ENTITY_ANIM_CURRENT_TIME(...))"
 * Both v_A and v_B are seemingly used to contain both Vector3's and floats, so I can't say what either really is other than that they are both output parameters. p4 looks more like a *Vector3 though
 * 
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param animDictionary
 * @param animName
 * @param p2
 * @param p3
 * @param p4
 */
export function findAnimEventPhase(animDictionary: string, animName: string, p2: string): [boolean, number, number] { 
	const [retval, p3_out, p4_out] = _in(0x07f1be2b, 0xccaa27a7, _ts(animDictionary), _ts(animName), _ts(p2), _i, _i, _r);
	return [retval as boolean, p3_out as number, p4_out as number]; 
}

/**
 * Finds the vehicle that is carrying this entity with a handler frame.
 * The model of the entity must be prop_contr_03b_ld or the function will return 0.
 * @param entity
 */
export function findHandlerVehicleContainerIsAttachedTo(entity: number): number { 
	return _in(0x375e7fc4, 0x4f21c8ab, entity, _r, _ri); 
}

export function findRadioStationIndex(stationNameHash: number): number { 
	return _in(0x8d674897, 0x93ff428b, _ch(stationNameHash), _r, _ri); 
}

/**
 * Native is significantly more complicated than simply generating a random vector & length.
 * The 'point' is either 400.0 or 250.0 units away from the Ped's current coordinates; and paths into functions like rage::grcViewport___IsSphereVisible
 * @param ped
 */
export function findSpawnCoordinatesForHeli(ped: number): Vector3 { 
	return _mv(_in(0x8dc96757, 0x97123522, ped, _r, _rv)); 
}

/**
 * Finds a position ahead of the player by predicting the players next actions.
 * The positions match path finding node positions.
 * When roads diverge, the position may rapidly change between two or more positions. This is due to the engine not being certain of which path the player will take.
 * @param posX
 * @param posY
 * @param posZ
 * @param fwdVecX
 * @param fwdVecY
 * @param fwdVecZ
 * @param distance
 * @param spawnPoint
 */
export function findSpawnPointInDirection(posX: number, posY: number, posZ: number, fwdVecX: number, fwdVecY: number, fwdVecZ: number, distance: number, spawnPoint: Vector3): [boolean, Vector3] { 
	const [retval, spawnPoint_out] = _in(0x6874e219, 0x0b0c1972, _fv(posX), _fv(posY), _fv(posZ), _fv(fwdVecX), _fv(fwdVecY), _fv(fwdVecZ), _fv(distance), _v, _r);
	return [retval as boolean, _mv(spawnPoint_out)]; 
}

export function fireAirDefenceSphereWeaponAtPosition(zoneId: number, x: number, y: number, z: number): void { 
	return _in(0x44f1012b, 0x69313374, zoneId, _fv(x), _fv(y), _fv(z)); 
}

export function fixObjectFragment(object: number): void { 
	return _in(0xf9c16813, 0x47c8bd15, object); 
}

/**
 * windowIndex:
 * 0 = Front Left Window
 * 1 = Front Right Window
 * 2 = Rear Left Window
 * 3 = Rear Right Window
 * 4 = Front Windscreen
 * 5 = Rear Windscreen
 * 6 = Mid Left
 * 7 = Mid Right
 * 8 = Invalid
 * 
 * Additional information: FIX_VEHICLE_WINDOW (0x140D0BB88) references an array of bone vehicle indices (0x141D4B3E0) { 2Ah, 2Bh, 2Ch, 2Dh, 2Eh, 2Fh, 28h, 29h } that correspond to: window_lf, window_rf, window_lr, window_rr, window_lm, window_rm, windscreen, windscreen_r. This array is used by most vehwindow natives.
 * 
 * Also, this function is coded to not work on vehicles of type: CBike, Bmx, CBoat, CTrain, and CSubmarine.
 * @param vehicle
 * @param windowIndex
 */
export function fixVehicleWindow(vehicle: number, windowIndex: number): void { 
	return _in(0x772282eb, 0xeb95e682, vehicle, windowIndex); 
}

export function flagPlayerContextInTournament(toggle: boolean): void { 
	return _in(0xcef21431, 0x5d276fd1, toggle); 
}

export function flashAbilityBar(millisecondsToFlash: number): void { 
	return _in(0x02cfba0c, 0x9e9275ce, millisecondsToFlash); 
}

/**
 * adds a short flash to the Radar/Minimap
 * Usage: UI.FLASH_MINIMAP_DISPLAY
 */
export function flashMinimapDisplay(): void { 
	return _in(0xf2dd778c, 0x22b15bda); 
}

export function flashMinimapDisplayWithColor(hudColorIndex: number): void { 
	return _in(0x6b1de27e, 0xe78e6a19, hudColorIndex); 
}

export function flashWantedDisplay(p0: boolean): void { 
	return _in(0xa18afb39, 0x081b6a1f, p0); 
}

export function floor(value: number): number { 
	return _in(0xf34ee736, 0xcf047844, _fv(value), _r, _ri); 
}

export function forceActivatePhysicsOnUnfixedPickup(pickup: number, toggle: boolean): void { 
	return _in(0x4c134b4d, 0xf76025d0, pickup, toggle); 
}

export function forceActivatingTrackingOnEntity(p0: number, p1: number): void { 
	return _in(0x38c1cb1c, 0xb119a016, p0, p1); 
}

export function forceAllHeadingValuesToAlign(ped: number): void { 
	return _in(0xff287323, 0xb0e2c69a, ped); 
}

export function forceAllowSnowFootVfxOnIce(toggle: boolean): void { 
	return _in(0xa342a376, 0x3b3afb6c, toggle); 
}

export function forceAllowTimeBasedFadingThisFrame(): void { 
	return _in(0x03f1a106, 0xbda7dd3e); 
}

export function forceBonnetCameraRelativeHeadingAndPitch(p0: number, p1: number): void { 
	return _in(0x28b022a1, 0x7b068a3a, _fv(p0), _fv(p1)); 
}

export function forceCamFarClip(cam: number, p1: number): void { 
	return _in(0xaabd6287, 0x3ffb1a33, cam, _fv(p1)); 
}

export function forceCameraRelativeHeadingAndPitch(roll: number, pitch: number, yaw: number): void { 
	return _in(0x48608c34, 0x64f58ab4, _fv(roll), _fv(pitch), _fv(yaw)); 
}

export function forceCheckScriptVariables(): void { 
	return _in(0x8e580ab9, 0x02917360); 
}

export function forceCinematicRenderingThisUpdate(toggle: boolean): void { 
	return _in(0xa41bcd72, 0x13805aac, toggle); 
}

/**
 * used with 1,2,8,64,128 in the scripts
 * @param cleanupFlags
 */
export function forceCleanup(cleanupFlags: number): void { 
	return _in(0xbc8983f3, 0x8f78ed51, cleanupFlags); 
}

/**
 * PLAYER::FORCE_CLEANUP_FOR_ALL_THREADS_WITH_THIS_NAME("pb_prostitute", 1); // Found in decompilation
 * @param name
 * @param cleanupFlags
 */
export function forceCleanupForAllThreadsWithThisName(name: string, cleanupFlags: number): void { 
	return _in(0x4c68dddd, 0xf0097317, _ts(name), cleanupFlags); 
}

export function forceCleanupForThreadWithThisId(id: number, cleanupFlags: number): void { 
	return _in(0xf745b376, 0x30df176b, id, cleanupFlags); 
}

export function forceCloseReportugcMenu(): void { 
	return _in(0xee4c0e6d, 0xbc6f2c6f); 
}

export function forceCloseTextInputBox(): void { 
	return _in(0x8817605c, 0x2ba76200); 
}

export function forceCloudMpStatsDownloadAndOverwriteLocalSave(): void { 
	return _in(0x6f361b88, 0x89a792a3); 
}

/**
 * Based on carmod_shop script decompile this takes a vehicle parameter. It is called when repair is done on initial enter.
 * @param entity
 */
export function forceEntityAiAndAnimationUpdate(entity: number): void { 
	return _in(0x40fdedb7, 0x2f8293b2, entity); 
}

export function forceExposureReadback(toggle: boolean): void { 
	return _in(0x814af7dc, 0xaacc597b, toggle); 
}

/**
 * Sets the localplayer playerinfo state back to playing (State 0)
 * 
 * States are:
 * -1: "Invalid"
 * 0: "Playing"
 * 1: "Died"
 * 2: "Arrested"
 * 3: "Failed Mission"
 * 4: "Left Game"
 * 5: "Respawn"
 * 6: "In MP Cutscene"
 */
export function forceGameStatePlaying(): void { 
	return _in(0xc0aa53f8, 0x66b3134d); 
}

export function forceGroundSnowPass(toggle: boolean): void { 
	return _in(0x6e9ef3a3, 0x3c8899f8, toggle); 
}

export function forceInstantLegIkSetup(ped: number): void { 
	return _in(0xed3c76ad, 0xfa6d07c4, ped); 
}

/**
 * creates single lightning+thunder at random position
 */
export function forceLightningFlash(): void { 
	return _in(0xf6062e08, 0x9251c898); 
}

/**
 * Changes start time of a tracklist (milliseconds)
 * R* uses a random int: MISC::GET_RANDOM_INT_IN_RANGE(0, 13) * 60000)
 * @param radioStation
 * @param trackListName
 * @param milliseconds
 */
export function forceMusicTrackList(radioStation: string, trackListName: string, milliseconds: number): void { 
	return _in(0x4e0af911, 0x4608257c, _ts(radioStation), _ts(trackListName), milliseconds); 
}

export function forceNextMessageToPreviousBriefsList(p0: number): void { 
	return _in(0x57d760d5, 0x5f54e071, p0); 
}

export function forceOffWantedStarFlash(toggle: boolean): void { 
	return _in(0xba8d65c1, 0xc65702e5, toggle); 
}

export function forceParticleFxInVehicleInterior(p0: number, p1: number): void { 
	return _in(0xba0127da, 0x25fd54c9, p0, p1); 
}

export function forcePedAiAndAnimationUpdate(ped: number, p1: boolean, p2: boolean): void { 
	return _in(0x22084380, 0x12482a1a, ped, p1, p2); 
}

/**
 * Regarding p2, p3 and p4: Most common is 0, 0, 0); followed by 0, 1, 0); and 1, 1, 0); in R* scripts. p4 is very rarely something other than 0.
 * 
 * enum eMotionState // 0x92A659FE
 * {
 * MotionState_None = 0xEE717723,
 * MotionState_Idle = 0x9072A713,
 * MotionState_Walk = 0xD827C3DB,
 * MotionState_Run = 0xFFF7E7A4,
 * MotionState_Sprint = 0xBD8817DB,
 * MotionState_Crouch_Idle = 0x43FB099E,
 * MotionState_Crouch_Walk = 0x08C31A98,
 * MotionState_Crouch_Run = 0x3593CF09,
 * MotionState_DoNothing = 0x0EC17E58,
 * MotionState_AnimatedVelocity = 0x551AAC43,
 * MotionState_InVehicle = 0x94D9D58D,
 * MotionState_Aiming = 0x3F67C6AF,
 * MotionState_Diving_Idle = 0x4848CDED,
 * MotionState_Diving_Swim = 0x916E828C,
 * MotionState_Swimming_TreadWater = 0xD1BF11C7,
 * MotionState_Dead = 0x0DBB071C,
 * MotionState_Stealth_Idle = 0x422D7A25,
 * MotionState_Stealth_Walk = 0x042AB6A2,
 * MotionState_Stealth_Run = 0xFB0B79E1,
 * MotionState_Parachuting = 0xBAC0F10B,
 * MotionState_ActionMode_Idle = 0xDA40A0DC,
 * MotionState_ActionMode_Walk = 0xD2905EA7,
 * MotionState_ActionMode_Run = 0x31BADE14,
 * MotionState_Jetpack = 0x535E6A5E
 * };
 * @param ped
 * @param motionStateHash
 * @param p2
 * @param p3
 * @param p4
 */
export function forcePedMotionState(ped: number, motionStateHash: number, p2: boolean, p3: number, p4: boolean): boolean { 
	return _in(0xf28965d0, 0x4f570dca, ped, _ch(motionStateHash), p2, p3, p4, _r); 
}

export function forcePedPanicWalla(): void { 
	return _in(0x062d5ead, 0x4da2fa6a); 
}

export function forcePedToOpenParachute(ped: number): void { 
	return _in(0x16e42e80, 0x0b472221, ped); 
}

export function forcePickupRegenerate(p0: number): void { 
	return _in(0x758a5c1b, 0x3b1e1990, p0); 
}

export function forcePickupRotateFaceUp(): void { 
	return _in(0x394cd08e, 0x31313c28); 
}

/**
 * Often called after START_PLAYBACK_RECORDED_VEHICLE and SKIP_TIME_IN_PLAYBACK_RECORDED_VEHICLE; similar in use to FORCE_ENTITY_AI_AND_ANIMATION_UPDATE.
 * @param vehicle
 * @param p1
 */
export function forcePlaybackRecordedVehicleUpdate(vehicle: number, p1: boolean): void { 
	return _in(0x1f2e4e06, 0xdea8992b, vehicle, p1); 
}

export function forcePortablePickupLastAccessiblePositionSetting(object: number): void { 
	return _in(0x5ce2e45a, 0x5ce2e45a, object); 
}

export function forcePostfxBulletImpactsAfterHud(p0: boolean): void { 
	return _in(0x9b079e52, 0x21d984d3, p0); 
}

export function forceRenderInGameUi(toggle: boolean): void { 
	return _in(0xdc459cfa, 0x0cce245b, toggle); 
}

export function forceRoomForEntity(entity: number, interior: number, roomHashKey: number): void { 
	return _in(0x52923c47, 0x10dd9907, entity, interior, _ch(roomHashKey)); 
}

export function forceRoomForGameViewport(interiorID: number, roomHashKey: number): void { 
	return _in(0x920d853f, 0x3e17f1da, interiorID, _ch(roomHashKey)); 
}

/**
 * Not present in retail version of the game, actual definiton seems to be
 * _LOG_DEBUG_INFO(const char* category, const char* debugText);
 * @param p0
 */
export function forceScriptedGfxWhenFrontendActive(p0: string): void { 
	return _in(0x2162c446, 0xdfdf38fd, _ts(p0)); 
}

/**
 * Doesn't actually return anything.
 */
export function forceSonarBlipsThisFrame(): boolean { 
	return _in(0x1121bfa1, 0xa1a522a8, _r); 
}

/**
 * This has been found in use in the decompiled files.
 * @param player
 */
export function forceStartHiddenEvasion(player: number): void { 
	return _in(0xad73ce5a, 0x09e42d12, player); 
}

export function forceSubThrottleForTime(vehicle: number, p1: number, p2: number): void { 
	return _in(0x99cad8e7, 0xafdb60fa, vehicle, _fv(p1), _fv(p2)); 
}

export function forceSubmarineNeurtalBuoyancy(p0: number, p1: number): void { 
	return _in(0xc67db108, 0xa9ade3be, p0, p1); 
}

export function forceSubmarineSurfaceMode(vehicle: number, toggle: boolean): void { 
	return _in(0x33506883, 0x545ac0df, vehicle, toggle); 
}

export function forceTightspaceCustomFramingThisUpdate(): void { 
	return _in(0x380b4968, 0xd1e09e55); 
}

/**
 * This native sets the audio of the specified vehicle to the audioName (p1).
 * 
 * Use the audioNameHash found in vehicles.meta
 * 
 * Example:
 * _SET_VEHICLE_AUDIO(veh, "ADDER");
 * The selected vehicle will now have the audio of the Adder.
 * @param vehicle
 * @param audioName
 */
export function forceUseAudioGameObject(vehicle: number, audioName: string): void { 
	return _in(0x4f0c4139, 0x26060b38, vehicle, _ts(audioName)); 
}

export function forceVehicleCamStuntSettingsThisUpdate(): void { 
	return _in(0x0aa27680, 0xa0bd43fa); 
}

/**
 * Called together with SET_VEHICLE_TYRES_CAN_BURST
 * @param vehicle
 * @param force
 */
export function forceVehicleEngineSynth(vehicle: number, force: boolean): void { 
	return _in(0xeb7d0e1f, 0xcc8fe17a, vehicle, force); 
}

export function forceZeroMassInCollisions(ped: number): void { 
	return _in(0xd33daa36, 0x272177c4, ped); 
}

export function freeMemoryForHighQualityPhoto(): void { 
	return _in(0xd801cc02, 0x177fa3f1); 
}

export function freeMemoryForLowQualityPhoto(): void { 
	return _in(0x6a12d888, 0x81435dca); 
}

export function freeMemoryForMissionCreatorPhoto(): void { 
	return _in(0x0a46af8a, 0x78dc5e0a); 
}

export function freeMemoryForMissionCreatorPhotoPreview(): void { 
	return _in(0x346ef3ec, 0xaaab149e); 
}

/**
 * Freezes or unfreezes an entity preventing its coordinates to change by the player if set to `true`. You can still change the entity position using SET_ENTITY_COORDS.
 * @param entity
 * @param toggle
 */
export function freezeEntityPosition(entity: number, toggle: boolean): void { 
	return _in(0x428ca6db, 0xd1094446, entity, toggle); 
}

export function freezeMicrophone(): void { 
	return _in(0xd57aaae0, 0xe2214d11); 
}

export function freezeRadioStation(radioStation: string): void { 
	return _in(0x344f393b, 0x027e38c3, _ts(radioStation)); 
}

export function fullyChargeNitrous(vehicle: number): void { 
	return _in(0x1a2bcc8c, 0x636f9226, vehicle); 
}

/**
 * p3 is 0 in the only game script occurrence (trevor3) but 1 doesn't seem to make a difference
 * 
 * distToNxJunction seems to be the distance in metres * 10.0f
 * 
 * direction:
 * 0 = This happens randomly during the drive for seemingly no reason but if you consider that this native is only used in trevor3, it seems to mean "Next frame, stop whatever's being said and tell the player the direction."
 * 1 = Route is being calculated or the player is going in the wrong direction
 * 2 = Please Proceed the Highlighted Route
 * 3 = In (distToNxJunction) Turn Left
 * 4 = In (distToNxJunction) Turn Right
 * 5 = In (distToNxJunction) Keep Straight
 * 6 = In (distToNxJunction) Turn Sharply To The Left
 * 7 = In (distToNxJunction) Turn Sharply To The Right
 * 8 = Route is being recalculated or the navmesh is confusing. This happens randomly during the drive but consistently at {2044.0358, 2996.6116, 44.9717} if you face towards the bar and the route needs you to turn right. In that particular case, it could be a bug with how the turn appears to be 270 deg. CCW instead of "right." Either way, this seems to be the engine saying "I don't know the route right now."
 * 
 * return value set to 0 always
 * @param x
 * @param y
 * @param z
 * @param p3
 * @param direction
 * @param p5
 * @param distToNxJunction
 */
export function generateDirectionsToCoord(x: number, y: number, z: number, p3: boolean): [number, number, number, number] { 
	const [retval, direction_out, p5_out, distToNxJunction_out] = _in(0xf90125f1, 0xf79ecdf8, _fv(x), _fv(y), _fv(z), p3, _i, _f, _f, _r, _ri);
	return [retval as number, direction_out as number, p5_out as number, distToNxJunction_out as number]; 
}

export function generateVehicleCreationPosFromPaths(p1: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number): [boolean, Vector3, Vector3] { 
	const [retval, outVec_out, outVec1_out] = _in(0xa4822f1c, 0xf23f4810, _v, p1, _v, p3, p4, p5, p6, p7, p8, _r);
	return [retval as boolean, _mv(outVec_out), _mv(outVec1_out)]; 
}

/**
 * For Steam.
 * Always returns 0 in retail version of the game.
 * @param achievementId
 */
export function getAchievementProgress(achievementId: number): number { 
	return _in(0x1c186837, 0xd0619335, achievementId, _r, _ri); 
}

/**
 * https://alloc8or.re/gta5/doc/enums/eVehicleMissionType.txt
 * @param vehicle
 */
export function getActiveVehicleMissionType(vehicle: number): number { 
	return _in(0x534aeba6, 0xe5ed4cab, vehicle, _r, _ri); 
}

/**
 * Returns current screen resolution.
 * @param x
 * @param y
 */
export function getActualScreenResolution(): [number, number] { 
	const [x_out, y_out] = _in(0x873c9f31, 0x04101dd3, _i, _i);
	return [x_out as number, y_out as number]; 
}

export function getAiPedPedBlipIndex(ped: number): number { 
	return _in(0x7cd93401, 0x0e115c2c, ped, _r, _ri); 
}

/**
 * Returns the current AI BLIP for the specified ped
 * @param ped
 */
export function getAiPedVehicleBlipIndex(ped: number): number { 
	return _in(0x56176892, 0x826a4fe8, ped, _r, _ri); 
}

export function getAllVehicles(vehsStruct: number): [number, number] { 
	const [retval, vehsStruct_out] = _in(0x9b8e1bf0, 0x4b51f2e8, _ii(vehsStruct), _r, _ri);
	return [retval as number, vehsStruct_out as number]; 
}

export function getAllocatedStackSize(): number { 
	return _in(0x8b3ca62b, 0x1ef19b62, _r, _ri); 
}

/**
 * Returns profile setting 17.
 */
export function getAllowMovementWhileZoomed(): boolean { 
	return _in(0xfc859e23, 0x74407556, _r); 
}

export function getAmbientVoiceNameHash(ped: number): number { 
	return _in(0x5e203da2, 0xba15d436, ped, _r, _ri); 
}

/**
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param ammo
 */
export function getAmmoInClip(ped: number, weaponHash: number, ammo: number): [boolean, number] { 
	const [retval, ammo_out] = _in(0x2e120224, 0x8937775c, ped, _ch(weaponHash), _ii(ammo), _r);
	return [retval as boolean, ammo_out as number]; 
}

/**
 * WEAPON::GET_AMMO_IN_PED_WEAPON(PLAYER::PLAYER_PED_ID(), a_0)
 * 
 * From decompiled scripts
 * Returns total ammo in weapon
 * 
 * GTALua Example :
 * natives.WEAPON.GET_AMMO_IN_PED_WEAPON(plyPed, WeaponHash)
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponhash
 */
export function getAmmoInPedWeapon(ped: number, weaponhash: number): number { 
	return _in(0x015a5221, 0x36d7f951, ped, _ch(weaponhash), _r, _ri); 
}

export function getAmmoInVehicleWeaponClip(vehicle: number, seat: number, ammo: number): [boolean, number] { 
	const [retval, ammo_out] = _in(0x2857938c, 0x5d407afa, vehicle, seat, _ii(ammo), _r);
	return [retval as boolean, ammo_out as number]; 
}

export function getAngleBetween2dVectors(x1: number, y1: number, x2: number, y2: number): number { 
	return _in(0x186fc4be, 0x848e1c92, _fv(x1), _fv(y1), _fv(x2), _fv(y2), _r, _rf); 
}

/**
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param animDict
 * @param animName
 */
export function getAnimDuration(animDict: string, animName: string): number { 
	return _in(0xfeddf04d, 0x62b8d790, _ts(animDict), _ts(animName), _r, _rf); 
}

/**
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param animDict
 * @param animName
 * @param x
 * @param y
 * @param z
 * @param xRot
 * @param yRot
 * @param zRot
 * @param p8
 * @param p9
 */
export function getAnimInitialOffsetPosition(animDict: string, animName: string, x: number, y: number, z: number, xRot: number, yRot: number, zRot: number, p8: number, p9: number): Vector3 { 
	return _mv(_in(0xbe22b26d, 0xd764c040, _ts(animDict), _ts(animName), _fv(x), _fv(y), _fv(z), _fv(xRot), _fv(yRot), _fv(zRot), _fv(p8), p9, _r, _rv)); 
}

/**
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param animDict
 * @param animName
 * @param x
 * @param y
 * @param z
 * @param xRot
 * @param yRot
 * @param zRot
 * @param p8
 * @param p9
 */
export function getAnimInitialOffsetRotation(animDict: string, animName: string, x: number, y: number, z: number, xRot: number, yRot: number, zRot: number, p8: number, p9: number): Vector3 { 
	return _mv(_in(0x4b805e60, 0x46ee9e47, _ts(animDict), _ts(animName), _fv(x), _fv(y), _fv(z), _fv(xRot), _fv(yRot), _fv(zRot), _fv(p8), p9, _r, _rv)); 
}

/**
 * Returns CGameWorldHeightMap's minimum Z among all grid nodes that intersect with the specified rectangle.
 * @param x1
 * @param y1
 * @param x2
 * @param y2
 */
export function getApproxFloorForArea(x1: number, y1: number, x2: number, y2: number): number { 
	return _in(0x3599d741, 0xc9ac6310, _fv(x1), _fv(y1), _fv(x2), _fv(y2), _r, _rf); 
}

/**
 * Returns CGameWorldHeightMap's minimum Z value at specified point (grid node).
 * @param x
 * @param y
 */
export function getApproxFloorForPoint(x: number, y: number): number { 
	return _in(0x336511a3, 0x4f2e5185, _fv(x), _fv(y), _r, _rf); 
}

/**
 * Returns CGameWorldHeightMap's maximum Z among all grid nodes that intersect with the specified rectangle.
 * @param x1
 * @param y1
 * @param x2
 * @param y2
 */
export function getApproxHeightForArea(x1: number, y1: number, x2: number, y2: number): number { 
	return _in(0x8abe8608, 0x576d9ce3, _fv(x1), _fv(y1), _fv(x2), _fv(y2), _r, _rf); 
}

/**
 * Returns CGameWorldHeightMap's maximum Z value at specified point (grid node).
 * @param x
 * @param y
 */
export function getApproxHeightForPoint(x: number, y: number): number { 
	return _in(0x29c24bfb, 0xed8ab8fb, _fv(x), _fv(y), _r, _rf); 
}

/**
 * Returns true when the bomb bay doors of this plane are open. False if they're closed.
 * @param aircraft
 */
export function getAreBombBayDoorsOpen(aircraft: number): boolean { 
	return _in(0xd0917a42, 0x3314bba8, aircraft, _r); 
}

/**
 * Returns true when the player is not able to control the cam i.e. when running a benchmark test, switching the player or viewing a cutscene.
 * 
 * Note: I am not 100% sure if the native actually checks if the cam control is disabled but it seems promising.
 */
export function getAreCameraControlsDisabled(): boolean { 
	return _in(0x7c814d2f, 0xb49f40c0, _r); 
}

export function getAspectRatio(b: boolean): number { 
	return _in(0xf1307ef6, 0x24a80d87, b, _r, _rf); 
}

/**
 * Gets the position of the cargobob hook, in world coords.
 * @param cargobob
 */
export function getAttachedPickUpHookPosition(cargobob: number): Vector3 { 
	return _mv(_in(0xcbdb9b92, 0x3cacc92d, cargobob, _r, _rv)); 
}

export function getAudibleMusicTrackTextId(): number { 
	return _in(0x50b196fc, 0x9ed6545b, _r, _ri); 
}

export function getBaseElementLocationFromMetadataBlock(p2: number, p3: boolean): [boolean, number, number] { 
	const [retval, p0_out, p1_out] = _in(0xb335f761, 0x606db47c, _i, _i, p2, p3, _r);
	return [retval as boolean, p0_out as number, p1_out as number]; 
}

/**
 * Returns value of the '-benchmarkIterations' command line option.
 */
export function getBenchmarkIterations(): number { 
	return _in(0x4750fc27, 0x570311ec, _r, _ri); 
}

/**
 * Returns value of the '-benchmarkPass' command line option.
 */
export function getBenchmarkPass(): number { 
	return _in(0x1b2366c3, 0xf2a5c8df, _r, _ri); 
}

/**
 * p1 is always 0 in the scripts.
 * @param ped
 * @param p1
 */
export function getBestPedWeapon(ped: number, p1: boolean): number { 
	return _in(0x8483e98e, 0x8b888ae2, ped, p1, _r, _ri); 
}

/**
 * In percentage: 0.0 - 100.0
 * @param binkMovie
 */
export function getBinkMovieTime(binkMovie: number): number { 
	return _in(0x8e17ddd6, 0xb9d5bf29, binkMovie, _r, _rf); 
}

export function getBitsInRange(_var: number, rangeStart: number, rangeEnd: number): number { 
	return _in(0x53158863, 0xfcc0893a, _var, rangeStart, rangeEnd, _r, _ri); 
}

export function getBlipAlpha(blip: number): number { 
	return _in(0x970f608f, 0x0ee6c885, blip, _r, _ri); 
}

export function getBlipColour(blip: number): number { 
	return _in(0xdf729e8d, 0x20cf7327, blip, _r, _ri); 
}

export function getBlipCoords(blip: number): Vector3 { 
	return _mv(_in(0x586afe3f, 0xf72d996e, blip, _r, _rv)); 
}

/**
 * Returns -1, 0, +1, depending on if the blip is fading out, doing nothing, or fading in respectively.
 * @param blip
 */
export function getBlipFadeDirection(blip: number): number { 
	return _in(0x2c173ae2, 0xbdb9385e, blip, _r, _ri); 
}

/**
 * Returns the Blip handle of given Entity.
 * @param entity
 */
export function getBlipFromEntity(entity: number): number { 
	return _in(0xbc8dbdca, 0x2436f7e8, entity, _r, _ri); 
}

export function getBlipHudColour(blip: number): number { 
	return _in(0x729b5f1e, 0xfbc0aaee, blip, _r, _ri); 
}

export function getBlipInfoIdCoord(blip: number): Vector3 { 
	return _mv(_in(0xfa7c7f0a, 0xadf25d09, blip, _r, _rv)); 
}

export function getBlipInfoIdDisplay(blip: number): number { 
	return _in(0x1e314167, 0xf701dc3b, blip, _r, _ri); 
}

export function getBlipInfoIdEntityIndex(blip: number): number { 
	return _in(0x4ba4e255, 0x3afedc2c, blip, _r, _ri); 
}

/**
 * This function is hard-coded to always return 0.
 * @param blip
 */
export function getBlipInfoIdPickupIndex(blip: number): number { 
	return _in(0x9b6786e4, 0xc03dd382, blip, _r, _ri); 
}

/**
 * Returns a value based on what the blip is attached to
 * 1 - Vehicle
 * 2 - Ped
 * 3 - Object
 * 4 - Coord
 * 5 - unk
 * 6 - Pickup
 * 7 - Radius
 * @param blip
 */
export function getBlipInfoIdType(blip: number): number { 
	return _in(0xbe9b0959, 0xffd0779b, blip, _r, _ri); 
}

export function getBlipRotation(blip: number): number { 
	return _in(0x003e92ba, 0x477f9d7f, blip, _r, _ri); 
}

/**
 * Blips Images + IDs:
 * gtaxscripting.blogspot.com/2016/05/gta-v-blips-id-and-image.html
 * @param blip
 */
export function getBlipSprite(blip: number): number { 
	return _in(0x1fc87746, 0x4a04fc4f, blip, _r, _ri); 
}

export function getBoatBoomPositionRatio(vehicle: number): number { 
	return _in(0x6636c535, 0xf6cc2725, vehicle, _r, _rf); 
}

/**
 * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
 * @param modelHash
 */
export function getBoatVehicleModelAgility(modelHash: number): number { 
	return _in(0x5aa3f878, 0xa178c4fc, _ch(modelHash), _r, _rf); 
}

export function getBossGoonUuid(characterSlot: number, p1: number, p2: number): void { 
	return _in(0x6bc0acd0, 0x673acebe, characterSlot, p1, p2); 
}

/**
 * Returns true when both headlights are broken. This does not include extralights.
 * @param vehicle
 */
export function getBothVehicleHeadlightsDamaged(vehicle: number): boolean { 
	return _in(0xec69adf9, 0x31aae0c3, vehicle, _r); 
}

/**
 * enum Context
 * {
 * ON_FOOT,
 * IN_VEHICLE,
 * ON_BIKE,
 * IN_BOAT,
 * IN_AIRCRAFT,
 * IN_SUBMARINE,
 * IN_HELI,
 * IN_TURRET
 * };
 */
export function getCamActiveViewModeContext(): number { 
	return _in(0x19cafa3c, 0x87f7c2ff, _r, _ri); 
}

export function getCamAnimCurrentPhase(cam: number): number { 
	return _in(0xa10b2db4, 0x9e92a6b0, cam, _r, _rf); 
}

export function getCamCoord(cam: number): Vector3 { 
	return _mv(_in(0xbac038f7, 0x459ae5ae, cam, _r, _rv)); 
}

export function getCamDofStrength(cam: number): number { 
	return _in(0x06d153c0, 0xb99b6128, cam, _r, _rf); 
}

export function getCamFarClip(cam: number): number { 
	return _in(0xb60a9cfe, 0xb21ca6aa, cam, _r, _rf); 
}

export function getCamFarDof(cam: number): number { 
	return _in(0x255f8daf, 0xd540d397, cam, _r, _rf); 
}

export function getCamFov(cam: number): number { 
	return _in(0xc3330a45, 0xcccdb26a, cam, _r, _rf); 
}

export function getCamNearClip(cam: number): number { 
	return _in(0xc520a34d, 0xafbf24b1, cam, _r, _rf); 
}

export function getCamNearDof(cam: number): number { 
	return _in(0xc2612d22, 0x3d915a1c, cam, _r, _rf); 
}

/**
 * The last parameter, as in other "ROT" methods, is usually 2.
 * @param cam
 * @param rotationOrder
 */
export function getCamRot(cam: number, rotationOrder: number): Vector3 { 
	return _mv(_in(0x7d304c1c, 0x955e3e12, cam, rotationOrder, _r, _rv)); 
}

export function getCamSplineNodeIndex(cam: number): number { 
	return _in(0xb22b17df, 0x858716a6, cam, _r, _ri); 
}

/**
 * I'm pretty sure the parameter is the camera as usual, but I am not certain so I'm going to leave it as is.
 * @param cam
 */
export function getCamSplineNodePhase(cam: number): number { 
	return _in(0xd9d0e694, 0xc8282c96, cam, _r, _rf); 
}

/**
 * Can use this with SET_CAM_SPLINE_PHASE to set the float it this native returns.
 * 
 * (returns 1.0f when no nodes has been added, reached end of non existing spline)
 * @param cam
 */
export function getCamSplinePhase(cam: number): number { 
	return _in(0xb5349e36, 0xc546509a, cam, _r, _rf); 
}

/**
 * context: see _GET_CAM_ACTIVE_VIEW_MODE_CONTEXT
 * @param context
 */
export function getCamViewModeForContext(context: number): number { 
	return _in(0xee778f8c, 0x7e1142e2, context, _r, _ri); 
}

export function getCanPedBeGrabbedByScript(ped: number, p1: boolean, p2: boolean, p3: boolean, p4: boolean, p5: boolean, p6: boolean, p7: boolean, p8: number): boolean { 
	return _in(0x03ea03af, 0x85a85cb7, ped, p1, p2, p3, p4, p5, p6, p7, p8, _r); 
}

/**
 * Used in decompiled scripts in combination with GET_VEHICLE_SIZE
 * p7 is usually 2
 * p8 is usually 1
 * @param vehicle
 * @param x
 * @param y
 * @param z
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param p7
 * @param p8
 */
export function getCanVehicleBePlacedHere(vehicle: number, x: number, y: number, z: number, rotX: number, rotY: number, rotZ: number, p7: number, p8: number): boolean { 
	return _in(0x51f30db6, 0x0626a20e, vehicle, _fv(x), _fv(y), _fv(z), _fv(rotX), _fv(rotY), _fv(rotZ), p7, p8, _r); 
}

/**
 * Returns true if the vehicle has the FLAG_JUMPING_CAR flag set.
 * @param vehicle
 */
export function getCarHasJump(vehicle: number): boolean { 
	return _in(0x9078c0c5, 0xef8c19e9, vehicle, _r); 
}

export function getCauseOfMostRecentForceCleanup(): number { 
	return _in(0x9a41cf46, 0x74a12272, _r, _ri); 
}

export function getCgoffset(entity: number): Vector3 { 
	return _mv(_in(0x8214a4b5, 0xa7a33612, entity, _r, _rv)); 
}

/**
 * Returns a substring of a specified length starting at a specified position.
 * 
 * Example:
 * // Get "STRING" text from "MY_STRING"
 * subStr = HUD::GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME("MY_STRING", 3, 6);
 * @param text
 * @param position
 * @param length
 */
export function getCharacterFromAudioConversationFilename(text: string, position: number, length: number): string { 
	return _in(0x169bd938, 0x2084c8c0, _ts(text), position, length, _r, _s); 
}

/**
 * Returns a substring that is between two specified positions. The length of the string will be calculated using (endPosition - startPosition).
 * 
 * Example:
 * // Get "STRING" text from "MY_STRING"
 * subStr = HUD::GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_BYTES("MY_STRING", 3, 9);
 * // Overflows are possibly replaced with underscores (needs verification)
 * subStr = HUD::GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_BYTES("MY_STRING", 3, 10); // "STRING_"?
 * @param text
 * @param startPosition
 * @param endPosition
 */
export function getCharacterFromAudioConversationFilenameBytes(text: string, startPosition: number, endPosition: number): string { 
	return _in(0xce94aeba, 0x5d82908a, _ts(text), startPosition, endPosition, _r, _s); 
}

/**
 * Returns a substring of a specified length starting at a specified position. The result is guaranteed not to exceed the specified max length.
 * 
 * NOTE: The 'maxLength' parameter might actually be the size of the buffer that is returned. More research is needed. -CL69
 * 
 * Example:
 * // Condensed example of how Rockstar uses this function
 * strLen = HUD::GET_LENGTH_OF_LITERAL_STRING(MISC::GET_ONSCREEN_KEYBOARD_RESULT());
 * subStr = HUD::GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_WITH_BYTE_LIMIT(MISC::GET_ONSCREEN_KEYBOARD_RESULT(), 0, strLen, 63);
 * 
 * --
 * 
 * "fm_race_creator.ysc", line 85115:
 * // parameters modified for clarity
 * BOOL sub_8e5aa(char *text, int length) {
 * for (i = 0; i <= (length - 2); i += 1) {
 * if (!MISC::ARE_STRINGS_EQUAL(HUD::GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_WITH_BYTE_LIMIT(text, i, i + 1, 1), " ")) {
 * return FALSE;
 * }
 * }
 * return TRUE;
 * }
 * @param text
 * @param position
 * @param length
 * @param maxLength
 */
export function getCharacterFromAudioConversationFilenameWithByteLimit(text: string, position: number, length: number, maxLength: number): string { 
	return _in(0xb2798643, 0x312205c5, _ts(text), position, length, maxLength, _r, _s); 
}

export function getCharacterMenuPedFloatStat(statHash: number, p2: boolean): [boolean, number] { 
	const [retval, outValue_out] = _in(0x8f08017f, 0x9d7c47bd, _fv(statHash), _f, p2, _r);
	return [retval as boolean, outValue_out as number]; 
}

export function getCharacterMenuPedIntStat(p0: number, p2: number): [boolean, number] { 
	const [retval, p1_out] = _in(0xca6b2f7c, 0xe32ab653, p0, _i, p2, _r);
	return [retval as boolean, p1_out as number]; 
}

export function getCharacterMenuPedMaskedIntStat(statHash: number, p2: number, mask: number, p4: boolean): [boolean, number] { 
	const [retval, outValue_out] = _in(0x24a49bea, 0xf468dc90, _ch(statHash), _i, p2, mask, p4, _r);
	return [retval as boolean, outValue_out as number]; 
}

export function getCityDensity(): number { 
	return _in(0xd10282b6, 0xe3751ba0, _r, _rf); 
}

export function getClipSetForScriptedGunTask(gunTaskType: number): string { 
	return _in(0x3a8cadc7, 0xd37aacc5, gunTaskType, _r, _s); 
}

export function getClockDayOfMonth(): number { 
	return _in(0x3d10bc92, 0xa4db1d35, _r, _ri); 
}

/**
 * Gets the current day of the week.
 * 
 * 0: Sunday
 * 1: Monday
 * 2: Tuesday
 * 3: Wednesday
 * 4: Thursday
 * 5: Friday
 * 6: Saturday
 */
export function getClockDayOfWeek(): number { 
	return _in(0xd972e4bd, 0x7aeb235f, _r, _ri); 
}

/**
 * Gets the current ingame hour, expressed without zeros. (09:34 will be represented as 9)
 */
export function getClockHours(): number { 
	return _in(0x25223ca6, 0xb4d20b7f, _r, _ri); 
}

/**
 * Gets the current ingame clock minute.
 */
export function getClockMinutes(): number { 
	return _in(0x13d2b8ad, 0xd79640f2, _r, _ri); 
}

export function getClockMonth(): number { 
	return _in(0xbbc72712, 0xe80257a1, _r, _ri); 
}

/**
 * Gets the current ingame clock second. Note that ingame clock seconds change really fast since a day in GTA is only 48 minutes in real life.
 */
export function getClockSeconds(): number { 
	return _in(0x494e97c2, 0xef27c470, _r, _ri); 
}

export function getClockYear(): number { 
	return _in(0x961777e6, 0x4bdaf717, _r, _ri); 
}

export function getClosestBlipInfoId(blipSprite: number): number { 
	return _in(0xd484bf71, 0x050ca1ee, blipSprite, _r, _ri); 
}

/**
 * Returns TRUE if it found something. FALSE if not.
 * @param outPosition
 * @param x
 * @param y
 * @param z
 */
export function getClosestFirePos(x: number, y: number, z: number): [boolean, Vector3] { 
	const [retval, outPosition_out] = _in(0x352a9f6b, 0xcf90081f, _v, _fv(x), _fv(y), _fv(z), _r);
	return [retval as boolean, _mv(outPosition_out)]; 
}

/**
 * Get the closest vehicle node to a given position.
 * @param x
 * @param y
 * @param z
 * @param outPosition
 * @param unknown1
 * @param unknown2
 */
export function getClosestMajorVehicleNode(x: number, y: number, z: number, unknown1: number, unknown2: number): [boolean, Vector3] { 
	const [retval, outPosition_out] = _in(0x2eabe3b0, 0x6f58c1be, _fv(x), _fv(y), _fv(z), _v, _fv(unknown1), _fv(unknown2), _r);
	return [retval as boolean, _mv(outPosition_out)]; 
}

/**
 * Has 8 params in the latest patches.
 * 
 * isMission - if true doesn't return mission objects
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param modelHash
 * @param isMission
 * @param p6
 * @param p7
 */
export function getClosestObjectOfType(x: number, y: number, z: number, radius: number, modelHash: number, isMission: boolean, p6: boolean, p7: boolean): number { 
	return _in(0xe143fa22, 0x49364369, _fv(x), _fv(y), _fv(z), _fv(radius), _ch(modelHash), isMission, p6, p7, _r, _ri); 
}

/**
 * Gets the closest ped in a radius.
 * 
 * Ped Types:
 * Any ped = -1
 * Player = 1
 * Male = 4
 * Female = 5
 * Cop = 6
 * Human = 26
 * SWAT = 27
 * Animal = 28
 * Army = 29
 * 
 * ------------------
 * P4 P5 P7 P8
 * 1  0  x  x  = return nearest walking Ped
 * 1  x  0  x  = return nearest walking Ped
 * x  1  1  x  = return Ped you are using
 * 0  0  x  x  = no effect
 * 0  x  0  x  = no effect
 * 
 * x = can be 1 or 0. Does not have any obvious changes.
 * 
 * This function does not return ped who is:
 * 1. Standing still
 * 2. Driving
 * 3. Fleeing
 * 4. Attacking
 * 
 * This function only work if the ped is:
 * 1. walking normally.
 * 2. waiting to cross a road.
 * 
 * Note: PED::GET_PED_NEARBY_PEDS works for more peds.
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param p4
 * @param p5
 * @param outPed
 * @param p7
 * @param p8
 * @param pedType
 */
export function getClosestPed(x: number, y: number, z: number, radius: number, p4: boolean, p5: boolean, p7: boolean, p8: boolean, pedType: number): [boolean, number] { 
	const [retval, outPed_out] = _in(0xc33ab876, 0xa77f8164, _fv(x), _fv(y), _fv(z), _fv(radius), p4, p5, _i, p7, p8, pedType, _r);
	return [retval as boolean, outPed_out as number]; 
}

/**
 * clamp: sets whether the product should be clamped between the given coordinates
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param x3
 * @param y3
 * @param z3
 * @param clamp
 */
export function getClosestPointOnLine(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, x3: number, y3: number, z3: number, clamp: boolean): Vector3 { 
	return _mv(_in(0x21c235bc, 0x64831e5a, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(x3), _fv(y3), _fv(z3), clamp, _r, _rv)); 
}

/**
 * p1 seems to be always 1.0f in the scripts
 * @param x
 * @param y
 * @param z
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 * @param p9
 * @param p10
 */
export function getClosestRoad(x: number, y: number, z: number, p3: number, p4: number, p10: boolean): [boolean, Vector3, Vector3, number, number, number] { 
	const [retval, p5_out, p6_out, p7_out, p8_out, p9_out] = _in(0x132f52bb, 0xa570fe92, _fv(x), _fv(y), _fv(z), _fv(p3), p4, _v, _v, _i, _i, _f, p10, _r);
	return [retval as boolean, _mv(p5_out), _mv(p6_out), p7_out as number, p8_out as number, p9_out as number]; 
}

/**
 * Example usage
 * VEHICLE::GET_CLOSEST_VEHICLE(x, y, z, radius, hash, unknown leave at 70)
 * 
 * x, y, z: Position to get closest vehicle to.
 * radius: Max radius to get a vehicle.
 * modelHash: Limit to vehicles with this model. 0 for any.
 * flags: The bitwise flags altering the function's behaviour.
 * 
 * Does not return police cars or helicopters.
 * 
 * It seems to return police cars for me, does not seem to return helicopters, planes or boats for some reason
 * 
 * Only returns non police cars and motorbikes with the flag set to 70 and modelHash to 0. ModelHash seems to always be 0 when not a modelHash in the scripts, as stated above.
 * 
 * These flags were found in the b617d scripts: 0,2,4,6,7,23,127,260,2146,2175,12294,16384,16386,20503,32768,67590,67711,98309,100359.
 * Converted to binary, each bit probably represents a flag as explained regarding another native here: gtaforums.com/topic/822314-guide-driving-styles
 * 
 * Conversion of found flags to binary: https://pastebin.com/kghNFkRi
 * 
 * At exactly 16384 which is 0100000000000000 in binary and 4000 in hexadecimal only planes are returned.
 * 
 * It's probably more convenient to use worldGetAllVehicles(int *arr, int arrSize) and check the shortest distance yourself and sort if you want by checking the vehicle type with for example VEHICLE::IS_THIS_MODEL_A_BOAT
 * 
 * -------------------------------------------------------------------------
 * 
 * Conclusion: This native is not worth trying to use. Use something like this instead: https://pastebin.com/xiFdXa7h
 * 
 * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param modelHash
 * @param flags
 */
export function getClosestVehicle(x: number, y: number, z: number, radius: number, modelHash: number, flags: number): number { 
	return _in(0xf73eb622, 0xc4f1689b, _fv(x), _fv(y), _fv(z), _fv(radius), _ch(modelHash), flags, _r, _ri); 
}

/**
 * https://gtaforums.com/topic/843561-pathfind-node-types
 * @param x
 * @param y
 * @param z
 * @param outPosition
 * @param nodeFlags
 * @param p5
 * @param p6
 */
export function getClosestVehicleNode(x: number, y: number, z: number, nodeFlags: number, p5: number, p6: number): [boolean, Vector3] { 
	const [retval, outPosition_out] = _in(0x240a1869, 0x0ae96513, _fv(x), _fv(y), _fv(z), _v, nodeFlags, _fv(p5), _fv(p6), _r);
	return [retval as boolean, _mv(outPosition_out)]; 
}

/**
 * p5, p6 and p7 seems to be about the same as p4, p5 and p6 for GET_CLOSEST_VEHICLE_NODE. p6 and/or p7 has something to do with finding a node on the same path/road and same direction(at least for this native, something to do with the heading maybe). Edit this when you find out more.
 * 
 * nodeType: 0 = main roads, 1 = any dry path, 3 = water
 * p6 is always 3.0
 * p7 is always 0
 * 
 * gtaforums.com/topic/843561-pathfind-node-types
 * 
 * Example of usage, moving vehicle to closest path/road:
 * Vector3 coords = ENTITY::GET_ENTITY_COORDS(playerVeh, true);
 * Vector3 closestVehicleNodeCoords;
 * float roadHeading;
 * PATHFIND::GET_CLOSEST_VEHICLE_NODE_WITH_HEADING(coords.x, coords.y, coords.z, &closestVehicleNodeCoords, &roadHeading, 1, 3, 0);
 * ENTITY::SET_ENTITY_HEADING(playerVeh, roadHeading);
 * ENTITY::SET_ENTITY_COORDS(playerVeh, closestVehicleNodeCoords.x, closestVehicleNodeCoords.y, closestVehicleNodeCoords.z, 1, 0, 0, 1);
 * VEHICLE::SET_VEHICLE_ON_GROUND_PROPERLY(playerVeh);
 * 
 * ------------------------------------------------------------------
 * C# Example (ins1de) : https://pastebin.com/fxtMWAHD
 * @param x
 * @param y
 * @param z
 * @param outPosition
 * @param outHeading
 * @param nodeType
 * @param p6
 * @param p7
 */
export function getClosestVehicleNodeWithHeading(x: number, y: number, z: number, nodeType: number, p6: number, p7: number): [boolean, Vector3, number] { 
	const [retval, outPosition_out, outHeading_out] = _in(0xff071fb7, 0x98b803b0, _fv(x), _fv(y), _fv(z), _v, _f, nodeType, _fv(p6), _fv(p7), _r);
	return [retval as boolean, _mv(outPosition_out), outHeading_out as number]; 
}

/**
 * Returns POSIX timestamp, an int representing the cloud time.
 */
export function getCloudTimeAsInt(): number { 
	return _in(0x9a73240b, 0x49945c76, _r, _ri); 
}

/**
 * Same as GET_CLOUD_TIME_AS_INT but returns the value as a hex string (%I64X).
 */
export function getCloudTimeAsString(): string { 
	return _in(0xf12e6cd0, 0x6c73d69e, _r, _s); 
}

export function getCloudsAlpha(): number { 
	return _in(0x20ac25e7, 0x81ae4a84, _r, _rf); 
}

export function getCollisionNormalOfLastHitForEntity(entity: number): Vector3 { 
	return _mv(_in(0xe465d4ab, 0x7ca6ae72, entity, _r, _rv)); 
}

/**
 * p0: Ped Handle
 * p1: int i | 0 <= i <= 27
 * 
 * p1 probably refers to the attributes configured in combatbehavior.meta. There are 13. Example:
 * 
 * <BlindFireChance value="0.1"/>
 * <WeaponShootRateModifier value="1.0"/>
 * <TimeBetweenBurstsInCover value="1.25"/>
 * <BurstDurationInCover value="2.0"/>
 * <TimeBetweenPeeks value="10.0"/>
 * <WeaponAccuracy value="0.18"/>
 * <FightProficiency value="0.8"/>
 * <StrafeWhenMovingChance value="1.0"/>
 * <WalkWhenStrafingChance value="0.0"/>
 * <AttackWindowDistanceForCover value="55.0"/>
 * <TimeToInvalidateInjuredTarget value="9.0"/>
 * <TriggerChargeTime_Near value="4.0"/>
 * <TriggerChargeTime_Far value="10.0"/>
 * 
 * -------------Confirmed by editing combatbehavior.meta:
 * p1:
 * 0=BlindFireChance
 * 1=BurstDurationInCover
 * 3=TimeBetweenBurstsInCover
 * 4=TimeBetweenPeeks
 * 5=StrafeWhenMovingChance
 * 8=WalkWhenStrafingChance
 * 11=AttackWindowDistanceForCover
 * 12=TimeToInvalidateInjuredTarget
 * 16=OptimalCoverDistance
 * 
 * @param ped
 * @param p1
 */
export function getCombatFloat(ped: number, p1: number): number { 
	return _in(0x52dff8a1, 0x0508090a, ped, p1, _r, _rf); 
}

/**
 * index2 is unused
 * @param index
 * @param index2
 */
export function getCommerceItemCat(index: number, index2: number): string { 
	return _in(0x6f44cbf5, 0x6d79fac0, index, index2, _r, _s); 
}

export function getCommerceItemId(index: number): string { 
	return _in(0x66263585, 0x5957c411, index, _r, _s); 
}

export function getCommerceItemName(index: number): string { 
	return _in(0xb4271092, 0xca7edf48, index, _r, _s); 
}

export function getCommerceItemNumCats(index: number): number { 
	return _in(0x2a7776c7, 0x09904ab0, index, _r, _ri); 
}

export function getCommerceItemTexturename(index: number): string { 
	return _in(0x722f5d28, 0xb61c5ea8, index, _r, _s); 
}

export function getCommerceProductPrice(index: number): string { 
	return _in(0xca94551b, 0x50b4932c, index, _r, _s); 
}

export function getContentIdIndex(contentId: number): number { 
	return _in(0xecf04118, 0x6c5a94dc, _ch(contentId), _r, _ri); 
}

/**
 * Returns prop type for given model hash
 * @param model
 */
export function getContentPropType(model: number): number { 
	return _in(0x8baf8ad5, 0x9f47aafc, _ch(model), _r, _ri); 
}

/**
 * Returns pointer to an empty string.
 */
export function getContentToLoad(): string { 
	return _in(0x24da7d76, 0x67fd7b09, _r, _s); 
}

/**
 * This function is hard-coded to always return 0.
 */
export function getContentToLoadType(): number { 
	return _in(0x8b0c2964, 0xba471961, _r, _ri); 
}

/**
 * control: unused parameter
 * @param control
 * @param controlGroup
 * @param allowXOSwap
 */
export function getControlGroupInstructionalButtonsString(control: number, controlGroup: number, allowXOSwap: boolean): string { 
	return _in(0x80c2fd58, 0xd720c801, control, controlGroup, allowXOSwap, _r, _s); 
}

/**
 * Returns time in ms since last input.
 * 
 * control: see IS_CONTROL_ENABLED
 * @param control
 */
export function getControlHowLongAgo(control: number): number { 
	return _in(0xd7d22f55, 0x92aed8ba, control, _r, _ri); 
}

/**
 * allowXOSwap appears to always be true.
 * 
 * EG:
 * GET_CONTROL_INSTRUCTIONAL_BUTTON (2, 201, 1)  -- [[INPUT_FRONTEND_ACCEPT (e.g. Enter button)]] 
 * GET_CONTROL_INSTRUCTIONAL_BUTTON (2, 202, 1)  -- [[INPUT_FRONTEND_CANCEL (e.g. ESC button)]] 
 * GET_CONTROL_INSTRUCTIONAL_BUTTON (2, 51, 1)  -- [[INPUT_CONTEXT (e.g. E button)]] 
 * 
 * gtaforums.com/topic/819070-c-draw-instructional-buttons-scaleform-movie/#entry1068197378
 * 
 * control: unused parameter
 * @param control
 * @param action
 * @param allowXOSwap
 */
export function getControlInstructionalButtonsString(control: number, action: number, allowXOSwap: boolean): string { 
	return _in(0x0499d7b0, 0x9fc9b407, control, action, allowXOSwap, _r, _s); 
}

/**
 * Returns the value of GET_CONTROL_VALUE normalized (i.e. a real number value between -1 and 1)
 * 
 * control: see IS_CONTROL_ENABLED
 * @param control
 * @param action
 */
export function getControlNormal(control: number, action: number): number { 
	return _in(0xec3c9b8d, 0x5327b563, control, action, _r, _rf); 
}

/**
 * Seems to return values between -1 and 1 for controls like gas and steering.
 * 
 * control: see IS_CONTROL_ENABLED
 * @param control
 * @param action
 */
export function getControlUnboundNormal(control: number, action: number): number { 
	return _in(0x5b84d09c, 0xec5209c5, control, action, _r, _rf); 
}

/**
 * control: see IS_CONTROL_ENABLED
 * @param control
 * @param action
 */
export function getControlValue(control: number, action: number): number { 
	return _in(0xd95e79e8, 0x686d2c27, control, action, _r, _ri); 
}

/**
 * 0 -> up
 * 1 -> lowering down
 * 2 -> down
 * 3 -> raising up
 * @param vehicle
 */
export function getConvertibleRoofState(vehicle: number): number { 
	return _in(0xf8c39792, 0x2fc03f41, vehicle, _r, _ri); 
}

export function getCoordsAndRotationOfClosestObjectOfType(x: number, y: number, z: number, radius: number, modelHash: number, rotationOrder: number): [boolean, Vector3, Vector3] { 
	const [retval, outPosition_out, outRotation_out] = _in(0x163f8b58, 0x6bc95f2a, _fv(x), _fv(y), _fv(z), _fv(radius), _ch(modelHash), _v, _v, rotationOrder, _r);
	return [retval as boolean, _mv(outPosition_out), _mv(outRotation_out)]; 
}

export function getCoordsOfProjectileTypeInAngledArea(vecAngledAreaPoint1X: number, vecAngledAreaPoint1Y: number, vecAngledAreaPoint1Z: number, vecAngledAreaPoint2X: number, vecAngledAreaPoint2Y: number, vecAngledAreaPoint2Z: number, distanceOfOppositeFace: number, weaponType: number, bIsPlayer: boolean): [boolean, Vector3] { 
	const [retval, positionOut_out] = _in(0x3da8c283, 0x46b62ced, _fv(vecAngledAreaPoint1X), _fv(vecAngledAreaPoint1Y), _fv(vecAngledAreaPoint1Z), _fv(vecAngledAreaPoint2X), _fv(vecAngledAreaPoint2Y), _fv(vecAngledAreaPoint2Z), _fv(distanceOfOppositeFace), _ch(weaponType), _v, bIsPlayer, _r);
	return [retval as boolean, _mv(positionOut_out)]; 
}

export function getCoordsOfProjectileTypeInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, projectileHash: number, ownedByPlayer: boolean): [boolean, Vector3] { 
	const [retval, projectilePos_out] = _in(0x8d7a43ec, 0x6a5fea45, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _ch(projectileHash), _v, ownedByPlayer, _r);
	return [retval as boolean, _mv(projectilePos_out)]; 
}

export function getCoordsOfProjectileTypeWithinDistance(ped: number, weaponHash: number, distance: number, p4: boolean): [boolean, Vector3] { 
	const [retval, outCoords_out] = _in(0xdfb4138e, 0xefed7b81, ped, _ch(weaponHash), _fv(distance), _v, p4, _r);
	return [retval as boolean, _mv(outCoords_out)]; 
}

export function getCurrWeatherState(): [number, number, number] { 
	const [weatherType1_out, weatherType2_out, percentWeather2_out] = _in(0xf3bbe884, 0xa14bb413, _i, _i, _f);
	return [weatherType1_out as number, weatherType2_out as number, percentWeather2_out as number]; 
}

/**
 * if (HUD::GET_CURRENT_FRONTEND_MENU_VERSION() == joaat("fe_menu_version_empty_no_background"))
 */
export function getCurrentFrontendMenuVersion(): number { 
	return _in(0x2309595a, 0xd6145265, _r, _ri); 
}

/**
 * 0 = american (en-US)
 * 1 = french (fr-FR)
 * 2 = german (de-DE)
 * 3 = italian (it-IT)
 * 4 = spanish (es-ES)
 * 5 = brazilian (pt-BR)
 * 6 = polish (pl-PL)
 * 7 = russian (ru-RU)
 * 8 = korean (ko-KR)
 * 9 = chinesetrad (zh-TW)
 * 10 = japanese (ja-JP)
 * 11 = mexican (es-MX)
 * 12 = chinesesimp (zh-CN)
 */
export function getCurrentLanguage(): number { 
	return _in(0x2bdd44cc, 0x428a7eae, _r, _ri); 
}

export function getCurrentNumberOfCloudPhotos(): number { 
	return _in(0x473151eb, 0xc762c6da, _r, _ri); 
}

/**
 * Example in VB
 * 
 * Public Shared Function GetVehicleCurrentWeapon(Ped As Ped) As Integer
 * Dim arg As New OutputArgument()
 * Native.Function.Call(Hash.GET_CURRENT_PED_VEHICLE_WEAPON, Ped, arg)
 * Return arg.GetResult(Of Integer)()
 * End Function
 * 
 * Usage:
 * If GetVehicleCurrentWeapon(Game.Player.Character) = -821520672 Then ...Do something
 * Note: -821520672 = VEHICLE_WEAPON_PLANE_ROCKET
 * @param ped
 * @param weaponHash
 */
export function getCurrentPedVehicleWeapon(ped: number, weaponHash: number): [boolean, number] { 
	const [retval, weaponHash_out] = _in(0x1017582b, 0xcd3832dc, ped, _i, _r);
	return [retval as boolean, weaponHash_out as number]; 
}

/**
 * The return value seems to indicate returns true if the hash of the weapon object weapon equals the weapon hash.
 * p2 seems to be 1 most of the time.
 * 
 * 
 * 
 * 
 * 
 * p2 is not implemented
 * 
 * disassembly said that?
 * 
 * @param ped
 * @param weaponHash
 * @param p2
 */
export function getCurrentPedWeapon(ped: number, p2: boolean): [boolean, number] { 
	const [retval, weaponHash_out] = _in(0x3a87e44b, 0xb9a01d54, ped, _i, p2, _r);
	return [retval as boolean, weaponHash_out as number]; 
}

export function getCurrentPedWeaponEntityIndex(ped: number, p1: number): number { 
	return _in(0x3b390a93, 0x9af0b5fc, ped, p1, _r, _ri); 
}

export function getCurrentPlaybackForVehicle(vehicle: number): number { 
	return _in(0x42bc05c2, 0x7a946054, vehicle, _r, _ri); 
}

export function getCurrentScriptedConversationLine(): number { 
	return _in(0x480357ee, 0x890c295a, _r, _ri); 
}

export function getCurrentTrackPlayTime(radioStationName: string): number { 
	return _in(0x3e65cde5, 0x215832c1, _ts(radioStationName), _r, _ri); 
}

export function getCurrentTrackSoundName(radioStationName: string): number { 
	return _in(0x34d66bc0, 0x58019ce0, _ts(radioStationName), _r, _ri); 
}

export function getCurrentTvClipNamehash(): number { 
	return _in(0x30432a01, 0x18736e00, _r, _ri); 
}

export function getCurrentTvShowPlayTime(): number { 
	return _in(0xdd3aa743, 0xab7d4d75, _r, _ri); 
}

export function getCurrentWebpageId(): number { 
	return _in(0x01a358d9, 0x128b7a86, _r, _ri); 
}

export function getCurrentWebsiteId(): number { 
	return _in(0x97d47996, 0xfc48cbad, _r, _ri); 
}

/**
 * Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
 * @param cutsceneName
 */
export function getCutFileConcatCount(cutsceneName: string): number { 
	return _in(0x0abc54de, 0x641dc0fc, _ts(cutsceneName), _r, _ri); 
}

export function getCutsceneConcatSectionPlaying(): number { 
	return _in(0x583df8e3, 0xd4afbd98, _r, _ri); 
}

export function getCutsceneEndTime(): number { 
	return _in(0x971d7b15, 0xbcdbef99, _r, _ri); 
}

export function getCutscenePlayDuration(): number { 
	return _in(0x5d583f71, 0xc901f2a3, _r, _ri); 
}

export function getCutscenePlayTime(): number { 
	return _in(0x710286bc, 0x5ef4d6e1, _r, _ri); 
}

export function getCutsceneSectionPlaying(): number { 
	return _in(0x49010a6a, 0x396553d8, _r, _ri); 
}

export function getCutsceneTime(): number { 
	return _in(0xe625beab, 0xbaffdab9, _r, _ri); 
}

export function getCutsceneTotalDuration(): number { 
	return _in(0xee53b14a, 0x19e480d4, _r, _ri); 
}

export function getDamping(entity: number, type: number): Vector3 { 
	return _mv(_in(0x8c520a92, 0x9415bcd2, entity, type, _r, _rv)); 
}

export function getDeadPedPickupCoords(ped: number, p1: number, p2: number): Vector3 { 
	return _mv(_in(0xcd5003b0, 0x97200f36, ped, _fv(p1), _fv(p2), _r, _rv)); 
}

export function getDebugCam(): number { 
	return _in(0x77c3cec4, 0x6be286f6, _r, _ri); 
}

export function getDecalWashLevel(decal: number): number { 
	return _in(0x323f6476, 0x79a09103, decal, _r, _rf); 
}

/**
 * Gets the aggressiveness factor of the ocean waves.
 */
export function getDeepOceanScaler(): number { 
	return _in(0x2b2a2cc8, 0x6778b619, _r, _rf); 
}

export function getDefaultAmmoForWeaponPickup(pickupHash: number): number { 
	return _in(0xdb41d07a, 0x45a6d4b7, _ch(pickupHash), _r, _ri); 
}

/**
 * This function is hard-coded to always return 1.
 */
export function getDefaultScriptRendertargetRenderId(): number { 
	return _in(0x52f0982d, 0x7fd156b6, _r, _ri); 
}

export function getDefaultSecondaryTintForBarber(colorID: number): number { 
	return _in(0xaaa6a369, 0x8a69e048, colorID, _r, _ri); 
}

export function getDefaultSecondaryTintForCreator(colorId: number): number { 
	return _in(0xea9960d0, 0x7dadcf10, colorId, _r, _ri); 
}

/**
 * control: see IS_CONTROL_ENABLED
 * @param control
 * @param action
 */
export function getDisabledControlNormal(control: number, action: number): number { 
	return _in(0x11e65974, 0xa982637c, control, action, _r, _rf); 
}

/**
 * The "disabled" variant of GET_CONTROL_UNBOUND_NORMAL.
 * 
 * control: see IS_CONTROL_ENABLED
 * @param control
 * @param action
 */
export function getDisabledControlUnboundNormal(control: number, action: number): number { 
	return _in(0x4f8a26a8, 0x90fd62fb, control, action, _r, _rf); 
}

/**
 * Returns model name of vehicle in all caps. Needs to be displayed through localizing text natives to get proper display name.
 * -----------------------------------------------------------------------------------------------------------------------------------------
 * While often the case, this does not simply return the model name of the vehicle (which could be hashed to return the model hash). Variations of the same vehicle may also use the same display name.
 * -----------------------------------------------------------------------------------------------------------------------------------------
 * 
 * Returns "CARNOTFOUND" if the hash doesn't match a vehicle hash.
 * 
 * Using HUD::GET_FILENAME_FOR_AUDIO_CONVERSATION, you can get the localized name.
 * 
 * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
 * @param modelHash
 */
export function getDisplayNameFromVehicleModel(modelHash: number): string { 
	return _in(0xb215aac3, 0x2d25d019, _ch(modelHash), _r, _s); 
}

/**
 * Returns the distance between two three-dimensional points, optionally ignoring the Z values.
 * If useZ is false, only the 2D plane (X-Y) will be considered for calculating the distance.
 * 
 * Consider using this faster native instead: SYSTEM::VDIST - DVIST always takes in consideration the 3D coordinates.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param useZ
 */
export function getDistanceBetweenCoords(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, useZ: boolean): number { 
	return _in(0xf1b76088, 0x1820c952, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), useZ, _r, _rf); 
}

/**
 * dlcVehicleIndex takes a number from 0 - GET_NUM_DLC_VEHICLES() - 1.
 * outData is a struct of 3 8-byte items.
 * The Second item in the struct *(Hash *)(outData + 1) is the vehicle hash.
 * @param dlcVehicleIndex
 * @param outData
 */
export function getDlcVehicleData(dlcVehicleIndex: number, outData: number): [boolean, number] { 
	const [retval, outData_out] = _in(0x33468edc, 0x08e371f6, dlcVehicleIndex, _ii(outData), _r);
	return [retval as boolean, outData_out as number]; 
}

export function getDlcVehicleFlags(dlcVehicleIndex: number): number { 
	return _in(0x5549ee11, 0xfa22fcf2, dlcVehicleIndex, _r, _ri); 
}

export function getDlcVehicleModLockHash(hash: number): number { 
	return _in(0xc0988104, 0x37312fff, _ch(hash), _r, _ri); 
}

/**
 * dlcVehicleIndex is 0 to GET_NUM_DLC_VEHICLS() - 1
 * @param dlcVehicleIndex
 */
export function getDlcVehicleModel(dlcVehicleIndex: number): number { 
	return _in(0xecc01b7c, 0x5763333c, dlcVehicleIndex, _r, _ri); 
}

/**
 * p0 seems to be the weapon index
 * p1 seems to be the weapon component index
 * struct DlcComponentData{
 * int attachBone;
 * int padding1;
 * int bActiveByDefault;
 * int padding2;
 * int unk;
 * int padding3;
 * int componentHash;
 * int padding4;
 * int unk2;
 * int padding5;
 * int componentCost;
 * int padding6;
 * char nameLabel[64];
 * char descLabel[64];
 * };
 * 
 * @param dlcWeaponIndex
 * @param dlcWeapCompIndex
 * @param ComponentDataPtr
 */
export function getDlcWeaponComponentData(dlcWeaponIndex: number, dlcWeapCompIndex: number, ComponentDataPtr: number): [boolean, number] { 
	const [retval, ComponentDataPtr_out] = _in(0x6cf598a2, 0x957c2bf8, dlcWeaponIndex, dlcWeapCompIndex, _ii(ComponentDataPtr), _r);
	return [retval as boolean, ComponentDataPtr_out as number]; 
}

/**
 * Same as GET_DLC_WEAPON_COMPONENT_DATA but only works for DLC components that are available in SP.
 * @param dlcWeaponIndex
 * @param dlcWeapCompIndex
 * @param ComponentDataPtr
 */
export function getDlcWeaponComponentDataSp(dlcWeaponIndex: number, dlcWeapCompIndex: number, ComponentDataPtr: number): [boolean, number] { 
	const [retval, ComponentDataPtr_out] = _in(0x31d5e073, 0xb6f93cdc, dlcWeaponIndex, dlcWeapCompIndex, _ii(ComponentDataPtr), _r);
	return [retval as boolean, ComponentDataPtr_out as number]; 
}

/**
 * 
 * dlcWeaponIndex takes a number from 0 - GET_NUM_DLC_WEAPONS() - 1.
 * struct DlcWeaponData
 * {
 * int emptyCheck; //use DLC1::IS_CONTENT_ITEM_LOCKED on this
 * int padding1;
 * int weaponHash;
 * int padding2;
 * int unk;
 * int padding3;
 * int weaponCost;
 * int padding4;
 * int ammoCost;
 * int padding5;
 * int ammoType;
 * int padding6;
 * int defaultClipSize;
 * int padding7;
 * char nameLabel[64];
 * char descLabel[64];
 * char desc2Label[64]; // usually "the" + name
 * char upperCaseNameLabel[64];
 * };
 * @param dlcWeaponIndex
 * @param outData
 */
export function getDlcWeaponData(dlcWeaponIndex: number, outData: number): [boolean, number] { 
	const [retval, outData_out] = _in(0x79923cd2, 0x1bece14e, dlcWeaponIndex, _ii(outData), _r);
	return [retval as boolean, outData_out as number]; 
}

/**
 * Same as GET_DLC_WEAPON_DATA but only works for DLC weapons that are available in SP.
 * @param dlcWeaponIndex
 * @param outData
 */
export function getDlcWeaponDataSp(dlcWeaponIndex: number, outData: number): [boolean, number] { 
	const [retval, outData_out] = _in(0x310836ee, 0x7129ba33, dlcWeaponIndex, _ii(outData), _r);
	return [retval as boolean, outData_out as number]; 
}

/**
 * Appears to return true if the vehicle has any damage, including cosmetically.
 * @param vehicle
 */
export function getDoesVehicleHaveDamageDecals(vehicle: number): boolean { 
	return _in(0xbcdc5017, 0xd3ce1e9e, vehicle, _r); 
}

/**
 * Returns true only if the "tombstone" bone is attached to the vehicle, irrespective of "FLAG_HAS_TOMBSTONE" being present or not. Detaching the tombstone will return false.
 * @param vehicle
 */
export function getDoesVehicleHaveTombstone(vehicle: number): boolean { 
	return _in(0x71afb258, 0xcced3a27, vehicle, _r); 
}

export function getDriftTyresSet(vehicle: number): boolean { 
	return _in(0x2f5a7243, 0x0e78c8d3, vehicle, _r); 
}

export function getEntityAlpha(entity: number): number { 
	return _in(0x5a47b3b5, 0xe63e94c6, entity, _r, _ri); 
}

/**
 * Returns a float value representing animation's current playtime with respect to its total playtime. This value increasing in a range from [0 to 1] and wrap back to 0 when it reach 1.
 * 
 * Example:
 * 0.000000 - mark the starting of animation.
 * 0.500000 - mark the midpoint of the animation.
 * 1.000000 - mark the end of animation.
 * 
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param entity
 * @param animDict
 * @param animName
 */
export function getEntityAnimCurrentTime(entity: number, animDict: string, animName: string): number { 
	return _in(0x346d8150, 0x0d088f42, entity, _ts(animDict), _ts(animName), _r, _rf); 
}

/**
 * Returns a float value representing animation's total playtime in milliseconds.
 * 
 * Example:
 * GET_ENTITY_ANIM_TOTAL_TIME(PLAYER_ID(),"amb@world_human_yoga@female@base","base_b")
 * return 20800.000000
 * 
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param entity
 * @param animDict
 * @param animName
 */
export function getEntityAnimTotalTime(entity: number, animDict: string, animName: string): number { 
	return _in(0x50bd2730, 0xb191e360, entity, _ts(animDict), _ts(animName), _r, _rf); 
}

export function getEntityAttachedTo(entity: number): number { 
	return _in(0x48c2bed9, 0x180fe123, entity, _r, _ri); 
}

export function getEntityAttachedToCargobob(p0: number): number { 
	return _in(0x99093f60, 0x746708ca, p0, _r, _ri); 
}

export function getEntityAttachedToTowTruck(towTruck: number): number { 
	return _in(0xefea18dc, 0xf10f8f75, towTruck, _r, _ri); 
}

export function getEntityBoneCount(entity: number): number { 
	return _in(0xb328dcc3, 0xa3aa401b, entity, _r, _ri); 
}

/**
 * Returns the index of the bone. If the bone was not found, -1 will be returned.
 * 
 * list:
 * https://pastebin.com/D7JMnX1g
 * 
 * BoneNames:
 * chassis,
 * windscreen,
 * seat_pside_r,
 * seat_dside_r,
 * bodyshell,
 * suspension_lm,
 * suspension_lr,
 * platelight,
 * attach_female,
 * attach_male,
 * bonnet,
 * boot,
 * chassis_dummy,  //Center of the dummy
 * chassis_Control,    //Not found yet
 * door_dside_f,   //Door left, front
 * door_dside_r,   //Door left, back
 * door_pside_f,   //Door right, front
 * door_pside_r,   //Door right, back
 * Gun_GripR,
 * windscreen_f,
 * platelight, //Position where the light above the numberplate is located
 * VFX_Emitter,
 * window_lf,  //Window left, front
 * window_lr,  //Window left, back
 * window_rf,  //Window right, front
 * window_rr,  //Window right, back
 * engine, //Position of the engine
 * gun_ammo,
 * ROPE_ATTATCH,   //Not misspelled. In script "finale_heist2b.c4".
 * wheel_lf,   //Wheel left, front
 * wheel_lr,   //Wheel left, back
 * wheel_rf,   //Wheel right, front
 * wheel_rr,   //Wheel right, back
 * exhaust,    //Exhaust. shows only the position of the stock-exhaust
 * overheat,   //A position on the engine(not exactly sure, how to name it)
 * misc_e, //Not a car-bone.
 * seat_dside_f,   //Driver-seat
 * seat_pside_f,   //Seat next to driver
 * Gun_Nuzzle,
 * seat_r
 * 
 * I doubt that the function is case-sensitive, since I found a "Chassis" and a "chassis". - Just tested: Definitely not case-sensitive.
 * 
 * 
 * @param entity
 * @param boneName
 */
export function getEntityBoneIndexByName(entity: number, boneName: string): number { 
	return _in(0xfb71170b, 0x7e76acba, entity, _ts(boneName), _r, _ri); 
}

export function getEntityBoneObjectPostion(entity: number, boneIndex: number): Vector3 { 
	return _mv(_in(0xcf1247cc, 0x86961fd6, entity, boneIndex, _r, _rv)); 
}

/**
 * Gets the local rotation of the specified bone of the specified entity.
 * @param entity
 * @param boneIndex
 */
export function getEntityBoneObjectRotation(entity: number, boneIndex: number): Vector3 { 
	return _mv(_in(0xbd8d3255, 0x0e5cebfe, entity, boneIndex, _r, _rv)); 
}

/**
 * Gets the world position of the specified bone of the specified entity.
 * @param entity
 * @param boneIndex
 */
export function getEntityBonePostion(entity: number, boneIndex: number): Vector3 { 
	return _mv(_in(0x46f86969, 0x33a63c9b, entity, boneIndex, _r, _rv)); 
}

/**
 * Gets the world rotation of the specified bone of the specified entity.
 * @param entity
 * @param boneIndex
 */
export function getEntityBoneRotation(entity: number, boneIndex: number): Vector3 { 
	return _mv(_in(0xce6294a2, 0x32d03786, entity, boneIndex, _r, _rv)); 
}

export function getEntityCanBeDamaged(entity: number): boolean { 
	return _in(0xd95cc5d2, 0xab15a09f, entity, _r); 
}

export function getEntityCollisionDisabled(entity: number): boolean { 
	return _in(0xccf1e97b, 0xefdae480, entity, _r); 
}

/**
 * Gets the current coordinates for a specified entity.
 * `entity` = The entity to get the coordinates from.
 * `alive` = Unused by the game, potentially used by debug builds of GTA in order to assert whether or not an entity was alive.
 * @param entity
 * @param alive
 */
export function getEntityCoords(entity: number, alive: boolean): Vector3 { 
	return _mv(_in(0x3fef770d, 0x40960d5a, entity, alive, _r, _rv)); 
}

/**
 * Gets the entity's forward vector.
 * @param entity
 */
export function getEntityForwardVector(entity: number): Vector3 { 
	return _mv(_in(0x0a794a5a, 0x57f8df91, entity, _r, _rv)); 
}

/**
 * Gets the X-component of the entity's forward vector.
 * @param entity
 */
export function getEntityForwardX(entity: number): number { 
	return _in(0x8bb4ef42, 0x14e0e6d5, entity, _r, _rf); 
}

/**
 * Gets the Y-component of the entity's forward vector.
 * @param entity
 */
export function getEntityForwardY(entity: number): number { 
	return _in(0x866a4a5f, 0xae349510, entity, _r, _rf); 
}

/**
 * Returns the heading of the entity in degrees. Also know as the "Yaw" of an entity.
 * @param entity
 */
export function getEntityHeading(entity: number): number { 
	return _in(0xe83d4f9b, 0xa2a38914, entity, _r, _rf); 
}

/**
 * Gets the heading of the entity physics in degrees, which tends to be more accurate than just "GET_ENTITY_HEADING". This can be clearly seen while, for example, ragdolling a ped/player.
 * 
 * NOTE: The name and description of this native are based on independent research. If you find this native to be more suitable under a different name and/or described differently, please feel free to do so.
 * @param entity
 */
export function getEntityHeadingFromEulers(entity: number): number { 
	return _in(0x846bf629, 0x1198a71e, entity, _r, _rf); 
}

/**
 * Returns an integer value of entity's current health.
 * 
 * Example of range for ped:
 * - Player [0 to 200]
 * - Ped [100 to 200]
 * - Vehicle [0 to 1000]
 * - Object [0 to 1000]
 * 
 * Health is actually a float value but this native casts it to int.
 * In order to get the actual value, do:
 * float health = *(float *)(entityAddress + 0x280);
 * @param entity
 */
export function getEntityHealth(entity: number): number { 
	return _in(0xeef059fa, 0xd016d209, entity, _r, _ri); 
}

export function getEntityHeight(entity: number, X: number, Y: number, Z: number, atTop: boolean, inWorldCoords: boolean): number { 
	return _in(0x5a504562, 0x485944dd, entity, _fv(X), _fv(Y), _fv(Z), atTop, inWorldCoords, _r, _rf); 
}

/**
 * Return height (z-dimension) above ground.
 * Example: The pilot in a titan plane is 1.844176 above ground.
 * 
 * How can i convert it to meters?
 * Everything seems to be in meters, probably this too.
 * @param entity
 */
export function getEntityHeightAboveGround(entity: number): number { 
	return _in(0x1dd55701, 0x034110e5, entity, _r, _rf); 
}

export function getEntityIndexOfCutsceneEntity(cutsceneEntName: string, modelHash: number): number { 
	return _in(0x0a2e9fdb, 0x9a8c62f6, _ts(cutsceneEntName), _ch(modelHash), _r, _ri); 
}

export function getEntityIndexOfRegisteredEntity(cutsceneEntName: string, modelHash: number): number { 
	return _in(0xc0741a26, 0x499654cd, _ts(cutsceneEntName), _ch(modelHash), _r, _ri); 
}

/**
 * Returns the LOD distance of an entity.
 * @param entity
 */
export function getEntityLodDist(entity: number): number { 
	return _in(0x4159c276, 0x2b5791d6, entity, _r, _ri); 
}

export function getEntityMatrix(entity: number): [Vector3, Vector3, Vector3, Vector3] { 
	const [forwardVector_out, rightVector_out, upVector_out, position_out] = _in(0xecb2fc72, 0x35a7d137, entity, _v, _v, _v, _v);
	return [_mv(forwardVector_out), _mv(rightVector_out), _mv(upVector_out), _mv(position_out)]; 
}

/**
 * Return an integer value of entity's maximum health.
 * 
 * Example:
 * - Player = 200
 * - Ped = 150
 * @param entity
 */
export function getEntityMaxHealth(entity: number): number { 
	return _in(0x15d75760, 0x6d170c3c, entity, _r, _ri); 
}

/**
 * Returns the model hash from the entity
 * @param entity
 */
export function getEntityModel(entity: number): number { 
	return _in(0x9f47b058, 0x362c84b5, entity, _r, _ri); 
}

/**
 * Gets the handle of an entity with a specific model hash attached to another entity, such as an object attached to a ped.
 * This native does not appear to have anything to do with pickups as in scripts it is used with objects.
 * 
 * Example from fm_mission_controller_2020.c:
 * 
 * iVar8 = ENTITY::GET_ENTITY_OF_TYPE_ATTACHED_TO_ENTITY(bParam0->f_9, joaat("p_cs_clipboard"));
 * @param entity
 * @param modelHash
 */
export function getEntityOfTypeAttachedToEntity(entity: number, modelHash: number): number { 
	return _in(0x1f922734, 0xe259bd26, entity, _ch(modelHash), _r, _ri); 
}

export function getEntityPitch(entity: number): number { 
	return _in(0xd45dc289, 0x3621e1fe, entity, _r, _rf); 
}

/**
 * Returns TRUE if it found an entity in your crosshair within range of your weapon. Assigns the handle of the target to the *entity that you pass it.
 * Returns false if no entity found.
 * @param player
 * @param entity
 */
export function getEntityPlayerIsFreeAimingAt(player: number, entity: number): [boolean, number] { 
	const [retval, entity_out] = _in(0x2975c866, 0xe6713290, player, _ii(entity), _r);
	return [retval as boolean, entity_out as number]; 
}

/**
 * A population type, from the following enum: https://alloc8or.re/gta5/doc/enums/ePopulationType.txt
 * @param entity
 */
export function getEntityPopulationType(entity: number): number { 
	return _in(0xf6f5161f, 0x4534edff, entity, _r, _ri); 
}

export function getEntityProofs(entity: number): [boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean] { 
	const [retval, bulletProof_out, fireProof_out, explosionProof_out, collisionProof_out, meleeProof_out, steamProof_out, p7_out, drownProof_out] = _in(0xbe8cd9be, 0x829bbebf, entity, _i, _i, _i, _i, _i, _i, _i, _i, _r);
	return [retval as boolean, bulletProof_out as boolean, fireProof_out as boolean, explosionProof_out as boolean, collisionProof_out as boolean, meleeProof_out as boolean, steamProof_out as boolean, p7_out as boolean, drownProof_out as boolean]; 
}

/**
 * w is the correct parameter name!
 * @param entity
 * @param x
 * @param y
 * @param z
 * @param w
 */
export function getEntityQuaternion(entity: number): [number, number, number, number] { 
	const [x_out, y_out, z_out, w_out] = _in(0x7b3703d2, 0xd32dfa18, entity, _f, _f, _f, _f);
	return [x_out as number, y_out as number, z_out as number, w_out as number]; 
}

/**
 * Displays the current ROLL axis of the entity [-180.0000/180.0000+]
 * (Sideways Roll) such as a vehicle tipped on its side
 * @param entity
 */
export function getEntityRoll(entity: number): number { 
	return _in(0x831e0242, 0x595560df, entity, _r, _rf); 
}

/**
 * rotationOrder is the order yaw, pitch and roll is applied. Usually 2. Returns a vector where the Z coordinate is the yaw.
 * 
 * rotationOrder refers to the order yaw pitch roll is applied; value ranges from 0 to 5 and is usually *2* in scripts.
 * What you use for rotationOrder when getting must be the same as rotationOrder when setting the rotation.
 * 
 * What it returns is the yaw on the z part of the vector, which makes sense considering R* considers z as vertical. Here's a picture for those of you who don't understand pitch, yaw, and roll: www.allstar.fiu.edu/aero/images/pic5-1.gif
 * 
 * Rotation Orders:
 * 0: ZYX - Rotate around the z-axis, then the y-axis and finally the x-axis.
 * 1: YZX - Rotate around the y-axis, then the z-axis and finally the x-axis.
 * 2: ZXY - Rotate around the z-axis, then the x-axis and finally the y-axis.
 * 3: XZY - Rotate around the x-axis, then the z-axis and finally the y-axis.
 * 4: YXZ - Rotate around the y-axis, then the x-axis and finally the z-axis.
 * 5: XYZ - Rotate around the x-axis, then the y-axis and finally the z-axis.
 * @param entity
 * @param rotationOrder
 */
export function getEntityRotation(entity: number, rotationOrder: number): Vector3 { 
	return _mv(_in(0xafbd61cc, 0x738d9eb9, entity, rotationOrder, _r, _rv)); 
}

export function getEntityRotationVelocity(entity: number): Vector3 { 
	return _mv(_in(0x213b9104, 0x5d09b983, entity, _r, _rv)); 
}

/**
 * Returns the name of the script that owns/created the entity or nullptr. Second parameter is unused, can just be a nullptr.
 * @param entity
 * @param script
 */
export function getEntityScript(entity: number, script: number): [string, number] { 
	const [retval, script_out] = _in(0xa6e9c38d, 0xb51d7748, entity, _ii(script), _r, _s);
	return [retval as string, script_out as number]; 
}

/**
 * result is in meters per second
 * 
 * ------------------------------------------------------------
 * So would the conversion to mph and km/h, be along the lines of this.
 * 
 * float speed = GET_ENTITY_SPEED(veh);
 * float kmh = (speed * 3.6);
 * float mph = (speed * 2.236936);
 * ------------------------------------------------------------
 * @param entity
 */
export function getEntitySpeed(entity: number): number { 
	return _in(0xd5037ba8, 0x2e12416f, entity, _r, _rf); 
}

/**
 * Relative can be used for getting speed relative to the frame of the vehicle, to determine for example, if you are going in reverse (-y speed) or not (+y speed).
 * @param entity
 * @param relative
 */
export function getEntitySpeedVector(entity: number, relative: boolean): Vector3 { 
	return _mv(_in(0x9a8d700a, 0x51cb7b0d, entity, relative, _r, _rv)); 
}

/**
 * Get how much of the entity is submerged.  1.0f is whole entity.
 * @param entity
 */
export function getEntitySubmergedLevel(entity: number): number { 
	return _in(0xe81afc1b, 0xc4cc41ce, entity, _r, _rf); 
}

/**
 * Returns:
 * 0 = no entity
 * 1 = ped
 * 2 = vehicle
 * 3 = object
 * @param entity
 */
export function getEntityType(entity: number): number { 
	return _in(0x8acd3660, 0x38d14505, entity, _r, _ri); 
}

export function getEntityUprightValue(entity: number): number { 
	return _in(0x95eed5a6, 0x94951f9f, entity, _r, _rf); 
}

export function getEntityVelocity(entity: number): Vector3 { 
	return _mv(_in(0x4805d2b1, 0xd8cf94a9, entity, _r, _rv)); 
}

/**
 * doorId: see SET_VEHICLE_DOOR_SHUT
 * @param vehicle
 * @param doorId
 */
export function getEntryPointPosition(vehicle: number, doorId: number): Vector3 { 
	return _mv(_in(0xc0572928, 0xc0abfda3, vehicle, doorId, _r, _rv)); 
}

/**
 * eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)
 * @param eventGroup
 * @param eventIndex
 */
export function getEventAtIndex(eventGroup: number, eventIndex: number): number { 
	return _in(0xd8f66a3a, 0x60c62153, eventGroup, eventIndex, _r, _ri); 
}

/**
 * eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)
 * 
 * Note: eventDataSize is NOT the size in bytes, it is the size determined by the SIZE_OF operator (RAGE Script operator, not C/C++ sizeof). That is, the size in bytes divided by 8 (script variables are always 8-byte aligned!).
 * @param eventGroup
 * @param eventIndex
 * @param eventData
 * @param eventDataSize
 */
export function getEventData(eventGroup: number, eventIndex: number, eventDataSize: number): [boolean, number] { 
	const [retval, eventData_out] = _in(0x2902843f, 0xcd2b2d79, eventGroup, eventIndex, _i, eventDataSize, _r);
	return [retval as boolean, eventData_out as number]; 
}

/**
 * eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)
 * @param eventGroup
 * @param eventIndex
 */
export function getEventExists(eventGroup: number, eventIndex: number): boolean { 
	return _in(0x936e6168, 0xa9bcedb5, eventGroup, eventIndex, _r); 
}

export function getEverHadBadPackOrder(): boolean { 
	return _in(0x8d30f648, 0x014a92b5, _r); 
}

/**
 * See GET_TIMECYCLE_MODIFIER_INDEX for use, works the same just for the secondary timecycle modifier.
 * Returns an integer representing the Timecycle modifier
 */
export function getExtraTcmodifier(): number { 
	return _in(0xbb0527ec, 0x6341496d, _r, _ri); 
}

/**
 * This function is hard-coded to always return 0.
 */
export function getExtracontentCloudResult(): number { 
	return _in(0x94896593, 0x72a81585, _r, _ri); 
}

/**
 * Getter for SET_FAKE_SPECTATOR_MODE
 */
export function getFakeSpectatorMode(): boolean { 
	return _in(0xc2d2ad9e, 0xaae265b8, _r); 
}

/**
 * Gets the height of the vehicle's suspension.
 * The higher the value the lower the suspension. Each 0.002 corresponds with one more level lowered.
 * 0.000 is the stock suspension.
 * 0.008 is Ultra Suspension.
 * @param vehicle
 */
export function getFakeSuspensionLoweringAmount(vehicle: number): number { 
	return _in(0x53952fd2, 0xbaa19f17, vehicle, _r, _rf); 
}

export function getFakeWantedLevel(): number { 
	return _in(0x4c9296cb, 0xcd1b971e, _r, _ri); 
}

/**
 * Gets a localized string literal from a label name. Can be used for output of e.g. VEHICLE::GET_LIVERY_NAME. To check if a GXT label can be localized with this, HUD::DOES_TEXT_LABEL_EXIST can be used.
 * @param labelName
 */
export function getFilenameForAudioConversation(labelName: string): string { 
	return _in(0x7b5280eb, 0xa9840c72, _ts(labelName), _r, _s); 
}

export function getFinalRenderedCamCoord(): Vector3 { 
	return _mv(_in(0xa200eb1e, 0xe790f448, _r, _rv)); 
}

export function getFinalRenderedCamFarClip(): number { 
	return _in(0xdfc8cbc6, 0x06fdb0fc, _r, _rf); 
}

export function getFinalRenderedCamFarDof(): number { 
	return _in(0x9780f32b, 0xcaf72431, _r, _rf); 
}

/**
 * Gets some camera fov
 */
export function getFinalRenderedCamFov(): number { 
	return _in(0x80ec1146, 0x69daeff4, _r, _rf); 
}

export function getFinalRenderedCamMotionBlurStrength(): number { 
	return _in(0x162f9d99, 0x5753dc19, _r, _rf); 
}

export function getFinalRenderedCamNearClip(): number { 
	return _in(0xd0082607, 0x100d7193, _r, _rf); 
}

export function getFinalRenderedCamNearDof(): number { 
	return _in(0xa03502fc, 0x581f7d9b, _r, _rf); 
}

/**
 * p0 seems to consistently be 2 across scripts
 * 
 * Function is called faily often by CAM::CREATE_CAM_WITH_PARAMS
 * @param rotationOrder
 */
export function getFinalRenderedCamRot(rotationOrder: number): Vector3 { 
	return _mv(_in(0x5b4e4c81, 0x7fcc2dfb, rotationOrder, _r, _rv)); 
}

export function getFinalRenderedRemotePlayerCamFov(player: number): number { 
	return _in(0x5f35f673, 0x2c3fbba0, player, _r, _rf); 
}

export function getFinalRenderedRemotePlayerCamRot(player: number, rotationOrder: number): Vector3 { 
	return _mv(_in(0x26903d9c, 0xd1175f2c, player, rotationOrder, _r, _rv)); 
}

export function getFirstBlipInfoId(blipSprite: number): number { 
	return _in(0x1bede233, 0xe6cd2a1f, blipSprite, _r, _ri); 
}

export function getFirstNCharactersOfLiteralString(string: string, length: number): string { 
	return _in(0x98c3cf91, 0x3d895111, _ts(string), length, _r, _s); 
}

export function getFirstPersonAimCamZoomFactor(): number { 
	return _in(0x7ec52cc4, 0x0597d170, _r, _rf); 
}

/**
 * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
 * @param modelHash
 */
export function getFlyingVehicleModelAgility(modelHash: number): number { 
	return _in(0xc6ad107d, 0xdc9054cc, _ch(modelHash), _r, _rf); 
}

export function getFmFemaleShopPedApparelItemIndex(p0: number): number { 
	return _in(0xf033419d, 0x1b81fae8, p0, _r, _ri); 
}

export function getFmMaleShopPedApparelItemIndex(p0: number): number { 
	return _in(0x1e77fa7a, 0x62ee6c4c, p0, _r, _ri); 
}

export function getFocusPedOnScreen(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number): number { 
	return _in(0x89215ec7, 0x47df244a, _fv(p0), p1, _fv(p2), _fv(p3), _fv(p4), _fv(p5), _fv(p6), p7, p8, _r, _ri); 
}

/**
 * See viewmode enum in CAM.GET_FOLLOW_VEHICLE_CAM_VIEW_MODE for return value
 */
export function getFollowPedCamViewMode(): number { 
	return _in(0x8d4d4623, 0x0b2c353a, _r, _ri); 
}

export function getFollowPedCamZoomLevel(): number { 
	return _in(0x33e6c8ef, 0xd0cd93e9, _r, _ri); 
}

/**
 * Returns the type of camera:
 * 
 * enum _viewmode //0xA11D7CA8
 * {
 * THIRD_PERSON_NEAR = 0,
 * THIRD_PERSON_MEDIUM = 1,
 * THIRD_PERSON_FAR = 2,
 * CINEMATIC = 3,
 * FIRST_PERSON = 4
 * };
 */
export function getFollowVehicleCamViewMode(): number { 
	return _in(0xa4ff579a, 0xc0e3aaae, _r, _ri); 
}

export function getFollowVehicleCamZoomLevel(): number { 
	return _in(0xee82280a, 0xb767b690, _r, _ri); 
}

export function getForcedComponent(componentHash: number, forcedComponentIndex: number): [number, number, number] { 
	const [nameHash_out, enumValue_out, componentType_out] = _in(0x6c93ed8c, 0x2f74859b, _ch(componentHash), forcedComponentIndex, _i, _i, _i);
	return [nameHash_out as number, enumValue_out as number, componentType_out as number]; 
}

export function getForcedProp(componentHash: number, forcedPropIndex: number): [number, number, number] { 
	const [nameHash_out, enumValue_out, anchorPoint_out] = _in(0xe1ca84eb, 0xf72e691d, _ch(componentHash), forcedPropIndex, _i, _i, _i);
	return [nameHash_out as number, enumValue_out as number, anchorPoint_out as number]; 
}

export function getFrameCount(): number { 
	return _in(0xfc8202ef, 0xc642e6f2, _r, _ri); 
}

export function getFrameTime(): number { 
	return _in(0x15c40837, 0x039ffaf7, _r, _rf); 
}

export function getGameTimer(): number { 
	return _in(0x9cd27b00, 0x45628463, _r, _ri); 
}

export function getGameplayCamCoord(): Vector3 { 
	return _mv(_in(0x14d6f567, 0x8d8f1b37, _r, _rv)); 
}

export function getGameplayCamFov(): number { 
	return _in(0x65019750, 0xa0324133, _r, _rf); 
}

export function getGameplayCamRelativeHeading(): number { 
	return _in(0x74360764, 0x8add4587, _r, _rf); 
}

export function getGameplayCamRelativePitch(): number { 
	return _in(0x3a6867b4, 0x845beda2, _r, _rf); 
}

/**
 * p0 dosen't seem to change much, I tried it with 0, 1, 2:
 * 0-Pitch(X): -70.000092
 * 0-Roll(Y): -0.000001
 * 0-Yaw(Z): -43.886459
 * 1-Pitch(X): -70.000092
 * 1-Roll(Y): -0.000001
 * 1-Yaw(Z): -43.886463
 * 2-Pitch(X): -70.000092
 * 2-Roll(Y): -0.000002
 * 2-Yaw(Z): -43.886467
 * @param rotationOrder
 */
export function getGameplayCamRot(rotationOrder: number): Vector3 { 
	return _mv(_in(0x837765a2, 0x5378f0bb, rotationOrder, _r, _rv)); 
}

/**
 * Returns the ActionScript flagValue.
 * ActionScript flags are global flags that scaleforms use
 * Flags found during testing
 * 0: Returns 1 if the web_browser keyboard is open, otherwise 0
 * 1: Returns 1 if the player has clicked back twice on the opening page, otherwise 0 (web_browser)
 * 2: Returns how many links the player has clicked in the web_browser scaleform, returns 0 when the browser gets closed
 * 9: Returns the current selection on the mobile phone scaleform
 * 
 * There are 20 flags in total.
 * @param flagIndex
 */
export function getGlobalActionscriptFlag(flagIndex: number): number { 
	return _in(0xe3b05614, 0xdce1d014, flagIndex, _r, _ri); 
}

export function getGlobalWaterFile(): number { 
	return _in(0xf741bd85, 0x3611592d, _r, _ri); 
}

export function getGpsBlipRouteFound(): boolean { 
	return _in(0x869daacb, 0xbe9fa006, _r); 
}

export function getGpsBlipRouteLength(): number { 
	return _in(0xbbb45c3c, 0xf5c8aa85, _r, _ri); 
}

export function getGroundZAndNormalFor3dCoord(x: number, y: number, z: number): [boolean, number, Vector3] { 
	const [retval, groundZ_out, normal_out] = _in(0x8bdc7bfc, 0x57a81e76, _fv(x), _fv(y), _fv(z), _f, _v, _r);
	return [retval as boolean, groundZ_out as number, _mv(normal_out)]; 
}

export function getGroundZExcludingObjectsFor3dCoord(x: number, y: number, z: number, p4: boolean, p5: boolean): [boolean, number] { 
	const [retval, groundZ_out] = _in(0x9e82f0f3, 0x62881b29, _fv(x), _fv(y), _fv(z), _f, p4, p5, _r);
	return [retval as boolean, groundZ_out as number]; 
}

/**
 * Gets the ground elevation at the specified position. Note that if the specified position is below ground level, the function will output zero!
 * 
 * x: Position on the X-axis to get ground elevation at.
 * y: Position on the Y-axis to get ground elevation at.
 * z: Position on the Z-axis to get ground elevation at.
 * groundZ: The ground elevation at the specified position.
 * ignoreWater: Nearly always 0, very rarely 1 in the scripts: https://gfycat.com/NiftyTatteredCricket
 * 
 * Bear in mind this native can only calculate the elevation when the coordinates are within the client's render distance.
 * @param x
 * @param y
 * @param z
 * @param groundZ
 * @param ignoreWater
 * @param p5
 */
export function getGroundZFor3dCoord(x: number, y: number, z: number, ignoreWater: boolean, p5: boolean): [boolean, number] { 
	const [retval, groundZ_out] = _in(0xc906a7da, 0xb05c8d2b, _fv(x), _fv(y), _fv(z), _f, ignoreWater, p5, _r);
	return [retval as boolean, groundZ_out as number]; 
}

/**
 * p1 may be a BOOL representing whether or not the group even exists
 * @param groupID
 * @param p1
 * @param sizeInMembers
 */
export function getGroupSize(groupID: number): [number, number] { 
	const [p1_out, sizeInMembers_out] = _in(0x8de69fe3, 0x5ca09a45, groupID, _i, _i);
	return [p1_out as number, sizeInMembers_out as number]; 
}

export function getHasObjectBeenCompletelyDestroyed(p0: number): boolean { 
	return _in(0x25422692, 0x91c6ac84, p0, _r); 
}

export function getHasRetractableWheels(vehicle: number): boolean { 
	return _in(0xdca174a4, 0x2133f08c, vehicle, _r); 
}

export function getHasRocketBoost(vehicle: number): boolean { 
	return _in(0x36d782f6, 0x8b309bda, vehicle, _r); 
}

export function getHasVehicleBeenHitByShunt(vehicle: number): boolean { 
	return _in(0xe8718faf, 0x591fd224, vehicle, _r); 
}

/**
 * This native converts its past string to hash. It is hashed using jenkins one at a time method.
 * @param string
 */
export function getHashKey(string: string): number { 
	return _in(0xd24d37cc, 0x275948cc, _ts(string), _r, _ri); 
}

export function getHashNameForComponent(entity: number, componentId: number, drawableVariant: number, textureVariant: number): number { 
	return _in(0x0368b3a8, 0x38070348, entity, componentId, drawableVariant, textureVariant, _r, _ri); 
}

export function getHashNameForProp(entity: number, componentId: number, propIndex: number, propTextureIndex: number): number { 
	return _in(0x5d616027, 0x5caec8dd, entity, componentId, propIndex, propTextureIndex, _r, _ri); 
}

/**
 * Returns a hash representing which part of the map the given coords are located.
 * 
 * Possible return values:
 * (Hash of) city -> -289320599
 * (Hash of) countryside -> 2072609373
 * 
 * C# Example :
 * 
 * Ped player = Game.Player.Character;
 * Hash h = Function.Call<Hash>(Hash.GET_HASH_OF_MAP_AREA_AT_COORDS, player.Position.X, player.Position.Y, player.Position.Z);
 * @param x
 * @param y
 * @param z
 */
export function getHashOfMapAreaAtCoords(x: number, y: number, z: number): number { 
	return _in(0x7ee64d51, 0xe8498728, _fv(x), _fv(y), _fv(z), _r, _ri); 
}

export function getHashOfThisScriptName(): number { 
	return _in(0x8a1c8b17, 0x38ffe87e, _r, _ri); 
}

/**
 * A getter for _SET_PED_EYE_COLOR. Returns -1 if fails to get.
 * @param ped
 */
export function getHeadBlendEyeColor(ped: number): number { 
	return _in(0x76bba2ce, 0xe66d47e9, ped, _r, _ri); 
}

/**
 * dx = x1 - x2
 * dy = y1 - y2
 * @param dx
 * @param dy
 */
export function getHeadingFromVector2d(dx: number, dy: number): number { 
	return _in(0x2ffb6b22, 0x4f4b2926, _fv(dx), _fv(dy), _r, _rf); 
}

/**
 * Max 1000.
 * At 0 the main rotor will stall.
 * @param vehicle
 */
export function getHeliMainRotorHealth(vehicle: number): number { 
	return _in(0xe4cb7541, 0xf413d2c5, vehicle, _r, _rf); 
}

/**
 * Max 1000.
 * At -100 both helicopter rotors will stall.
 * @param vehicle
 */
export function getHeliTailBoomHealth(vehicle: number): number { 
	return _in(0xac51915d, 0x27e4a5f7, vehicle, _r, _rf); 
}

/**
 * Max 1000.
 * At 0 the tail rotor will stall.
 * @param vehicle
 */
export function getHeliTailRotorHealth(vehicle: number): number { 
	return _in(0xae8ce82a, 0x4219ac8c, vehicle, _r, _rf); 
}

export function getHudColour(hudColorIndex: number): [number, number, number, number] { 
	const [r_out, g_out, b_out, a_out] = _in(0x7c9c91ab, 0x74a0360f, hudColorIndex, _i, _i, _i, _i);
	return [r_out as number, g_out as number, b_out as number, a_out as number]; 
}

export function getHudComponentPosition(id: number): Vector3 { 
	return _mv(_in(0x223ca69a, 0x8c4417fd, id, _r, _rv)); 
}

/**
 * World to relative screen coords, this world to screen will keep the text on screen. Was named _GET_SCREEN_COORD_FROM_WORLD_COORD, but this conflicts with 0x34E82F05DF2974F5. As that hash actually matches GET_SCREEN_COORD_FROM_WORLD_COORD that one supercedes and this one was renamed to _GET_2D_COORD_FROM_3D_COORD
 * @param worldX
 * @param worldY
 * @param worldZ
 * @param screenX
 * @param screenY
 */
export function getHudScreenPositionFromWorldPosition(worldX: number, worldY: number, worldZ: number): [number, number, number] { 
	const [retval, screenX_out, screenY_out] = _in(0xf9904d11, 0xf1acbec3, _fv(worldX), _fv(worldY), _fv(worldZ), _f, _f, _r, _ri);
	return [retval as number, screenX_out as number, screenY_out as number]; 
}

export function getHydraulicSuspensionRaiseFactor(vehicle: number, wheelId: number): number { 
	return _in(0x0bb5cbdd, 0xd0f25ae3, vehicle, wheelId, _r, _rf); 
}

export function getIdOfThisThread(): number { 
	return _in(0xc30338e8, 0x088e2e21, _r, _ri); 
}

/**
 * x1, y1, z1 -- Coords of your ped model
 * x2, y2, z2 -- Coords of the ped you want to switch to
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 */
export function getIdealPlayerSwitchType(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): number { 
	return _in(0xb5d7b26b, 0x45720e05, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _r, _ri); 
}

export function getInVehicleClipsetHashForSeat(vehicle: number, p1: number): number { 
	return _in(0xa01bc64d, 0xd4bfbbac, vehicle, p1, _r, _ri); 
}

export function getIndexOfCurrentLevel(): number { 
	return _in(0xcbad6729, 0xf7b1f4fc, _r, _ri); 
}

export function getIndexedItemInItemset(index: number, itemset: number): number { 
	return _in(0x7a197e25, 0x21ee2bab, index, itemset, _r, _ri); 
}

/**
 * Returns interior ID from specified coordinates. If coordinates are outside, then it returns 0.
 * 
 * Example for VB.NET
 * Dim interiorID As Integer = Native.Function.Call(Of Integer)(Hash.GET_INTERIOR_AT_COORDS, X, Y, Z)
 * @param x
 * @param y
 * @param z
 */
export function getInteriorAtCoords(x: number, y: number, z: number): number { 
	return _in(0xb0f7f866, 0x3821d9c3, _fv(x), _fv(y), _fv(z), _r, _ri); 
}

/**
 * Returns the interior ID representing the requested interior at that location (if found?). The supplied interior string is not the same as the one used to load the interior.
 * 
 * Use: INTERIOR::UNPIN_INTERIOR(INTERIOR::GET_INTERIOR_AT_COORDS_WITH_TYPE(x, y, z, interior))
 * 
 * Interior types include: "V_Michael", "V_Franklins", "V_Franklinshouse", etc.. you can find them in the scripts.
 * 
 * Not a very useful native as you could just use GET_INTERIOR_AT_COORDS instead and get the same result, without even having to specify the interior type.
 * @param x
 * @param y
 * @param z
 * @param interiorType
 */
export function getInteriorAtCoordsWithType(x: number, y: number, z: number, interiorType: string): number { 
	return _in(0x05b7a89b, 0xd78797fc, _fv(x), _fv(y), _fv(z), _ts(interiorType), _r, _ri); 
}

/**
 * Hashed version of GET_INTERIOR_AT_COORDS_WITH_TYPE
 * @param x
 * @param y
 * @param z
 * @param typeHash
 */
export function getInteriorAtCoordsWithTypehash(x: number, y: number, z: number, typeHash: number): number { 
	return _in(0xf0f77adb, 0x9f67e79d, _fv(x), _fv(y), _fv(z), _ch(typeHash), _r, _ri); 
}

export function getInteriorFromCollision(x: number, y: number, z: number): number { 
	return _in(0xec4cf9fc, 0xb29a4424, _fv(x), _fv(y), _fv(z), _r, _ri); 
}

/**
 * Returns the handle of the interior that the entity is in. Returns 0 if outside.
 * @param entity
 */
export function getInteriorFromEntity(entity: number): number { 
	return _in(0x2107ba50, 0x4071a6bb, entity, _r, _ri); 
}

/**
 * Returns the current interior id from gameplay camera
 */
export function getInteriorFromPrimaryView(): number { 
	return _in(0xe7d267ec, 0x6ca966c3, _r, _ri); 
}

/**
 * Returns the group ID of the specified interior.
 * 0 = default
 * 1 = subway station, subway tracks, sewers
 * 3 = train tunnel under mirror park
 * 5 = tunnel near del perro
 * 6 = train tunnel near chilliad
 * 7 = train tunnel near josiah
 * 8 = train tunnel in sandy shores
 * 9 = braddock tunnel (near chilliad)
 * 12 = tunnel under fort zancudo
 * 14 = train tunnel under cypress flats
 * 18 = rockford plaza parking garage
 * 19 = arcadius parking garage
 * 20 = union depository parking garage
 * 21 = fib parking garage
 * @param interior
 */
export function getInteriorGroupId(interior: number): number { 
	return _in(0xe4a84abf, 0x135ef91a, interior, _r, _ri); 
}

export function getInteriorHeading(interior: number): number { 
	return _in(0xf49b5863, 0x1d9e22d9, interior, _r, _rf); 
}

export function getInteriorLocationAndNamehash(interior: number): [Vector3, number] { 
	const [position_out, nameHash_out] = _in(0x252bdc06, 0xb73fa6ea, interior, _v, _i);
	return [_mv(position_out), nameHash_out as number]; 
}

export function getIsArticulatedJointAtMaxAngle(p0: number, p1: number): boolean { 
	return _in(0x3bd770d2, 0x81982db5, p0, p1, _r); 
}

export function getIsArticulatedJointAtMinAngle(object: number, p1: number): boolean { 
	return _in(0x43c677f1, 0xe1158005, object, p1, _r); 
}

/**
 * Returns true if profile setting 208 is equal to 0.
 */
export function getIsAutoSaveOff(): boolean { 
	return _in(0x6e04f060, 0x94c87047, _r); 
}

export function getIsBoatCapsized(vehicle: number): boolean { 
	return _in(0xba91d045, 0x575699ad, vehicle, _r); 
}

/**
 * doorId: see SET_VEHICLE_DOOR_SHUT
 * @param vehicle
 * @param doorId
 */
export function getIsDoorValid(vehicle: number, doorId: number): boolean { 
	return _in(0x645f4b6e, 0x8499f632, vehicle, doorId, _r); 
}

export function getIsEntityAFrag(object: number): boolean { 
	return _in(0x0c112765, 0x300c7e1e, object, _r); 
}

/**
 * false = Any resolution < 1280x720
 * true = Any resolution >= 1280x720
 */
export function getIsHidef(): boolean { 
	return _in(0x84ed3119, 0x1cc5d2c9, _r); 
}

export function getIsInitialLoadingScreenActive(): boolean { 
	return _in(0xc4637a6d, 0x03c24cc3, _r); 
}

/**
 * This function is hard-coded to always return 0.
 */
export function getIsLaunchFromLiveArea(): boolean { 
	return _in(0x88b588b4, 0x1ff7868e, _r); 
}

/**
 * From the driver's perspective, is the left headlight broken.
 * @param vehicle
 */
export function getIsLeftVehicleHeadlightDamaged(vehicle: number): boolean { 
	return _in(0x5ef77c9a, 0xdd3b11a3, vehicle, _r); 
}

/**
 * This function is hard-coded to always return 0.
 */
export function getIsLiveAreaLaunchWithContent(): boolean { 
	return _in(0x67fc09bc, 0x554a75e5, _r); 
}

export function getIsLoadingScreenActive(): boolean { 
	return _in(0x10d0a8f2, 0x59e93ec9, _r); 
}

/**
 * 2 occurrences in agency_heist3a. p1 was 0.7f then 0.4f.
 * @param player
 * @param p1
 */
export function getIsMoppingAreaFreeInFrontOfPlayer(player: number, p1: number): boolean { 
	return _in(0xdd2620b7, 0xb9d16ff1, player, _fv(p1), _r); 
}

/**
 * gadgetHash - was always 0xFBAB5776 ("GADGET_PARACHUTE").
 * @param ped
 * @param gadgetHash
 */
export function getIsPedGadgetEquipped(ped: number, gadgetHash: number): boolean { 
	return _in(0xf7313320, 0x72f5156c, ped, _ch(gadgetHash), _r); 
}

export function getIsPetrolDecalInRange(xCoord: number, yCoord: number, zCoord: number, radius: number): boolean { 
	return _in(0x2f09f797, 0x6c512404, _fv(xCoord), _fv(yCoord), _fv(zCoord), _fv(radius), _r); 
}

/**
 * Appears once in "re_dealgonewrong"
 * @param player
 */
export function getIsPlayerDrivingOnHighway(player: number): boolean { 
	return _in(0x5fc472c5, 0x01ccadb3, player, _r); 
}

/**
 * Only 1 occurrence. p1 was 2.
 * @param player
 * @param p1
 */
export function getIsPlayerDrivingWreckless(player: number, p1: number): boolean { 
	return _in(0xf10b44fd, 0x479d69f3, player, p1, _r); 
}

/**
 * Although we don't have a jenkins hash for this one, the name is 100% confirmed.
 */
export function getIsPlayerInAnimalForm(): boolean { 
	return _in(0x9689123e, 0x3f213aa5, _r); 
}

export function getIsPreloadedConversationReady(): boolean { 
	return _in(0xe73364db, 0x90778ffa, _r); 
}

/**
 * From the driver's perspective, is the right headlight broken.
 * @param vehicle
 */
export function getIsRightVehicleHeadlightDamaged(vehicle: number): boolean { 
	return _in(0xa7ecb733, 0x55eb2f20, vehicle, _r); 
}

/**
 * Task index enum: https://alloc8or.re/gta5/doc/enums/eTaskTypeIndex.txt
 * @param ped
 * @param taskIndex
 */
export function getIsTaskActive(ped: number, taskIndex: number): boolean { 
	return _in(0xb0760331, 0xc7aa4155, ped, taskIndex, _r); 
}

export function getIsTimecycleTransitioningOut(): boolean { 
	return _in(0x98d18905, 0xbf723b99, _r); 
}

/**
 * Returns profile setting 225.
 */
export function getIsUsingAlternateDriveby(): boolean { 
	return _in(0x0f70731b, 0xaccfbb96, _r); 
}

export function getIsUsingAlternateHandbrake(): boolean { 
	return _in(0x25aaa32b, 0xdc98f2a3, _r); 
}

/**
 * Returns profile setting 237.
 */
export function getIsUsingFpsThirdPersonCover(): boolean { 
	return _in(0xb9cf1f79, 0x3a9f1bf1, _r); 
}

/**
 * Returns profile setting 243.
 */
export function getIsUsingHoodCamera(): boolean { 
	return _in(0xcb645e85, 0xe97ea48b, _r); 
}

/**
 * Returns whether this vehicle is currently disabled by an EMP mine.
 * @param vehicle
 */
export function getIsVehicleDisabledByEmp(vehicle: number): boolean { 
	return _in(0x0506ed94, 0x363ad905, vehicle, _r); 
}

export function getIsVehicleElectric(vehicleModel: number): boolean { 
	return _in(0x1fcb07fe, 0x230b6639, _ch(vehicleModel), _r); 
}

/**
 * Returns true when in a vehicle, false whilst entering/exiting.
 * @param vehicle
 */
export function getIsVehicleEngineRunning(vehicle: number): boolean { 
	return _in(0xae31e7df, 0x9b5b132e, vehicle, _r); 
}

export function getIsVehiclePrimaryColourCustom(vehicle: number): boolean { 
	return _in(0xf095c040, 0x5307b21b, vehicle, _r); 
}

/**
 * Check if Vehicle Secondary is avaliable for customize
 * @param vehicle
 */
export function getIsVehicleSecondaryColourCustom(vehicle: number): boolean { 
	return _in(0x910a32e7, 0xaad2656c, vehicle, _r); 
}

export function getIsVehicleShunting(vehicle: number): boolean { 
	return _in(0xa2459f72, 0xc14e2e8d, vehicle, _r); 
}

/**
 * Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
 * @param name
 */
export function getIsWaypointRecordingLoaded(name: string): boolean { 
	return _in(0xcb4e8be8, 0xa0063c5d, _ts(name), _r); 
}

export function getIsWheelsRetracted(vehicle: number): boolean { 
	return _in(0x1da0da9c, 0xb3f0c8bf, vehicle, _r); 
}

/**
 * Setting Aspect Ratio Manually in game will return:
 * 
 * false - for Narrow format Aspect Ratios (3:2, 4:3, 5:4, etc. )
 * true - for Wide format Aspect Ratios (5:3, 16:9, 16:10, etc. )
 * 
 * Setting Aspect Ratio to "Auto" in game will return "false" or "true" based on the actual set Resolution Ratio.
 */
export function getIsWidescreen(): boolean { 
	return _in(0x30cf4bda, 0x4fcb1905, _r); 
}

export function getItemsetSize(itemset: number): number { 
	return _in(0xd9127e83, 0xabf7c631, itemset, _r, _ri); 
}

export function getJackTarget(ped: number): number { 
	return _in(0x5486a79d, 0x9fbd342d, ped, _r, _ri); 
}

/**
 * Seems to do the exact same as INTERIOR::GET_ROOM_KEY_FROM_ENTITY
 * @param entity
 */
export function getKeyForEntityInRoom(entity: number): number { 
	return _in(0x399685db, 0x942336bc, entity, _r, _ri); 
}

/**
 * Landing gear states:
 * 
 * 0: Deployed
 * 1: Closing (Retracting)
 * 2: (Landing gear state 2 is never used.)
 * 3: Opening (Deploying)
 * 4: Retracted
 * 
 * Returns the current state of the vehicles landing gear.
 * @param vehicle
 */
export function getLandingGearState(vehicle: number): number { 
	return _in(0x9b0f3dca, 0x3db0f4cd, vehicle, _r, _ri); 
}

export function getLastDrivenVehicle(): number { 
	return _in(0xb2d06fae, 0xde65b577, _r, _ri); 
}

export function getLastEntityHitByEntity(entity: number): number { 
	return _in(0xa75ee4f6, 0x89b85391, entity, _r, _ri); 
}

export function getLastMaterialHitByEntity(entity: number): number { 
	return _in(0x5c3d0a93, 0x5f535c4c, entity, _r, _ri); 
}

export function getLastPedInVehicleSeat(vehicle: number, seatIndex: number): number { 
	return _in(0x83f969aa, 0x1ee2a664, vehicle, seatIndex, _r, _ri); 
}

/**
 * Returns last vehicle that was rammed by the given vehicle using the shunt boost.
 * @param vehicle
 */
export function getLastShuntVehicle(vehicle: number): number { 
	return _in(0x04f2fa6e, 0x234162f7, vehicle, _r, _ri); 
}

/**
 * Returns the length of the string passed (much like strlen).
 * @param string
 */
export function getLengthOfLiteralString(string: string): number { 
	return _in(0xf030907c, 0xcbb8a9fd, _ts(string), _r, _ri); 
}

export function getLengthOfLiteralStringInBytes(string: string): number { 
	return _in(0x43e41111, 0x89e54f0e, _ts(string), _r, _ri); 
}

/**
 * Returns the string length of the string from the gxt string .
 * @param gxt
 */
export function getLengthOfStringWithThisTextLabel(gxt: string): number { 
	return _in(0x801bd273, 0xd3a23f74, _ts(gxt), _r, _ri); 
}

export function getLightOverrideMaxIntensityScale(): number { 
	return _in(0x393bd227, 0x5ceb7793, _r, _rf); 
}

export function getLinePlaneIntersection(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number, p10: number, p11: number, p12: number): [boolean, number] { 
	const [retval, p12_out] = _in(0xf56dfb7b, 0x61be7276, _fv(p0), _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), _fv(p6), _fv(p7), _fv(p8), _fv(p9), _fv(p10), _fv(p11), _fi(p12), _r);
	return [retval as boolean, p12_out as number]; 
}

/**
 * Returns the text label of the vehicle's liveryIndex, as specified by the liveryNames section of the vehicle's modkit data in the carcols file.
 * 
 * example
 * 
 * int count = VEHICLE::GET_VEHICLE_LIVERY_COUNT(veh);
 * for (int i = 0; i < count; i++)
 * {
 * const char* LiveryName = VEHICLE::GET_LIVERY_NAME(veh, i);
 * }
 * 
 * 
 * this example will work fine to fetch all names
 * for example for Sanchez we get
 * 
 * SANC_LV1
 * SANC_LV2
 * SANC_LV3
 * SANC_LV4
 * SANC_LV5
 * 
 * 
 * Use GET_FILENAME_FOR_AUDIO_CONVERSATION, to get the localized livery name.
 * 
 * Full list of vehicle mod kits and mods by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleModKits.json
 * @param vehicle
 * @param liveryIndex
 */
export function getLiveryName(vehicle: number, liveryIndex: number): string { 
	return _in(0xb4c7a938, 0x37c91a1f, vehicle, liveryIndex, _r, _s); 
}

/**
 * Hardcoded to always return 2.
 * @param p0
 */
export function getLoadHighQualityPhotoStatus(p0: number): number { 
	return _in(0x40afb081, 0xf8add4ee, p0, _r, _ri); 
}

/**
 * Hard-coded to return 3 if using KBM, otherwise same behavior as GET_LOCAL_PLAYER_GAMEPAD_AIM_STATE.
 */
export function getLocalPlayerAimState(): number { 
	return _in(0xbb41afbb, 0xbc0a0287, _r, _ri); 
}

/**
 * Returns the local player's targeting mode. See PLAYER::SET_PLAYER_TARGETING_MODE.
 */
export function getLocalPlayerGamepadAimState(): number { 
	return _in(0x59b9a7af, 0x4c95133c, _r, _ri); 
}

/**
 * Gets local system time as year, month, day, hour, minute and second.
 * 
 * Example usage:
 * 
 * int year;
 * int month;
 * int day;
 * int hour;
 * int minute;
 * int second;
 * or use std::tm struct
 * 
 * TIME::GET_LOCAL_TIME(&year, &month, &day, &hour, &minute, &second);
 * 
 * @param year
 * @param month
 * @param day
 * @param hour
 * @param minute
 * @param second
 */
export function getLocalTime(): [number, number, number, number, number, number] { 
	const [year_out, month_out, day_out, hour_out, minute_out, second_out] = _in(0x50c7a990, 0x57a69748, _i, _i, _i, _i, _i, _i);
	return [year_out as number, month_out as number, day_out as number, hour_out as number, minute_out as number, second_out as number]; 
}

export function getLockonDistanceOfCurrentPedWeapon(ped: number): number { 
	return _in(0x840f03e9, 0x041e2c9c, ped, _r, _rf); 
}

export function getLodscale(): number { 
	return _in(0x0c15b0e4, 0x43b2349d, _r, _rf); 
}

export function getMainPlayerBlipId(): number { 
	return _in(0xdcd4ec3f, 0x419d02fa, _r, _ri); 
}

/**
 * Will return a vehicle's manufacturer display label.
 * Returns "CARNOTFOUND" if the hash doesn't match a vehicle hash.
 * 
 * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
 * @param modelHash
 */
export function getMakeNameFromVehicleModel(modelHash: number): string { 
	return _in(0xf7af4f15, 0x9ff99f97, _ch(modelHash), _r, _s); 
}

/**
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param ammo
 */
export function getMaxAmmo(ped: number, weaponHash: number, ammo: number): [boolean, number] { 
	const [retval, ammo_out] = _in(0xdc16122c, 0x7a20c933, ped, _ch(weaponHash), _ii(ammo), _r);
	return [retval as boolean, ammo_out as number]; 
}

/**
 * Returns the max ammo for an ammo type. Ammo types: https://gist.github.com/root-cause/faf41f59f7a6d818b7db0b839bd147c1
 * @param ped
 * @param ammoTypeHash
 * @param ammo
 */
export function getMaxAmmoByType(ped: number, ammoTypeHash: number, ammo: number): [boolean, number] { 
	const [retval, ammo_out] = _in(0x585847c5, 0xe4e11709, ped, _ch(ammoTypeHash), _ii(ammo), _r);
	return [retval as boolean, ammo_out as number]; 
}

/**
 * p2 is mostly 1 in the scripts.
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param p2
 */
export function getMaxAmmoInClip(ped: number, weaponHash: number, p2: boolean): number { 
	return _in(0xa38dcffc, 0xea8962fa, ped, _ch(weaponHash), p2, _r, _ri); 
}

export function getMaxNumNetworkObjects(): number { 
	return _in(0xc7be3352, 0x16b5ec7c, _r, _ri); 
}

export function getMaxNumNetworkPeds(): number { 
	return _in(0x0c1f7d49, 0xc39d2289, _r, _ri); 
}

export function getMaxNumNetworkPickups(): number { 
	return _in(0xa7283506, 0x4dd63e4c, _r, _ri); 
}

export function getMaxNumNetworkVehicles(): number { 
	return _in(0x0afce529, 0xf69b21ff, _r, _ri); 
}

export function getMaxRangeOfCurrentPedWeapon(ped: number): number { 
	return _in(0x814c9d19, 0xdfd69679, ped, _r, _rf); 
}

/**
 * Gets the maximum wanted level the player can get.
 * Ranges from 0 to 5.
 */
export function getMaxWantedLevel(): number { 
	return _in(0x462e0db9, 0xb137dc5f, _r, _ri); 
}

/**
 * This function is hard-coded to always return 96.
 */
export function getMaximumNumberOfCloudPhotos(): number { 
	return _in(0xdc54a7af, 0x8b3a14ef, _r, _ri); 
}

/**
 * This function is hard-coded to always return 0.
 */
export function getMaximumNumberOfPhotos(): number { 
	return _in(0x34d23450, 0xf028b0bf, _r, _ri); 
}

export function getMeleeTargetForPed(ped: number): number { 
	return _in(0x18a3e9ee, 0x1297fd39, ped, _r, _ri); 
}

/**
 * lastItemMenuId: this is the menuID of the last selected item minus 1000 (lastItem.menuID - 1000)
 * selectedItemMenuId: same as lastItemMenuId except for the currently selected menu item
 * selectedItemUniqueId: this is uniqueID of the currently selected menu item
 * 
 * when the pausemenu is closed:
 * lastItemMenuId = -1
 * selectedItemMenuId = -1
 * selectedItemUniqueId = 0
 * 
 * when the header gains focus:
 * lastItemMenuId updates as normal or 0 if the pausemenu was just opened
 * selectedItemMenuId becomes a unique id for the pausemenu page that focus was taken from (?) or 0 if the pausemenu was just opened
 * selectedItemUniqueId = -1
 * 
 * when focus is moved from the header to a pausemenu page:
 * lastItemMenuId becomes a unique id for the pausemenu page that focus was moved to (?)
 * selectedItemMenuId = -1
 * selectedItemUniqueId updates as normal
 * @param lastItemMenuId
 * @param selectedItemMenuId
 * @param selectedItemUniqueId
 */
export function getMenuLayoutChangedEventDetails(): [number, number, number] { 
	const [lastItemMenuId_out, selectedItemMenuId_out, selectedItemUniqueId_out] = _in(0x7e17be53, 0xe1aaabaf, _i, _i, _i);
	return [lastItemMenuId_out as number, selectedItemMenuId_out as number, selectedItemUniqueId_out as number]; 
}

/**
 * p0 was always 0xAE2602A3.
 * @param statHash
 * @param outValue
 */
export function getMenuPedBoolStat(statHash: number, outValue: boolean): [boolean, boolean] { 
	const [retval, outValue_out] = _in(0x052991e5, 0x9076e4e4, _ch(statHash), _i, _r);
	return [retval as boolean, outValue_out as boolean]; 
}

export function getMenuPedFloatStat(statHash: number, outValue: number): [boolean, number] { 
	const [retval, outValue_out] = _in(0x5fbd7095, 0xfe7ae57f, _ch(statHash), _fi(outValue), _r);
	return [retval as boolean, outValue_out as number]; 
}

export function getMenuPedIntStat(p0: number, p1: number): [boolean, number] { 
	const [retval, p1_out] = _in(0xef4ced81, 0xcebedc6d, p0, _ii(p1), _r);
	return [retval as boolean, p1_out as number]; 
}

export function getMenuPedMaskedIntStat(statHash: number, mask: number, p3: boolean): [boolean, number] { 
	const [retval, outValue_out] = _in(0x90a6526c, 0xf0381030, _ch(statHash), _i, mask, p3, _r);
	return [retval as boolean, outValue_out as number]; 
}

export function getMenuTriggerEventDetails(): [number, number] { 
	const [lastItemMenuId_out, selectedItemUniqueId_out] = _in(0x36c1451a, 0x88a09630, _i, _i);
	return [lastItemMenuId_out as number, selectedItemUniqueId_out as number]; 
}

export function getMillisecondsPerGameMinute(): number { 
	return _in(0x2f8b4d1c, 0x595b11db, _r, _ri); 
}

export function getMinimapFowCoordinateIsRevealed(x: number, y: number, z: number): boolean { 
	return _in(0x6e31b911, 0x45873922, _fv(x), _fv(y), _fv(z), _r); 
}

export function getMinimapFowDiscoveryRatio(): number { 
	return _in(0xe0130b41, 0xd3cf4574, _r, _rf); 
}

export function getMissionFlag(): boolean { 
	return _in(0xa33cdccd, 0xa663159e, _r); 
}

export function getMobilePhonePosition(position: Vector3): Vector3 { 
	return _in(0x584fdfda, 0x48805b86, _v); 
}

export function getMobilePhoneRenderId(renderId: number): number { 
	return _in(0xb4a53e05, 0xf68b6fa1, _ii(renderId)); 
}

export function getMobilePhoneRotation(p1: number): Vector3 { 
	return _in(0x1cefb61f, 0x193070ae, _v, p1); 
}

/**
 * Returns the name for the type of vehicle mod(Armour, engine etc)
 * 
 * @param vehicle
 * @param modType
 */
export function getModSlotName(vehicle: number, modType: number): string { 
	return _in(0x51f0feb9, 0xf6ae98c0, vehicle, modType, _r, _s); 
}

/**
 * Returns the text label of a mod type for a given vehicle
 * 
 * Use GET_FILENAME_FOR_AUDIO_CONVERSATION to get the part name in the game's language
 * @param vehicle
 * @param modType
 * @param modValue
 */
export function getModTextLabel(vehicle: number, modType: number, modValue: number): string { 
	return _in(0x8935624f, 0x8c5592cc, vehicle, modType, modValue, _r, _s); 
}

/**
 * Gets the dimensions of a model.
 * 
 * Calculate (maximum - minimum) to get the size, in which case, Y will be how long the model is.
 * 
 * Example from the scripts: MISC::GET_MODEL_DIMENSIONS(ENTITY::GET_ENTITY_MODEL(PLAYER::PLAYER_PED_ID()), &v_1A, &v_17);
 * @param modelHash
 * @param minimum
 * @param maximum
 */
export function getModelDimensions(modelHash: number): [Vector3, Vector3] { 
	const [minimum_out, maximum_out] = _in(0x03e8d3d5, 0xf549087a, _ch(modelHash), _v, _v);
	return [_mv(minimum_out), _mv(maximum_out)]; 
}

/**
 * Getter for SET_MOTIONBLUR_MAX_VEL_SCALER
 */
export function getMotionblurMaxVelScaler(): number { 
	return _in(0xe59343e9, 0xe96529e7, _r, _rf); 
}

/**
 * 
 * Function just returns 0
 * void __fastcall ped__get_mount(NativeContext *a1)
 * {
 * NativeContext *v1; // rbx@1
 * 
 * v1 = a1;
 * GetAddressOfPedFromScriptHandle(a1->Args->Arg1);
 * v1->Returns->Item1= 0;
 * }
 * @param ped
 */
export function getMount(ped: number): number { 
	return _in(0xe7e11b8d, 0xcbed1058, ped, _r, _ri); 
}

export function getMouseEvent(scaleformHandle: number): [boolean, number, number, number] { 
	const [retval, p1_out, p2_out, p3_out] = _in(0x632b2940, 0xc67f4ea9, scaleformHandle, _i, _i, _i, _r);
	return [retval as boolean, p1_out as number, p2_out as number, p3_out as number]; 
}

export function getMpLightEnabled(ped: number): boolean { 
	return _in(0x88274c11, 0xcf0d866d, ped, _r); 
}

export function getMpOutfitDataFromMetadata(): [boolean, number, number] { 
	const [retval, p0_out, p1_out] = _in(0x9e30e91f, 0xb03a2caf, _i, _i, _r);
	return [retval as boolean, p0_out as number, p1_out as number]; 
}

export function getMusicPlaytime(): number { 
	return _in(0xe7a0d23d, 0xc414507b, _r, _ri); 
}

export function getMusicVolSlider(): number { 
	return _in(0x3a48ab44, 0x45d499be, _r, _ri); 
}

export function getNameOfScriptWithThisId(threadId: number): string { 
	return _in(0x05a42ba9, 0xfc8da96b, threadId, _r, _s); 
}

/**
 * AIRP = Los Santos International Airport
 * ALAMO = Alamo Sea
 * ALTA = Alta
 * ARMYB = Fort Zancudo
 * BANHAMC = Banham Canyon Dr
 * BANNING = Banning
 * BEACH = Vespucci Beach
 * BHAMCA = Banham Canyon
 * BRADP = Braddock Pass
 * BRADT = Braddock Tunnel
 * BURTON = Burton
 * CALAFB = Calafia Bridge
 * CANNY = Raton Canyon
 * CCREAK = Cassidy Creek
 * CHAMH = Chamberlain Hills
 * CHIL = Vinewood Hills
 * CHU = Chumash
 * CMSW = Chiliad Mountain State Wilderness
 * CYPRE = Cypress Flats
 * DAVIS = Davis
 * DELBE = Del Perro Beach
 * DELPE = Del Perro
 * DELSOL = La Puerta
 * DESRT = Grand Senora Desert
 * DOWNT = Downtown
 * DTVINE = Downtown Vinewood
 * EAST_V = East Vinewood
 * EBURO = El Burro Heights
 * ELGORL = El Gordo Lighthouse
 * ELYSIAN = Elysian Island
 * GALFISH = Galilee
 * GOLF = GWC and Golfing Society
 * GRAPES = Grapeseed
 * GREATC = Great Chaparral
 * HARMO = Harmony
 * HAWICK = Hawick
 * HORS = Vinewood Racetrack
 * HUMLAB = Humane Labs and Research
 * JAIL = Bolingbroke Penitentiary
 * KOREAT = Little Seoul
 * LACT = Land Act Reservoir
 * LAGO = Lago Zancudo
 * LDAM = Land Act Dam
 * LEGSQU = Legion Square
 * LMESA = La Mesa
 * LOSPUER = La Puerta
 * MIRR = Mirror Park
 * MORN = Morningwood
 * MOVIE = Richards Majestic
 * MTCHIL = Mount Chiliad
 * MTGORDO = Mount Gordo
 * MTJOSE = Mount Josiah
 * MURRI = Murrieta Heights
 * NCHU = North Chumash
 * NOOSE = N.O.O.S.E
 * OCEANA = Pacific Ocean
 * PALCOV = Paleto Cove
 * PALETO = Paleto Bay
 * PALFOR = Paleto Forest
 * PALHIGH = Palomino Highlands
 * PALMPOW = Palmer-Taylor Power Station
 * PBLUFF = Pacific Bluffs
 * PBOX = Pillbox Hill
 * PROCOB = Procopio Beach
 * RANCHO = Rancho
 * RGLEN = Richman Glen
 * RICHM = Richman
 * ROCKF = Rockford Hills
 * RTRAK = Redwood Lights Track
 * SANAND = San Andreas
 * SANCHIA = San Chianski Mountain Range
 * SANDY = Sandy Shores
 * SKID = Mission Row
 * SLAB = Stab City
 * STAD = Maze Bank Arena
 * STRAW = Strawberry
 * TATAMO = Tataviam Mountains
 * TERMINA = Terminal
 * TEXTI = Textile City
 * TONGVAH = Tongva Hills
 * TONGVAV = Tongva Valley
 * VCANA = Vespucci Canals
 * VESP = Vespucci
 * VINE = Vinewood
 * WINDF = Ron Alternates Wind Farm
 * WVINE = West Vinewood
 * ZANCUDO = Zancudo River
 * ZP_ORT = Port of South Los Santos
 * ZQ_UAR = Davis Quartz
 * 
 * Full list of zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/zones.json
 * @param x
 * @param y
 * @param z
 */
export function getNameOfZone(x: number, y: number, z: number): string { 
	return _in(0xcd90657d, 0x4c30e1ca, _fv(x), _fv(y), _fv(z), _r, _s); 
}

export function getNamedRendertargetRenderId(name: string): number { 
	return _in(0x1a6478b6, 0x1c6bdc3b, _ts(name), _r, _ri); 
}

/**
 * Looks like the last parameter returns true if the path has been calculated, while the first returns the remaining distance to the end of the path.
 * Return value of native is the same as GET_NAVMESH_ROUTE_RESULT
 * Looks like the native returns an int for the path's state:
 * 1 - ???
 * 2 - ???
 * 3 - Finished Generating
 * @param ped
 * @param distanceRemaining
 * @param isPathReady
 */
export function getNavmeshRouteDistanceRemaining(ped: number): [number, number, boolean] { 
	const [retval, distanceRemaining_out, isPathReady_out] = _in(0xc6f5c0bc, 0xdc74d62d, ped, _f, _i, _r, _ri);
	return [retval as number, distanceRemaining_out as number, isPathReady_out as boolean]; 
}

/**
 * See GET_NAVMESH_ROUTE_DISTANCE_REMAINING for more details.
 * @param ped
 */
export function getNavmeshRouteResult(ped: number): number { 
	return _in(0x632e831f, 0x382a0fa8, ped, _r, _ri); 
}

export function getNearestParticipantToEntity(entity: number): number { 
	return _in(0xffbd7052, 0xd65be0ff, entity, _r, _ri); 
}

export function getNearestPlayerToEntity(entity: number): number { 
	return _in(0x7196842c, 0xb375cdb3, entity, _r, _ri); 
}

export function getNearestPlayerToEntityOnTeam(entity: number, team: number): number { 
	return _in(0x4dc9a62f, 0x844d9337, entity, team, _r, _ri); 
}

/**
 * Could this be used alongside either,
 * SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES or _SET_NETWORK_ID_SYNC_TO_PLAYER to make it so other players can hear the sound while online? It'd be a bit troll-fun to be able to play the Zancudo UFO creepy sounds globally.
 * @param soundId
 */
export function getNetworkIdFromSoundId(soundId: number): number { 
	return _in(0x2de3f0a1, 0x34ffbc0d, soundId, _r, _ri); 
}

export function getNetworkTime(): number { 
	return _in(0x7a5487fe, 0x9faa6b48, _r, _ri); 
}

/**
 * Returns the same value as GET_NETWORK_TIME in freemode, but as opposed to `GET_NETWORK_TIME` it always gets the most recent time, instead of once per tick.
 * Could be used for benchmarking since it can return times in ticks.
 */
export function getNetworkTimeAccurate(): number { 
	return _in(0x89023fbb, 0xf9200e9f, _r, _ri); 
}

export function getNewSelectedMissionCreatorBlip(): number { 
	return _in(0x5c90988e, 0x7c8e1af4, _r, _ri); 
}

export function getNextAudibleBeat(): [boolean, number, number, number] { 
	const [retval, out1_out, out2_out, out3_out] = _in(0xc64a06d9, 0x39f826f5, _f, _f, _i, _r);
	return [retval as boolean, out1_out as number, out2_out as number, out3_out as number]; 
}

export function getNextBlipInfoId(blipSprite: number): number { 
	return _in(0x14f96aa5, 0x0d6fbea7, blipSprite, _r, _ri); 
}

/**
 * Gets the next zone that has been disabled using SET_GPS_DISABLED_ZONE_AT_INDEX.
 */
export function getNextGpsDisabledZoneIndex(): number { 
	return _in(0xd3a6a0ef, 0x48823a8c, _r, _ri); 
}

/**
 * Returns weather name hash
 */
export function getNextWeatherTypeHashName(): number { 
	return _in(0x711327cd, 0x09c8f162, _r, _ri); 
}

export function getNoLoadingScreen(): boolean { 
	return _in(0x18c1270e, 0xa7f199bc, _r); 
}

export function getNorthBlidIndex(): number { 
	return _in(0x3f0cf9cb, 0x7e589b88, _r, _ri); 
}

export function getNthClosestVehicleNode(x: number, y: number, z: number, nthClosest: number, nodeFlags: number, unknown1: number, unknown2: number): [boolean, Vector3] { 
	const [retval, outPosition_out] = _in(0xe50e5241, 0x6ccf948b, _fv(x), _fv(y), _fv(z), nthClosest, _v, nodeFlags, _fv(unknown1), _fv(unknown2), _r);
	return [retval as boolean, _mv(outPosition_out)]; 
}

/**
 * See gtaforums.com/topic/843561-pathfind-node-types for node type info. 0 = paved road only, 1 = any road, 3 = water
 * 
 * p10 always equals 3.0
 * p11 always equals 0
 * @param x
 * @param y
 * @param z
 * @param desiredX
 * @param desiredY
 * @param desiredZ
 * @param nthClosest
 * @param outPosition
 * @param outHeading
 * @param nodeFlags
 * @param p10
 * @param p11
 */
export function getNthClosestVehicleNodeFavourDirection(x: number, y: number, z: number, desiredX: number, desiredY: number, desiredZ: number, nthClosest: number, nodeFlags: number, p10: number, p11: number): [boolean, Vector3, number] { 
	const [retval, outPosition_out, outHeading_out] = _in(0x45905be8, 0x654ae067, _fv(x), _fv(y), _fv(z), _fv(desiredX), _fv(desiredY), _fv(desiredZ), nthClosest, _v, _f, nodeFlags, _fv(p10), _fv(p11), _r);
	return [retval as boolean, _mv(outPosition_out), outHeading_out as number]; 
}

/**
 * Returns the id.
 * @param x
 * @param y
 * @param z
 * @param nth
 * @param nodeFlags
 * @param p5
 * @param p6
 */
export function getNthClosestVehicleNodeId(x: number, y: number, z: number, nth: number, nodeFlags: number, p5: number, p6: number): number { 
	return _in(0x22d7275a, 0x79fe8215, _fv(x), _fv(y), _fv(z), nth, nodeFlags, _fv(p5), _fv(p6), _r, _ri); 
}

export function getNthClosestVehicleNodeIdWithHeading(x: number, y: number, z: number, nthClosest: number, nodeFlags: number, p7: number, p8: number): [number, Vector3, number] { 
	const [retval, outPosition_out, outHeading_out] = _in(0x6448050e, 0x9c2a7207, _fv(x), _fv(y), _fv(z), nthClosest, _v, _f, nodeFlags, _fv(p7), _fv(p8), _r, _ri);
	return [retval as number, _mv(outPosition_out), outHeading_out as number]; 
}

/**
 * Get the nth closest vehicle node and its heading.
 * @param x
 * @param y
 * @param z
 * @param nthClosest
 * @param outPosition
 * @param outHeading
 * @param outNumLanes
 * @param nodeFlags
 * @param unknown3
 * @param unknown4
 */
export function getNthClosestVehicleNodeWithHeading(x: number, y: number, z: number, nthClosest: number, nodeFlags: number, unknown3: number, unknown4: number): [boolean, Vector3, number, number] { 
	const [retval, outPosition_out, outHeading_out, outNumLanes_out] = _in(0x80ca6a8b, 0x6c094cc4, _fv(x), _fv(y), _fv(z), nthClosest, _v, _f, _i, nodeFlags, _fv(unknown3), _fv(unknown4), _r);
	return [retval as boolean, _mv(outPosition_out), outHeading_out as number, outNumLanes_out as number]; 
}

export function getNumCommerceItems(): number { 
	return _in(0xf2eac213, 0xd5ea0623, _r, _ri); 
}

export function getNumCreatedMissionObjects(p0: boolean): number { 
	return _in(0x12b6281b, 0x6c6706c0, p0, _r, _ri); 
}

export function getNumCreatedMissionPeds(p0: boolean): number { 
	return _in(0xcb215c4b, 0x56a7fae7, p0, _r, _ri); 
}

export function getNumCreatedMissionVehicles(p0: boolean): number { 
	return _in(0x0cd9ab83, 0x489430ea, p0, _r, _ri); 
}

export function getNumDlcVehicles(): number { 
	return _in(0xa7a866d2, 0x1cd2329b, _r, _ri); 
}

/**
 * Returns the total number of DLC weapon components.
 * @param dlcWeaponIndex
 */
export function getNumDlcWeaponComponents(dlcWeaponIndex: number): number { 
	return _in(0x40542535, 0x8a7d61fe, dlcWeaponIndex, _r, _ri); 
}

/**
 * Returns the total number of DLC weapon components that are available in SP.
 * @param dlcWeaponIndex
 */
export function getNumDlcWeaponComponentsSp(dlcWeaponIndex: number): number { 
	return _in(0xad2a7a6d, 0xff55841b, dlcWeaponIndex, _r, _ri); 
}

/**
 * Returns the total number of DLC weapons.
 */
export function getNumDlcWeapons(): number { 
	return _in(0xee47635f, 0x352da367, _r, _ri); 
}

/**
 * Returns the total number of DLC weapons that are available in SP (availableInSP field in shop_weapon.meta).
 */
export function getNumDlcWeaponsSp(): number { 
	return _in(0x4160b65a, 0xe085b5a9, _r, _ri); 
}

/**
 * paintType:
 * 0: Normal
 * 1: Metallic
 * 2: Pearl
 * 3: Matte
 * 4: Metal
 * 5: Chrome
 * 6: Chameleon
 * @param paintType
 * @param p1
 */
export function getNumModColors(paintType: number, p1: boolean): number { 
	return _in(0xa551be18, 0xc11a476d, paintType, p1, _r, _ri); 
}

export function getNumModKits(vehicle: number): number { 
	return _in(0x33f2e3fe, 0x70eaae1d, vehicle, _r, _ri); 
}

export function getNumNavmeshesExistingInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): number { 
	return _in(0x01708e8d, 0xd3ff8c65, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _r, _ri); 
}

export function getNumPedHairTints(): number { 
	return _in(0xe5c0cf87, 0x2c2ad150, _r, _ri); 
}

export function getNumPedMakeupTints(): number { 
	return _in(0xd1f7ca15, 0x35d22818, _r, _ri); 
}

/**
 * p0 appears to be for MP
 * @param p0
 * @param p1
 */
export function getNumReservedMissionObjects(p0: boolean, p1: number): number { 
	return _in(0xaa81b5f1, 0x0bc43ac2, p0, p1, _r, _ri); 
}

/**
 * p0 appears to be for MP
 * @param p0
 * @param p1
 */
export function getNumReservedMissionPeds(p0: boolean, p1: number): number { 
	return _in(0x1f13d5ae, 0x5cb17e17, p0, p1, _r, _ri); 
}

/**
 * p0 appears to be for MP
 * @param p0
 * @param p1
 */
export function getNumReservedMissionVehicles(p0: boolean, p1: number): number { 
	return _in(0xcf3a9659, 0x06452031, p0, p1, _r, _ri); 
}

export function getNumSuccessfulStuntJumps(): number { 
	return _in(0x996dd1e1, 0xe02f1008, _r, _ri); 
}

/**
 * Character types:
 * 0 = Michael,
 * 1 = Franklin,
 * 2 = Trevor,
 * 3 = MPMale,
 * 4 = MPFemale
 * @param character
 */
export function getNumTattooShopDlcItems(character: number): number { 
	return _in(0x278f76c3, 0xb0a8f109, character, _r, _ri); 
}

export function getNumUnlockedRadioStations(): number { 
	return _in(0xf1620ecb, 0x50e01de7, _r, _ri); 
}

/**
 * Returns how many possible mods a vehicle has for a given mod type
 * @param vehicle
 * @param modType
 */
export function getNumVehicleMods(vehicle: number, modType: number): number { 
	return _in(0xe38e9162, 0xa2500646, vehicle, modType, _r, _ri); 
}

export function getNumVehicleWindowTints(): number { 
	return _in(0x9d122400, 0x4b3a6707, _r, _ri); 
}

export function getNumberOfActiveBlips(): number { 
	return _in(0x9a3ff3de, 0x163034e8, _r, _ri); 
}

/**
 * eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)
 * @param eventGroup
 */
export function getNumberOfEvents(eventGroup: number): number { 
	return _in(0x5f92a689, 0xa06620aa, eventGroup, _r, _ri); 
}

export function getNumberOfFiresInRange(x: number, y: number, z: number, radius: number): number { 
	return _in(0x50cad495, 0xa460b305, _fv(x), _fv(y), _fv(z), _fv(radius), _r, _ri); 
}

export function getNumberOfFreeStacksOfThisSize(stackSize: number): number { 
	return _in(0xfead16fc, 0x8f9dfc0f, stackSize, _r, _ri); 
}

/**
 * List of component/props ID
 * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
 * @param ped
 * @param componentId
 */
export function getNumberOfPedDrawableVariations(ped: number, componentId: number): number { 
	return _in(0x27561561, 0x732a7842, ped, componentId, _r, _ri); 
}

/**
 * List of component/props ID
 * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
 * @param ped
 * @param propId
 */
export function getNumberOfPedPropDrawableVariations(ped: number, propId: number): number { 
	return _in(0x5faf9754, 0xe789fb47, ped, propId, _r, _ri); 
}

/**
 * Need to check behavior when drawableId = -1
 * 
 * - Doofy.Ass
 * Why this function doesn't work and return nill value?
 * GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS(PLAYER.PLAYER_PED_ID(), 0, 5)
 * 
 * tick: scripts/addins/menu_execute.lua:51: attempt to call field 'GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS' (a nil value)
 * 
 * 
 * List of component/props ID
 * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
 * @param ped
 * @param propId
 * @param drawableId
 */
export function getNumberOfPedPropTextureVariations(ped: number, propId: number, drawableId: number): number { 
	return _in(0xa6e7f1ce, 0xb523e171, ped, propId, drawableId, _r, _ri); 
}

/**
 * List of component/props ID
 * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
 * @param ped
 * @param componentId
 * @param drawableId
 */
export function getNumberOfPedTextureVariations(ped: number, componentId: number, drawableId: number): number { 
	return _in(0x8f7156a3, 0x142a6bad, ped, componentId, drawableId, _r, _ri); 
}

/**
 * Gets the number of players in the current session.
 * If not multiplayer, always returns 1.
 */
export function getNumberOfPlayers(): number { 
	return _in(0x407c7f91, 0xddb46c16, _r, _ri); 
}

export function getNumberOfPlayersInTeam(team: number): number { 
	return _in(0x1fc20040, 0x9f10e6f1, team, _r, _ri); 
}

export function getNumberOfStreamingRequests(): number { 
	return _in(0x40600572, 0x71cebc89, _r, _ri); 
}

/**
 * Gets the number of instances of the specified script is currently running.
 * 
 * Actually returns numRefs - 1.
 * if (program)
 * v3 = rage::scrProgram::GetNumRefs(program) - 1;
 * return v3;
 * @param scriptHash
 */
export function getNumberOfThreadsRunningTheScriptWithThisHash(scriptHash: number): number { 
	return _in(0x2c83a9da, 0x6bffc4f9, _ch(scriptHash), _r, _ri); 
}

/**
 * Returns the total amount of color combinations found in the vehicle's carvariations.meta entry.
 * @param vehicle
 */
export function getNumberOfVehicleColours(vehicle: number): number { 
	return _in(0x3b963160, 0xcd65d41e, vehicle, _r, _ri); 
}

export function getNumberOfVehicleDoors(vehicle: number): number { 
	return _in(0x92922a60, 0x7497b14d, vehicle, _r, _ri); 
}

/**
 * Returns the number of *types* of licence plates, enumerated below in SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX.
 */
export function getNumberOfVehicleNumberPlates(): number { 
	return _in(0x4c4d6b26, 0x44f458cb, _r, _ri); 
}

export function getNumberResourcesAllocatedToWantedLevel(dispatchService: number): number { 
	return _in(0xeb4a0c2d, 0x56441717, dispatchService, _r, _ri); 
}

export function getObjectFragmentDamageHealth(p0: number, p1: boolean): number { 
	return _in(0xb6fbfd07, 0x9b8d0596, p0, p1, _r, _rf); 
}

/**
 * Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
 * @param entity
 */
export function getObjectIndexFromEntityIndex(entity: number): number { 
	return _in(0xd7e3b973, 0x5c0f89d6, entity, _r, _ri); 
}

export function getObjectTintIndex(object: number): number { 
	return _in(0xe84eb937, 0x29c5f36a, object, _r, _ri); 
}

export function getOffsetFromCoordAndHeadingInWorldCoords(xPos: number, yPos: number, zPos: number, heading: number, xOffset: number, yOffset: number, zOffset: number): Vector3 { 
	return _mv(_in(0x163e252d, 0xe035a133, _fv(xPos), _fv(yPos), _fv(zPos), _fv(heading), _fv(xOffset), _fv(yOffset), _fv(zOffset), _r, _rv)); 
}

/**
 * Converts world coords (posX - Z) to coords relative to the entity
 * 
 * Example:
 * posX is given as 50
 * entity's x coord is 40
 * the returned x coord will then be 10 or -10, not sure haven't used this in a while (think it is 10 though).
 * @param entity
 * @param posX
 * @param posY
 * @param posZ
 */
export function getOffsetFromEntityGivenWorldCoords(entity: number, posX: number, posY: number, posZ: number): Vector3 { 
	return _mv(_in(0x2274bc1c, 0x4885e333, entity, _fv(posX), _fv(posY), _fv(posZ), _r, _rv)); 
}

/**
 * Offset values are relative to the entity.
 * 
 * x = left/right
 * y = forward/backward
 * z = up/down
 * @param entity
 * @param offsetX
 * @param offsetY
 * @param offsetZ
 */
export function getOffsetFromEntityInWorldCoords(entity: number, offsetX: number, offsetY: number, offsetZ: number): Vector3 { 
	return _mv(_in(0x1899f328, 0xb0e12848, entity, _fv(offsetX), _fv(offsetY), _fv(offsetZ), _r, _rv)); 
}

export function getOffsetFromInteriorInWorldCoords(interior: number, x: number, y: number, z: number): Vector3 { 
	return _mv(_in(0x9e3b3e6d, 0x66f6e22f, interior, _fv(x), _fv(y), _fv(z), _r, _rv)); 
}

/**
 * Online version is defined here: update\update.rpf\common\data\version.txt
 * 
 * Example:
 * 
 * [ONLINE_VERSION_NUMBER]
 * 1.33
 * 
 * _GET_ONLINE_VERSION() will return "1.33"
 */
export function getOnlineVersion(): string { 
	return _in(0xfca9373e, 0xf340ac0a, _r, _s); 
}

/**
 * Returns NULL unless UPDATE_ONSCREEN_KEYBOARD() returns 1 in the same tick.
 */
export function getOnscreenKeyboardResult(): string { 
	return _in(0x8362b09b, 0x91893647, _r, _s); 
}

/**
 * Checks if Chernobog's stabilizers are deployed or not.
 * These are the metal supports that allow it to fire.
 * This native only applies to the Chernobog.
 * @param vehicle
 */
export function getOutriggersDeployed(vehicle: number): boolean { 
	return _in(0x3a912835, 0x2eac9e85, vehicle, _r); 
}

/**
 * Returns a handle to the first entity within the a circle spawned inside the 2 points from a radius.
 * 
 * explosionType: See ADD_EXPLOSION.
 * @param explosionType
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param radius
 */
export function getOwnerOfExplosionInAngledArea(explosionType: number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, radius: number): number { 
	return _in(0x14ba4ba1, 0x37af6cec, explosionType, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(radius), _r, _ri); 
}

/**
 * explosionType: See ADD_EXPLOSION.
 * @param explosionType
 * @param x
 * @param y
 * @param z
 * @param radius
 */
export function getOwnerOfExplosionInSphere(explosionType: number, x: number, y: number, z: number, radius: number): number { 
	return _in(0xb3cd51e3, 0xdb86f176, explosionType, _fv(x), _fv(y), _fv(z), _fv(radius), _r, _ri); 
}

export function getPackedIntStatKey(index: number, spStat: boolean, charStat: boolean, character: number): number { 
	return _in(0x61e111e3, 0x23419e07, index, spStat, charStat, character, _r, _ri); 
}

/**
 * Needs more research. Gets the stat name of a masked int?
 * 
 * section - values used in the decompiled scripts:
 * "_NGPSTAT_INT"
 * "_MP_NGPSTAT_INT"
 * "_MP_LRPSTAT_INT"
 * "_MP_APAPSTAT_INT"
 * "_MP_LR2PSTAT_INT"
 * "_MP_BIKEPSTAT_INT"
 * "_MP_IMPEXPPSTAT_INT"
 * "_MP_GUNRPSTAT_INT"
 * "_NGDLCPSTAT_INT"
 * "_MP_NGDLCPSTAT_INT"
 * "_DLCSMUGCHARPSTAT_INT"
 * "_GANGOPSPSTAT_INT"
 * "_BUSINESSBATPSTAT_INT"
 * "_ARENAWARSPSTAT_INT"
 * "_CASINOPSTAT_INT"
 * "_CASINOHSTPSTAT_INT"
 * @param index
 * @param spStat
 * @param charStat
 * @param character
 * @param section
 */
export function getPackedNgIntStatKey(index: number, spStat: boolean, charStat: boolean, character: number, section: string): number { 
	return _in(0x2b4cdca6, 0xf07ff3da, index, spStat, charStat, character, _ts(section), _r, _ri); 
}

export function getPackedStatBoolCode(index: number, characterSlot: number): boolean { 
	return _in(0xda7ebfc4, 0x9ae3f1b0, index, characterSlot, _r); 
}

export function getPackedStatIntCode(index: number, characterSlot: number): number { 
	return _in(0x0bc900a6, 0xfe73770c, index, characterSlot, _r, _ri); 
}

export function getPackedTuIntStatKey(index: number, spStat: boolean, charStat: boolean, character: number): number { 
	return _in(0xd16c2ad6, 0xb8e32854, index, spStat, charStat, character, _r, _ri); 
}

export function getPatrolTaskInfo(ped: number): [boolean, number, number] { 
	const [retval, timeLeftAtNode_out, nodeId_out] = _in(0x52f734ce, 0xbe20dfba, ped, _i, _i, _r);
	return [retval as boolean, timeLeftAtNode_out as number, nodeId_out as number]; 
}

export function getPauseMenuPosition(): Vector3 { 
	return _mv(_in(0x5bff36d6, 0xed83e0ae, _r, _rv)); 
}

/**
 * Returns:
 * 
 * 0
 * 5
 * 10
 * 15
 * 20
 * 25
 * 30
 * 35
 * 
 */
export function getPauseMenuState(): number { 
	return _in(0x272acd84, 0x970869c5, _r, _ri); 
}

export function getPedAccuracy(ped: number): number { 
	return _in(0x37f4ad56, 0xecbc0cd6, ped, _r, _ri); 
}

/**
 * Returns the ped's alertness (0-3).
 * 
 * Values :
 * 
 * 0 : Neutral
 * 1 : Heard something (gun shot, hit, etc)
 * 2 : Knows (the origin of the event)
 * 3 : Fully alerted (is facing the event?)
 * 
 * If the Ped does not exist, returns -1.
 * @param ped
 */
export function getPedAlertness(ped: number): number { 
	return _in(0xf6aa1185, 0x30443fd2, ped, _r, _ri); 
}

export function getPedAmmoByType(ped: number, ammoTypeHash: number): number { 
	return _in(0x39d22031, 0x557946c1, ped, _ch(ammoTypeHash), _r, _ri); 
}

/**
 * Returns the current ammo type of the specified ped's specified weapon.
 * MkII magazines will change the return value, like Pistol MkII returning AMMO_PISTOL without any components and returning AMMO_PISTOL_TRACER after Tracer Rounds component is attached.
 * Use 0xF489B44DD5AF4BD9 if you always want AMMO_PISTOL.
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 */
export function getPedAmmoTypeFromWeapon(ped: number, weaponHash: number): number { 
	return _in(0x7fead38b, 0x326b9f74, ped, _ch(weaponHash), _r, _ri); 
}

export function getPedArmour(ped: number): number { 
	return _in(0x9483af82, 0x1605b1d8, ped, _r, _ri); 
}

export function getPedAsGroupLeader(groupID: number): number { 
	return _in(0x5cce68db, 0xd5fe93ec, groupID, _r, _ri); 
}

/**
 * from fm_mission_controller.c4 (variable names changed for clarity):
 * 
 * int groupID = PLAYER::GET_PLAYER_GROUP(PLAYER::PLAYER_ID());
 * PED::GET_GROUP_SIZE(group, &unused, &groupSize);
 * if (groupSize >= 1) {
 * . . . . for (int memberNumber = 0; memberNumber < groupSize; memberNumber++) {
 * . . . . . . . . Ped ped1 = PED::GET_PED_AS_GROUP_MEMBER(groupID, memberNumber);
 * . . . . . . . . //and so on
 * @param groupID
 * @param memberNumber
 */
export function getPedAsGroupMember(groupID: number, memberNumber: number): number { 
	return _in(0x51455483, 0xcf23ed97, groupID, memberNumber, _r, _ri); 
}

/**
 * Gets the position of the specified bone of the specified ped.
 * 
 * ped: The ped to get the position of a bone from.
 * boneId: The ID of the bone to get the position from. This is NOT the index.
 * offsetX: The X-component of the offset to add to the position relative to the bone's rotation.
 * offsetY: The Y-component of the offset to add to the position relative to the bone's rotation.
 * offsetZ: The Z-component of the offset to add to the position relative to the bone's rotation.
 * @param ped
 * @param boneId
 * @param offsetX
 * @param offsetY
 * @param offsetZ
 */
export function getPedBoneCoords(ped: number, boneId: number, offsetX: number, offsetY: number, offsetZ: number): Vector3 { 
	return _mv(_in(0x17c07fc6, 0x40e86b4e, ped, boneId, _fv(offsetX), _fv(offsetY), _fv(offsetZ), _r, _rv)); 
}

/**
 * no bone= -1
 * 
 * boneIds:
 * SKEL_ROOT = 0x0,
 * SKEL_Pelvis = 0x2e28,
 * SKEL_L_Thigh = 0xe39f,
 * SKEL_L_Calf = 0xf9bb,
 * SKEL_L_Foot = 0x3779,
 * SKEL_L_Toe0 = 0x83c,
 * IK_L_Foot = 0xfedd,
 * PH_L_Foot = 0xe175,
 * MH_L_Knee = 0xb3fe,
 * SKEL_R_Thigh = 0xca72,
 * SKEL_R_Calf = 0x9000,
 * SKEL_R_Foot = 0xcc4d,
 * SKEL_R_Toe0 = 0x512d,
 * IK_R_Foot = 0x8aae,
 * PH_R_Foot = 0x60e6,
 * MH_R_Knee = 0x3fcf,
 * RB_L_ThighRoll = 0x5c57,
 * RB_R_ThighRoll = 0x192a,
 * SKEL_Spine_Root = 0xe0fd,
 * SKEL_Spine0 = 0x5c01,
 * SKEL_Spine1 = 0x60f0,
 * SKEL_Spine2 = 0x60f1,
 * SKEL_Spine3 = 0x60f2,
 * SKEL_L_Clavicle = 0xfcd9,
 * SKEL_L_UpperArm = 0xb1c5,
 * SKEL_L_Forearm = 0xeeeb,
 * SKEL_L_Hand = 0x49d9,
 * SKEL_L_Finger00 = 0x67f2,
 * SKEL_L_Finger01 = 0xff9,
 * SKEL_L_Finger02 = 0xffa,
 * SKEL_L_Finger10 = 0x67f3,
 * SKEL_L_Finger11 = 0x1049,
 * SKEL_L_Finger12 = 0x104a,
 * SKEL_L_Finger20 = 0x67f4,
 * SKEL_L_Finger21 = 0x1059,
 * SKEL_L_Finger22 = 0x105a,
 * SKEL_L_Finger30 = 0x67f5,
 * SKEL_L_Finger31 = 0x1029,
 * SKEL_L_Finger32 = 0x102a,
 * SKEL_L_Finger40 = 0x67f6,
 * SKEL_L_Finger41 = 0x1039,
 * SKEL_L_Finger42 = 0x103a,
 * PH_L_Hand = 0xeb95,
 * IK_L_Hand = 0x8cbd,
 * RB_L_ForeArmRoll = 0xee4f,
 * RB_L_ArmRoll = 0x1470,
 * MH_L_Elbow = 0x58b7,
 * SKEL_R_Clavicle = 0x29d2,
 * SKEL_R_UpperArm = 0x9d4d,
 * SKEL_R_Forearm = 0x6e5c,
 * SKEL_R_Hand = 0xdead,
 * SKEL_R_Finger00 = 0xe5f2,
 * SKEL_R_Finger01 = 0xfa10,
 * SKEL_R_Finger02 = 0xfa11,
 * SKEL_R_Finger10 = 0xe5f3,
 * SKEL_R_Finger11 = 0xfa60,
 * SKEL_R_Finger12 = 0xfa61,
 * SKEL_R_Finger20 = 0xe5f4,
 * SKEL_R_Finger21 = 0xfa70,
 * SKEL_R_Finger22 = 0xfa71,
 * SKEL_R_Finger30 = 0xe5f5,
 * SKEL_R_Finger31 = 0xfa40,
 * SKEL_R_Finger32 = 0xfa41,
 * SKEL_R_Finger40 = 0xe5f6,
 * SKEL_R_Finger41 = 0xfa50,
 * SKEL_R_Finger42 = 0xfa51,
 * PH_R_Hand = 0x6f06,
 * IK_R_Hand = 0x188e,
 * RB_R_ForeArmRoll = 0xab22,
 * RB_R_ArmRoll = 0x90ff,
 * MH_R_Elbow = 0xbb0,
 * SKEL_Neck_1 = 0x9995,
 * SKEL_Head = 0x796e,
 * IK_Head = 0x322c,
 * FACIAL_facialRoot = 0xfe2c,
 * FB_L_Brow_Out_000 = 0xe3db,
 * FB_L_Lid_Upper_000 = 0xb2b6,
 * FB_L_Eye_000 = 0x62ac,
 * FB_L_CheekBone_000 = 0x542e,
 * FB_L_Lip_Corner_000 = 0x74ac,
 * FB_R_Lid_Upper_000 = 0xaa10,
 * FB_R_Eye_000 = 0x6b52,
 * FB_R_CheekBone_000 = 0x4b88,
 * FB_R_Brow_Out_000 = 0x54c,
 * FB_R_Lip_Corner_000 = 0x2ba6,
 * FB_Brow_Centre_000 = 0x9149,
 * FB_UpperLipRoot_000 = 0x4ed2,
 * FB_UpperLip_000 = 0xf18f,
 * FB_L_Lip_Top_000 = 0x4f37,
 * FB_R_Lip_Top_000 = 0x4537,
 * FB_Jaw_000 = 0xb4a0,
 * FB_LowerLipRoot_000 = 0x4324,
 * FB_LowerLip_000 = 0x508f,
 * FB_L_Lip_Bot_000 = 0xb93b,
 * FB_R_Lip_Bot_000 = 0xc33b,
 * FB_Tongue_000 = 0xb987,
 * RB_Neck_1 = 0x8b93,
 * IK_Root = 0xdd1c
 * @param ped
 * @param boneId
 */
export function getPedBoneIndex(ped: number, boneId: number): number { 
	return _in(0x3f428d08, 0xbe5aae31, ped, boneId, _r, _ri); 
}

/**
 * Returns the hash of the weapon/model/object that killed the ped.
 * @param ped
 */
export function getPedCauseOfDeath(ped: number): number { 
	return _in(0x16ffe42a, 0xb2d2dc59, ped, _r, _ri); 
}

/**
 * See SET_PED_COMBAT_MOVEMENT
 * @param ped
 */
export function getPedCombatMovement(ped: number): number { 
	return _in(0xdea92412, 0xfcaeb3f5, ped, _r, _ri); 
}

/**
 * See SET_PED_COMBAT_RANGE
 * @param ped
 */
export function getPedCombatRange(ped: number): number { 
	return _in(0xf9d9f7f2, 0xdb8e2fa0, ped, _r, _ri); 
}

/**
 * See SET_PED_CONFIG_FLAG
 * @param ped
 * @param flagId
 * @param p2
 */
export function getPedConfigFlag(ped: number, flagId: number, p2: boolean): boolean { 
	return _in(0x7ee53118, 0xc892b513, ped, flagId, p2, _r); 
}

export function getPedCurrentMoveBlendRatio(ped: number): [boolean, number, number] { 
	const [retval, speedX_out, speedY_out] = _in(0xf60165e1, 0xd2c5370b, ped, _f, _f, _r);
	return [retval as boolean, speedX_out as number, speedY_out as number]; 
}

/**
 * Returns the zoneID for the overlay if it is a member of collection.
 * enum ePedDecorationZone
 * {
 * ZONE_TORSO = 0,
 * ZONE_HEAD = 1,
 * ZONE_LEFT_ARM = 2,
 * ZONE_RIGHT_ARM = 3,
 * ZONE_LEFT_LEG = 4,
 * ZONE_RIGHT_LEG = 5,
 * ZONE_MEDALS = 6,
 * ZONE_INVALID = 7
 * };
 * 
 * Full list of ped overlays / decorations by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedOverlayCollections.json
 * @param collection
 * @param overlay
 */
export function getPedDecorationZoneFromHashes(collection: number, overlay: number): number { 
	return _in(0x9fd452bf, 0xbe7a7a8b, _ch(collection), _ch(overlay), _r, _ri); 
}

export function getPedDecorationsState(ped: number): number { 
	return _in(0x71eab450, 0xd86954a1, ped, _r, _ri); 
}

export function getPedDefensiveAreaPosition(ped: number, p1: boolean): Vector3 { 
	return _mv(_in(0x3c06b878, 0x6dd94cd1, ped, p1, _r, _rv)); 
}

export function getPedDesiredMoveBlendRatio(ped: number): number { 
	return _in(0x8517d4a6, 0xca8513ed, ped, _r, _rf); 
}

export function getPedDiesInWater(ped: number): boolean { 
	return _in(0x65671a4f, 0xb8218930, ped, _r); 
}

/**
 * Ids
 * 0 - Head
 * 1 - Beard
 * 2 - Hair
 * 3 - Torso
 * 4 - Legs
 * 5 - Hands
 * 6 - Foot
 * 7 - ------
 * 8 - Accessories 1
 * 9 - Accessories 2
 * 10- Decals
 * 11 - Auxiliary parts for torso
 * @param ped
 * @param componentId
 */
export function getPedDrawableVariation(ped: number, componentId: number): number { 
	return _in(0x67f3780d, 0xd425d4fc, ped, componentId, _r, _ri); 
}

/**
 * Use 0x4E90D746056E273D to set the illuminated clothing glow intensity for a specific ped.
 * Returns a float between 0.0 and 1.0 representing the current illuminated clothing glow intensity.
 * @param ped
 */
export function getPedEmissiveScale(ped: number): number { 
	return _in(0x1461b28a, 0x06717d68, ped, _r, _rf); 
}

export function getPedEnveffScale(ped: number): number { 
	return _in(0x9c14d303, 0x95a51a3c, ped, _r, _rf); 
}

/**
 * Gets the offset the specified ped has moved since the previous tick.
 * 
 * If worldSpace is false, the returned offset is relative to the ped. That is, if the ped has moved 1 meter right and 5 meters forward, it'll return 1,5,0.
 * 
 * If worldSpace is true, the returned offset is relative to the world. That is, if the ped has moved 1 meter on the X axis and 5 meters on the Y axis, it'll return 1,5,0.
 * @param ped
 * @param worldSpace
 */
export function getPedExtractedDisplacement(ped: number, worldSpace: boolean): Vector3 { 
	return _mv(_in(0xe0af4140, 0x1adf87e3, ped, worldSpace, _r, _rv)); 
}

/**
 * Returns the group id of which the specified ped is a member of.
 * @param ped
 */
export function getPedGroupIndex(ped: number): number { 
	return _in(0xf162e133, 0xb4e7a675, ped, _r, _ri); 
}

/**
 * Input: Haircolor index, value between 0 and 63 (inclusive).
 * Output: RGB values for the haircolor specified in the input.
 * 
 * This is used with the hair color swatches scaleform.
 * Use `GET_PED_MAKEUP_TINT_COLOR` to get the makeup colors.
 * @param hairColorIndex
 * @param outR
 * @param outG
 * @param outB
 */
export function getPedHairTintColor(hairColorIndex: number): [number, number, number] { 
	const [outR_out, outG_out, outB_out] = _in(0x4852fc38, 0x6e2e1bb5, hairColorIndex, _i, _i, _i);
	return [outR_out as number, outG_out as number, outB_out as number]; 
}

/**
 * The pointer is to a padded struct that matches the arguments to SET_PED_HEAD_BLEND_DATA(...). There are 4 bytes of padding after each field.
 * pass this struct in the second parameter
 * struct headBlendData
 * {
 * int shapeFirst;
 * int padding1;
 * int shapeSecond;
 * int padding2;
 * int shapeThird;
 * int padding3;
 * int skinFirst;
 * int padding4;
 * int skinSecond;
 * int padding5;
 * int skinThird;
 * int padding6;
 * float shapeMix;
 * int padding7;
 * float skinMix;
 * int padding8;
 * float thirdMix;
 * int padding9;
 * bool isParent;
 * };
 * @param ped
 * @param headBlendData
 */
export function getPedHeadBlendData(ped: number, headBlendData: number): [boolean, number] { 
	const [retval, headBlendData_out] = _in(0x2746bd9d, 0x88c5c5d0, ped, _ii(headBlendData), _r);
	return [retval as boolean, headBlendData_out as number]; 
}

/**
 * Type equals 0 for male non-dlc, 1 for female non-dlc, 2 for male dlc, and 3 for female dlc.
 * 
 * Used when calling SET_PED_HEAD_BLEND_DATA.
 * @param type
 */
export function getPedHeadBlendFirstIndex(type: number): number { 
	return _in(0x68d353ab, 0x88b97e0c, type, _r, _ri); 
}

/**
 * Type equals 0 for male non-dlc, 1 for female non-dlc, 2 for male dlc, and 3 for female dlc.
 * @param type
 */
export function getPedHeadBlendNumHeads(type: number): number { 
	return _in(0x5ef37013, 0xa6539c9d, type, _r, _ri); 
}

/**
 * Likely a char, if that overlay is not set, e.i. "None" option, returns 255;
 * 
 * This might be the once removed native GET_PED_HEAD_OVERLAY.
 * @param ped
 * @param overlayID
 */
export function getPedHeadOverlay(ped: number, overlayID: number): number { 
	return _in(0xa60ef3b6, 0x461a4d43, ped, overlayID, _r, _ri); 
}

export function getPedHeadOverlayNum(overlayID: number): number { 
	return _in(0xcf1ce768, 0xbb43480e, overlayID, _r, _ri); 
}

export function getPedHelmetStoredHatPropIndex(ped: number): number { 
	return _in(0x451294e8, 0x59ecc018, ped, _r, _ri); 
}

export function getPedHelmetStoredHatTexIndex(ped: number): number { 
	return _in(0x9d728c1e, 0x12bf5518, ped, _r, _ri); 
}

/**
 * If there is no ped in the seat, and the game considers the vehicle as ambient population, this will create a random occupant ped in the seat, which may be cleaned up by the game fairly soon if not marked as script-owned mission entity.
 * 
 * Seat indexes:
 * -1 = Driver
 * 0 = Front Right Passenger
 * 1 = Back Left Passenger
 * 2 = Back Right Passenger
 * 3 = Further Back Left Passenger (vehicles > 4 seats)
 * 4 = Further Back Right Passenger (vehicles > 4 seats)
 * etc.
 * 
 * If p2 is true it uses a different GetOccupant function.
 * @param vehicle
 * @param seatIndex
 * @param p2
 */
export function getPedInVehicleSeat(vehicle: number, seatIndex: number, p2: boolean): number { 
	return _in(0xbb40dd22, 0x70b65366, vehicle, seatIndex, p2, _r, _ri); 
}

/**
 * Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
 * @param entity
 */
export function getPedIndexFromEntityIndex(entity: number): number { 
	return _in(0x04a2a40c, 0x73395041, entity, _r, _ri); 
}

export function getPedLastDamageBone(ped: number, outBone: number): [boolean, number] { 
	const [retval, outBone_out] = _in(0xd75960f6, 0xbd9ea49c, ped, _ii(outBone), _r);
	return [retval as boolean, outBone_out as number]; 
}

/**
 * Pass ped. Pass address of Vector3.
 * The coord will be put into the Vector3.
 * The return will determine whether there was a coord found or not.
 * @param ped
 * @param coords
 */
export function getPedLastWeaponImpactCoord(ped: number, coords: Vector3): [boolean, Vector3] { 
	const [retval, coords_out] = _in(0x6c4d0409, 0xba1a2bc2, ped, _v, _r);
	return [retval as boolean, _mv(coords_out)]; 
}

/**
 * Input: Makeup color index, value between 0 and 63 (inclusive).
 * Output: RGB values for the makeup color specified in the input.
 * 
 * This is used with the makeup color swatches scaleform.
 * Use `GET_PED_HAIR_TINT_COLOR` to get the hair colors.
 * @param makeupColorIndex
 * @param outR
 * @param outG
 * @param outB
 */
export function getPedMakeupTintColor(makeupColorIndex: number): [number, number, number] { 
	const [outR_out, outG_out, outB_out] = _in(0x013e5cfc, 0x38cd5387, makeupColorIndex, _i, _i, _i);
	return [outR_out as number, outG_out as number, outB_out as number]; 
}

export function getPedMaxHealth(ped: number): number { 
	return _in(0x4700a416, 0xe8324ef3, ped, _r, _ri); 
}

export function getPedMoney(ped: number): number { 
	return _in(0x3f69145b, 0xba87bae7, ped, _r, _ri); 
}

/**
 * sizeAndPeds - is a pointer to an array. The array is filled with peds found nearby the ped supplied to the first argument.
 * ignore - ped type to ignore
 * 
 * Return value is the number of peds found and added to the array passed.
 * 
 * -----------------------------------
 * 
 * To make this work in most menu bases at least in C++ do it like so,
 * 
 * Formatted Example: https://pastebin.com/D8an9wwp
 * 
 * -----------------------------------
 * 
 * Example: gtaforums.com/topic/789788-function-args-to-pedget-ped-nearby-peds/?p=1067386687
 * @param ped
 * @param sizeAndPeds
 * @param ignore
 */
export function getPedNearbyPeds(ped: number, ignore: number): [number, number] { 
	const [retval, sizeAndPeds_out] = _in(0x23f8f5fc, 0x7e8c4a6b, ped, _i, ignore, _r, _ri);
	return [retval as number, sizeAndPeds_out as number]; 
}

/**
 * Returns size of array, passed into the second variable.
 * 
 * See below for usage information.
 * 
 * This function actually requires a struct, where the first value is the maximum number of elements to return.  Here is a sample of how I was able to get it to work correctly, without yet knowing the struct format.
 * 
 * //Setup the array
 * const int numElements = 10;
 * const int arrSize = numElements * 2 + 2;
 * Any veh[arrSize];
 * //0 index is the size of the array
 * veh[0] = numElements;
 * 
 * int count = PED::GET_PED_NEARBY_VEHICLES(PLAYER::PLAYER_PED_ID(), veh);
 * 
 * if (veh != NULL)
 * {
 * //Simple loop to go through results
 * for (int i = 0; i < count; i++)
 * {
 * int offsettedID = i * 2 + 2;
 * //Make sure it exists
 * if (veh[offsettedID] != NULL && ENTITY::DOES_ENTITY_EXIST(veh[offsettedID]))
 * {
 * //Do something
 * }
 * }
 * }
 * @param ped
 * @param sizeAndVehs
 */
export function getPedNearbyVehicles(ped: number, sizeAndVehs: number): [number, number] { 
	const [retval, sizeAndVehs_out] = _in(0xcff869cb, 0xfa210d82, ped, _ii(sizeAndVehs), _r, _ri);
	return [retval as number, sizeAndVehs_out as number]; 
}

/**
 * Returns the base/default ammo type of the specified ped's specified weapon.
 * Use GET_PED_AMMO_TYPE_FROM_WEAPON if you want current ammo type (like AMMO_MG_INCENDIARY/AMMO_MG_TRACER while using MkII magazines) and use this if you want base ammo type. (AMMO_MG)
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 */
export function getPedOriginalAmmoTypeFromWeapon(ped: number, weaponHash: number): number { 
	return _in(0xf489b44d, 0xd5af4bd9, ped, _ch(weaponHash), _r, _ri); 
}

/**
 * List of component/props ID
 * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
 * @param ped
 * @param componentId
 */
export function getPedPaletteVariation(ped: number, componentId: number): number { 
	return _in(0xe3dd5f2a, 0x84b42281, ped, componentId, _r, _ri); 
}

/**
 * -1: no landing
 * 0: landing on both feet
 * 1: stumbling
 * 2: rolling
 * 3: ragdoll
 * @param ped
 */
export function getPedParachuteLandingType(ped: number): number { 
	return _in(0x8b9f1fc6, 0xae8166c0, ped, _r, _ri); 
}

/**
 * Returns:
 * 
 * -1: Normal
 * 0: Wearing parachute on back
 * 1: Parachute opening
 * 2: Parachute open
 * 3: Falling to doom (e.g. after exiting parachute)
 * 
 * Normal means no parachute?
 * @param ped
 */
export function getPedParachuteState(ped: number): number { 
	return _in(0x79cfd982, 0x7cc979b6, ped, _r, _ri); 
}

export function getPedParachuteTintIndex(ped: number, outTintIndex: number): number { 
	return _in(0xeaf5f7e5, 0xae7c6c9d, ped, _ii(outTintIndex)); 
}

/**
 * List of component/props ID
 * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
 * @param ped
 * @param componentId
 * @param p2
 */
export function getPedPropIndex(ped: number, componentId: number, p2: number): number { 
	return _in(0x898cc20e, 0xa75bacd8, ped, componentId, p2, _r, _ri); 
}

/**
 * List of component/props ID
 * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
 * @param ped
 * @param componentId
 */
export function getPedPropTextureIndex(ped: number, componentId: number): number { 
	return _in(0xe131a286, 0x26f81ab2, ped, componentId, _r, _ri); 
}

export function getPedRagdollBoneIndex(ped: number, bone: number): number { 
	return _in(0x2057ef81, 0x3397a772, ped, bone, _r, _ri); 
}

export function getPedRelationshipGroupDefaultHash(ped: number): number { 
	return _in(0x42fdd0f0, 0x17b1e38e, ped, _r, _ri); 
}

export function getPedRelationshipGroupHash(ped: number): number { 
	return _in(0x7dbdd048, 0x62d95f04, ped, _r, _ri); 
}

export function getPedResetFlag(ped: number, flagId: number): boolean { 
	return _in(0xaf9e59b1, 0xb1fbf2a0, ped, flagId, _r); 
}

/**
 * Returns the Entity (Ped, Vehicle, or ?Object?) that killed the 'ped'
 * 
 * Is best to check if the Ped is dead before asking for its killer.
 * @param ped
 */
export function getPedSourceOfDeath(ped: number): number { 
	return _in(0x93c8b64d, 0xeb84728c, ped, _r, _ri); 
}

/**
 * Returns whether the entity is in stealth mode
 * @param ped
 */
export function getPedStealthMovement(ped: number): boolean { 
	return _in(0x7c2ac9ca, 0x66575fbf, ped, _r); 
}

export function getPedTargetFromCombatPed(ped: number, p1: number): number { 
	return _in(0x32c27a11, 0x307b01cc, ped, p1, _r, _ri); 
}

/**
 * List of component/props ID
 * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
 * @param ped
 * @param componentId
 */
export function getPedTextureVariation(ped: number, componentId: number): number { 
	return _in(0x04a355e0, 0x41e004e6, ped, componentId, _r, _ri); 
}

export function getPedTimeOfDeath(ped: number): number { 
	return _in(0x1e98817b, 0x311ae98a, ped, _r, _ri); 
}

/**
 * https://alloc8or.re/gta5/doc/enums/ePedType.txt
 * @param ped
 */
export function getPedType(ped: number): number { 
	return _in(0xff059e1e, 0x4c01e63c, ped, _r, _ri); 
}

/**
 * doorId: see SET_VEHICLE_DOOR_SHUT
 * @param vehicle
 * @param doord
 */
export function getPedUsingVehicleDoor(vehicle: number, doord: number): number { 
	return _in(0x218297bf, 0x0cfd853b, vehicle, doord, _r, _ri); 
}

export function getPedVisualFieldCenterAngle(ped: number): number { 
	return _in(0xef2c71a3, 0x2cad5fbd, ped, _r, _rf); 
}

export function getPedWaypointDistance(p0: number): number { 
	return _in(0xe6a877c6, 0x4caf1bc5, p0, _r, _rf); 
}

export function getPedWaypointProgress(ped: number): number { 
	return _in(0x2720aaa7, 0x5001e094, ped, _r, _ri); 
}

export function getPedWeaponCamoIndex(ped: number, weaponHash: number): number { 
	return _in(0xa2c9ac24, 0xb4061285, ped, _ch(weaponHash), _r, _ri); 
}

/**
 * Returns -1 if camoComponentHash is invalid/not attached to the weapon.
 * Full list of weapons, components, tint indexes & weapon liveries by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param camoComponentHash
 */
export function getPedWeaponComponentTintIndex(ped: number, weaponHash: number, camoComponentHash: number): number { 
	return _in(0xf0a60040, 0xbe558f2d, ped, _ch(weaponHash), _ch(camoComponentHash), _r, _ri); 
}

/**
 * Full list of weapons, components & tint indexes by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 */
export function getPedWeaponTintIndex(ped: number, weaponHash: number): number { 
	return _in(0x2b9eedc0, 0x7bd06b9f, ped, _ch(weaponHash), _r, _ri); 
}

export function getPedWeapontypeInSlot(ped: number, weaponSlot: number): number { 
	return _in(0xeffed78e, 0x9011134d, ped, _ch(weaponSlot), _r, _ri); 
}

/**
 * gtaforums.com/topic/885580-ped-headshotmugshot-txd/
 * @param id
 */
export function getPedheadshotTxdString(id: number): string { 
	return _in(0xdb4eacd4, 0xad0a5d6b, id, _r, _s); 
}

export function getPedsJacker(ped: number): number { 
	return _in(0x9b128dc3, 0x6c1e04cf, ped, _r, _ri); 
}

export function getPhoneGestureAnimCurrentTime(ped: number): number { 
	return _in(0x47619abe, 0x8b268c60, ped, _r, _rf); 
}

export function getPhoneGestureAnimTotalTime(ped: number): number { 
	return _in(0x1ee0f68a, 0x7c25dec6, ped, _r, _rf); 
}

export function getPickupCoords(pickup: number): Vector3 { 
	return _mv(_in(0x225b8b35, 0xc88029b3, pickup, _r, _rv)); 
}

export function getPickupGenerationRangeMultiplier(): number { 
	return _in(0xb3eca65c, 0x7317f174, _r, _rf); 
}

export function getPickupObject(pickup: number): number { 
	return _in(0x5099bc55, 0x630b25ae, pickup, _r, _ri); 
}

/**
 * Returns the pickup hash for the given weapon hash
 * @param weaponHash
 */
export function getPickupTypeFromWeaponHash(weaponHash: number): number { 
	return _in(0xd6429a01, 0x6084f1a5, _ch(weaponHash), _r, _ri); 
}

export function getPlayerCurrentStealthNoise(player: number): number { 
	return _in(0x2f395d61, 0xf3a1f877, player, _r, _rf); 
}

/**
 * Always returns false.
 * @param player
 */
export function getPlayerDebugInvincible(player: number): boolean { 
	return _in(0xdcc07526, 0xb8ec45af, player, _r); 
}

export function getPlayerFakeWantedLevel(player: number): number { 
	return _in(0x56105e59, 0x9cab0efa, player, _r, _ri); 
}

/**
 * Returns the group ID the player is member of.
 * @param player
 */
export function getPlayerGroup(player: number): number { 
	return _in(0x0d127585, 0xf77030af, player, _r, _ri); 
}

export function getPlayerHasDrivenAllVehicles(): boolean { 
	return _in(0x5ead2bf6, 0x484852e4, _r); 
}

export function getPlayerHasReserveParachute(player: number): boolean { 
	return _in(0x5ddfe2ff, 0x727f3ca3, player, _r); 
}

export function getPlayerHealthRechargeMaxPercent(player: number): number { 
	return _in(0x8bc515ba, 0xe4aaf8ff, player, _r, _rf); 
}

/**
 * Returns the same as PLAYER_ID and NETWORK_PLAYER_ID_TO_INT
 */
export function getPlayerIndex(): number { 
	return _in(0xa5edc40e, 0xf369b48d, _r, _ri); 
}

/**
 * Returns the Player's Invincible status.
 * 
 * This function will always return false if 0x733A643B5B0C53C1 is used to set the invincibility status. To always get the correct result, use this:
 * 
 * bool IsPlayerInvincible(Player player)
 * {
 * auto addr = getScriptHandleBaseAddress(GET_PLAYER_PED(player));
 * 
 * if (addr)
 * {
 * DWORD flag = *(DWORD *)(addr + 0x188);
 * return ((flag & (1 << 8)) != 0) || ((flag & (1 << 9)) != 0);
 * }
 * 
 * return false;
 * }
 * 
 * 
 * @param player
 */
export function getPlayerInvincible(player: number): boolean { 
	return _in(0xb721981b, 0x2b939e07, player, _r); 
}

export function getPlayerMaxArmour(player: number): number { 
	return _in(0x92659b4c, 0xe1863cb3, player, _r, _ri); 
}

export function getPlayerName(player: number): string { 
	return _in(0x6d0de6a7, 0xb5da71f8, player, _r, _s); 
}

export function getPlayerParachuteModelOverride(player: number): number { 
	return _in(0xc219887c, 0xa3e65c41, player, _r, _ri); 
}

export function getPlayerParachutePackTintIndex(player: number, tintIndex: number): number { 
	return _in(0x6e9c742f, 0x340ce5a2, player, _ii(tintIndex)); 
}

export function getPlayerParachuteSmokeTrailColor(player: number): [number, number, number] { 
	const [r_out, g_out, b_out] = _in(0xef56dbab, 0xd3cd4887, player, _i, _i, _i);
	return [r_out as number, g_out as number, b_out as number]; 
}

/**
 * Tints:
 * None = -1,
 * Rainbow = 0,
 * Red = 1,
 * SeasideStripes = 2,
 * WidowMaker = 3,
 * Patriot = 4,
 * Blue = 5,
 * Black = 6,
 * Hornet = 7,
 * AirFocce = 8,
 * Desert = 9,
 * Shadow = 10,
 * HighAltitude = 11,
 * Airbone = 12,
 * Sunrise = 13,
 * @param player
 * @param tintIndex
 */
export function getPlayerParachuteTintIndex(player: number, tintIndex: number): number { 
	return _in(0x75d3f7a1, 0xb0d9b145, player, _ii(tintIndex)); 
}

/**
 * Gets the ped for a specified player index.
 * @param player
 */
export function getPlayerPed(player: number): number { 
	return _in(0x43a66c31, 0xc68491c0, player, _r, _ri); 
}

export function getPlayerPedIsFollowing(ped: number): number { 
	return _in(0x6a3975de, 0xa89f9a17, ped, _r, _ri); 
}

/**
 * Does the same like PLAYER::GET_PLAYER_PED
 * @param player
 */
export function getPlayerPedScriptIndex(player: number): number { 
	return _in(0x50fac3a3, 0xe030a6e1, player, _r, _ri); 
}

export function getPlayerRadioStationGenre(): number { 
	return _in(0xa571991a, 0x7fe6cceb, _r, _ri); 
}

/**
 * Returns 255 (radio off index) if the function fails.
 */
export function getPlayerRadioStationIndex(): number { 
	return _in(0xe8af77c4, 0xc06adc93, _r, _ri); 
}

/**
 * Returns active radio station name
 */
export function getPlayerRadioStationName(): string { 
	return _in(0xf6d733c3, 0x2076ad03, _r, _s); 
}

export function getPlayerReceivedBattleEventRecently(player: number, p1: number, p2: boolean): boolean { 
	return _in(0xbc0753c9, 0xca14b506, player, p1, p2, _r); 
}

export function getPlayerReserveParachuteModelOverride(player: number): number { 
	return _in(0x37faaa68, 0xdca9d08d, player, _r, _ri); 
}

/**
 * Tints:
 * None = -1,
 * Rainbow = 0,
 * Red = 1,
 * SeasideStripes = 2,
 * WidowMaker = 3,
 * Patriot = 4,
 * Blue = 5,
 * Black = 6,
 * Hornet = 7,
 * AirFocce = 8,
 * Desert = 9,
 * Shadow = 10,
 * HighAltitude = 11,
 * Airbone = 12,
 * Sunrise = 13,
 * @param player
 * @param index
 */
export function getPlayerReserveParachuteTintIndex(player: number, index: number): number { 
	return _in(0xd5a016bc, 0x3c09cf40, player, _ii(index)); 
}

export function getPlayerRgbColour(player: number): [number, number, number] { 
	const [r_out, g_out, b_out] = _in(0xe902ef95, 0x1dce178f, player, _i, _i, _i);
	return [r_out as number, g_out as number, b_out as number]; 
}

export function getPlayerShortSwitchState(): number { 
	return _in(0x20f898a5, 0xd9782800, _r, _ri); 
}

export function getPlayerSprintStaminaRemaining(player: number): number { 
	return _in(0x3f9f16f8, 0xe65a7ed7, player, _r, _rf); 
}

export function getPlayerSprintTimeRemaining(player: number): number { 
	return _in(0x1885bc9b, 0x108b4c99, player, _r, _rf); 
}

export function getPlayerSwitchInterpOutCurrentTime(): number { 
	return _in(0x5b48a06d, 0xd0e792a5, _r, _ri); 
}

export function getPlayerSwitchInterpOutDuration(): number { 
	return _in(0x08c2d6c5, 0x2a3104bb, _r, _ri); 
}

export function getPlayerSwitchJumpCutIndex(): number { 
	return _in(0x78c0d932, 0x53149435, _r, _ri); 
}

export function getPlayerSwitchState(): number { 
	return _in(0x47055530, 0x0d10b2a5, _r, _ri); 
}

export function getPlayerSwitchType(): number { 
	return _in(0xb3c94a90, 0xd9fc9e62, _r, _ri); 
}

/**
 * Assigns the handle of locked-on melee target to *entity that you pass it.
 * Returns false if no entity found.
 * @param player
 * @param entity
 */
export function getPlayerTargetEntity(player: number, entity: number): [boolean, number] { 
	const [retval, entity_out] = _in(0x13ede1a5, 0xdbf797c9, player, _ii(entity), _r);
	return [retval as boolean, entity_out as number]; 
}

/**
 * Gets the player's team.
 * Does nothing in singleplayer.
 * @param player
 */
export function getPlayerTeam(player: number): number { 
	return _in(0x37039302, 0xf4e0a008, player, _r, _ri); 
}

export function getPlayerUnderwaterTimeRemaining(player: number): number { 
	return _in(0xa1fcf8e6, 0xaf40b731, player, _r, _rf); 
}

export function getPlayerWantedCentrePosition(player: number): Vector3 { 
	return _mv(_in(0x0c92ba89, 0xf1af26f8, player, _r, _rv)); 
}

export function getPlayerWantedLevel(player: number): number { 
	return _in(0xe28e5478, 0x8ce8f12d, player, _r, _ri); 
}

/**
 * Alternative: GET_VEHICLE_PED_IS_IN(PLAYER_PED_ID(), 1);
 */
export function getPlayersLastVehicle(): number { 
	return _in(0xb6997a7e, 0xb3f5c8c0, _r, _ri); 
}

export function getPmPlayerCrewColor(): [boolean, number, number, number] { 
	const [retval, r_out, g_out, b_out] = _in(0xa238192f, 0x33110615, _i, _i, _i, _r);
	return [retval as boolean, r_out as number, g_out as number, b_out as number]; 
}

export function getPointAreaOverlap(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number, p10: number, p11: number, p12: number, p13: number): boolean { 
	return _in(0xa0ad167e, 0x4b39d9a2, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, _r); 
}

/**
 * p3 can be 0, 1 or 2.
 * @param result
 * @param p1
 * @param p2
 * @param p3
 */
export function getPosAlongGpsTypeRoute(p1: boolean, p2: number, p3: number): [boolean, Vector3] { 
	const [retval, result_out] = _in(0xf3162836, 0xc28f9da5, _v, p1, _fv(p2), p3, _r);
	return [retval as boolean, _mv(result_out)]; 
}

export function getPosFromFiredEvent(ped: number, eventType: number, outData: number): [boolean, number] { 
	const [retval, outData_out] = _in(0xba656a3b, 0xb01bdea3, ped, eventType, _ii(outData), _r);
	return [retval as boolean, outData_out as number]; 
}

export function getPositionBySideOfRoad(x: number, y: number, z: number, p3: number, outPosition: Vector3): [boolean, Vector3] { 
	const [retval, outPosition_out] = _in(0x16f46fb1, 0x8c8009e4, _fv(x), _fv(y), _fv(z), p3, _v, _r);
	return [retval as boolean, _mv(outPosition_out)]; 
}

/**
 * Distance traveled in the vehicles current recording.
 * @param vehicle
 */
export function getPositionInRecording(vehicle: number): number { 
	return _in(0x2dacd605, 0xfc681475, vehicle, _r, _rf); 
}

/**
 * This native does no interpolation between pathpoints. The same position will be returned for all times up to the next pathpoint in the recording.
 * 
 * See REQUEST_VEHICLE_RECORDING
 * @param recording
 * @param time
 * @param script
 */
export function getPositionOfVehicleRecordingAtTime(recording: number, time: number, script: string): Vector3 { 
	return _mv(_in(0xd242728a, 0xa6f0fba2, recording, _fv(time), _ts(script), _r, _rv)); 
}

export function getPositionOfVehicleRecordingIdAtTime(id: number, time: number): Vector3 { 
	return _mv(_in(0x92523b76, 0x657a517d, id, _fv(time), _r, _rv)); 
}

/**
 * Gets system time as year, month, day, hour, minute and second.
 * 
 * Example usage:
 * 
 * int year;
 * int month;
 * int day;
 * int hour;
 * int minute;
 * int second;
 * 
 * TIME::GET_POSIX_TIME(&year, &month, &day, &hour, &minute, &second);
 * 
 * @param year
 * @param month
 * @param day
 * @param hour
 * @param minute
 * @param second
 */
export function getPosixTime(): [number, number, number, number, number, number] { 
	const [year_out, month_out, day_out, hour_out, minute_out, second_out] = _in(0xda488f29, 0x9a5b164e, _i, _i, _i, _i, _i, _i);
	return [year_out as number, month_out as number, day_out as number, hour_out as number, minute_out as number, second_out as number]; 
}

/**
 * Returns current weather name hash
 */
export function getPrevWeatherTypeHashName(): number { 
	return _in(0x564b884a, 0x05ec45a3, _r, _ri); 
}

export function getProfileSetting(profileSetting: number): number { 
	return _in(0xc488ff23, 0x56ea7791, profileSetting, _r, _ri); 
}

export function getProjectileOfProjectileTypeWithinDistance(ped: number, weaponHash: number, distance: number, p5: boolean): [boolean, Vector3, number] { 
	const [retval, outCoords_out, outProjectile_out] = _in(0x82fde6a5, 0x7ee4ee44, ped, _ch(weaponHash), _fv(distance), _v, _i, p5, _r);
	return [retval as boolean, _mv(outCoords_out), outProjectile_out as number]; 
}

/**
 * Converts radio station index to string. Use HUD::GET_FILENAME_FOR_AUDIO_CONVERSATION to get the user-readable text.
 * @param radioStation
 */
export function getRadioStationName(radioStation: number): string { 
	return _in(0xb28eca15, 0x046ca8b9, radioStation, _r, _s); 
}

export function getRainLevel(): number { 
	return _in(0x96695e36, 0x8ad855f3, _r, _rf); 
}

export function getRandomEventFlag(): boolean { 
	return _in(0xd2d57f1d, 0x764117b1, _r); 
}

export function getRandomFloatInRange(startRange: number, endRange: number): number { 
	return _in(0x313ce587, 0x9ceb6fcd, _fv(startRange), _fv(endRange), _r, _rf); 
}

export function getRandomIntInRange(startRange: number, endRange: number): number { 
	return _in(0xd53343aa, 0x4fb7dd28, startRange, endRange, _r, _ri); 
}

export function getRandomMwcIntInRange(startRange: number, endRange: number): number { 
	return _in(0xf2d49816, 0xa804d134, startRange, endRange, _r, _ri); 
}

/**
 * Gets a random ped in the x/y/zRadius near the x/y/z coordinates passed.
 * 
 * Ped Types:
 * Any = -1
 * Player = 1
 * Male = 4
 * Female = 5
 * Cop = 6
 * Human = 26
 * SWAT = 27
 * Animal = 28
 * Army = 29
 * @param x
 * @param y
 * @param z
 * @param xRadius
 * @param yRadius
 * @param zRadius
 * @param pedType
 */
export function getRandomPedAtCoord(x: number, y: number, z: number, xRadius: number, yRadius: number, zRadius: number, pedType: number): number { 
	return _in(0x876046a8, 0xe3a4b71c, _fv(x), _fv(y), _fv(z), _fv(xRadius), _fv(yRadius), _fv(zRadius), pedType, _r, _ri); 
}

export function getRandomVehicleBackBumperInSphere(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): number { 
	return _in(0xb50807ea, 0xbe20a8dc, _fv(p0), _fv(p1), _fv(p2), _fv(p3), p4, p5, p6, _r, _ri); 
}

export function getRandomVehicleFrontBumperInSphere(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): number { 
	return _in(0xc5574e0a, 0xeb86ba68, _fv(p0), _fv(p1), _fv(p2), _fv(p3), p4, p5, p6, _r, _ri); 
}

/**
 * Gets a random vehicle in a sphere at the specified position, of the specified radius.
 * 
 * x: The X-component of the position of the sphere.
 * y: The Y-component of the position of the sphere.
 * z: The Z-component of the position of the sphere.
 * radius: The radius of the sphere. Max is 9999.9004.
 * modelHash: The vehicle model to limit the selection to. Pass 0 for any model.
 * flags: The bitwise flags that modifies the behaviour of this function.
 * 
 * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param modelHash
 * @param flags
 */
export function getRandomVehicleInSphere(x: number, y: number, z: number, radius: number, modelHash: number, flags: number): number { 
	return _in(0x386f6ce5, 0xbaf6091c, _fv(x), _fv(y), _fv(z), _fv(radius), _ch(modelHash), flags, _r, _ri); 
}

/**
 * Not present in the retail version! It's just a nullsub.
 * 
 * p0 always true (except in one case)
 * successIndicator: 0 if success, -1 if failed
 * @param p0
 * @param modelHash
 * @param successIndicator
 */
export function getRandomVehicleModelInMemory(p0: boolean): [number, number] { 
	const [modelHash_out, successIndicator_out] = _in(0x055bf0ac, 0x0c34f4fd, p0, _i, _i);
	return [modelHash_out as number, successIndicator_out as number]; 
}

export function getRandomVehicleNode(x: number, y: number, z: number, radius: number, p4: boolean, p5: boolean, p6: boolean): [boolean, Vector3, number] { 
	const [retval, outPosition_out, nodeId_out] = _in(0x93e0db84, 0x40b73a7d, _fv(x), _fv(y), _fv(z), _fv(radius), p4, p5, p6, _v, _i, _r);
	return [retval as boolean, _mv(outPosition_out), nodeId_out as number]; 
}

/**
 * returns a float between 0.0 and 1.0, clamp: sets whether the product should be clamped between the given coordinates
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param x3
 * @param y3
 * @param z3
 * @param clamp
 */
export function getRatioOfClosestPointOnLine(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, x3: number, y3: number, z3: number, clamp: boolean): number { 
	return _in(0x7f8f6405, 0xf4777af6, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(x3), _fv(y3), _fv(z3), clamp, _r, _rf); 
}

/**
 * Example:
 * OBJECT::GET_RAYFIRE_MAP_OBJECT(-809.9619750976562, 170.919, 75.7406997680664, 3.0, "des_tvsmash");
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param name
 */
export function getRayfireMapObject(x: number, y: number, z: number, radius: number, name: string): number { 
	return _in(0xb48fced8, 0x98292e52, _fv(x), _fv(y), _fv(z), _fv(radius), _ts(name), _r, _ri); 
}

/**
 * `object`: The des-object handle to get the animation progress from.
 * Return value is a float between 0.0 and 1.0, 0.0 is the beginning of the animation, 1.0 is the end. Value resets to 0.0 instantly after reaching 1.0.
 * @param object
 */
export function getRayfireMapObjectAnimPhase(object: number): number { 
	return _in(0x260ee4fd, 0xbdf4db01, object, _r, _rf); 
}

/**
 * GET_GAME_TIMER() / 1000
 */
export function getRealWorldTime(): number { 
	return _in(0x3f60413f, 0x5df65748, _r, _ri); 
}

/**
 * Gets the relationship between two groups. This should be called twice (once for each group).
 * 
 * Relationship types:
 * 0 = Companion
 * 1 = Respect
 * 2 = Like
 * 3 = Neutral
 * 4 = Dislike
 * 5 = Hate
 * 255 = Pedestrians
 * 
 * Example:
 * PED::GET_RELATIONSHIP_BETWEEN_GROUPS(l_1017, 0xA49E591C);
 * PED::GET_RELATIONSHIP_BETWEEN_GROUPS(0xA49E591C, l_1017);
 * @param group1
 * @param group2
 */
export function getRelationshipBetweenGroups(group1: number, group2: number): number { 
	return _in(0x9e6b7006, 0x1662ae5c, _ch(group1), _ch(group2), _r, _ri); 
}

/**
 * Gets the relationship between two peds. This should be called twice (once for each ped).
 * 
 * Relationship types:
 * 0 = Companion
 * 1 = Respect
 * 2 = Like
 * 3 = Neutral
 * 4 = Dislike
 * 5 = Hate
 * 255 = Pedestrians
 * (Credits: Inco)
 * 
 * Example:
 * PED::GET_RELATIONSHIP_BETWEEN_PEDS(2, l_1017, 0xA49E591C);
 * PED::GET_RELATIONSHIP_BETWEEN_PEDS(2, 0xA49E591C, l_1017);
 * @param ped1
 * @param ped2
 */
export function getRelationshipBetweenPeds(ped1: number, ped2: number): number { 
	return _in(0xeba5ad3a, 0x0eaf7121, ped1, ped2, _r, _ri); 
}

export function getRemainingNitrousDuration(vehicle: number): number { 
	return _in(0xbec4b865, 0x3462450e, vehicle, _r, _rf); 
}

/**
 * This gets the height of the FONT and not the total text. You need to get the number of lines your text uses, and get the height of a newline (I'm using a smaller value) to get the total text height.
 * @param size
 * @param font
 */
export function getRenderedCharacterHeight(size: number, font: number): number { 
	return _in(0xdb88a374, 0x83346780, _fv(size), font, _r, _rf); 
}

export function getRenderingCam(): number { 
	return _in(0x5234f9f1, 0x0919eaba, _r, _ri); 
}

export function getReplayStatAtIndex(index: number): number { 
	return _in(0x8098c8d6, 0x597aae18, index, _r, _ri); 
}

export function getReplayStatCount(): number { 
	return _in(0xdc9274a7, 0xef6b2867, _r, _ri); 
}

export function getReplayStatMissionId(): number { 
	return _in(0x5b1f2e32, 0x7b6b6fe1, _r, _ri); 
}

export function getReplayStatMissionType(): number { 
	return _in(0x2b626a01, 0x50e4d449, _r, _ri); 
}

export function getRequestingnightvision(): boolean { 
	return _in(0x35fb78dc, 0x42b7bd21, _r); 
}

export function getReservedMissionEntitiesInArea(x: number, y: number, z: number, p3: number): [number, number, number] { 
	const [out1_out, out2_out, out3_out] = _in(0xe42d626e, 0xec94e5d9, _fv(x), _fv(y), _fv(z), p3, _i, _i, _i);
	return [out1_out as number, out2_out as number, out3_out as number]; 
}

export function getRoadBoundaryUsingHeading(x: number, y: number, z: number, heading: number, outPosition: Vector3): [boolean, Vector3] { 
	const [retval, outPosition_out] = _in(0xa0f8a751, 0x7a273c05, _fv(x), _fv(y), _fv(z), _fv(heading), _v, _r);
	return [retval as boolean, _mv(outPosition_out)]; 
}

export function getRoomKeyForGameViewport(): number { 
	return _in(0xa6575914, 0xd2a0b450, _r, _ri); 
}

/**
 * Gets the room hash key from the room that the specified entity is in. Each room in every interior has a unique key. Returns 0 if the entity is outside.
 * @param entity
 */
export function getRoomKeyFromEntity(entity: number): number { 
	return _in(0x47c2a06d, 0x4f5f424b, entity, _r, _ri); 
}

export function getRopeLastVertexCoord(ropeId: number): Vector3 { 
	return _mv(_in(0x21bb0fbd, 0x3e217c2d, ropeId, _r, _rv)); 
}

export function getRopeVertexCoord(ropeId: number, vertex: number): Vector3 { 
	return _mv(_in(0xea61ca8e, 0x80f09e4d, ropeId, vertex, _r, _rv)); 
}

export function getRopeVertexCount(ropeId: number): number { 
	return _in(0x3655f544, 0xcd30f0b5, ropeId, _r, _ri); 
}

/**
 * This native does no interpolation between pathpoints. The same rotation will be returned for all times up to the next pathpoint in the recording.
 * 
 * See REQUEST_VEHICLE_RECORDING
 * @param recording
 * @param time
 * @param script
 */
export function getRotationOfVehicleRecordingAtTime(recording: number, time: number, script: string): Vector3 { 
	return _mv(_in(0x2058206f, 0xbe79a8ad, recording, _fv(time), _ts(script), _r, _rv)); 
}

export function getRotationOfVehicleRecordingIdAtTime(id: number, time: number): Vector3 { 
	return _mv(_in(0xf0f2103e, 0xfaf8cba7, id, _fv(time), _r, _rv)); 
}

/**
 * Flags are:
 * 1 = 1 = B02_IsFootpath
 * 2 = 4 = !B15_InteractionUnk
 * 4 = 0x20 = !B14_IsInterior
 * 8 = 0x40 = !B07_IsWater
 * 16 = 0x200 = B17_IsFlatGround
 * When onGround == true outPosition is a position located on the nearest pavement.
 * 
 * When a safe coord could not be found the result of a function is false and outPosition == Vector3.Zero.
 * 
 * In the scripts these flags are used: 0, 14, 12, 16, 20, 21, 28. 0 is most commonly used, then 16.
 * 
 * 16 works for me, 0 crashed the script.
 * @param x
 * @param y
 * @param z
 * @param onGround
 * @param outPosition
 * @param flags
 */
export function getSafeCoordForPed(x: number, y: number, z: number, onGround: boolean, flags: number): [boolean, Vector3] { 
	const [retval, outPosition_out] = _in(0xb61c8e87, 0x8a4199ca, _fv(x), _fv(y), _fv(z), onGround, _v, flags, _r);
	return [retval as boolean, _mv(outPosition_out)]; 
}

export function getSafePickupCoords(x: number, y: number, z: number, p3: number, p4: number): Vector3 { 
	return _mv(_in(0x6e16bc25, 0x03ff1ff0, _fv(x), _fv(y), _fv(z), _fv(p3), _fv(p4), _r, _rv)); 
}

/**
 * Gets the scale of safe zone. if the safe zone size scale is max, it will return 1.0.
 */
export function getSafeZoneSize(): number { 
	return _in(0xbaf107b6, 0xbb2c97f0, _r, _rf); 
}

export function getSaveHouseDetailsAfterSuccessfulLoad(): [boolean, Vector3, number, boolean, boolean] { 
	const [retval, p0_out, p1_out, fadeInAfterLoad_out, p3_out] = _in(0xa4a0065e, 0x39c9f25c, _v, _f, _i, _i, _r);
	return [retval as boolean, _mv(p0_out), p1_out as number, fadeInAfterLoad_out as boolean, p3_out as boolean]; 
}

/**
 * methodReturn: The return value of this native: END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE
 * @param methodReturn
 */
export function getScaleformMovieMethodReturnValueBool(methodReturn: number): boolean { 
	return _in(0xd80a8034, 0x6a45d761, methodReturn, _r); 
}

/**
 * methodReturn: The return value of this native: END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE
 * Used to get a return value from a scaleform function. Returns an int in the same way GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_STRING returns a string.
 * @param methodReturn
 */
export function getScaleformMovieMethodReturnValueInt(methodReturn: number): number { 
	return _in(0x2de7efa6, 0x6b906036, methodReturn, _r, _ri); 
}

/**
 * methodReturn: The return value of this native: END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE
 * Used to get a return value from a scaleform function. Returns a string in the same way GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT returns an int.
 * @param methodReturn
 */
export function getScaleformMovieMethodReturnValueString(methodReturn: number): string { 
	return _in(0xe1e25882, 0x9a885245, methodReturn, _r, _s); 
}

export function getScreenAspectRatio(): number { 
	return _in(0xb2ebe8cb, 0xc58b90e9, _r, _rf); 
}

export function getScreenCodeWantsScriptToControl(): number { 
	return _in(0x593feae1, 0xf73392d4, _r, _ri); 
}

/**
 * Convert a world coordinate into its relative screen coordinate.  (WorldToScreen)
 * 
 * Returns a boolean; whether or not the operation was successful. It will return false if the coordinates given are not visible to the rendering camera.
 * 
 * 
 * For .NET users...
 * 
 * VB:
 * Public Shared Function World3DToScreen2d(pos as vector3) As Vector2
 * 
 * Dim x2dp, y2dp As New Native.OutputArgument
 * 
 * Native.Function.Call(Of Boolean)(Native.Hash.GET_SCREEN_COORD_FROM_WORLD_COORD , pos.x, pos.y, pos.z, x2dp, y2dp)
 * Return New Vector2(x2dp.GetResult(Of Single), y2dp.GetResult(Of Single))
 * 
 * End Function
 * 
 * C#:
 * Vector2 World3DToScreen2d(Vector3 pos)
 * {
 * var x2dp = new OutputArgument();
 * var y2dp = new OutputArgument();
 * 
 * Function.Call<bool>(Hash.GET_SCREEN_COORD_FROM_WORLD_COORD , pos.X, pos.Y, pos.Z, x2dp, y2dp);
 * return new Vector2(x2dp.GetResult<float>(), y2dp.GetResult<float>());
 * }
 * //USE VERY SMALL VALUES FOR THE SCALE OF RECTS/TEXT because it is dramatically larger on screen than in 3D, e.g '0.05' small.
 * 
 * Used to be called _WORLD3D_TO_SCREEN2D
 * 
 * I thought we lost you from the scene forever. It does seem however that calling SET_DRAW_ORIGIN then your natives, then ending it. Seems to work better for certain things such as keeping boxes around people for a predator missile e.g.
 * @param worldX
 * @param worldY
 * @param worldZ
 * @param screenX
 * @param screenY
 */
export function getScreenCoordFromWorldCoord(worldX: number, worldY: number, worldZ: number): [boolean, number, number] { 
	const [retval, screenX_out, screenY_out] = _in(0x34e82f05, 0xdf2974f5, _fv(worldX), _fv(worldY), _fv(worldZ), _f, _f, _r);
	return [retval as boolean, screenX_out as number, screenY_out as number]; 
}

/**
 * int screenresx,screenresy;
 * GET_SCREEN_RESOLUTION(&screenresx,&screenresy);
 * @param x
 * @param y
 */
export function getScreenResolution(): [number, number] { 
	const [x_out, y_out] = _in(0x888d57e4, 0x07e63624, _i, _i);
	return [x_out as number, y_out as number]; 
}

export function getScreenblurFadeCurrentTime(): number { 
	return _in(0x5ccabffc, 0xa31dde33, _r, _rf); 
}

/**
 * Calculates the effective X/Y fractions when applying the values set by SET_SCRIPT_GFX_ALIGN and SET_SCRIPT_GFX_ALIGN_PARAMS
 * @param x
 * @param y
 * @param calculatedX
 * @param calculatedY
 */
export function getScriptGfxAlignPosition(x: number, y: number): [number, number] { 
	const [calculatedX_out, calculatedY_out] = _in(0x6dd8f5aa, 0x635eb4b2, _fv(x), _fv(y), _f, _f);
	return [calculatedX_out as number, calculatedY_out as number]; 
}

/**
 * Gets the status of a script-assigned task.
 * taskHash: https://alloc8or.re/gta5/doc/enums/eScriptTaskHash.txt
 * @param ped
 * @param taskHash
 */
export function getScriptTaskStatus(ped: number, taskHash: number): number { 
	return _in(0x77f1beb8, 0x863288d5, ped, _ch(taskHash), _r, _ri); 
}

export function getScriptedCoverPointCoords(coverpoint: number): Vector3 { 
	return _mv(_in(0x594a1028, 0xfc2a3e85, coverpoint, _r, _rv)); 
}

export function getSeatPedIsTryingToEnter(ped: number): number { 
	return _in(0x6f4c85ac, 0xd641bcd2, ped, _r, _ri); 
}

/**
 * Returns the hash of the weapon.
 * 
 * var num7 = WEAPON::GET_SELECTED_PED_WEAPON(num4);
 * sub_27D3(num7);
 * switch (num7)
 * {
 * case 0x24B17070:
 * 
 * Also see WEAPON::GET_CURRENT_PED_WEAPON. Difference?
 * 
 * -------------------------------------------------------------------------
 * 
 * The difference is that GET_SELECTED_PED_WEAPON simply returns the ped's current weapon hash but GET_CURRENT_PED_WEAPON also checks the weapon object and returns true if the hash of the weapon object equals the weapon hash
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 */
export function getSelectedPedWeapon(ped: number): number { 
	return _in(0x0a6db496, 0x5674d243, ped, _r, _ri); 
}

/**
 * returned values:
 * 0 to 7 = task that's currently in progress, 0 meaning the first one.
 * -1 no task sequence in progress.
 * @param ped
 */
export function getSequenceProgress(ped: number): number { 
	return _in(0x00a9010c, 0xfe1e3533, ped, _r, _ri); 
}

/**
 * Returns the result of a shape test: 0 if the handle is invalid, 1 if the shape test is still pending, or 2 if the shape test has completed, and the handle should be invalidated.
 * 
 * When used with an asynchronous shape test, this native should be looped until returning 0 or 2, after which the handle is invalidated.
 * @param shapeTestHandle
 * @param hit
 * @param endCoords
 * @param surfaceNormal
 * @param entityHit
 */
export function getShapeTestResult(shapeTestHandle: number): [number, boolean, Vector3, Vector3, number] { 
	const [retval, hit_out, endCoords_out, surfaceNormal_out, entityHit_out] = _in(0x3d87450e, 0x15d98694, shapeTestHandle, _i, _v, _v, _i, _r, _ri);
	return [retval as number, hit_out as boolean, _mv(endCoords_out), _mv(surfaceNormal_out), entityHit_out as number]; 
}

/**
 * Returns the result of a shape test, also returning the material of any touched surface.
 * 
 * When used with an asynchronous shape test, this native should be looped until returning 0 or 2, after which the handle is invalidated.
 * 
 * Unless the return value is 2, the other return values are undefined.
 * @param shapeTestHandle
 * @param hit
 * @param endCoords
 * @param surfaceNormal
 * @param materialHash
 * @param entityHit
 */
export function getShapeTestResultIncludingMaterial(shapeTestHandle: number): [number, boolean, Vector3, Vector3, number, number] { 
	const [retval, hit_out, endCoords_out, surfaceNormal_out, materialHash_out, entityHit_out] = _in(0x65287525, 0xd951f6be, shapeTestHandle, _i, _v, _v, _i, _i, _r, _ri);
	return [retval as number, hit_out as boolean, _mv(endCoords_out), _mv(surfaceNormal_out), materialHash_out as number, entityHit_out as number]; 
}

/**
 * Returns number of possible values of the forcedComponentIndex argument of GET_FORCED_COMPONENT.
 * @param componentHash
 */
export function getShopPedApparelForcedComponentCount(componentHash: number): number { 
	return _in(0xc6b9db42, 0xc04dd8c3, _ch(componentHash), _r, _ri); 
}

/**
 * Returns number of possible values of the forcedPropIndex argument of GET_FORCED_PROP.
 * @param componentHash
 */
export function getShopPedApparelForcedPropCount(componentHash: number): number { 
	return _in(0x017568a8, 0x182d98a6, _ch(componentHash), _r, _ri); 
}

export function getShopPedApparelVariantComponentCount(componentHash: number): number { 
	return _in(0xc17ad0e5, 0x752becda, _ch(componentHash), _r, _ri); 
}

/**
 * `propHash`: Ped helmet prop hash?
 * This native returns 1 when the player helmet has a visor (there is another prop index for the same helmet with closed/opened visor variant) that can be toggled. 0 if there's no alternative version with a visor for this helmet prop.
 * @param propHash
 */
export function getShopPedApparelVariantPropCount(propHash: number): number { 
	return _in(0xd40aac51, 0xe8e4c663, _ch(propHash), _r, _ri); 
}

/**
 * More info here: https://gist.github.com/root-cause/3b80234367b0c856d60bf5cb4b826f86
 * @param componentHash
 * @param outComponent
 */
export function getShopPedComponent(componentHash: number, outComponent: number): number { 
	return _in(0x74c0e2a5, 0x7ec66760, _ch(componentHash), _ii(outComponent)); 
}

export function getShopPedOutfit(p0: number, p1: number): number { 
	return _in(0xb7952076, 0xe444979d, p0, _ii(p1)); 
}

/**
 * See https://git.io/JtcBH for example and structs.
 * @param outfitHash
 * @param variantIndex
 * @param outComponentVariant
 */
export function getShopPedOutfitComponentVariant(outfitHash: number, variantIndex: number, outComponentVariant: number): [boolean, number] { 
	const [retval, outComponentVariant_out] = _in(0x19f2a026, 0xedf0013f, _ch(outfitHash), variantIndex, _ii(outComponentVariant), _r);
	return [retval as boolean, outComponentVariant_out as number]; 
}

export function getShopPedOutfitLocate(p0: number): number { 
	return _in(0x073ca26b, 0x079f956e, p0, _r, _ri); 
}

/**
 * See https://git.io/JtcBH for example and structs.
 * @param outfitHash
 * @param variantIndex
 * @param outPropVariant
 */
export function getShopPedOutfitPropVariant(outfitHash: number, variantIndex: number, outPropVariant: number): [boolean, number] { 
	const [retval, outPropVariant_out] = _in(0xa9f9c2e0, 0xfde11cbb, _ch(outfitHash), variantIndex, _ii(outPropVariant), _r);
	return [retval as boolean, outPropVariant_out as number]; 
}

/**
 * More info here: https://gist.github.com/root-cause/3b80234367b0c856d60bf5cb4b826f86
 * @param componentHash
 * @param outProp
 */
export function getShopPedProp(componentHash: number, outProp: number): number { 
	return _in(0x5d5caff6, 0x61ddf6fc, _ch(componentHash), _ii(outProp)); 
}

/**
 * See https://git.io/JtcRf for example and structs.
 * @param componentId
 * @param outComponent
 */
export function getShopPedQueryComponent(componentId: number, outComponent: number): number { 
	return _in(0x249e310b, 0x2d920699, componentId, _ii(outComponent)); 
}

/**
 * Returns some sort of index/offset for components.
 * Needs _GET_NUM_PROPS_FROM_OUTFIT to be called with p3 = false and componentId with the drawable's component slot first, returns -1 otherwise.
 * @param componentHash
 */
export function getShopPedQueryComponentIndex(componentHash: number): number { 
	return _in(0x96e29292, 0x92a4db77, _ch(componentHash), _r, _ri); 
}

/**
 * outfitIndex: from 0 to SETUP_SHOP_PED_OUTFIT_QUERY(characterIndex, false) - 1.
 * See https://git.io/JtcB8 for example and outfit struct.
 * @param outfitIndex
 * @param outfit
 */
export function getShopPedQueryOutfit(outfitIndex: number, outfit: number): number { 
	return _in(0x6d793f03, 0xa631fe56, outfitIndex, _ii(outfit)); 
}

/**
 * See https://git.io/JtcRf for example and structs.
 * @param componentId
 * @param outProp
 */
export function getShopPedQueryProp(componentId: number, outProp: number): number { 
	return _in(0xde44a009, 0x99b2837d, componentId, _ii(outProp)); 
}

/**
 * Returns some sort of index/offset for props.
 * Needs _GET_NUM_PROPS_FROM_OUTFIT to be called with p3 = true and componentId = -1 first, returns -1 otherwise.
 * @param componentHash
 */
export function getShopPedQueryPropIndex(componentHash: number): number { 
	return _in(0x6cebe002, 0xe58dee97, _ch(componentHash), _r, _ri); 
}

export function getSizeOfSaveData(p0: boolean): number { 
	return _in(0xa09f896c, 0xe912481f, p0, _r, _ri); 
}

export function getSnowLevel(): number { 
	return _in(0xc5868a96, 0x6e5be3ae, _r, _rf); 
}

export function getSoundId(): number { 
	return _in(0x430386fe, 0x9bf80b45, _r, _ri); 
}

export function getSoundIdFromNetworkId(netId: number): number { 
	return _in(0x75262fd1, 0x2d0a1c84, netId, _r, _ri); 
}

export function getSpawnCoordsForVehicleNode(nodeAddress: number, towardsCoorsX: number, towardsCoorsY: number, towardsCoorsZ: number): [Vector3, number] { 
	const [centrePoint_out, heading_out] = _in(0x809549af, 0xc7aec597, nodeAddress, _fv(towardsCoorsX), _fv(towardsCoorsY), _fv(towardsCoorsZ), _v, _f);
	return [_mv(centrePoint_out), heading_out as number]; 
}

export function getStandardBlipEnumId(): number { 
	return _in(0x4a992338, 0x5bdb9dad, _r, _ri); 
}

/**
 * Returns stat hash based on dataType, statIndex/statId and characterSlot. Related to CStatsMpCharacterMappingData
 * @param dataType
 * @param statIndex
 * @param charSlot
 */
export function getStatHashForCharacterStat(dataType: number, statIndex: number, charSlot: number): number { 
	return _in(0xd69ce161, 0xfe614531, dataType, statIndex, charSlot, _r, _ri); 
}

/**
 * locked is 0 if no door is found
 * locked is 0 if door is unlocked
 * locked is 1 if door is found and unlocked.
 * 
 * -------------
 * the locked bool is either 0(unlocked)(false) or 1(locked)(true)
 * @param type
 * @param x
 * @param y
 * @param z
 * @param locked
 * @param heading
 */
export function getStateOfClosestDoorOfType(type: number, x: number, y: number, z: number): [boolean, number] { 
	const [locked_out, heading_out] = _in(0xedc1a5b8, 0x4aef33ff, _ch(type), _fv(x), _fv(y), _fv(z), _i, _f);
	return [locked_out as boolean, heading_out as number]; 
}

/**
 * Get a destructible object's state.
 * Substract 1 to get the real state.
 * See SET_STATE_OF_RAYFIRE_MAP_OBJECT to see the different states
 * For example, if the object just spawned (state 2), the native will return 3.
 * @param object
 */
export function getStateOfRayfireMapObject(object: number): number { 
	return _in(0x899ba936, 0x634a322e, object, _r, _ri); 
}

export function getStatusOfCreateLowQualityCopyOfPhoto(p0: number): number { 
	return _in(0xcb82a0bf, 0x0e3e3265, p0, _r, _ri); 
}

export function getStatusOfCreateMissionCreatorPhotoPreview(): number { 
	return _in(0x5b031676, 0x2afd4a64, _r, _ri); 
}

export function getStatusOfLoadMissionCreatorPhoto(p0: number): [number, number] { 
	const [retval, p0_out] = _in(0x1670f8d0, 0x5056f257, _ii(p0), _r, _ri);
	return [retval as number, p0_out as number]; 
}

export function getStatusOfManualSave(): number { 
	return _in(0x397baa01, 0x068baa96, _r, _ri); 
}

export function getStatusOfMissionRepeatSave(): number { 
	return _in(0x2b5e102e, 0x4a42f2bf, _r, _ri); 
}

export function getStatusOfSaveHighQualityPhoto(): number { 
	return _in(0x0c0c4e81, 0xe1ac60a0, _r, _ri); 
}

/**
 * 3 matches across 3 scripts. First 2 were 0, 3rd was 1. Possibly a bool.
 * appcamera, appmedia, and cellphone_controller.
 * @param p0
 */
export function getStatusOfSortedListOperation(p0: number): number { 
	return _in(0xf5bed327, 0xcea362b1, p0, _r, _ri); 
}

export function getStatusOfTakeHighQualityPhoto(): number { 
	return _in(0x0d6ca79e, 0xeebd8ca3, _r, _ri); 
}

export function getStatusOfTakeMissionCreatorPhoto(): number { 
	return _in(0x90a78eca, 0xa4e78453, _r, _ri); 
}

/**
 * 0 = succeeded
 * 1 = pending
 * 2 = failed
 * @param p0
 */
export function getStatusOfTextureDownload(p0: number): number { 
	return _in(0x8bd6c6de, 0xa20e82c6, p0, _r, _ri); 
}

export function getStreamPlayTime(): number { 
	return _in(0x4e72bbdb, 0xca58a3db, _r, _ri); 
}

/**
 * Determines the name of the street which is the closest to the given coordinates.
 * 
 * x,y,z - the coordinates of the street
 * streetName - returns a hash to the name of the street the coords are on
 * crossingRoad - if the coordinates are on an intersection, a hash to the name of the crossing road
 * 
 * Note: the names are returned as hashes, the strings can be returned using the function HUD::GET_STREET_NAME_FROM_HASH_KEY.
 * @param x
 * @param y
 * @param z
 * @param streetName
 * @param crossingRoad
 */
export function getStreetNameAtCoord(x: number, y: number, z: number): [number, number] { 
	const [streetName_out, crossingRoad_out] = _in(0x2eb41072, 0xb4c1e4c0, _fv(x), _fv(y), _fv(z), _i, _i);
	return [streetName_out as number, crossingRoad_out as number]; 
}

/**
 * This functions converts the hash of a street name into a readable string.
 * 
 * For how to get the hashes, see PATHFIND::GET_STREET_NAME_AT_COORD.
 * @param hash
 */
export function getStreetNameFromHashKey(hash: number): string { 
	return _in(0xd0ef8a95, 0x9b8a4cb9, _ch(hash), _r, _s); 
}

export function getSubmarineIsUnderDesignDepth(submarine: number): boolean { 
	return _in(0x3e71d0b3, 0x00b7aa79, submarine, _r); 
}

export function getSubmarineNumberOfAirLeaks(submarine: number): number { 
	return _in(0x093d6ddc, 0xa5b8fbae, submarine, _r, _ri); 
}

export function getSynchronizedScenePhase(sceneID: number): number { 
	return _in(0xe4a310b1, 0xd7fa73cc, sceneID, _r, _rf); 
}

export function getSynchronizedSceneRate(sceneID: number): number { 
	return _in(0xd80932d5, 0x77274d40, sceneID, _r, _rf); 
}

export function getSystemTimeStep(): number { 
	return _in(0xe599a503, 0xb3837e1b, _r, _rf); 
}

export function getTaskMoveNetworkEvent(ped: number, eventName: string): boolean { 
	return _in(0xb4f47213, 0xdf45a64c, ped, _ts(eventName), _r); 
}

export function getTaskMoveNetworkSignalBool(ped: number, signalName: string): boolean { 
	return _in(0xa7ffba49, 0x8e4aaf67, ped, _ts(signalName), _r); 
}

export function getTaskMoveNetworkSignalFloat(ped: number, signalName: string): number { 
	return _in(0x44ab0b3a, 0xfecce242, ped, _ts(signalName), _r, _rf); 
}

export function getTaskMoveNetworkState(ped: number): string { 
	return _in(0x717e4d1f, 0x2048376d, ped, _r, _s); 
}

export function getTaskRappelDownWallState(ped: number): number { 
	return _in(0x9d252648, 0x778160df, ped, _r, _ri); 
}

/**
 * Character types:
 * 0 = Michael,
 * 1 = Franklin,
 * 2 = Trevor,
 * 3 = MPMale,
 * 4 = MPFemale
 * 
 * 
 * enum TattooZoneData
 * {
 * ZONE_TORSO = 0,
 * ZONE_HEAD = 1,
 * ZONE_LEFT_ARM = 2,
 * ZONE_RIGHT_ARM = 3,
 * ZONE_LEFT_LEG = 4,
 * ZONE_RIGHT_LEG = 5,
 * ZONE_UNKNOWN = 6,
 * ZONE_NONE = 7,
 * };
 * struct outComponent
 * {
 * // these vars are suffixed with 4 bytes of padding each.
 * uint unk;
 * int unk2;
 * uint tattooCollectionHash;
 * uint tattooNameHash;
 * int unk3;
 * TattooZoneData zoneId;
 * uint unk4;
 * uint unk5;
 * // maybe more, not sure exactly, decompiled scripts are very vague around this part.
 * }
 * @param characterType
 * @param decorationIndex
 * @param outComponent
 */
export function getTattooShopDlcItemData(characterType: number, decorationIndex: number, outComponent: number): [boolean, number] { 
	const [retval, outComponent_out] = _in(0xff563818, 0x74f82086, characterType, decorationIndex, _ii(outComponent), _r);
	return [retval as boolean, outComponent_out as number]; 
}

/**
 * Returns some sort of index/offset for overlays/decorations.
 * 
 * Character types:
 * 0 = Michael,
 * 1 = Franklin,
 * 2 = Trevor,
 * 3 = MPMale,
 * 4 = MPFemale
 * @param overlayHash
 * @param p1
 * @param character
 */
export function getTattooShopDlcItemIndex(overlayHash: number, p1: number, character: number): number { 
	return _in(0x10144267, 0xdd22866c, _ch(overlayHash), p1, character, _r, _ri); 
}

export function getTennisSwingAnimCanBeInterrupted(ped: number): boolean { 
	return _in(0x19bfed04, 0x5c647c49, ped, _r); 
}

export function getTennisSwingAnimComplete(ped: number): boolean { 
	return _in(0x17df68d7, 0x20aa77f8, ped, _r); 
}

export function getTennisSwingAnimSwung(ped: number): boolean { 
	return _in(0xe95b0c7d, 0x5ba3b96b, ped, _r); 
}

/**
 * Returns the texture resolution of the passed texture dict+name.
 * 
 * Note: Most texture resolutions are doubled compared to the console version of the game.
 * @param textureDict
 * @param textureName
 */
export function getTextureResolution(textureDict: string, textureName: string): Vector3 { 
	return _mv(_in(0x35736ee6, 0x5bd00c11, _ts(textureDict), _ts(textureName), _r, _rv)); 
}

export function getThirdPersonCamMaxOrbitDistanceSpring(): number { 
	return _in(0xd4592a16, 0xd36673ed, _r, _rf); 
}

export function getThirdPersonCamMinOrbitDistanceSpring(): number { 
	return _in(0xbc456fb7, 0x03431785, _r, _rf); 
}

export function getThisScriptName(): string { 
	return _in(0x442e0a7e, 0xde4a738a, _r, _s); 
}

export function getTimeAsString(time: number): string { 
	return _in(0x9e23b177, 0x7a927dad, time, _r, _s); 
}

export function getTimeBeforeVehicleWeaponReloadFinishes(vehicle: number, seat: number): number { 
	return _in(0xc8c6f4b1, 0xcdeb40ef, vehicle, seat, _r, _ri); 
}

/**
 * Subtracts the second argument from the first.
 * @param timeA
 * @param timeB
 */
export function getTimeDifference(timeA: number, timeB: number): number { 
	return _in(0xa2c6fc03, 0x1d46fff0, timeA, timeB, _r, _ri); 
}

/**
 * Adds the first argument to the second.
 * @param timeA
 * @param timeB
 */
export function getTimeOffset(timeA: number, timeB: number): number { 
	return _in(0x017008cc, 0xdad48503, timeA, timeB, _r, _ri); 
}

export function getTimePedDamagedByWeapon(ped: number, weaponHash: number): number { 
	return _in(0x36b77bb8, 0x4687c318, ped, _ch(weaponHash), _r, _ri); 
}

/**
 * Can be used with GET_TOTAL_DURATION_OF_VEHICLE_RECORDING{_ID} to compute a percentage.
 * @param vehicle
 */
export function getTimePositionInRecording(vehicle: number): number { 
	return _in(0x5746f3a7, 0xab7fe544, vehicle, _r, _rf); 
}

/**
 * Returns the time since the character was arrested in (ms) milliseconds.
 * 
 * example
 * 
 * var time = Function.call<int>(Hash.GET_TIME_SINCE_LAST_ARREST();
 * 
 * UI.DrawSubtitle(time.ToString());
 * 
 * if player has not been arrested, the int returned will be -1.
 */
export function getTimeSinceLastArrest(): number { 
	return _in(0x5063f92f, 0x07c2a316, _r, _ri); 
}

/**
 * Returns the time since the character died in (ms) milliseconds.
 * 
 * example
 * 
 * var time = Function.call<int>(Hash.GET_TIME_SINCE_LAST_DEATH();
 * 
 * UI.DrawSubtitle(time.ToString());
 * 
 * if player has not died, the int returned will be -1.
 */
export function getTimeSinceLastDeath(): number { 
	return _in(0xc7034807, 0x558ddfca, _r, _ri); 
}

export function getTimeSincePlayerDroveAgainstTraffic(player: number): number { 
	return _in(0xdb89591e, 0x290d9182, player, _r, _ri); 
}

export function getTimeSincePlayerDroveOnPavement(player: number): number { 
	return _in(0xd559d2be, 0x9e37853b, player, _r, _ri); 
}

export function getTimeSincePlayerHitPed(player: number): number { 
	return _in(0xe36a2532, 0x2dc35f42, player, _r, _ri); 
}

export function getTimeSincePlayerHitVehicle(player: number): number { 
	return _in(0x5d35ecf3, 0xa81a0ee0, player, _r, _ri); 
}

/**
 * Only use for this in the PC scripts is:
 * 
 * if (GRAPHICS::GET_TIMECYCLE_MODIFIER_INDEX() != -1)
 */
export function getTimecycleModifierIndex(): number { 
	return _in(0xfdf3d97c, 0x674afb66, _r, _ri); 
}

export function getTimecycleTransitionModifierIndex(): number { 
	return _in(0x459fd2c8, 0xd0ab78bc, _r, _ri); 
}

export function getTintIndexForLastGenHairTexture(modelHash: number, drawableId: number, textureId: number): number { 
	return _in(0xc56fbf2f, 0x228e1dac, _ch(modelHash), drawableId, textureId, _r, _ri); 
}

export function getTogglePausedRenderphasesStatus(): boolean { 
	return _in(0xeb3dac2c, 0x86001e5e, _r); 
}

/**
 * See REQUEST_VEHICLE_RECORDING
 * @param recording
 * @param script
 */
export function getTotalDurationOfVehicleRecording(recording: number, script: string): number { 
	return _in(0x0e48d1c2, 0x62390950, recording, _ts(script), _r, _rf); 
}

export function getTotalDurationOfVehicleRecordingId(id: number): number { 
	return _in(0x102d1254, 0x11a7b6e6, id, _r, _rf); 
}

export function getTotalSuccessfulStuntJumps(): number { 
	return _in(0x6856ec3d, 0x35c81ea4, _r, _ri); 
}

export function getTrackedPedPixelcount(ped: number): number { 
	return _in(0x511f1a68, 0x3387c7e2, ped, _r, _ri); 
}

/**
 * Corrected p1. it's basically the 'carriage/trailer number'. So if the train has 3 trailers you'd call the native once with a var or 3 times with 1, 2, 3.
 * @param train
 * @param trailerNumber
 */
export function getTrainCarriage(train: number, trailerNumber: number): number { 
	return _in(0x08aafd08, 0x14722bc3, train, trailerNumber, _r, _ri); 
}

export function getTvChannel(): number { 
	return _in(0xfc1e275a, 0x90d39995, _r, _ri); 
}

export function getTvVolume(): number { 
	return _in(0x2170813d, 0x3dd8661b, _r, _rf); 
}

/**
 * Usable wheels:
 * 0: wheel_lf
 * 1: wheel_rf
 * 2: wheel_lm1
 * 3: wheel_rm1
 * 4: wheel_lr
 * 5: wheel_rr
 * @param vehicle
 * @param wheelIndex
 */
export function getTyreHealth(vehicle: number, wheelIndex: number): number { 
	return _in(0x55eab010, 0xfaee9380, vehicle, wheelIndex, _r, _rf); 
}

/**
 * Returns the multiplier value from SET_TYRE_WEAR_RATE
 * 
 * Usable wheels:
 * 0: wheel_lf
 * 1: wheel_rf
 * 2: wheel_lm1
 * 3: wheel_rm1
 * 4: wheel_lr
 * 5: wheel_rr
 * @param vehicle
 * @param wheelIndex
 */
export function getTyreWearRate(vehicle: number, wheelIndex: number): number { 
	return _in(0x6e387895, 0x952f4f71, vehicle, wheelIndex, _r, _rf); 
}

/**
 * 0.0 = no memory used
 * 1.0 = all memory used
 * 
 * Maximum model memory (as defined in common\data\missioncreatordata.meta) is 100 MiB
 */
export function getUsedCreatorBudget(): number { 
	return _in(0x3d3d8b3b, 0xe5a83d35, _r, _rf); 
}

/**
 * Checks some commerce stuff
 */
export function getUserPremiumAccess(): number { 
	return _in(0x75461549, 0x0a029508, _r, _ri); 
}

/**
 * Checks some commerce stuff
 */
export function getUserStarterAccess(): number { 
	return _in(0x155467ac, 0xa0f55705, _r, _ri); 
}

export function getUsingnightvision(): boolean { 
	return _in(0x2202a3f4, 0x2c8e5f79, _r); 
}

export function getUsingseethrough(): boolean { 
	return _in(0x44b80aba, 0xb9d80bd3, _r); 
}

/**
 * Gets current UTC time
 * @param year
 * @param month
 * @param day
 * @param hour
 * @param minute
 * @param second
 */
export function getUtcTime(): [number, number, number, number, number, number] { 
	const [year_out, month_out, day_out, hour_out, minute_out, second_out] = _in(0x8117e09a, 0x19eef4d3, _i, _i, _i, _i, _i, _i);
	return [year_out as number, month_out as number, day_out as number, hour_out as number, minute_out as number, second_out as number]; 
}

export function getVariantComponent(componentHash: number, variantComponentIndex: number): [number, number, number] { 
	const [nameHash_out, enumValue_out, componentType_out] = _in(0x6e11f282, 0xf11863b6, _ch(componentHash), variantComponentIndex, _i, _i, _i);
	return [nameHash_out as number, enumValue_out as number, componentType_out as number]; 
}

export function getVariantProp(componentHash: number, variantPropIndex: number): [number, number, number] { 
	const [nameHash_out, enumValue_out, anchorPoint_out] = _in(0xd81b7f27, 0xbc773e66, _ch(componentHash), variantPropIndex, _i, _i, _i);
	return [nameHash_out as number, enumValue_out as number, anchorPoint_out as number]; 
}

export function getVariationChosenForScriptedLine(p0: number): [number, number] { 
	const [retval, p0_out] = _in(0xaa19f557, 0x2c38b564, _ii(p0), _r, _ri);
	return [retval as number, p0_out as number]; 
}

/**
 * static - max acceleration
 * @param vehicle
 */
export function getVehicleAcceleration(vehicle: number): number { 
	return _in(0x5dd35c8d, 0x074e57ae, vehicle, _r, _rf); 
}

/**
 * Returns attached vehicle (Vehicle in parameter must be cargobob)
 * @param cargobob
 */
export function getVehicleAttachedToCargobob(cargobob: number): number { 
	return _in(0x873b82d4, 0x2ac2b9e5, cargobob, _r, _ri); 
}

/**
 * Seems related to vehicle health, like the one in IV.
 * Max 1000, min 0.
 * Vehicle does not necessarily explode or become undrivable at 0.
 * @param vehicle
 */
export function getVehicleBodyHealth(vehicle: number): number { 
	return _in(0xf271147e, 0xb7b40f12, vehicle, _r, _rf); 
}

/**
 * Gets the amount of bombs that this vehicle has. As far as I know, this does _not_ impact vehicle weapons or the ammo of those weapons in any way, it is just a way to keep track of the amount of bombs in a specific plane.
 * @param vehicle
 */
export function getVehicleBombAmmo(vehicle: number): number { 
	return _in(0xea12bd13, 0x0d7569a1, vehicle, _r, _ri); 
}

export function getVehicleCanDeployParachute(vehicle: number): boolean { 
	return _in(0xa916396d, 0xf4154ee3, vehicle, _r); 
}

/**
 * iVar3 = get_vehicle_cause_of_destruction(uLocal_248[iVar2]);
 * if (iVar3 == joaat("weapon_stickybomb"))
 * {
 * func_171(726);
 * iLocal_260 = 1;
 * }
 * @param vehicle
 */
export function getVehicleCauseOfDestruction(vehicle: number): number { 
	return _in(0xe495d1ef, 0x4c91fd20, vehicle, _r, _ri); 
}

/**
 * Returns an int
 * 
 * Vehicle Classes:
 * 0: Compacts
 * 1: Sedans
 * 2: SUVs
 * 3: Coupes
 * 4: Muscle
 * 5: Sports Classics
 * 6: Sports
 * 7: Super
 * 8: Motorcycles
 * 9: Off-road
 * 10: Industrial
 * 11: Utility
 * 12: Vans
 * 13: Cycles
 * 14: Boats
 * 15: Helicopters
 * 16: Planes
 * 17: Service
 * 18: Emergency
 * 19: Military
 * 20: Commercial
 * 21: Trains
 * 
 * char buffer[128];
 * std::sprintf(buffer, "VEH_CLASS_%i", VEHICLE::GET_VEHICLE_CLASS(vehicle));
 * 
 * const char* className = HUD::GET_FILENAME_FOR_AUDIO_CONVERSATION(buffer);
 * @param vehicle
 */
export function getVehicleClass(vehicle: number): number { 
	return _in(0x29439776, 0xaaa00a62, vehicle, _r, _ri); 
}

export function getVehicleClassEstimatedMaxSpeed(vehicleClass: number): number { 
	return _in(0x00c09f24, 0x6abedd82, vehicleClass, _r, _rf); 
}

/**
 * char buffer[128];
 * std::sprintf(buffer, "VEH_CLASS_%i", VEHICLE::GET_VEHICLE_CLASS_FROM_NAME (hash));
 * 
 * const char* className = HUD::GET_FILENAME_FOR_AUDIO_CONVERSATION(buffer);
 * 
 * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
 * @param modelHash
 */
export function getVehicleClassFromName(modelHash: number): number { 
	return _in(0xdedf1c8b, 0xd47c2200, _ch(modelHash), _r, _ri); 
}

export function getVehicleClassMaxAcceleration(vehicleClass: number): number { 
	return _in(0x2f83e7e4, 0x5d9ea7ae, vehicleClass, _r, _rf); 
}

export function getVehicleClassMaxAgility(vehicleClass: number): number { 
	return _in(0x4f930ad0, 0x22d6de3b, vehicleClass, _r, _rf); 
}

export function getVehicleClassMaxBraking(vehicleClass: number): number { 
	return _in(0x4bf54c16, 0xec8fec03, vehicleClass, _r, _rf); 
}

export function getVehicleClassMaxTraction(vehicleClass: number): number { 
	return _in(0xdbc86d85, 0xc5059461, vehicleClass, _r, _rf); 
}

/**
 * What's this for? Primary and Secondary RGB have their own natives and this one doesn't seem specific.
 * @param vehicle
 * @param r
 * @param g
 * @param b
 */
export function getVehicleColor(vehicle: number): [number, number, number] { 
	const [r_out, g_out, b_out] = _in(0xf3cc740d, 0x36221548, vehicle, _i, _i, _i);
	return [r_out as number, g_out as number, b_out as number]; 
}

/**
 * Returns the index of the color combination found in the vehicle's carvariations.meta entry.
 * @param vehicle
 */
export function getVehicleColourCombination(vehicle: number): number { 
	return _in(0x6a842d19, 0x7f845d56, vehicle, _r, _ri); 
}

export function getVehicleColours(vehicle: number): [number, number] { 
	const [colorPrimary_out, colorSecondary_out] = _in(0xa19435f1, 0x93e081ac, vehicle, _i, _i);
	return [colorPrimary_out as number, colorSecondary_out as number]; 
}

/**
 * Some kind of flags.
 * @param vehicle
 */
export function getVehicleColoursWhichCanBeSet(vehicle: number): number { 
	return _in(0xeebfc7a7, 0xefdc35b4, vehicle, _r, _ri); 
}

/**
 * Similar to `GET_VEHICLE_BOMB_AMMO`, this gets the amount of countermeasures that are present on this vehicle.
 * Use SET_VEHICLE_COUNTERMEASURE_AMMO to set the current amount.
 * @param vehicle
 */
export function getVehicleCountermeasureAmmo(vehicle: number): number { 
	return _in(0xf846aa63, 0xdf56b804, vehicle, _r, _ri); 
}

export function getVehicleCrewEmblemRequestState(vehicle: number, p1: number): number { 
	return _in(0xfe26117a, 0x5841b2ff, vehicle, p1, _r, _ri); 
}

export function getVehicleCurrentDriveGear(vehicle: number): number { 
	return _in(0x56185a25, 0xd45a0dcd, vehicle, _r, _ri); 
}

export function getVehicleCurrentRevRatio(vehicle: number): number { 
	return _in(0xf9dda40b, 0xc293a61e, vehicle, _r, _rf); 
}

/**
 * Returns a float value between 0.0 and 3.0 related to its slipstream draft (boost/speedup).
 * @param vehicle
 */
export function getVehicleCurrentTimeInSlipStream(vehicle: number): number { 
	return _in(0x36492c2f, 0x0d134c56, vehicle, _r, _rf); 
}

export function getVehicleCustomPrimaryColour(vehicle: number): [number, number, number] { 
	const [r_out, g_out, b_out] = _in(0xb64cf2cc, 0xa9d95f52, vehicle, _i, _i, _i);
	return [r_out as number, g_out as number, b_out as number]; 
}

export function getVehicleCustomSecondaryColour(vehicle: number): [number, number, number] { 
	const [r_out, g_out, b_out] = _in(0x8389cd56, 0xca8072dc, vehicle, _i, _i, _i);
	return [r_out as number, g_out as number, b_out as number]; 
}

/**
 * Returns hash of default vehicle horn
 * 
 * Hash is stored in audVehicleAudioEntity
 * @param vehicle
 */
export function getVehicleDefaultHorn(vehicle: number): number { 
	return _in(0x02165d55, 0x000219ac, vehicle, _r, _ri); 
}

export function getVehicleDefaultHornIgnoreMods(vehicle: number): number { 
	return _in(0xacb5dcca, 0x1ec76840, vehicle, _r, _ri); 
}

/**
 * The only example I can find of this function in the scripts, is this:
 * 
 * struct _s = VEHICLE::GET_VEHICLE_DEFORMATION_AT_POS(rPtr((A_0) + 4), 1.21f, 6.15f, 0.3f);
 * 
 * -----------------------------------------------------------------------------------------------------------------------------------------
 * PC scripts:
 * 
 * v_5 -- [[{3}]]  = VEHICLE::GET_VEHICLE_DEFORMATION_AT_POS(a_0._f1, 1.21, 6.15, 0.3);
 * @param vehicle
 * @param offsetX
 * @param offsetY
 * @param offsetZ
 */
export function getVehicleDeformationAtPos(vehicle: number, offsetX: number, offsetY: number, offsetZ: number): Vector3 { 
	return _mv(_in(0x4ec6cfbc, 0x7b2e9536, vehicle, _fv(offsetX), _fv(offsetY), _fv(offsetZ), _r, _rv)); 
}

export function getVehicleDesiredDriveGear(vehicle: number): number { 
	return _in(0xfd8ce533, 0x56b5d745, vehicle, _r, _ri); 
}

/**
 * Dirt level does not become greater than 15.0
 * @param vehicle
 */
export function getVehicleDirtLevel(vehicle: number): number { 
	return _in(0x8f17bc8b, 0xa08da62b, vehicle, _r, _rf); 
}

/**
 * doorId: see SET_VEHICLE_DOOR_SHUT
 * @param vehicle
 * @param doorId
 */
export function getVehicleDoorAngleRatio(vehicle: number, doorId: number): number { 
	return _in(0xfe3f9c29, 0xf7b32bd5, vehicle, doorId, _r, _rf); 
}

/**
 * enum VehicleLockStatus = {
 * None = 0,
 * Unlocked = 1,
 * Locked = 2,
 * LockedForPlayer = 3,
 * StickPlayerInside = 4, -- Doesn't allow players to exit the vehicle with the exit vehicle key.
 * CanBeBrokenInto = 7, -- Can be broken into the car. If the glass is broken, the value will be set to 1
 * CanBeBrokenIntoPersist = 8, -- Can be broken into persist
 * CannotBeTriedToEnter = 10, -- Cannot be tried to enter (Nothing happens when you press the vehicle enter key).
 * }
 * @param vehicle
 */
export function getVehicleDoorLockStatus(vehicle: number): number { 
	return _in(0x25bc98a5, 0x9c2ea962, vehicle, _r, _ri); 
}

export function getVehicleDoorsLockedForPlayer(vehicle: number, player: number): boolean { 
	return _in(0xf6af6cb3, 0x41349015, vehicle, player, _r); 
}

/**
 * Returns the vehicle's drivetrain type.
 * 
 * enum eVehicleDrivetrainType
 * {
 * VehicleDrivetrainType_INVALID,
 * VehicleDrivetrainType_FWD,
 * VehicleDrivetrainType_RWD,
 * VehicleDrivetrainType_AWD
 * };
 * 
 * _GET_VEHICLE_DE* - _GET_VEHICLE_DI*
 * @param vehicleModel
 */
export function getVehicleDrivetrainType(vehicleModel: number): number { 
	return _in(0x14237250, 0x69ee1d14, _ch(vehicleModel), _r, _ri); 
}

/**
 * Returns 1000.0 if the function is unable to get the address of the specified vehicle or if it's not a vehicle.
 * 
 * Minimum: -4000
 * Maximum: 1000
 * 
 * -4000: Engine is destroyed
 * 0 and below: Engine catches fire and health rapidly declines
 * 300: Engine is smoking and losing functionality
 * 1000: Engine is perfect
 * @param vehicle
 */
export function getVehicleEngineHealth(vehicle: number): number { 
	return _in(0xc45d23ba, 0xf168aab8, vehicle, _r, _rf); 
}

/**
 * The result is a value from 0-1, where 0 is fresh paint.
 * @param vehicle
 */
export function getVehicleEnveffScale(vehicle: number): number { 
	return _in(0xa82819ca, 0xc9c4c403, vehicle, _r, _rf); 
}

export function getVehicleEstimatedMaxSpeed(vehicle: number): number { 
	return _in(0x53af99ba, 0xa671ca47, vehicle, _r, _rf); 
}

export function getVehicleExhaustBone(vehicle: number, index: number): [boolean, number, boolean] { 
	const [retval, boneIndex_out, axisX_out] = _in(0xe728f090, 0xd538cb18, vehicle, index, _i, _i, _r);
	return [retval as boolean, boneIndex_out as number, axisX_out as boolean]; 
}

export function getVehicleExtraColour5(vehicle: number, color: number): number { 
	return _in(0x7d1464d4, 0x72d32136, vehicle, _ii(color)); 
}

export function getVehicleExtraColour6(vehicle: number, color: number): number { 
	return _in(0xb7635e80, 0xa5c31bff, vehicle, _ii(color)); 
}

export function getVehicleExtraColours(vehicle: number): [number, number] { 
	const [pearlescentColor_out, wheelColor_out] = _in(0x3bc42459, 0x33a166f7, vehicle, _i, _i);
	return [pearlescentColor_out as number, wheelColor_out as number]; 
}

export function getVehicleFlightNozzlePosition(plane: number): number { 
	return _in(0xda62027c, 0x8bdb326e, plane, _r, _rf); 
}

/**
 * Returns true if the vehicle has a HF_HAS_KERS (strHandlingFlags 0x4) handing flag set, for instance the lectro/vindicator bikes or the open wheelers.
 * @param vehicle
 */
export function getVehicleHasKers(vehicle: number): boolean { 
	return _in(0x50634e34, 0x8c8d44ef, vehicle, _r); 
}

export function getVehicleHasLandingGear(vehicle: number): boolean { 
	return _in(0xe43701c3, 0x6caff1a4, vehicle, _r); 
}

export function getVehicleHasParachute(vehicle: number): boolean { 
	return _in(0xbc9cff38, 0x1338cb4f, vehicle, _r); 
}

/**
 * 0 min 100 max
 * starts at 100
 * Seams to have health zones
 * Front of vehicle when damaged goes from 100-50 and stops at 50.
 * Rear can be damaged from 100-0
 * Only tested with two cars.
 * 
 * any idea how this differs from the first one?
 * 
 * --
 * May return the vehicle health on a scale of 0.0 - 100.0 (needs to be confirmed)
 * 
 * example:
 * 
 * v_F = ENTITY::GET_ENTITY_MODEL(v_3);
 * if (((v_F == ${tanker}) || (v_F == ${armytanker})) || (v_F == ${tanker2})) {
 * if (VEHICLE::GET_VEHICLE_HEALTH_PERCENTAGE(v_3) <= 1.0) {
 * NETWORK::NETWORK_EXPLODE_VEHICLE(v_3, 1, 1, -1);
 * }
 * }
 * @param vehicle
 * @param maxEngineHealth
 * @param maxPetrolTankHealth
 * @param maxBodyHealth
 * @param maxMainRotorHealth
 * @param maxTailRotorHealth
 * @param maxUnkHealth
 */
export function getVehicleHealthPercentage(vehicle: number, maxEngineHealth: number, maxPetrolTankHealth: number, maxBodyHealth: number, maxMainRotorHealth: number, maxTailRotorHealth: number, maxUnkHealth: number): number { 
	return _in(0xb8ef6120, 0x7c2393a9, vehicle, _fv(maxEngineHealth), _fv(maxPetrolTankHealth), _fv(maxBodyHealth), _fv(maxMainRotorHealth), _fv(maxTailRotorHealth), _fv(maxUnkHealth), _r, _rf); 
}

export function getVehicleHomingLockedontoState(p0: number): number { 
	return _in(0x6eaaefc7, 0x6acc311f, p0, _r, _ri); 
}

/**
 * Returns a value depending on the lock-on state of vehicle weapons.
 * 0: not locked on
 * 1: locking on
 * 2: locked on
 * @param vehicle
 */
export function getVehicleHomingLockonState(vehicle: number): number { 
	return _in(0xe6b0e8cf, 0xc3633bf0, vehicle, _r, _ri); 
}

export function getVehicleHornSoundIndex(vehicle: number): number { 
	return _in(0xd53f3a29, 0xbce2580e, vehicle, _r, _ri); 
}

/**
 * Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
 * @param entity
 */
export function getVehicleIndexFromEntityIndex(entity: number): number { 
	return _in(0x4b53f929, 0x32adfac0, entity, _r, _ri); 
}

/**
 * Returns vehicle door lock state previously set with SET_VEHICLE_INDIVIDUAL_DOORS_LOCKED
 * @param vehicle
 * @param doorId
 */
export function getVehicleIndividualDoorLockStatus(vehicle: number, doorId: number): number { 
	return _in(0xca4ac3ea, 0xae46ec7b, vehicle, doorId, _r, _ri); 
}

export function getVehicleIsDummy(p0: number): boolean { 
	return _in(0x8533cafd, 0xe1f0f336, p0, _r); 
}

export function getVehicleIsMercenary(vehicle: number): boolean { 
	return _in(0xd4c4642c, 0xb7f50b5d, vehicle, _r); 
}

/**
 * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
 * @param vehicle
 */
export function getVehicleLayoutHash(vehicle: number): number { 
	return _in(0x28d37d4f, 0x71ac5c58, vehicle, _r, _ri); 
}

export function getVehicleLightsState(vehicle: number): [boolean, boolean, boolean] { 
	const [retval, lightsOn_out, highbeamsOn_out] = _in(0xb91b4c20, 0x085bd12f, vehicle, _i, _i, _r);
	return [retval as boolean, lightsOn_out as boolean, highbeamsOn_out as boolean]; 
}

/**
 * -1 = no livery
 * @param vehicle
 */
export function getVehicleLivery(vehicle: number): number { 
	return _in(0x2bb92305, 0x90da5e8a, vehicle, _r, _ri); 
}

/**
 * Returns index of the current vehicle's secondary livery. A getter for SET_VEHICLE_LIVERY2.
 * @param vehicle
 */
export function getVehicleLivery2(vehicle: number): number { 
	return _in(0x60190048, 0xc0764a26, vehicle, _r, _ri); 
}

/**
 * Returns a number of available secondary liveries, or -1 if vehicle has no secondary liveries available.
 * @param vehicle
 */
export function getVehicleLivery2Count(vehicle: number): number { 
	return _in(0x5ecb4026, 0x9053c0d4, vehicle, _r, _ri); 
}

/**
 * Returns -1 if the vehicle has no livery
 * @param vehicle
 */
export function getVehicleLiveryCount(vehicle: number): number { 
	return _in(0x87b63e25, 0xa529d526, vehicle, _r, _ri); 
}

export function getVehicleLockOnTarget(vehicle: number, entity: number): [boolean, number] { 
	const [retval, entity_out] = _in(0x8f5ebab1, 0xf260cfce, vehicle, _ii(entity), _r);
	return [retval as boolean, entity_out as number]; 
}

export function getVehicleMaxBraking(vehicle: number): number { 
	return _in(0xad7e85fc, 0x227197c4, vehicle, _r, _rf); 
}

export function getVehicleMaxDriveGearCount(vehicle: number): number { 
	return _in(0x24910c3d, 0x66ba770d, vehicle, _r, _ri); 
}

export function getVehicleMaxExhaustBoneCount(): number { 
	return _in(0x3ee18b00, 0xcd86c54f, _r, _ri); 
}

export function getVehicleMaxNumberOfPassengers(vehicle: number): number { 
	return _in(0xa7c4f2c6, 0xe744a550, vehicle, _r, _ri); 
}

export function getVehicleMaxTraction(vehicle: number): number { 
	return _in(0xa132fb53, 0x70554db0, vehicle, _r, _rf); 
}

/**
 * In b944, there are 50 (0 - 49) mod types. See SET_VEHICLE_MOD for the list.
 * 
 * Returns -1 if the vehicle mod is stock
 * @param vehicle
 * @param modType
 */
export function getVehicleMod(vehicle: number, modType: number): number { 
	return _in(0x77296029, 0x8da26fdb, vehicle, modType, _r, _ri); 
}

export function getVehicleModColor1(vehicle: number): [number, number, number] { 
	const [paintType_out, color_out, pearlescentColor_out] = _in(0xe8d65ca7, 0x00c9a693, vehicle, _i, _i, _i);
	return [paintType_out as number, color_out as number, pearlescentColor_out as number]; 
}

/**
 * Returns a string which is the codename of the vehicle's currently selected primary color
 * 
 * p1 is always 0
 * @param vehicle
 * @param p1
 */
export function getVehicleModColor1Name(vehicle: number, p1: boolean): string { 
	return _in(0xb45085b7, 0x21efd38c, vehicle, p1, _r, _s); 
}

export function getVehicleModColor2(vehicle: number): [number, number] { 
	const [paintType_out, color_out] = _in(0x81592be4, 0xe3878728, vehicle, _i, _i);
	return [paintType_out as number, color_out as number]; 
}

/**
 * Returns a string which is the codename of the vehicle's currently selected secondary color
 * @param vehicle
 */
export function getVehicleModColor2Name(vehicle: number): string { 
	return _in(0x4967a516, 0xed23a5a1, vehicle, _r, _s); 
}

/**
 * Can be used for IS_DLC_VEHICLE_MOD and GET_DLC_VEHICLE_MOD_LOCK_HASH
 * @param vehicle
 * @param modType
 * @param modIndex
 */
export function getVehicleModIdentifierHash(vehicle: number, modType: number, modIndex: number): number { 
	return _in(0x4593cf82, 0xaa179706, vehicle, modType, modIndex, _r, _ri); 
}

export function getVehicleModKit(vehicle: number): number { 
	return _in(0x6325d1a0, 0x44ae510d, vehicle, _r, _ri); 
}

export function getVehicleModKitType(vehicle: number): number { 
	return _in(0xfc058f51, 0x21e54c32, vehicle, _r, _ri); 
}

export function getVehicleModModifierValue(vehicle: number, modType: number, modIndex: number): number { 
	return _in(0x90a38e98, 0x38e0a8c1, vehicle, modType, modIndex, _r, _ri); 
}

/**
 * Only used for wheels(ModType = 23/24) Returns true if the wheels are custom wheels
 * @param vehicle
 * @param modType
 */
export function getVehicleModVariation(vehicle: number, modType: number): number { 
	return _in(0xb3924ecd, 0x70e095dc, vehicle, modType, _r, _ri); 
}

/**
 * Returns the acceleration of the specified model.
 * 
 * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
 * @param modelHash
 */
export function getVehicleModelAcceleration(modelHash: number): number { 
	return _in(0x8c044c5c, 0x84505b6a, _ch(modelHash), _r, _rf); 
}

/**
 * 9.8 * thrust if air vehicle, else 0.38 + drive force?
 * 
 * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
 * @param modelHash
 */
export function getVehicleModelAccelerationMaxMods(modelHash: number): number { 
	return _in(0x53409b51, 0x63d5b846, _ch(modelHash), _r, _rf); 
}

/**
 * Returns max speed (without mods) of the specified vehicle model in m/s.
 * 
 * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
 * @param modelHash
 */
export function getVehicleModelEstimatedMaxSpeed(modelHash: number): number { 
	return _in(0xf417c250, 0x2fffed43, _ch(modelHash), _r, _rf); 
}

/**
 * Returns max braking of the specified vehicle model.
 * 
 * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
 * @param modelHash
 */
export function getVehicleModelMaxBraking(modelHash: number): number { 
	return _in(0xdc53fd41, 0xb4ed944c, _ch(modelHash), _r, _rf); 
}

/**
 * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
 * @param modelHash
 */
export function getVehicleModelMaxBrakingMaxMods(modelHash: number): number { 
	return _in(0xbfba3ba7, 0x9cff7ebf, _ch(modelHash), _r, _rf); 
}

/**
 * Returns max traction of the specified vehicle model.
 * 
 * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
 * @param modelHash
 */
export function getVehicleModelMaxTraction(modelHash: number): number { 
	return _in(0x539de94d, 0x44fdfd0d, _ch(modelHash), _r, _rf); 
}

export function getVehicleModelNumDriveGears(vehicleModel: number): number { 
	return _in(0x61f02e4e, 0x9a7a61ea, _ch(vehicleModel), _r, _ri); 
}

/**
 * Returns max number of passengers (including the driver) for the specified vehicle model.
 * 
 * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
 * @param modelHash
 */
export function getVehicleModelNumberOfSeats(modelHash: number): number { 
	return _in(0x2ad93716, 0xf184eda4, _ch(modelHash), _r, _ri); 
}

/**
 * Returns `nMonetaryValue` from handling.meta for specific model.
 * @param vehicleModel
 */
export function getVehicleModelValue(vehicleModel: number): number { 
	return _in(0x5873c14a, 0x52d74236, _ch(vehicleModel), _r, _ri); 
}

/**
 * Gets the color of the neon lights of the specified vehicle.
 * 
 * See SET_VEHICLE_NEON_COLOUR (0x8E0A582209A62695) for more information
 * @param vehicle
 * @param r
 * @param g
 * @param b
 */
export function getVehicleNeonColour(vehicle: number): [number, number, number] { 
	const [r_out, g_out, b_out] = _in(0x7619eee8, 0xc886757f, vehicle, _i, _i, _i);
	return [r_out as number, g_out as number, b_out as number]; 
}

/**
 * indices:
 * 0 = Left
 * 1 = Right
 * 2 = Front
 * 3 = Back
 * @param vehicle
 * @param index
 */
export function getVehicleNeonEnabled(vehicle: number, index: number): boolean { 
	return _in(0x8c4b9255, 0x3e4766a5, vehicle, index, _r); 
}

/**
 * Returns false for nodes that aren't used for GPS routes.
 * Example:
 * Nodes in Fort Zancudo and LSIA are false
 * @param nodeID
 */
export function getVehicleNodeIsGpsAllowed(nodeID: number): boolean { 
	return _in(0xa2ae5c47, 0x8b96e3b6, nodeID, _r); 
}

/**
 * Returns true when the node is Offroad. Alleys, some dirt roads, and carparks return true.
 * Normal roads where plenty of Peds spawn will return false
 * @param nodeID
 */
export function getVehicleNodeIsSwitchedOff(nodeID: number): boolean { 
	return _in(0x4f5070aa, 0x58f69279, nodeID, _r); 
}

/**
 * Calling this with an invalid node id, will crash the game.
 * Note that IS_VEHICLE_NODE_ID_VALID simply checks if nodeId is not zero. It does not actually ensure that the id is valid.
 * Eg. IS_VEHICLE_NODE_ID_VALID(1) will return true, but will crash when calling GET_VEHICLE_NODE_POSITION().
 * @param nodeId
 * @param outPosition
 */
export function getVehicleNodePosition(nodeId: number, outPosition: Vector3): Vector3 { 
	return _in(0x703123e5, 0xe7d429c2, nodeId, _v); 
}

/**
 * Gets the density and flags of the closest node to the specified position.
 * Density is a value between 0 and 15, indicating how busy the road is.
 * Flags is a bit field.
 * @param x
 * @param y
 * @param z
 * @param density
 * @param flags
 */
export function getVehicleNodeProperties(x: number, y: number, z: number): [boolean, number, number] { 
	const [retval, density_out, flags_out] = _in(0x0568566a, 0xcbb5dedc, _fv(x), _fv(y), _fv(z), _i, _i, _r);
	return [retval as boolean, density_out as number, flags_out as number]; 
}

export function getVehicleNumOfBrokenLoosenParts(vehicle: number): number { 
	return _in(0x2c8cbfe1, 0xea5fc631, vehicle, _r, _ri); 
}

/**
 * Also includes some "turnOffBones" when vehicle mods are installed.
 * @param vehicle
 */
export function getVehicleNumOfBrokenOffParts(vehicle: number): number { 
	return _in(0x42a4beb3, 0x5d372407, vehicle, _r, _ri); 
}

/**
 * Gets the number of passengers.
 * 
 * This native was modified in b2545 to take two additional parameters, allowing you to include the driver or exclude dead passengers.
 * 
 * To keep it working like before b2545, set includeDriver to false and includeDeadOccupants to true.
 * @param vehicle
 * @param includeDriver
 * @param includeDeadOccupants
 */
export function getVehicleNumberOfPassengers(vehicle: number, includeDriver: boolean, includeDeadOccupants: boolean): number { 
	return _in(0x24cb2137, 0x731ffe89, vehicle, includeDriver, includeDeadOccupants, _r, _ri); 
}

/**
 * Returns the license plate text from a vehicle. 8 chars maximum.
 * @param vehicle
 */
export function getVehicleNumberPlateText(vehicle: number): string { 
	return _in(0x7ce1ccb9, 0xb293020e, vehicle, _r, _s); 
}

/**
 * Returns the PlateType of a vehicle
 * Blue_on_White_1 = 3,
 * Blue_on_White_2 = 0,
 * Blue_on_White_3 = 4,
 * Yellow_on_Blue = 2,
 * Yellow_on_Black = 1,
 * North_Yankton = 5,
 * @param vehicle
 */
export function getVehicleNumberPlateTextIndex(vehicle: number): number { 
	return _in(0xf11bc2dd, 0x9a3e7195, vehicle, _r, _ri); 
}

export function getVehiclePedIsEntering(ped: number): number { 
	return _in(0xf92691ae, 0xd837a5fc, ped, _r, _ri); 
}

/**
 * Gets the vehicle the specified Ped is in. Returns 0 if the ped is/was not in a vehicle.
 * @param ped
 * @param includeEntering
 */
export function getVehiclePedIsIn(ped: number, includeEntering: boolean): number { 
	return _in(0x9a9112a0, 0xfe9a4713, ped, includeEntering, _r, _ri); 
}

export function getVehiclePedIsTryingToEnter(ped: number): number { 
	return _in(0x814fa8be, 0x5449445d, ped, _r, _ri); 
}

/**
 * Gets ID of vehicle player using. It means it can get ID at any interaction with vehicle. Enter\exit for example. And that means it is faster than GET_VEHICLE_PED_IS_IN but less safe.
 * @param ped
 */
export function getVehiclePedIsUsing(ped: number): number { 
	return _in(0x6094ad01, 0x1a2ea87d, ped, _r, _ri); 
}

/**
 * 1000 is max health
 * Begins leaking gas at around 650 health
 * -999.90002441406 appears to be minimum health, although nothing special occurs
 * @param vehicle
 */
export function getVehiclePetrolTankHealth(vehicle: number): number { 
	return _in(0x7d5dabe8, 0x88d2d074, vehicle, _r, _rf); 
}

export function getVehiclePlateType(vehicle: number): number { 
	return _in(0x9ccc9525, 0xbf2408e0, vehicle, _r, _ri); 
}

/**
 * See REQUEST_VEHICLE_RECORDING
 * @param recording
 * @param script
 */
export function getVehicleRecordingId(recording: number, script: string): number { 
	return _in(0x21543c61, 0x2379db3c, recording, _ts(script), _r, _ri); 
}

/**
 * Outputs 2 Vector3's.
 * Scripts check if out2.x - out1.x > someshit.x
 * Could be suspension related, as in max suspension height and min suspension height, considering the natives location.
 * @param vehicle
 * @param out1
 * @param out2
 */
export function getVehicleSize(vehicle: number): [Vector3, Vector3] { 
	const [out1_out, out2_out] = _in(0xdf7e3eeb, 0x29642c38, vehicle, _v, _v);
	return [_mv(out1_out), _mv(out2_out)]; 
}

export function getVehicleThrottle(vehicle: number): number { 
	return _in(0x92d96892, 0xfc06af22, vehicle, _r, _rf); 
}

export function getVehicleTrailerParentVehicle(trailer: number): number { 
	return _in(0x80d9d326, 0x36369c92, trailer, _r, _ri); 
}

/**
 * Gets the trailer of a vehicle and puts it into the trailer parameter.
 * @param vehicle
 * @param trailer
 */
export function getVehicleTrailerVehicle(vehicle: number, trailer: number): [boolean, number] { 
	const [retval, trailer_out] = _in(0x1cdd6bad, 0xc297830d, vehicle, _ii(trailer), _r);
	return [retval as boolean, trailer_out as number]; 
}

export function getVehicleTyreSmokeColor(vehicle: number): [number, number, number] { 
	const [r_out, g_out, b_out] = _in(0xb635392a, 0x4938b3c3, vehicle, _i, _i, _i);
	return [r_out as number, g_out as number, b_out as number]; 
}

export function getVehicleTyresCanBurst(vehicle: number): boolean { 
	return _in(0x678b9bb8, 0xc3f58feb, vehicle, _r); 
}

export function getVehicleWaypointProgress(vehicle: number): number { 
	return _in(0x9824cff8, 0xfc66e159, vehicle, _r, _ri); 
}

export function getVehicleWaypointTargetPoint(vehicle: number): number { 
	return _in(0x416b62ac, 0x8b9e5bbd, vehicle, _r, _ri); 
}

export function getVehicleWeaponReloadTime(vehicle: number, seat: number): number { 
	return _in(0xd0ad348f, 0xfd7a6868, vehicle, seat, _r, _rf); 
}

export function getVehicleWeaponRestrictedAmmo(vehicle: number, weaponIndex: number): number { 
	return _in(0x8181ce2f, 0x25cb9bb7, vehicle, weaponIndex, _r, _ri); 
}

/**
 * Returns an int
 * 
 * Wheel Types:
 * 0: Sport
 * 1: Muscle
 * 2: Lowrider
 * 3: SUV
 * 4: Offroad
 * 5: Tuner
 * 6: Bike Wheels
 * 7: High End
 * 8: Benny's Originals
 * 9: Benny's Bespoke
 * 10: Racing
 * 11: Street
 * 12: Track
 * 
 * Tested in Los Santos Customs
 * @param vehicle
 */
export function getVehicleWheelType(vehicle: number): number { 
	return _in(0xb3ed1bfb, 0x4be636dc, vehicle, _r, _ri); 
}

export function getVehicleWindowTint(vehicle: number): number { 
	return _in(0x0ee21293, 0xdad47c95, vehicle, _r, _ri); 
}

/**
 * Returns the headlight color index from the vehicle. Value between 0, 12.
 * Use SET_VEHICLE_XENON_LIGHT_COLOR_INDEX to set the headlights color for the vehicle.
 * Must enable xenon headlights before it'll take affect.
 * 
 * Returns an int, value between 0-12 or 255 if no color is set.
 * @param vehicle
 */
export function getVehicleXenonLightColorIndex(vehicle: number): number { 
	return _in(0x3dff319a, 0x831e0cdb, vehicle, _r, _ri); 
}

/**
 * Remnant from GTA IV. Does nothing in GTA V.
 * @param player
 */
export function getWantedLevelRadius(player: number): number { 
	return _in(0x085deb49, 0x3be80812, player, _r, _rf); 
}

/**
 * Drft
 * @param wantedLevel
 */
export function getWantedLevelThreshold(wantedLevel: number): number { 
	return _in(0xfdd179ea, 0xf45b556c, wantedLevel, _r, _ri); 
}

export function getWantedLevelTimeToEscape(): number { 
	return _in(0xa72200f5, 0x1875fea4, _r, _ri); 
}

/**
 * Has to do with the confirmation overlay (E.g. confirm exit)
 */
export function getWarningScreenMessageHash(): number { 
	return _in(0x81df9aba, 0x6c83dff9, _r, _ri); 
}

/**
 * This function set height to the value of z-axis of the water surface.
 * 
 * This function works with sea and lake. However it does not work with shallow rivers (e.g. raton canyon will return -100000.0f)
 * 
 * note: seems to return true when you are in water
 * @param x
 * @param y
 * @param z
 * @param height
 */
export function getWaterHeight(x: number, y: number, z: number, height: number): [boolean, number] { 
	const [retval, height_out] = _in(0xf6829842, 0xc06ae524, _fv(x), _fv(y), _fv(z), _fi(height), _r);
	return [retval as boolean, height_out as number]; 
}

export function getWaterHeightNoWaves(x: number, y: number, z: number, height: number): [boolean, number] { 
	const [retval, height_out] = _in(0x8ee6b53c, 0xe13a9794, _fv(x), _fv(y), _fv(z), _fi(height), _r);
	return [retval as boolean, height_out as number]; 
}

export function getWaypointBlipEnumId(): number { 
	return _in(0x186e5d25, 0x2fa50e7d, _r, _ri); 
}

export function getWaypointDistanceAlongRoute(name: string, point: number): number { 
	return _in(0xa5b76905, 0x8763e497, _ts(name), point, _r, _rf); 
}

/**
 * // Returns the size of the default weapon component clip.
 * 
 * Use it like this:
 * 
 * char cClipSize[32];
 * Hash cur;
 * if (WEAPON::GET_CURRENT_PED_WEAPON(playerPed, &cur, 1))
 * {
 * if (WEAPON::IS_WEAPON_VALID(cur))
 * {
 * int iClipSize = WEAPON::GET_WEAPON_CLIP_SIZE(cur);
 * sprintf_s(cClipSize, "ClipSize: %.d", iClipSize);
 * vDrawString(cClipSize, 0.5f, 0.5f);
 * }
 * }
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param weaponHash
 */
export function getWeaponClipSize(weaponHash: number): number { 
	return _in(0x583be370, 0xb1ec6eb4, _ch(weaponHash), _r, _ri); 
}

export function getWeaponComponentHudStats(componentHash: number, outData: number): [boolean, number] { 
	const [retval, outData_out] = _in(0xb3caf387, 0xae12e9f8, _ch(componentHash), _ii(outData), _r);
	return [retval as boolean, outData_out as number]; 
}

export function getWeaponComponentTypeModel(componentHash: number): number { 
	return _in(0x0db57b41, 0xec1db083, _ch(componentHash), _r, _ri); 
}

/**
 * Returns the amount of extra components the specified component has.
 * Returns -1 if the component isn't of type CWeaponComponentVariantModel.
 * @param componentHash
 */
export function getWeaponComponentVariantExtraCount(componentHash: number): number { 
	return _in(0x6558ac7c, 0x17bfef58, _ch(componentHash), _r, _ri); 
}

/**
 * Returns the model hash of the extra component at specified index.
 * @param componentHash
 * @param extraComponentIndex
 */
export function getWeaponComponentVariantExtraModel(componentHash: number, extraComponentIndex: number): number { 
	return _in(0x4d1cb8dc, 0x40208a17, _ch(componentHash), extraComponentIndex, _r, _ri); 
}

/**
 * This native does not return damages of weapons from the melee and explosive group.
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param weaponHash
 * @param componentHash
 */
export function getWeaponDamage(weaponHash: number, componentHash: number): number { 
	return _in(0x3133b907, 0xd8b32053, _ch(weaponHash), _ch(componentHash), _r, _rf); 
}

/**
 * enum class eDamageType
 * {
 * UNKNOWN = 0,
 * NONE = 1,
 * MELEE = 2,
 * BULLET = 3,
 * BULLET_RUBBER = 4,
 * EXPLOSIVE = 5,
 * FIRE = 6,
 * COLLISION = 7,
 * FALL = 8,
 * DROWN = 9,
 * ELECTRIC = 10,
 * BARBED_WIRE = 11,
 * FIRE_EXTINGUISHER = 12,
 * SMOKE = 13,
 * WATER_CANNON = 14,
 * TRANQUILIZER = 15,
 * };
 * 
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param weaponHash
 */
export function getWeaponDamageType(weaponHash: number): number { 
	return _in(0x3be0bb12, 0xd25fb305, _ch(weaponHash), _r, _ri); 
}

/**
 * struct WeaponHudStatsData
 * {
 * BYTE hudDamage; // 0x0000
 * char _0x0001[0x7]; // 0x0001
 * BYTE hudSpeed; // 0x0008
 * char _0x0009[0x7]; // 0x0009
 * BYTE hudCapacity; // 0x0010
 * char _0x0011[0x7]; // 0x0011
 * BYTE hudAccuracy; // 0x0018
 * char _0x0019[0x7]; // 0x0019
 * BYTE hudRange; // 0x0020
 * };
 * 
 * Usage:
 * 
 * WeaponHudStatsData data;
 * if (GET_WEAPON_HUD_STATS(weaponHash, (int *)&data))
 * {
 * // BYTE damagePercentage = data.hudDamage and so on
 * }
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param weaponHash
 * @param outData
 */
export function getWeaponHudStats(weaponHash: number, outData: number): [boolean, number] { 
	const [retval, outData_out] = _in(0xd92c739e, 0xe34c9eba, _ch(weaponHash), _ii(outData), _r);
	return [retval as boolean, outData_out as number]; 
}

/**
 * Returns -1 if camoComponentHash is invalid/not attached to the weapon object.
 * Full list of weapons, components, tint indexes & weapon liveries by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param weaponObject
 * @param camoComponentHash
 */
export function getWeaponObjectComponentTintIndex(weaponObject: number, camoComponentHash: number): number { 
	return _in(0xb3ea4fea, 0xbf41464b, weaponObject, _ch(camoComponentHash), _r, _ri); 
}

/**
 * Drops the current weapon and returns the object
 * 
 * Unknown behavior when unarmed.
 * @param ped
 * @param p1
 */
export function getWeaponObjectFromPed(ped: number, p1: boolean): number { 
	return _in(0xcae1dc9a, 0x0e22a16d, ped, p1, _r, _ri); 
}

export function getWeaponObjectTintIndex(weapon: number): number { 
	return _in(0xcd183314, 0xf7cd2e57, weapon, _r, _ri); 
}

/**
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param weaponHash
 */
export function getWeaponTimeBetweenShots(weaponHash: number): number { 
	return _in(0x065d2aac, 0xad8cf7a4, _ch(weaponHash), _r, _rf); 
}

/**
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param weaponHash
 */
export function getWeaponTintCount(weaponHash: number): number { 
	return _in(0x5dcf6c5c, 0xab2e9bf7, _ch(weaponHash), _r, _ri); 
}

/**
 * Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
 * @param pickupHash
 */
export function getWeaponTypeFromPickupType(pickupHash: number): number { 
	return _in(0x08f96ca6, 0xc551ad51, _ch(pickupHash), _r, _ri); 
}

export function getWeapontypeGroup(weaponHash: number): number { 
	return _in(0xc3287ee3, 0x050fb74c, _ch(weaponHash), _r, _ri); 
}

/**
 * Returns the model of any weapon.
 * 
 * Can also take an ammo hash?
 * sub_6663a(&l_115B, WEAPON::GET_WEAPONTYPE_MODEL(${ammo_rpg}));
 * @param weaponHash
 */
export function getWeapontypeModel(weaponHash: number): number { 
	return _in(0xf46cdc33, 0x180fda94, _ch(weaponHash), _r, _ri); 
}

export function getWeapontypeSlot(weaponHash: number): number { 
	return _in(0x4215460b, 0x9b8b7fa0, _ch(weaponHash), _r, _ri); 
}

export function getWindDirection(): Vector3 { 
	return _mv(_in(0x1f400fef, 0x721170da, _r, _rv)); 
}

export function getWindSpeed(): number { 
	return _in(0xa8cf1cc0, 0xafcd3f12, _r, _rf); 
}

/**
 * Returns the coordinates of an entity-bone.
 * @param entity
 * @param boneIndex
 */
export function getWorldPositionOfEntityBone(entity: number, boneIndex: number): Vector3 { 
	return _mv(_in(0x44a8fcb8, 0xed227738, entity, boneIndex, _r, _rv)); 
}

export function getZoneAtCoords(x: number, y: number, z: number): number { 
	return _in(0x27040c25, 0xde6cb2f4, _fv(x), _fv(y), _fv(z), _r, _ri); 
}

/**
 * 'zoneName' corresponds to an entry in 'popzone.ipl'.
 * 
 * AIRP = Los Santos International Airport
 * ALAMO = Alamo Sea
 * ALTA = Alta
 * ARMYB = Fort Zancudo
 * BANHAMC = Banham Canyon Dr
 * BANNING = Banning
 * BEACH = Vespucci Beach
 * BHAMCA = Banham Canyon
 * BRADP = Braddock Pass
 * BRADT = Braddock Tunnel
 * BURTON = Burton
 * CALAFB = Calafia Bridge
 * CANNY = Raton Canyon
 * CCREAK = Cassidy Creek
 * CHAMH = Chamberlain Hills
 * CHIL = Vinewood Hills
 * CHU = Chumash
 * CMSW = Chiliad Mountain State Wilderness
 * CYPRE = Cypress Flats
 * DAVIS = Davis
 * DELBE = Del Perro Beach
 * DELPE = Del Perro
 * DELSOL = La Puerta
 * DESRT = Grand Senora Desert
 * DOWNT = Downtown
 * DTVINE = Downtown Vinewood
 * EAST_V = East Vinewood
 * EBURO = El Burro Heights
 * ELGORL = El Gordo Lighthouse
 * ELYSIAN = Elysian Island
 * GALFISH = Galilee
 * GOLF = GWC and Golfing Society
 * GRAPES = Grapeseed
 * GREATC = Great Chaparral
 * HARMO = Harmony
 * HAWICK = Hawick
 * HORS = Vinewood Racetrack
 * HUMLAB = Humane Labs and Research
 * JAIL = Bolingbroke Penitentiary
 * KOREAT = Little Seoul
 * LACT = Land Act Reservoir
 * LAGO = Lago Zancudo
 * LDAM = Land Act Dam
 * LEGSQU = Legion Square
 * LMESA = La Mesa
 * LOSPUER = La Puerta
 * MIRR = Mirror Park
 * MORN = Morningwood
 * MOVIE = Richards Majestic
 * MTCHIL = Mount Chiliad
 * MTGORDO = Mount Gordo
 * MTJOSE = Mount Josiah
 * MURRI = Murrieta Heights
 * NCHU = North Chumash
 * NOOSE = N.O.O.S.E
 * OCEANA = Pacific Ocean
 * PALCOV = Paleto Cove
 * PALETO = Paleto Bay
 * PALFOR = Paleto Forest
 * PALHIGH = Palomino Highlands
 * PALMPOW = Palmer-Taylor Power Station
 * PBLUFF = Pacific Bluffs
 * PBOX = Pillbox Hill
 * PROCOB = Procopio Beach
 * RANCHO = Rancho
 * RGLEN = Richman Glen
 * RICHM = Richman
 * ROCKF = Rockford Hills
 * RTRAK = Redwood Lights Track
 * SANAND = San Andreas
 * SANCHIA = San Chianski Mountain Range
 * SANDY = Sandy Shores
 * SKID = Mission Row
 * SLAB = Stab City
 * STAD = Maze Bank Arena
 * STRAW = Strawberry
 * TATAMO = Tataviam Mountains
 * TERMINA = Terminal
 * TEXTI = Textile City
 * TONGVAH = Tongva Hills
 * TONGVAV = Tongva Valley
 * VCANA = Vespucci Canals
 * VESP = Vespucci
 * VINE = Vinewood
 * WINDF = Ron Alternates Wind Farm
 * WVINE = West Vinewood
 * ZANCUDO = Zancudo River
 * ZP_ORT = Port of South Los Santos
 * ZQ_UAR = Davis Quartz
 * 
 * Full list of zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/zones.json
 * @param zoneName
 */
export function getZoneFromNameId(zoneName: string): number { 
	return _in(0x98cd1d29, 0x34b76cc1, _ts(zoneName), _r, _ri); 
}

export function getZonePopschedule(zoneId: number): number { 
	return _in(0x4334bc40, 0xaa0cb4bb, zoneId, _r, _ri); 
}

/**
 * cellphone range 1- 5 used for signal bar in iFruit phone
 * @param zoneId
 */
export function getZoneScumminess(zoneId: number): number { 
	return _in(0x5f7b268d, 0x15ba0739, zoneId, _r, _ri); 
}

/**
 * 1 - Welcome to Los Santos
 * 2 - A Friendship Resurrected
 * 3 - A Fair Day's Pay
 * 4 - The Moment of Truth
 * 5 - To Live or Die in Los Santos
 * 6 - Diamond Hard
 * 7 - Subversive
 * 8 - Blitzed
 * 9 - Small Town, Big Job
 * 10 - The Government Gimps
 * 11 - The Big One!
 * 12 - Solid Gold, Baby!
 * 13 - Career Criminal
 * 14 - San Andreas Sightseer
 * 15 - All's Fare in Love and War
 * 16 - TP Industries Arms Race
 * 17 - Multi-Disciplined
 * 18 - From Beyond the Stars
 * 19 - A Mystery, Solved
 * 20 - Waste Management
 * 21 - Red Mist
 * 22 - Show Off
 * 23 - Kifflom!
 * 24 - Three Man Army
 * 25 - Out of Your Depth
 * 26 - Altruist Acolyte
 * 27 - A Lot of Cheddar
 * 28 - Trading Pure Alpha
 * 29 - Pimp My Sidearm
 * 30 - Wanted: Alive Or Alive
 * 31 - Los Santos Customs
 * 32 - Close Shave
 * 33 - Off the Plane
 * 34 - Three-Bit Gangster
 * 35 - Making Moves
 * 36 - Above the Law
 * 37 - Numero Uno
 * 38 - The Midnight Club
 * 39 - Unnatural Selection
 * 40 - Backseat Driver
 * 41 - Run Like The Wind
 * 42 - Clean Sweep
 * 43 - Decorated
 * 44 - Stick Up Kid
 * 45 - Enjoy Your Stay
 * 46 - Crew Cut
 * 47 - Full Refund
 * 48 - Dialling Digits
 * 49 - American Dream
 * 50 - A New Perspective
 * 51 - Be Prepared
 * 52 - In the Name of Science
 * 53 - Dead Presidents
 * 54 - Parole Day
 * 55 - Shot Caller
 * 56 - Four Way
 * 57 - Live a Little
 * 58 - Can't Touch This
 * 59 - Mastermind
 * 60 - Vinewood Visionary
 * 61 - Majestic
 * 62 - Humans of Los Santos
 * 63 - First Time Director
 * 64 - Animal Lover
 * 65 - Ensemble Piece
 * 66 - Cult Movie
 * 67 - Location Scout
 * 68 - Method Actor
 * 69 - Cryptozoologist
 * 70 - Getting Started
 * 71 - The Data Breaches
 * 72 - The Bogdan Problem
 * 73 - The Doomsday Scenario
 * 74 - A World Worth Saving
 * 75 - Orbital Obliteration
 * 76 - Elitist
 * 77 - Masterminds
 * @param achievementId
 */
export function giveAchievementToPlayer(achievementId: number): boolean { 
	return _in(0xbec7076d, 0x64130195, achievementId, _r); 
}

/**
 * Gives a weapon to PED with a delay, example:
 * 
 * WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PED::PLAYER_PED_ID(), MISC::GET_HASH_KEY("WEAPON_PISTOL"), 1000, false)
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param ammoCount
 * @param bForceInHand
 */
export function giveDelayedWeaponToPed(ped: number, weaponHash: number, ammoCount: number, bForceInHand: boolean): void { 
	return _in(0xb282dc6e, 0xbd803c75, ped, _ch(weaponHash), ammoCount, bForceInHand); 
}

/**
 * Gives the specified loadout to the specified ped.
 * Loadouts are defined in common.rpf\data\ai\loadouts.meta
 * @param ped
 * @param loadoutHash
 */
export function giveLoadoutToPed(ped: number, loadoutHash: number): void { 
	return _in(0x68f8be6a, 0xf5cdf8a6, ped, _ch(loadoutHash)); 
}

/**
 * PoliceMotorcycleHelmet   1024
 * RegularMotorcycleHelmet   4096
 * FiremanHelmet 16384
 * PilotHeadset  32768
 * PilotHelmet   65536
 * --
 * p2 is generally 4096 or 16384 in the scripts. p1 varies between 1 and 0.
 * @param ped
 * @param cannotRemove
 * @param helmetFlag
 * @param textureIndex
 */
export function givePedHelmet(ped: number, cannotRemove: boolean, helmetFlag: number, textureIndex: number): void { 
	return _in(0x54c7c4a9, 0x4367717e, ped, cannotRemove, helmetFlag, textureIndex); 
}

/**
 * Sends the message that was created by a call to CREATE_NM_MESSAGE to the specified Ped.
 * 
 * If a message hasn't been created already, this function does nothing.
 * If the Ped is not ragdolled with Euphoria enabled, this function does nothing.
 * The following call can be used to ragdoll the Ped with Euphoria enabled: SET_PED_TO_RAGDOLL(ped, 4000, 5000, 1, 1, 1, 0);
 * 
 * Call order:
 * SET_PED_TO_RAGDOLL
 * CREATE_NM_MESSAGE
 * GIVE_PED_NM_MESSAGE
 * 
 * Multiple messages can be chained. Eg. to make the ped stagger and swing his arms around, the following calls can be made:
 * SET_PED_TO_RAGDOLL(ped, 4000, 5000, 1, 1, 1, 0);
 * CREATE_NM_MESSAGE(true, 0); // stopAllBehaviours - Stop all other behaviours, in case the Ped is already doing some Euphoria stuff.
 * GIVE_PED_NM_MESSAGE(ped); // Dispatch message to Ped.
 * CREATE_NM_MESSAGE(true, 1151); // staggerFall - Attempt to walk while falling.
 * GIVE_PED_NM_MESSAGE(ped); // Dispatch message to Ped.
 * CREATE_NM_MESSAGE(true, 372); // armsWindmill - Swing arms around.
 * GIVE_PED_NM_MESSAGE(ped); // Dispatch message to Ped.
 * @param ped
 */
export function givePedNmMessage(ped: number): void { 
	return _in(0xb158dfcc, 0xc56e5c5b, ped); 
}

/**
 * p1 is either 1 or 2 in the PC scripts.
 * @param ped
 * @param p1
 */
export function givePedToPauseMenu(ped: number, p1: number): void { 
	return _in(0xac0bfbdc, 0x3be00e14, ped, p1); 
}

export function givePlayerRagdollControl(player: number, toggle: boolean): void { 
	return _in(0x3c49c870, 0xe66f0a28, player, toggle); 
}

/**
 * Full list of weapons & components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param componentHash
 */
export function giveWeaponComponentToPed(ped: number, weaponHash: number, componentHash: number): void { 
	return _in(0xd966d51a, 0xa5b28bb9, ped, _ch(weaponHash), _ch(componentHash)); 
}

/**
 * componentHash:
 * (use WEAPON::GET_WEAPON_COMPONENT_TYPE_MODEL() to get hash value)
 * ${component_at_ar_flsh}, ${component_at_ar_supp}, ${component_at_pi_flsh}, ${component_at_scope_large}, ${component_at_ar_supp_02}
 * @param weaponObject
 * @param componentHash
 */
export function giveWeaponComponentToWeaponObject(weaponObject: number, componentHash: number): void { 
	return _in(0x33e17943, 0x6c0b31db, weaponObject, _ch(componentHash)); 
}

export function giveWeaponObjectToPed(weaponObject: number, ped: number): void { 
	return _in(0xb1fa6137, 0x1af7c4b7, weaponObject, ped); 
}

/**
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param ammoCount
 * @param isHidden
 * @param bForceInHand
 */
export function giveWeaponToPed(ped: number, weaponHash: number, ammoCount: number, isHidden: boolean, bForceInHand: boolean): void { 
	return _in(0xbf0fd6e5, 0x6c964fcb, ped, _ch(weaponHash), ammoCount, isHidden, bForceInHand); 
}

export function golfTrailGetMaxHeight(): number { 
	return _in(0xa4819f5e, 0x23e2ffad, _r, _rf); 
}

export function golfTrailGetVisualControlPoint(p0: number): Vector3 { 
	return _mv(_in(0xa4664972, 0xa9b8f8ba, p0, _r, _rv)); 
}

export function golfTrailSetColour(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number, p10: number, p11: number): void { 
	return _in(0x12995f2e, 0x53ffa601, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11); 
}

export function golfTrailSetEnabled(toggle: boolean): void { 
	return _in(0xa51c4b86, 0xb71652ae, toggle); 
}

export function golfTrailSetFacing(p0: boolean): void { 
	return _in(0x06f761ea, 0x47c1d3ed, p0); 
}

/**
 * 12 matches across 4 scripts. All 4 scripts were job creators.
 * 
 * type ranged from 0 - 2.
 * p4 was always 0.2f. Likely scale.
 * assuming p5 - p8 is RGBA, the graphic is always yellow (255, 255, 0, 255).
 * 
 * Tested but noticed nothing.
 * @param type
 * @param xPos
 * @param yPos
 * @param zPos
 * @param p4
 * @param red
 * @param green
 * @param blue
 * @param alpha
 */
export function golfTrailSetFixedControlPoint(type: number, xPos: number, yPos: number, zPos: number, p4: number, red: number, green: number, blue: number, alpha: number): void { 
	return _in(0xb1bb0374, 0x2917a5d6, type, _fv(xPos), _fv(yPos), _fv(zPos), _fv(p4), red, green, blue, alpha); 
}

export function golfTrailSetFixedControlPointEnable(p0: boolean): void { 
	return _in(0xc0416b06, 0x1f2b7e5e, p0); 
}

/**
 * p8 seems to always be false.
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 */
export function golfTrailSetPath(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: boolean): void { 
	return _in(0x312342e1, 0xa4874f3f, _fv(p0), _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), _fv(p6), _fv(p7), p8); 
}

export function golfTrailSetRadius(p0: number, p1: number, p2: number): void { 
	return _in(0x2485d34e, 0x50a22e84, _fv(p0), _fv(p1), _fv(p2)); 
}

/**
 * Only appeared in Golf & Golf_mp. Parameters were all ptrs
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 */
export function golfTrailSetShaderParams(p0: number, p1: number, p2: number, p3: number, p4: number): void { 
	return _in(0x9cfdd90b, 0x2b844bf7, _fv(p0), _fv(p1), _fv(p2), _fv(p3), _fv(p4)); 
}

export function golfTrailSetTessellation(p0: number, p1: number): void { 
	return _in(0xdbaa5ec8, 0x48ba2d46, p0, p1); 
}

export function grabPausemenuOwnership(): void { 
	return _in(0x851cd923, 0x176eba7c); 
}

export function grassbatchDisableFlattening(): void { 
	return _in(0x302c91ab, 0x2d477f7e); 
}

export function grassbatchEnableFlatteningExtInSphere(x: number, y: number, z: number, p3: number, p4: number, p5: number, p6: number, scale: number): void { 
	return _in(0xaae9be70, 0xec7c69ab, _fv(x), _fv(y), _fv(z), p3, _fv(p4), _fv(p5), _fv(p6), _fv(scale)); 
}

/**
 * Wraps 0xAAE9BE70EC7C69AB with FLT_MAX as p7, Jenkins: 0x73E96210?
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param p4
 * @param p5
 * @param p6
 */
export function grassbatchEnableFlatteningInSphere(x: number, y: number, z: number, radius: number, p4: number, p5: number, p6: number): void { 
	return _in(0x6d955f6a, 0x9e0295b1, _fv(x), _fv(y), _fv(z), _fv(radius), _fv(p4), _fv(p5), _fv(p6)); 
}

/**
 * Example from am_mp_drone script:
 * 
 * CAM::HARD_ATTACH_CAM_TO_ENTITY(Local_190.f_169, NETWORK::NET_TO_OBJ(Local_190.f_159), 0f, 0f, 180f, Var0, 1);
 * @param cam
 * @param entity
 * @param xRot
 * @param yRot
 * @param zRot
 * @param xOffset
 * @param yOffset
 * @param zOffset
 * @param isRelative
 */
export function hardAttachCamToEntity(cam: number, entity: number, xRot: number, yRot: number, zRot: number, xOffset: number, yOffset: number, zOffset: number, isRelative: boolean): void { 
	return _in(0x202a5ed9, 0xce01d6e7, cam, entity, _fv(xRot), _fv(yRot), _fv(zRot), _fv(xOffset), _fv(yOffset), _fv(zOffset), isRelative); 
}

export function hardAttachCamToPedBone(cam: number, ped: number, boneIndex: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: boolean): void { 
	return _in(0x149916f5, 0x0c34a40d, cam, ped, boneIndex, _fv(p3), _fv(p4), _fv(p5), _fv(p6), _fv(p7), _fv(p8), p9); 
}

/**
 * See GIVE_ACHIEVEMENT_TO_PLAYER
 * @param achievementId
 */
export function hasAchievementBeenPassed(achievementId: number): boolean { 
	return _in(0x867365e1, 0x11a3b6eb, achievementId, _r); 
}

export function hasActionModeAssetLoaded(asset: string): boolean { 
	return _in(0xe4b5f4bf, 0x2cb24e65, _ts(asset), _r); 
}

export function hasAdditionalTextLoaded(slot: number): boolean { 
	return _in(0x02245fe4, 0xbed318b8, slot, _r); 
}

/**
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param animDict
 */
export function hasAnimDictLoaded(animDict: string): boolean { 
	return _in(0xd031a916, 0x2d01088c, _ts(animDict), _r); 
}

/**
 * if (ENTITY::HAS_ANIM_EVENT_FIRED(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("CreateObject")))
 * @param entity
 * @param actionHash
 */
export function hasAnimEventFired(entity: number, actionHash: number): boolean { 
	return _in(0xeaf4cd9e, 0xa3e7e922, entity, _ch(actionHash), _r); 
}

/**
 * Gets whether the specified animation set has finished loading. An animation set provides movement animations for a ped. See SET_PED_MOVEMENT_CLIPSET.
 * 
 * Animation set and clip set are synonymous.
 * 
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * 
 * Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
 * @param animSet
 */
export function hasAnimSetLoaded(animSet: string): boolean { 
	return _in(0xc4ea073d, 0x86fb29b0, _ts(animSet), _r); 
}

/**
 * Hardcoded to always return true.
 */
export function hasAsyncInstallFinished(): boolean { 
	return _in(0x14832bf2, 0xaba53fc5, _r); 
}

/**
 * p3 - possibly radius?
 * @param x
 * @param y
 * @param z
 * @param p3
 * @param p4
 * @param p5
 */
export function hasBulletImpactedInArea(x: number, y: number, z: number, p3: number, p4: boolean, p5: boolean): boolean { 
	return _in(0x9870acfb, 0x89a90995, _fv(x), _fv(y), _fv(z), _fv(p3), p4, p5, _r); 
}

export function hasBulletImpactedInBox(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: boolean, p7: boolean): boolean { 
	return _in(0xdc8c5d7c, 0xfeab8394, _fv(p0), _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), p6, p7, _r); 
}

/**
 * This native appears on the cheat_controller script and tracks a combination of buttons, which may be used to toggle cheats in-game. Credits to ThreeSocks for the info. The hash contains the combination, while the "amount" represents the amount of buttons used in a combination. The following page can be used to make a button combination: gta5offset.com/ts/hash/
 * 
 * INT_SCORES_SCORTED was a hash collision
 * @param hash
 * @param amount
 */
export function hasCheatWithHashBeenActivated(hash: number, amount: number): boolean { 
	return _in(0x071e2a83, 0x9de82d90, _ch(hash), amount, _r); 
}

/**
 * Alias for HAS_ANIM_SET_LOADED.
 * 
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * 
 * Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
 * @param clipSet
 */
export function hasClipSetLoaded(clipSet: string): boolean { 
	return _in(0x318234f4, 0xf3738af3, _ts(clipSet), _r); 
}

export function hasClosestObjectOfTypeBeenBroken(p0: number, p1: number, p2: number, p3: number, modelHash: number, p5: number): boolean { 
	return _in(0x761b0e69, 0xac4d007e, _fv(p0), _fv(p1), _fv(p2), _fv(p3), _ch(modelHash), p5, _r); 
}

export function hasClosestObjectOfTypeBeenCompletelyDestroyed(x: number, y: number, z: number, radius: number, modelHash: number, p5: boolean): boolean { 
	return _in(0x46494a24, 0x75701343, _fv(x), _fv(y), _fv(z), _fv(radius), _ch(modelHash), p5, _r); 
}

/**
 * Sets the value of the specified variable to 0.
 * Always returns true.
 * @param p0
 * @param unused
 */
export function hasCloudRequestsFinished(unused: number): [boolean, boolean] { 
	const [retval, p0_out] = _in(0x46e2b844, 0x905bc5f0, _i, unused, _r);
	return [retval as boolean, p0_out as boolean]; 
}

export function hasCodeRequestedAutosave(): boolean { 
	return _in(0x2107a377, 0x3771186d, _r); 
}

export function hasCollisionForModelLoaded(model: number): boolean { 
	return _in(0x22cca434, 0xe368f03a, _ch(model), _r); 
}

export function hasCollisionLoadedAroundEntity(entity: number): boolean { 
	return _in(0xe9676f61, 0xbc0b3321, entity, _r); 
}

/**
 * Simply checks if the cutscene has loaded and doesn't check via CutSceneManager as opposed to HAS_[THIS]_CUTSCENE_LOADED.
 * Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
 * @param cutsceneName
 */
export function hasCutFileLoaded(cutsceneName: string): boolean { 
	return _in(0xa1c996c2, 0xa744262e, _ts(cutsceneName), _r); 
}

/**
 * Possibly HAS_CUTSCENE_CUT_THIS_FRAME, needs more research.
 */
export function hasCutsceneCutThisFrame(): boolean { 
	return _in(0x708bdd8c, 0xd795b043, _r); 
}

export function hasCutsceneFinished(): boolean { 
	return _in(0x7c0a8930, 0x88881d57, _r); 
}

export function hasCutsceneLoaded(): boolean { 
	return _in(0xc59f528e, 0x9ab9f339, _r); 
}

export function hasDirectorModeBeenLaunchedByCode(): boolean { 
	return _in(0xa277800a, 0x9eae340e, _r); 
}

/**
 * P3 is always 3 as far as i cant tell
 * 
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param entity
 * @param animDict
 * @param animName
 * @param p3
 */
export function hasEntityAnimFinished(entity: number, animDict: string, animName: string, p3: number): boolean { 
	return _in(0x20b71166, 0x2962b472, entity, _ts(animDict), _ts(animName), p3, _r); 
}

export function hasEntityBeenDamagedByAnyObject(entity: number): boolean { 
	return _in(0x95eb9964, 0xff5c5c65, entity, _r); 
}

export function hasEntityBeenDamagedByAnyPed(entity: number): boolean { 
	return _in(0x605f5a14, 0x0f202491, entity, _r); 
}

export function hasEntityBeenDamagedByAnyVehicle(entity: number): boolean { 
	return _in(0xdfd5033f, 0xdba0a9c8, entity, _r); 
}

/**
 * Entity 1 = Victim
 * Entity 2 = Attacker
 * 
 * p2 seems to always be 1
 * @param entity1
 * @param entity2
 * @param p2
 */
export function hasEntityBeenDamagedByEntity(entity1: number, entity2: number, p2: boolean): boolean { 
	return _in(0xc86d67d5, 0x2a707cf8, entity1, entity2, p2, _r); 
}

/**
 * It determines what weapons caused damage:
 * 
 * If you want to define only a specific weapon, second parameter=weapon hash code, third parameter=0
 * If you want to define any melee weapon, second parameter=0, third parameter=1.
 * If you want to identify any weapon (firearms, melee, rockets, etc.), second parameter=0, third parameter=2.
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param entity
 * @param weaponHash
 * @param weaponType
 */
export function hasEntityBeenDamagedByWeapon(entity: number, weaponHash: number, weaponType: number): boolean { 
	return _in(0x131d4013, 0x34815e94, entity, _ch(weaponHash), weaponType, _r); 
}

/**
 * traceType is always 17 in the scripts.
 * 
 * There is other codes used for traceType:
 * 19 - in jewelry_prep1a
 * 126 - in am_hunt_the_beast
 * 256 & 287 - in fm_mission_controller
 * @param entity1
 * @param entity2
 * @param traceType
 */
export function hasEntityClearLosToEntity(entity1: number, entity2: number, traceType: number): boolean { 
	return _in(0xfcdff7b7, 0x2d23a1ac, entity1, entity2, traceType, _r); 
}

export function hasEntityClearLosToEntityAdjustForCover(entity1: number, entity2: number, traceType: number): boolean { 
	return _in(0x394bde2a, 0x7bba031e, entity1, entity2, traceType, _r); 
}

/**
 * Has the entity1 got a clear line of sight to the other entity2 from the direction entity1 is facing.
 * This is one of the most CPU demanding BOOL natives in the game; avoid calling this in things like nested for-loops
 * @param entity1
 * @param entity2
 */
export function hasEntityClearLosToEntityInFront(entity1: number, entity2: number): boolean { 
	return _in(0x0267d00a, 0xf114f17a, entity1, entity2, _r); 
}

/**
 * Called on tick.
 * Tested with vehicles, returns true whenever the vehicle is touching any entity.
 * 
 * Note: for vehicles, the wheels can touch the ground and it will still return false, but if the body of the vehicle touches the ground, it will return true.
 * @param entity
 */
export function hasEntityCollidedWithAnything(entity: number): boolean { 
	return _in(0x8bad02f0, 0x368d9e14, entity, _r); 
}

export function hasForceCleanupOccurred(cleanupFlags: number): boolean { 
	return _in(0xc968670b, 0xface42d9, cleanupFlags, _r); 
}

export function hasGameInstalledThisSession(): boolean { 
	return _in(0x6fddf453, 0xc0c756ec, _r); 
}

export function hasInstantFillVehiclePopulationFinished(): boolean { 
	return _in(0x91d6dd29, 0x0888cbab, _r); 
}

export function hasLoadedMpDataSet(): boolean { 
	return _in(0x544810ed, 0x9db6bbe6, _r); 
}

export function hasLoadedSpDataSet(): boolean { 
	return _in(0x5b50abb1, 0xfe3746f4, _r); 
}

export function hasMenuLayoutChangedEventOccurred(): boolean { 
	return _in(0x2e22fefa, 0x0100275e, _r); 
}

export function hasMenuTriggerEventOccurred(): boolean { 
	return _in(0xf284ac67, 0x940c6812, _r); 
}

/**
 * Checks if the specified model has loaded into memory.
 * @param model
 */
export function hasModelLoaded(model: number): boolean { 
	return _in(0x98a4eb5d, 0x89a0c952, _ch(model), _r); 
}

export function hasNamedPtfxAssetLoaded(fxName: string): boolean { 
	return _in(0x8702416e, 0x512ec454, _ts(fxName), _r); 
}

export function hasNetworkTimeStarted(): boolean { 
	return _in(0x46718ace, 0xedeafc84, _r); 
}

export function hasObjectBeenBroken(object: number, p1: number): boolean { 
	return _in(0x8abfb70c, 0x49cc43e2, object, p1, _r); 
}

/**
 * Get inputted "Cheat code", for example:
 * 
 * while (TRUE)
 * {
 * if (MISC::HAS_PC_CHEAT_WITH_HASH_BEEN_ACTIVATED(${fugitive}))
 * {
 * // Do something.
 * }
 * SYSTEM::WAIT(0);
 * }
 * 
 * Calling this will also set the last saved string hash to zero.
 * 
 * @param hash
 */
export function hasPcCheatWithHashBeenActivated(hash: number): boolean { 
	return _in(0x557e43c4, 0x47e700a8, _ch(hash), _r); 
}

/**
 * It determines what weapons caused damage:
 * 
 * If you want to define only a specific weapon, second parameter=weapon hash code, third parameter=0
 * If you want to define any melee weapon, second parameter=0, third parameter=1.
 * If you want to identify any weapon (firearms, melee, rockets, etc.), second parameter=0, third parameter=2.
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param weaponType
 */
export function hasPedBeenDamagedByWeapon(ped: number, weaponHash: number, weaponType: number): boolean { 
	return _in(0x2d343d22, 0x19cd027a, ped, _ch(weaponHash), weaponType, _r); 
}

export function hasPedClearLosToEntity(ped: number, entity: number, x: number, y: number, z: number, p5: number, p6: boolean, p7: boolean): boolean { 
	return _in(0xa32abfeb, 0x2a03b306, ped, entity, _fv(x), _fv(y), _fv(z), p5, p6, p7, _r); 
}

/**
 * p2 should be FALSE, otherwise it seems to always return FALSE
 * 
 * Bool does not check if the weapon is current equipped, unfortunately.
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param p2
 */
export function hasPedGotWeapon(ped: number, weaponHash: number, p2: boolean): boolean { 
	return _in(0x8decb02f, 0x88f428bc, ped, _ch(weaponHash), p2, _r); 
}

/**
 * Full list of weapons & components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param componentHash
 */
export function hasPedGotWeaponComponent(ped: number, weaponHash: number, componentHash: number): boolean { 
	return _in(0xc5932124, 0x75fae340, ped, _ch(weaponHash), _ch(componentHash), _r); 
}

export function hasPedHeadBlendFinished(ped: number): boolean { 
	return _in(0x654cd0a8, 0x25161131, ped, _r); 
}

export function hasPedPreloadPropDataFinished(ped: number): boolean { 
	return _in(0x784002a6, 0x32822099, ped, _r); 
}

export function hasPedPreloadVariationDataFinished(ped: number): boolean { 
	return _in(0x66680a92, 0x700f43df, ped, _r); 
}

export function hasPedReceivedEvent(ped: number, eventId: number): boolean { 
	return _in(0x8507bcb7, 0x10fa6dc0, ped, eventId, _r); 
}

export function hasPedheadshotImgUploadFailed(): boolean { 
	return _in(0x876928dd, 0xdfccc9cd, _r); 
}

export function hasPedheadshotImgUploadSucceeded(): boolean { 
	return _in(0xe8a169e6, 0x66cbc541, _r); 
}

export function hasPickupBeenCollected(pickup: number): boolean { 
	return _in(0x80ec48e6, 0x679313f9, pickup, _r); 
}

export function hasPlayerBeenSpottedInStolenVehicle(player: number): boolean { 
	return _in(0xd705740b, 0xb0a1cf4c, player, _r); 
}

export function hasPlayerDamagedAtLeastOneNonAnimalPed(player: number): boolean { 
	return _in(0xe4b90f36, 0x7bd81752, player, _r); 
}

export function hasPlayerDamagedAtLeastOnePed(player: number): boolean { 
	return _in(0x20ce80b0, 0xc2bf4acc, player, _r); 
}

export function hasPlayerLeftTheWorld(player: number): boolean { 
	return _in(0xd55ddfb4, 0x7991a294, player, _r); 
}

export function hasPreloadModsFinished(vehicle: number): boolean { 
	return _in(0x06f43e51, 0x75eb6d96, vehicle, _r); 
}

export function hasPtfxAssetLoaded(): boolean { 
	return _in(0xca7d9b86, 0xeca7481b, _r); 
}

/**
 * Hardcoded to return false.
 */
export function hasResumedFromSuspend(): boolean { 
	return _in(0xe8b9c0ec, 0x9e183f35, _r); 
}

export function hasScaleformContainerMovieLoadedIntoParent(scaleformHandle: number): boolean { 
	return _in(0x8217150e, 0x1217ebfd, scaleformHandle, _r); 
}

/**
 * Only values used in the scripts are:
 * 
 * "heist_mp"
 * "heistmap_mp"
 * "instructional_buttons"
 * "heist_pre"
 * @param scaleformName
 */
export function hasScaleformMovieFilenameLoaded(scaleformName: string): boolean { 
	return _in(0x0c1c5d75, 0x6fb5f337, _ts(scaleformName), _r); 
}

export function hasScaleformMovieLoaded(scaleformHandle: number): boolean { 
	return _in(0x85f01b8d, 0x5b90570e, scaleformHandle, _r); 
}

export function hasScaleformMovieNamedLoaded(scaleformName: string): [boolean, number] { 
	const [retval, scaleformHandle_out] = _in(0x9743bccf, 0x7cd6e1f6, _i, _ts(scaleformName), _r);
	return [retval as boolean, scaleformHandle_out as number]; 
}

export function hasScaleformScriptHudMovieLoaded(hudComponent: number): boolean { 
	return _in(0xdf6e5987, 0xd2b4d140, hudComponent, _r); 
}

export function hasScriptHiddenHelpThisFrame(): boolean { 
	return _in(0x214cd562, 0xa939246a, _r); 
}

/**
 * Returns if a script has been loaded into the game. Used to see if a script was loaded after requesting.
 * @param scriptName
 */
export function hasScriptLoaded(scriptName: string): boolean { 
	return _in(0xe6cc9f3b, 0xa0fb9ef1, _ts(scriptName), _r); 
}

export function hasScriptWithNameHashLoaded(scriptHash: number): boolean { 
	return _in(0x5f0f0c78, 0x3eb16c04, _ch(scriptHash), _r); 
}

export function hasSoundFinished(soundId: number): boolean { 
	return _in(0xfcbdce71, 0x4a7c88e5, soundId, _r); 
}

export function hasStealthModeAssetLoaded(asset: string): boolean { 
	return _in(0xe977fc5b, 0x08af3441, _ts(asset), _r); 
}

export function hasStreamedTextureDictLoaded(textureDict: string): boolean { 
	return _in(0x0145f696, 0xaaaad2e4, _ts(textureDict), _r); 
}

/**
 * Checks if the specified gxt has loaded into the passed slot.
 * @param gxt
 * @param slot
 */
export function hasThisAdditionalTextLoaded(gxt: string, slot: number): boolean { 
	return _in(0xadbf060e, 0x2b30c5bc, _ts(gxt), slot, _r); 
}

/**
 * Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
 * @param cutsceneName
 */
export function hasThisCutsceneLoaded(cutsceneName: string): boolean { 
	return _in(0x228d3d94, 0xf8a11c3c, _ts(cutsceneName), _r); 
}

/**
 * This function is hard-coded to always return 1.
 * @param p0
 */
export function hasVcWithdrawalCompleted(p0: number): boolean { 
	return _in(0xe154b48b, 0x68ef72bc, p0, _r); 
}

export function hasVehicleAssetLoaded(vehicleAsset: number): boolean { 
	return _in(0x1bbe0523, 0xb8db9a21, vehicleAsset, _r); 
}

/**
 * Fourth Parameter = unsure, almost always -1
 * @param driver
 * @param vehicle
 * @param weaponHash
 * @param p3
 */
export function hasVehicleGotProjectileAttached(driver: number, vehicle: number, weaponHash: number, p3: number): boolean { 
	return _in(0x717c8481, 0x234e3b88, driver, vehicle, _ch(weaponHash), p3, _r); 
}

export function hasVehiclePetroltankSetOnFireByEntity(p0: number, p1: number): boolean { 
	return _in(0x5ba68a08, 0x40d546ac, p0, p1, _r); 
}

export function hasVehiclePhoneExplosiveDevice(): boolean { 
	return _in(0x6adaabd3, 0x068c5235, _r); 
}

/**
 * See REQUEST_VEHICLE_RECORDING
 * @param recording
 * @param script
 */
export function hasVehicleRecordingBeenLoaded(recording: number, script: string): boolean { 
	return _in(0x300d614a, 0x4c785fc4, recording, _ts(script), _r); 
}

export function hasWeaponAssetLoaded(weaponHash: number): boolean { 
	return _in(0x36e35327, 0x1f0e90ee, _ch(weaponHash), _r); 
}

/**
 * see DOES_WEAPON_TAKE_WEAPON_COMPONENT for full list of weapons & components
 * @param weapon
 * @param componentHash
 */
export function hasWeaponGotWeaponComponent(weapon: number, componentHash: number): boolean { 
	return _in(0x76a18844, 0xe743bf91, weapon, _ch(componentHash), _r); 
}

export function hasWeaponReloadingInVehicle(vehicle: number, seat: number): boolean { 
	return _in(0x8062f071, 0x53f4446f, vehicle, seat, _r); 
}

export function haveAllStreamingRequestsCompleted(ped: number): boolean { 
	return _in(0x73508234, 0x73013c02, ped, _r); 
}

/**
 * control: unused parameter
 * @param control
 */
export function haveControlsChanged(control: number): boolean { 
	return _in(0x6cd79468, 0xa1e595c6, control, _r); 
}

export function haveCreditsReachedEnd(): boolean { 
	return _in(0x075f1d57, 0x402c93ba, _r); 
}

export function haveReplayStatsBeenStored(): boolean { 
	return _in(0xd642319c, 0x54aadeb6, _r); 
}

export function haveVehicleModsStreamedIn(vehicle: number): boolean { 
	return _in(0x9a83f5f9, 0x963775ef, vehicle, _r); 
}

export function haveVehicleRearDoorsBeenBlownOpenByStickybomb(vehicle: number): boolean { 
	return _in(0x6b407f25, 0x25e93644, vehicle, _r); 
}

export function hideHelpTextThisFrame(): void { 
	return _in(0xd46923fc, 0x481ca285); 
}

/**
 * Hides HUD and radar this frame and prohibits switching to other weapons (or accessing the weapon wheel)
 */
export function hideHudAndRadarThisFrame(): void { 
	return _in(0x719ff505, 0xf097fd20); 
}

/**
 * This function hides various HUD (Heads-up Display) components.
 * Listed below are the integers and the corresponding HUD component.
 * - 1 : WANTED_STARS
 * - 2 : WEAPON_ICON
 * - 3 : CASH
 * - 4 : MP_CASH
 * - 5 : MP_MESSAGE
 * - 6 : VEHICLE_NAME
 * - 7 : AREA_NAME
 * - 8 : VEHICLE_CLASS
 * - 9 : STREET_NAME
 * - 10 : HELP_TEXT
 * - 11 : FLOATING_HELP_TEXT_1
 * - 12 : FLOATING_HELP_TEXT_2
 * - 13 : CASH_CHANGE
 * - 14 : RETICLE
 * - 15 : SUBTITLE_TEXT
 * - 16 : RADIO_STATIONS
 * - 17 : SAVING_GAME
 * - 18 : GAME_STREAM
 * - 19 : WEAPON_WHEEL
 * - 20 : WEAPON_WHEEL_STATS
 * - 21 : HUD_COMPONENTS
 * - 22 : HUD_WEAPONS
 * 
 * These integers also work for the `SHOW_HUD_COMPONENT_THIS_FRAME` native, but instead shows the HUD Component.
 * @param id
 */
export function hideHudComponentThisFrame(id: number): void { 
	return _in(0x6806c51a, 0xd12b83b8, id); 
}

export function hideHudmarkersThisFrame(): void { 
	return _in(0x243296a5, 0x10b562b6); 
}

export function hideLoadingOnFadeThisFrame(): void { 
	return _in(0x4b0311d3, 0xcdc4648f); 
}

export function hideMinimapExteriorMapThisFrame(): void { 
	return _in(0x5fbae526, 0x203990c9); 
}

export function hideMinimapInteriorMapThisFrame(): void { 
	return _in(0x20fe7fdf, 0xeead38c0); 
}

export function hideNumberOnBlip(blip: number): void { 
	return _in(0x532cff63, 0x7ef80148, blip); 
}

export function hidePedBloodDamageByZone(ped: number, p1: number, p2: boolean): void { 
	return _in(0x62ab7931, 0x44de75dc, ped, p1, p2); 
}

/**
 * Hides the players weapon during a cutscene.
 * @param ped
 * @param toggle
 */
export function hidePedWeaponForScriptedCutscene(ped: number, toggle: boolean): void { 
	return _in(0x6f6981d2, 0x253c208f, ped, toggle); 
}

export function hidePortablePickupWhenDetached(pickupObject: number, toggle: boolean): void { 
	return _in(0x86745825, 0x1d47ccb2, pickupObject, toggle); 
}

export function hideScriptedHudComponentThisFrame(id: number): void { 
	return _in(0xe374c498, 0xd8badc14, id); 
}

/**
 * Hides area and vehicle name HUD components for one frame.
 */
export function hideStreetAndCarNamesThisFrame(): void { 
	return _in(0xa4dede28, 0xb1814289); 
}

/**
 * Disables detachable bumber from domnator4, dominator5, dominator6, see https://gfycat.com/SecondUnluckyGosling
 * @param vehicle
 * @param toggle
 */
export function hideTombstone(vehicle: number, toggle: boolean): void { 
	return _in(0xae71fb65, 0x6c600587, vehicle, toggle); 
}

/**
 * p2 is always -1
 * @param audioBank
 * @param p1
 * @param p2
 */
export function hintAmbientAudioBank(audioBank: string, p1: boolean, p2: number): boolean { 
	return _in(0x8f8c0e37, 0x0ae62f5c, _ts(audioBank), p1, p2, _r); 
}

/**
 * p2 is always -1
 * @param audioBank
 * @param p1
 * @param p2
 */
export function hintMissionAudioBank(audioBank: string, p1: boolean, p2: number): boolean { 
	return _in(0x40763ea7, 0xb9b783e7, _ts(audioBank), p1, p2, _r); 
}

/**
 * p2 is always -1
 * @param audioBank
 * @param p1
 * @param p2
 */
export function hintScriptAudioBank(audioBank: string, p1: boolean, p2: number): boolean { 
	return _in(0xfb380a29, 0x641ec31a, _ts(audioBank), p1, p2, _r); 
}

export function hiredLimo(p0: number, p1: number): void { 
	return _in(0x792271ab, 0x35c356a4, p0, p1); 
}

/**
 * Displays "blazer_wheels_up" and "blazer_wheels_down" "weapon" icons when switching between jetski and quadbike modes. Works only on vehicles using "VEHICLE_TYPE_AMPHIBIOUS_QUADBIKE" vehicle type. Needs to be called every time prior to switching modes, otherwise the icon will only appear when switching modes once.
 */
export function hudForceSpecialVehicleWeaponWheel(): void { 
	return _in(0x48804384, 0x1bbe156f); 
}

/**
 * Forces the weapon wheel to show/hide.
 * @param show
 */
export function hudForceWeaponWheel(show: boolean): void { 
	return _in(0xeb354e53, 0x76bc81a7, show); 
}

/**
 * Returns the weapon hash to the selected/highlighted weapon in the wheel
 */
export function hudGetWeaponWheelCurrentlyHighlighted(): number { 
	return _in(0xa4893118, 0x5f0536fe, _r, _ri); 
}

/**
 * Returns the weapon hash active in a specific weapon wheel slotList
 * @param weaponTypeIndex
 */
export function hudGetWeaponWheelTopSlot(weaponTypeIndex: number): number { 
	return _in(0xa13e9340, 0x3f26c812, weaponTypeIndex, _r, _ri); 
}

/**
 * Set the active slotIndex in the wheel weapon to the slot associated with the provided Weapon hash
 * @param weaponHash
 */
export function hudSetWeaponWheelTopSlot(weaponHash: number): void { 
	return _in(0x72c1056d, 0x678bb7d8, _ch(weaponHash)); 
}

/**
 * Sets a global that disables many weapon input tasks (shooting, aiming, etc.). Does not work with vehicle weapons, only used in selector.ysc
 * @param toggle
 */
export function hudShowingCharacterSwitchSelection(toggle: boolean): void { 
	return _in(0x14c9fdcc, 0x41f81f63, toggle); 
}

/**
 * Calling this each frame, stops the player from receiving a weapon via the weapon wheel.
 */
export function hudSuppressWeaponWheelResultsThisFrame(): void { 
	return _in(0x0afc4af5, 0x10774b47); 
}

export function ignoreMenuPreferenceForBonnetCameraThisUpdate(): void { 
	return _in(0x7b8a361c, 0x1813fbef); 
}

export function ignoreNextRestart(toggle: boolean): void { 
	return _in(0x21ffb63d, 0x8c615361, toggle); 
}

export function increasePlayerJumpSuppressionRange(player: number): void { 
	return _in(0x9edd76e8, 0x7d5d51ba, player); 
}

export function informCodeOfContentIdOfCurrentUgcMission(p0: string): void { 
	return _in(0x8d74e26f, 0x54b4e5c3, _ts(p0)); 
}

export function initCreatorBudget(): void { 
	return _in(0xb5a4db34, 0xfe89b88a); 
}

/**
 * Used in carsteal3 script with schemeName = "Carsteal4_spycar".
 * @param schemeName
 */
export function initPcScriptedControls(schemeName: string): boolean { 
	return _in(0x3d42b925, 0x63939375, _ts(schemeName), _r); 
}

export function initShopPedComponent(outComponent: number): number { 
	return _in(0x1e8c308f, 0xd312c036, _ii(outComponent)); 
}

export function initShopPedProp(outProp: number): number { 
	return _in(0xeb0a2b75, 0x8f7b850f, _ii(outProp)); 
}

export function initSynchSceneAudioWithEntity(audioEvent: string, entity: number): void { 
	return _in(0x950a154b, 0x8dab6185, _ts(audioEvent), entity); 
}

export function initSynchSceneAudioWithPosition(audioEvent: string, x: number, y: number, z: number): void { 
	return _in(0xc8ede9bd, 0xbccba6d4, _ts(audioEvent), _fv(x), _fv(y), _fv(z)); 
}

export function instantlyFillPedPopulation(): void { 
	return _in(0x4759cc73, 0x0f947c81); 
}

export function instantlyFillVehiclePopulation(): void { 
	return _in(0x48adc8a7, 0x73564670); 
}

/**
 * Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
 * --------------------------------------------------------
 * if (NETWORK::NETWORK_IS_PARTICIPANT_ACTIVE(PLAYER::INT_TO_PARTICIPANTINDEX(i)))
 * 
 * @param value
 */
export function intToParticipantindex(value: number): number { 
	return _in(0x9ec66038, 0x12c24710, value, _r, _ri); 
}

/**
 * Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
 * @param value
 */
export function intToPlayerindex(value: number): number { 
	return _in(0x41bd2a6b, 0x006af756, value, _r, _ri); 
}

export function interpolateCamWithParams(camera: number, camPosX: number, camPosY: number, camPosZ: number, camRotX: number, camRotY: number, camRotZ: number, fov: number, duration: number, posCurveType: number, rotCurveType: number, rotOrder: number, fovCurveType: number): void { 
	return _in(0xdda77ee3, 0x3c005aaf, camera, _fv(camPosX), _fv(camPosY), _fv(camPosZ), _fv(camRotX), _fv(camRotY), _fv(camRotZ), _fv(fov), duration, posCurveType, rotCurveType, rotOrder, fovCurveType); 
}

/**
 * Example from carsteal3.c: AUDIO::INTERRUPT_CONVERSATION(PLAYER::PLAYER_PED_ID(), "CST4_CFAA", "FRANKLIN");
 * Voicelines can be found in GTAV\x64\audio\sfx in files starting with "SS_" which seems to mean scripted speech.
 * @param ped
 * @param voiceline
 * @param speaker
 */
export function interruptConversation(ped: number, voiceline: string, speaker: string): void { 
	return _in(0xa018a12e, 0x5c5c2fa6, ped, _ts(voiceline), _ts(speaker)); 
}

/**
 * One call found in the b617d scripts:
 * 
 * AUDIO::INTERRUPT_CONVERSATION_AND_PAUSE(NETWORK::NET_TO_PED(l_3989._f26F[0 -- [[1]] ]), "CONV_INTERRUPT_QUIT_IT", "LESTER");
 * @param ped
 * @param p1
 * @param speaker
 */
export function interruptConversationAndPause(ped: number, p1: string, speaker: string): void { 
	return _in(0x8a694d7a, 0x68f8dc38, ped, _ts(p1), _ts(speaker)); 
}

/**
 * Resets the vehicle idle camera timer. Calling this in a loop will disable the idle camera.
 */
export function invalidateCinematicVehicleIdleMode(): void { 
	return _in(0x9e4cfff9, 0x89258472); 
}

/**
 * Resets the idle camera timer. Calling that in a loop once every few seconds is enough to disable the idle cinematic camera.
 */
export function invalidateIdleCam(): void { 
	return _in(0xf4f2c0d4, 0xee209e20); 
}

export function iplGroupSwapCancel(): void { 
	return _in(0x63eb2b97, 0x2a218cac); 
}

export function iplGroupSwapFinish(): void { 
	return _in(0xf4a0dadb, 0x70f57fa6); 
}

export function iplGroupSwapIsActive(): boolean { 
	return _in(0x5068f488, 0xddb54dd8, _r); 
}

export function iplGroupSwapIsReady(): boolean { 
	return _in(0xfb199266, 0x061f820a, _r); 
}

export function iplGroupSwapStart(iplName1: string, iplName2: string): void { 
	return _in(0x95a7dabd, 0xdbb78ae7, _ts(iplName1), _ts(iplName2)); 
}

/**
 * val is 1-20 (0 will return false)
 * @param val
 */
export function isActiveScaleformMovieDeleting(val: number): boolean { 
	return _in(0x2fcb133c, 0xa50a49eb, val, _r); 
}

export function isAimCamActive(): boolean { 
	return _in(0x68edda28, 0xa5976d07, _r); 
}

export function isAimCamActiveInAccurateMode(): boolean { 
	return _in(0x74bd83ea, 0x840f6bc9, _r); 
}

export function isAirDefenceSphereInArea(x: number, y: number, z: number, radius: number, outZoneId: number): [boolean, number] { 
	const [retval, outZoneId_out] = _in(0xdab96383, 0x1dbfd3f4, _fv(x), _fv(y), _fv(z), _fv(radius), _ii(outZoneId), _r);
	return [retval as boolean, outZoneId_out as number]; 
}

/**
 * Example:
 * 
 * bool playing = AUDIO::IS_ALARM_PLAYING("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS");
 * Full list of alarm names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/alarmSounds.json
 * @param alarmName
 */
export function isAlarmPlaying(alarmName: string): boolean { 
	return _in(0x226435cb, 0x96ccfc8c, _ts(alarmName), _r); 
}

export function isAllowedIndependentCameraModes(): boolean { 
	return _in(0xeaf0fa79, 0x3d05c592, _r); 
}

/**
 * Common in the scripts:
 * AUDIO::IS_AMBIENT_SPEECH_DISABLED(PLAYER::PLAYER_PED_ID());
 * @param ped
 */
export function isAmbientSpeechDisabled(ped: number): boolean { 
	return _in(0x932c2d09, 0x6a2c3fff, ped, _r); 
}

export function isAmbientSpeechPlaying(ped: number): boolean { 
	return _in(0x9072c8b4, 0x9907bfad, ped, _r); 
}

/**
 * Full list of ambient zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientZones.json
 * @param ambientZone
 */
export function isAmbientZoneEnabled(ambientZone: string): boolean { 
	return _in(0x01e2817a, 0x479a7f9b, _ts(ambientZone), _r); 
}

export function isAnEntity(handle: number): boolean { 
	return _in(0x731ec8a9, 0x16bd11a1, handle, _r); 
}

export function isAnimalVocalizationPlaying(pedHandle: number): boolean { 
	return _in(0xc265df9f, 0xb44a9fbd, pedHandle, _r); 
}

export function isAnyEntityAttachedToHandlerFrame(vehicle: number): boolean { 
	return _in(0x62ca17b7, 0x4c435651, vehicle, _r); 
}

export function isAnyEntityEntirelyInsideGarage(garageHash: number, p1: boolean, p2: boolean, p3: boolean, p4: number): boolean { 
	return _in(0x673ed815, 0xd6e323b7, _ch(garageHash), p1, p2, p3, p4, _r); 
}

export function isAnyHostilePedNearPoint(ped: number, x: number, y: number, z: number, radius: number): boolean { 
	return _in(0x68772db2, 0xb2526f9f, ped, _fv(x), _fv(y), _fv(z), _fv(radius), _r); 
}

export function isAnyObjectNearPoint(x: number, y: number, z: number, range: number, p4: boolean): boolean { 
	return _in(0x397dc58f, 0xf00298d1, _fv(x), _fv(y), _fv(z), _fv(range), p4, _r); 
}

export function isAnyPedNearPoint(x: number, y: number, z: number, radius: number): boolean { 
	return _in(0x08396149, 0x8679dc9f, _fv(x), _fv(y), _fv(z), _fv(radius), _r); 
}

export function isAnyPedRappellingFromHeli(vehicle: number): boolean { 
	return _in(0x291e373d, 0x483e7ee7, vehicle, _r); 
}

export function isAnyPedShootingInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, p6: boolean, p7: boolean): boolean { 
	return _in(0xa0d3d71e, 0xa1086c55, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), p6, p7, _r); 
}

export function isAnyPositionalSpeechPlaying(): boolean { 
	return _in(0x30ca2ef9, 0x1d15adf8, _r); 
}

export function isAnySpeechPlaying(ped: number): boolean { 
	return _in(0x72907235, 0x5fa39ec9, ped, _r); 
}

export function isAnyVehicleNearPoint(x: number, y: number, z: number, radius: number): boolean { 
	return _in(0x61e1dd61, 0x25a3eee6, _fv(x), _fv(y), _fv(z), _fv(radius), _r); 
}

export function isAreaOccupied(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: boolean, p7: boolean, p8: boolean, p9: boolean, p10: boolean, p11: number, p12: boolean): boolean { 
	return _in(0xa61b4df5, 0x33dcb56e, _fv(p0), _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), p6, p7, p8, p9, p10, p11, p12, _r); 
}

export function isAreaOccupiedSlow(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number, p10: number, p11: number, p12: number): boolean { 
	return _in(0x39455bf4, 0xf4f55186, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, _r); 
}

/**
 * Full list of audio scene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/audioSceneNames.json
 * @param scene
 */
export function isAudioSceneActive(scene: string): boolean { 
	return _in(0xb65b6055, 0x6e2a9225, _ts(scene), _r); 
}

/**
 * Used to block some of the prostitute stuff due to laws in Australia.
 */
export function isAussieVersion(): boolean { 
	return _in(0x9f1935ca, 0x1f724008, _r); 
}

export function isAutoSaveInProgress(): boolean { 
	return _in(0x69240733, 0x738c19a0, _r); 
}

/**
 * Returns true if MF_IS_BIG (strModelFlags 0x8) handling model flag is set.
 * @param vehicle
 */
export function isBigVehicle(vehicle: number): boolean { 
	return _in(0x9f243d39, 0x19f442fe, vehicle, _r); 
}

export function isBlipFlashing(blip: number): boolean { 
	return _in(0xa5e41fd8, 0x3ad6cef0, blip, _r); 
}

export function isBlipOnMinimap(blip: number): boolean { 
	return _in(0xe41ca530, 0x51197a27, blip, _r); 
}

export function isBlipShortRange(blip: number): boolean { 
	return _in(0xda5f8727, 0xeb75b926, blip, _r); 
}

export function isBoatAnchored(vehicle: number): boolean { 
	return _in(0xb0ad1238, 0xa709b1a2, vehicle, _r); 
}

export function isBonnetCinematicCamRendering(): boolean { 
	return _in(0xd7360051, 0xc885628b, _r); 
}

/**
 * For projectiles, see: IS_PROJECTILE_TYPE_IN_ANGLED_AREA
 * See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
 * Returns True if a bullet, as maintained by a pool within CWeaponManager, has been fired into the defined angled area.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param width
 * @param ownedByPlayer
 */
export function isBulletInAngledArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number, ownedByPlayer: boolean): boolean { 
	return _in(0x1a8b5f3c, 0x01e2b477, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(width), ownedByPlayer, _r); 
}

export function isBulletInArea(x: number, y: number, z: number, radius: number, ownedByPlayer: boolean): boolean { 
	return _in(0x3f202399, 0x9ad51c1f, _fv(x), _fv(y), _fv(z), _fv(radius), ownedByPlayer, _r); 
}

export function isBulletInBox(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, ownedByPlayer: boolean): boolean { 
	return _in(0xde0f6d74, 0x50d37351, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), ownedByPlayer, _r); 
}

/**
 * Returns whether or not the passed camera handle is active.
 * @param cam
 */
export function isCamActive(cam: number): boolean { 
	return _in(0xdfb2b516, 0x207d3534, cam, _r); 
}

export function isCamInterpolating(cam: number): boolean { 
	return _in(0x036f97c9, 0x08c2b52c, cam, _r); 
}

export function isCamPlayingAnim(cam: number, animName: string, animDictionary: string): boolean { 
	return _in(0xc90621d8, 0xa0ceecf2, cam, _ts(animName), _ts(animDictionary), _r); 
}

export function isCamRendering(cam: number): boolean { 
	return _in(0x02ec0af5, 0xc5a49b7a, cam, _r); 
}

export function isCamShaking(cam: number): boolean { 
	return _in(0x6b24bfe8, 0x3a2be47b, cam, _r); 
}

export function isCamSplinePaused(cam: number): boolean { 
	return _in(0x0290f35c, 0x0ad97864, cam, _r); 
}

/**
 * Tests some cinematic camera flags
 */
export function isCinematicCamInputActive(): boolean { 
	return _in(0xf5f1e89a, 0x970b7796, _r); 
}

export function isCinematicCamRendering(): boolean { 
	return _in(0xb15162cb, 0x5826e9e8, _r); 
}

export function isCinematicCamShaking(): boolean { 
	return _in(0xbbc08f6b, 0x4cb8ff0a, _r); 
}

export function isCinematicFirstPersonVehicleInteriorCamRendering(): boolean { 
	return _in(0x4f32c0d5, 0xa90a9b40, _r); 
}

export function isCinematicIdleCamRendering(): boolean { 
	return _in(0xca9d2aa3, 0xe326d720, _r); 
}

/**
 * Hash is always JOAAT("CAMERA_MAN_SHOT") in decompiled scripts
 * @param p0
 */
export function isCinematicShotActive(p0: number): boolean { 
	return _in(0xcc9f3371, 0xa7c28bc9, _ch(p0), _r); 
}

export function isCodeGameplayHintActive(): boolean { 
	return _in(0xbf72910d, 0x0f26f025, _r); 
}

/**
 * Returns true if the collision at the specified coords is marked as being outside (false if there's an interior)
 * @param x
 * @param y
 * @param z
 */
export function isCollisionMarkedOutside(x: number, y: number, z: number): boolean { 
	return _in(0xeea5ac2e, 0xda7c33e8, _fv(x), _fv(y), _fv(z), _r); 
}

/**
 * Returns true if command line option '-benchmark' is set.
 */
export function isCommandlineEndUserBenchmark(): boolean { 
	return _in(0xa049a5be, 0x0f04f2f8, _r); 
}

export function isCommerceDataFetchInProgress(): boolean { 
	return _in(0x1d4dc17c, 0x38feaff0, _r); 
}

export function isCommerceDataValid(): boolean { 
	return _in(0xea14eef5, 0xb7cd2c30, _r); 
}

export function isCommerceStoreOpen(): boolean { 
	return _in(0x2eac52b4, 0x019e2782, _r); 
}

export function isContentItemLocked(itemHash: number): boolean { 
	return _in(0xd4d7b033, 0xc3aa243c, _ch(itemHash), _r); 
}

/**
 * control: 0: PLAYER_CONTROL, 1: CAMERA_CONTROL, 2: FRONTEND_CONTROL
 * For more info, see https://docs.fivem.net/docs/game-references/controls/
 * @param control
 * @param action
 */
export function isControlEnabled(control: number, action: number): boolean { 
	return _in(0x1cea6bfd, 0xf248e5d9, control, action, _r); 
}

export function isControlHeldDown(control: number, action: number, duration: number): boolean { 
	return _in(0xe9cb8c56, 0xe90d5079, control, action, duration, _r); 
}

/**
 * Returns whether a control was newly pressed since the last check.
 * control: see IS_CONTROL_ENABLED
 * @param control
 * @param action
 */
export function isControlJustPressed(control: number, action: number): boolean { 
	return _in(0x58041710, 0x1ddb492f, control, action, _r); 
}

/**
 * Returns whether a control was newly released since the last check.
 * control: see IS_CONTROL_ENABLED
 * @param control
 * @param action
 */
export function isControlJustReleased(control: number, action: number): boolean { 
	return _in(0x50f94025, 0x9d3841e6, control, action, _r); 
}

/**
 * Returns whether a control is currently pressed.
 * control: see IS_CONTROL_ENABLED
 * @param control
 * @param action
 */
export function isControlPressed(control: number, action: number): boolean { 
	return _in(0xf3a21bcd, 0x95725a4a, control, action, _r); 
}

/**
 * Returns whether a control is currently _not_ pressed.
 * control: see IS_CONTROL_ENABLED
 * @param control
 * @param action
 */
export function isControlReleased(control: number, action: number): boolean { 
	return _in(0x648ee3e7, 0xf38877dd, control, action, _r); 
}

export function isControlledVehicleUnableToGetToRoad(ped: number): boolean { 
	return _in(0x3e38e28a, 0x1d80ddf6, ped, _r); 
}

export function isConversationPedDead(ped: number): boolean { 
	return _in(0xe0a0aec2, 0x14b1faba, ped, _r); 
}

/**
 * xyz - relative to the world origin.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 */
export function isCopPedInArea3d(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): boolean { 
	return _in(0x16ec4839, 0x969f9f5e, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _r); 
}

/**
 * Usage:
 * 
 * public bool isCopInRange(Vector3 Location, float Range)
 * {
 * return Function.Call<bool>(Hash.IS_COP_PED_IN_AREA_3D, Location.X - Range, Location.Y - Range, Location.Z - Range, Location.X + Range, Location.Y + Range, Location.Z + Range);
 * }
 * @param x1
 * @param x2
 * @param y1
 * @param y2
 * @param z1
 * @param z2
 */
export function isCopVehicleInArea3d(x1: number, x2: number, y1: number, y2: number, z1: number, z2: number): boolean { 
	return _in(0x7eef65d5, 0xf153e26a, _fv(x1), _fv(x2), _fv(y1), _fv(y2), _fv(z1), _fv(z2), _r); 
}

export function isCurrentHeadPropAHelmet(p0: number): boolean { 
	return _in(0xf2385935, 0xbffd4d92, p0, _r); 
}

export function isCutsceneActive(): boolean { 
	return _in(0x991251af, 0xc3981f84, _r); 
}

/**
 * This function is hard-coded to always return 1.
 * @param cutsceneName
 */
export function isCutsceneAuthorized(cutsceneName: string): boolean { 
	return _in(0x4cebc1ed, 0x31e8925e, _ts(cutsceneName), _r); 
}

export function isCutscenePlaybackFlagSet(flag: number): boolean { 
	return _in(0x71b74d2a, 0xe19338d0, flag, _r); 
}

export function isCutscenePlaying(): boolean { 
	return _in(0xd3c2e180, 0xa40f031e, _r); 
}

export function isDamageTrackerActiveOnNetworkId(netID: number): boolean { 
	return _in(0x6e192e33, 0xad436366, netID, _r); 
}

export function isDamageTrackerActiveOnPlayer(player: number): boolean { 
	return _in(0xb2092a1e, 0xaa7fd45f, player, _r); 
}

export function isDecalAlive(decal: number): boolean { 
	return _in(0xc694d749, 0x49cafd0c, decal, _r); 
}

/**
 * control: see IS_CONTROL_ENABLED
 * @param control
 * @param action
 */
export function isDisabledControlJustPressed(control: number, action: number): boolean { 
	return _in(0x91aef906, 0xbca88877, control, action, _r); 
}

/**
 * control: see IS_CONTROL_ENABLED
 * @param control
 * @param action
 */
export function isDisabledControlJustReleased(control: number, action: number): boolean { 
	return _in(0x305c8dcd, 0x79da8b0f, control, action, _r); 
}

/**
 * control: see IS_CONTROL_ENABLED
 * @param control
 * @param action
 */
export function isDisabledControlPressed(control: number, action: number): boolean { 
	return _in(0xe2587f8c, 0xbbd87b1d, control, action, _r); 
}

/**
 * control: see IS_CONTROL_ENABLED
 * @param control
 * @param action
 */
export function isDisabledControlReleased(control: number, action: number): boolean { 
	return _in(0xfb6c4072, 0xe9a32e92, control, action, _r); 
}

/**
 * Returns true if the given DLC pack is present.
 * @param dlcHash
 */
export function isDlcPresent(dlcHash: number): boolean { 
	return _in(0x812595a0, 0x644ce1de, _ch(dlcHash), _r); 
}

export function isDlcVehicleMod(hash: number): boolean { 
	return _in(0x0564b9ff, 0x9631b82c, _ch(hash), _r); 
}

export function isDoorClosed(doorHash: number): boolean { 
	return _in(0xc531ee8a, 0x1145a149, _ch(doorHash), _r); 
}

/**
 * if (OBJECT::IS_DOOR_REGISTERED_WITH_SYSTEM(doorHash))
 * {
 * OBJECT::REMOVE_DOOR_FROM_SYSTEM(doorHash);
 * }
 * @param doorHash
 */
export function isDoorRegisteredWithSystem(doorHash: number): boolean { 
	return _in(0xc153c43e, 0xa202c8c1, _ch(doorHash), _r); 
}

export function isDrivebyTaskUnderneathDrivingTask(ped: number): boolean { 
	return _in(0x8785e6e4, 0x0c7a8818, ped, _r); 
}

/**
 * XBOX ONE
 */
export function isDurangoVersion(): boolean { 
	return _in(0x4d982adb, 0x1978442d, _r); 
}

export function isEntityAGhost(entity: number): boolean { 
	return _in(0x21d04d7b, 0xc538c146, entity, _r); 
}

export function isEntityAMissionEntity(entity: number): boolean { 
	return _in(0x0a7b2709, 0x12999b3c, entity, _r); 
}

export function isEntityAPed(entity: number): boolean { 
	return _in(0x524ac5ec, 0xea15343e, entity, _r); 
}

export function isEntityAVehicle(entity: number): boolean { 
	return _in(0x6ac7003f, 0xa6e5575e, entity, _r); 
}

export function isEntityAnObject(entity: number): boolean { 
	return _in(0x8d68c8fd, 0x0faca94e, entity, _r); 
}

/**
 * Checks if entity is within x/y/zSize distance of x/y/z.
 * 
 * Last three are unknown ints, almost always p7 = 0, p8 = 1, p9 = 0
 * @param entity
 * @param xPos
 * @param yPos
 * @param zPos
 * @param xSize
 * @param ySize
 * @param zSize
 * @param p7
 * @param p8
 * @param p9
 */
export function isEntityAtCoord(entity: number, xPos: number, yPos: number, zPos: number, xSize: number, ySize: number, zSize: number, p7: boolean, p8: boolean, p9: number): boolean { 
	return _in(0x20b60995, 0x556d004f, entity, _fv(xPos), _fv(yPos), _fv(zPos), _fv(xSize), _fv(ySize), _fv(zSize), p7, p8, p9, _r); 
}

/**
 * Checks if entity1 is within the box defined by x/y/zSize of entity2.
 * 
 * Last three parameters are almost alwasy p5 = 0, p6 = 1, p7 = 0
 * @param entity1
 * @param entity2
 * @param xSize
 * @param ySize
 * @param zSize
 * @param p5
 * @param p6
 * @param p7
 */
export function isEntityAtEntity(entity1: number, entity2: number, xSize: number, ySize: number, zSize: number, p5: boolean, p6: boolean, p7: number): boolean { 
	return _in(0x751b70c3, 0xd034e187, entity1, entity2, _fv(xSize), _fv(ySize), _fv(zSize), p5, p6, p7, _r); 
}

/**
 * Whether the entity is attached to any other entity.
 * @param entity
 */
export function isEntityAttached(entity: number): boolean { 
	return _in(0xb346476e, 0xf1a64897, entity, _r); 
}

export function isEntityAttachedToAnyObject(entity: number): boolean { 
	return _in(0xcf511840, 0xceede0cc, entity, _r); 
}

export function isEntityAttachedToAnyPed(entity: number): boolean { 
	return _in(0xb1632e9a, 0x5f988d11, entity, _r); 
}

export function isEntityAttachedToAnyVehicle(entity: number): boolean { 
	return _in(0x26aa915a, 0xd89bfb4b, entity, _r); 
}

export function isEntityAttachedToEntity(from: number, to: number): boolean { 
	return _in(0xefbe7189, 0x8a993728, from, to, _r); 
}

export function isEntityAttachedToHandlerFrame(vehicle: number, entity: number): boolean { 
	return _in(0x57715966, 0x069157ad, vehicle, entity, _r); 
}

export function isEntityDead(entity: number, p1: boolean): boolean { 
	return _in(0x5f9532f3, 0xb5cc2551, entity, p1, _r); 
}

export function isEntityFocus(entity: number): boolean { 
	return _in(0x2ddff3fb, 0x9075d747, entity, _r); 
}

export function isEntityInAir(entity: number): boolean { 
	return _in(0x886e37ec, 0x497200b6, entity, _r); 
}

/**
 * `p8` is a debug flag invoking functions in the same path as ``DRAW_MARKER``
 * `p10` is some entity flag check, also used in `IS_ENTITY_AT_ENTITY`, `IS_ENTITY_IN_AREA`, and `IS_ENTITY_AT_COORD`.
 * See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
 * @param entity
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param width
 * @param debug
 * @param includeZ
 * @param p10
 */
export function isEntityInAngledArea(entity: number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number, debug: boolean, includeZ: boolean, p10: number): boolean { 
	return _in(0x51210ced, 0x3da1c78a, entity, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(width), debug, includeZ, p10, _r); 
}

export function isEntityInArea(entity: number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, p7: boolean, p8: boolean, p9: number): boolean { 
	return _in(0x54736aa4, 0x0e271165, entity, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), p7, p8, p9, _r); 
}

export function isEntityInGhostCollision(entity: number): boolean { 
	return _in(0x7ef7649b, 0x64d7ff10, entity, _r); 
}

export function isEntityInWater(entity: number): boolean { 
	return _in(0xcfb0a0d8, 0xedd145a3, entity, _r); 
}

/**
 * Full list of zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/zones.json
 * @param entity
 * @param zone
 */
export function isEntityInZone(entity: number, zone: string): boolean { 
	return _in(0xb6463cf6, 0xaf527071, entity, _ts(zone), _r); 
}

export function isEntityOccluded(entity: number): boolean { 
	return _in(0xe31c2c72, 0xb8692b64, entity, _r); 
}

export function isEntityOnFire(entity: number): boolean { 
	return _in(0x28d3fed7, 0x190d3a0b, entity, _r); 
}

/**
 * Returns true if the entity is in between the minimum and maximum values for the 2d screen coords.
 * This means that it will return true even if the entity is behind a wall for example, as long as you're looking at their location.
 * Chipping
 * @param entity
 */
export function isEntityOnScreen(entity: number): boolean { 
	return _in(0xe659e47a, 0xf827484b, entity, _r); 
}

/**
 * See also PED::IS_SCRIPTED_SCENARIO_PED_USING_CONDITIONAL_ANIM 0x6EC47A344923E1ED 0x3C30B447
 * 
 * Taken from ENTITY::IS_ENTITY_PLAYING_ANIM(PLAYER::PLAYER_PED_ID(), "creatures@shark@move", "attack_player", 3)
 * 
 * p4 is always 3 in the scripts.
 * 
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param entity
 * @param animDict
 * @param animName
 * @param taskFlag
 */
export function isEntityPlayingAnim(entity: number, animDict: string, animName: string, taskFlag: number): boolean { 
	return _in(0x1f0b7922, 0x8e461ec9, entity, _ts(animDict), _ts(animName), taskFlag, _r); 
}

/**
 * a static ped will not react to natives like "APPLY_FORCE_TO_ENTITY" or "SET_ENTITY_VELOCITY" and oftentimes will not react to task-natives like "TASK::TASK_COMBAT_PED". The only way I know of to make one of these peds react is to ragdoll them (or sometimes to use CLEAR_PED_TASKS_IMMEDIATELY(). Static peds include almost all far-away peds, beach-combers, peds in certain scenarios, peds crossing a crosswalk, peds walking to get back into their cars, and others. If anyone knows how to make a ped non-static without ragdolling them, please edit this with the solution.
 * 
 * how can I make an entity static???
 * @param entity
 */
export function isEntityStatic(entity: number): boolean { 
	return _in(0x1218e688, 0x6d3d8327, entity, _r); 
}

export function isEntityTouchingEntity(entity: number, targetEntity: number): boolean { 
	return _in(0x17ffc1b2, 0xba35a494, entity, targetEntity, _r); 
}

export function isEntityTouchingModel(entity: number, modelHash: number): boolean { 
	return _in(0x0f423237, 0x98a58c8c, entity, _ch(modelHash), _r); 
}

export function isEntityUpright(entity: number, angle: number): boolean { 
	return _in(0x5333f526, 0xf6ab19aa, entity, _fv(angle), _r); 
}

export function isEntityUpsidedown(entity: number): boolean { 
	return _in(0x1dbd5882, 0x0fa61d71, entity, _r); 
}

export function isEntityVisible(entity: number): boolean { 
	return _in(0x47d6f43d, 0x77935c75, entity, _r); 
}

export function isEntityVisibleToScript(entity: number): boolean { 
	return _in(0xd796cb5b, 0xa8f20e32, entity, _r); 
}

export function isEntityWaitingForWorldCollision(entity: number): boolean { 
	return _in(0xd05bff0c, 0x0a12c68f, entity, _r); 
}

/**
 * Check if a vehicle seat is accessible. If you park your vehicle near a wall and the ped cannot enter/exit this side, the return value toggles from true (not blocked) to false (blocked).
 * 
 * seatIndex  = -1 being the driver seat.
 * Use GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS(vehicle) - 1 for last seat index.
 * side = only relevant for bikes/motorcycles to check if the left (false)/right (true) side is blocked.
 * onEnter = check if you can enter (true) or exit (false) a vehicle.
 * @param ped
 * @param vehicle
 * @param seatIndex
 * @param side
 * @param onEnter
 */
export function isEntryPointForSeatClear(ped: number, vehicle: number, seatIndex: number, side: boolean, onEnter: boolean): boolean { 
	return _in(0x639431e8, 0x95b9aa57, ped, vehicle, seatIndex, side, onEnter, _r); 
}

/**
 * explosionType: See ADD_EXPLOSION.
 * @param explosionType
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 */
export function isExplosionActiveInArea(explosionType: number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): boolean { 
	return _in(0x6070104b, 0x699b2ef4, explosionType, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _r); 
}

/**
 * explosionType: See ADD_EXPLOSION, -1 for any explosion type
 * 
 * @param explosionType
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param width
 */
export function isExplosionInAngledArea(explosionType: number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number): boolean { 
	return _in(0xa079a6c5, 0x1525dc4b, explosionType, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(width), _r); 
}

/**
 * explosionType: See ADD_EXPLOSION.
 * @param explosionType
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 */
export function isExplosionInArea(explosionType: number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): boolean { 
	return _in(0x2e2eba0e, 0xe7ced0e0, explosionType, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _r); 
}

/**
 * explosionType: See ADD_EXPLOSION.
 * @param explosionType
 * @param x
 * @param y
 * @param z
 * @param radius
 */
export function isExplosionInSphere(explosionType: number, x: number, y: number, z: number, radius: number): boolean { 
	return _in(0xab0f8168, 0x85b0e483, explosionType, _fv(x), _fv(y), _fv(z), _fv(radius), _r); 
}

/**
 * Returns true if specified extra part is broken off. It only works for extras that can break off during collisions, non-breakable extras always return false. Also returns true if the breakable extra is toggled off through script.
 * @param vehicle
 * @param extraId
 */
export function isExtraBrokenOff(vehicle: number, extraId: number): boolean { 
	return _in(0x534e36d4, 0xdb9ecc5d, vehicle, extraId, _r); 
}

export function isFirstPersonAimCamActive(): boolean { 
	return _in(0x5e346d93, 0x4122613f, _r); 
}

export function isFlashLightOn(ped: number): boolean { 
	return _in(0x4b7620c4, 0x7217126c, ped, _r); 
}

export function isFloatingHelpTextOnScreen(hudIndex: number): boolean { 
	return _in(0x2432784a, 0xca090da4, hudIndex, _r); 
}

export function isFollowPedCamActive(): boolean { 
	return _in(0xc6d3d268, 0x10c8e0f9, _r); 
}

export function isFollowVehicleCamActive(): boolean { 
	return _in(0xcbbde6d3, 0x35d6d496, _r); 
}

/**
 * This function is hard-coded to always return 0.
 */
export function isFrontendFading(): boolean { 
	return _in(0x7ea2b6af, 0x97eca6ed, _r); 
}

export function isFrontendReadyForControl(): boolean { 
	return _in(0x3bab9a4e, 0x4f2ff5c7, _r); 
}

/**
 * Hardcoded to return 1
 */
export function isGameInControlOfMusic(): boolean { 
	return _in(0x6d28dc16, 0x71e334fd, _r); 
}

export function isGameplayCamLookingBehind(): boolean { 
	return _in(0x70fda869, 0xf3317ea9, _r); 
}

/**
 * Examples when this function will return 0 are:
 * - During busted screen.
 * - When player is coming out from a hospital.
 * - When player is coming out from a police station.
 * - When player is buying gun from AmmuNation.
 */
export function isGameplayCamRendering(): boolean { 
	return _in(0x39b5d1b1, 0x0383f0c8, _r); 
}

export function isGameplayCamShaking(): boolean { 
	return _in(0x016c0906, 0x30df1f89, _r); 
}

export function isGameplayHintActive(): boolean { 
	return _in(0xe520ff1a, 0xd2785b40, _r); 
}

export function isGarageEmpty(garageHash: number, p1: boolean, p2: number): boolean { 
	return _in(0x90e47239, 0xea1980b8, _ch(garageHash), p1, p2, _r); 
}

export function isHandlerFrameLinedUpWithContainer(vehicle: number, entity: number): boolean { 
	return _in(0x89d630cf, 0x5ea96d23, vehicle, entity, _r); 
}

export function isHeliLandingAreaBlocked(vehicle: number): boolean { 
	return _in(0x63414874, 0x4f385576, vehicle, _r); 
}

export function isHeliPartBroken(vehicle: number, p1: boolean, p2: boolean, p3: boolean): boolean { 
	return _in(0xbc74b4be, 0x25eb6c8a, vehicle, p1, p2, p3, _r); 
}

export function isHelpMessageBeingDisplayed(): boolean { 
	return _in(0x4d79439a, 0x6b55ac67, _r); 
}

export function isHelpMessageFadingOut(): boolean { 
	return _in(0x327edeee, 0xac55c369, _r); 
}

export function isHelpMessageOnScreen(): boolean { 
	return _in(0xdad37f45, 0x428801ae, _r); 
}

/**
 * Checks whether the horn of a vehicle is currently played.
 * @param vehicle
 */
export function isHornActive(vehicle: number): boolean { 
	return _in(0x9d6bfc12, 0xb05c6121, vehicle, _r); 
}

export function isHoveringOverMissionCreatorBlip(): boolean { 
	return _in(0x4167efe0, 0x527d706e, _r); 
}

/**
 * Full list of components below
 * 
 * HUD = 0;
 * HUD_WANTED_STARS = 1;
 * HUD_WEAPON_ICON = 2;
 * HUD_CASH = 3;
 * HUD_MP_CASH = 4;
 * HUD_MP_MESSAGE = 5;
 * HUD_VEHICLE_NAME = 6;
 * HUD_AREA_NAME = 7;
 * HUD_VEHICLE_CLASS = 8;
 * HUD_STREET_NAME = 9;
 * HUD_HELP_TEXT = 10;
 * HUD_FLOATING_HELP_TEXT_1 = 11;
 * HUD_FLOATING_HELP_TEXT_2 = 12;
 * HUD_CASH_CHANGE = 13;
 * HUD_RETICLE = 14;
 * HUD_SUBTITLE_TEXT = 15;
 * HUD_RADIO_STATIONS = 16;
 * HUD_SAVING_GAME = 17;
 * HUD_GAME_STREAM = 18;
 * HUD_WEAPON_WHEEL = 19;
 * HUD_WEAPON_WHEEL_STATS = 20;
 * MAX_HUD_COMPONENTS = 21;
 * MAX_HUD_WEAPONS = 22;
 * MAX_SCRIPTED_HUD_COMPONENTS = 141;
 * @param id
 */
export function isHudComponentActive(id: number): boolean { 
	return _in(0xbc4c9ea5, 0x391ecc0d, id, _r); 
}

export function isHudHidden(): boolean { 
	return _in(0xa86478c6, 0x958735c5, _r); 
}

export function isHudPreferenceSwitchedOn(): boolean { 
	return _in(0x1930dfa7, 0x31813ec4, _r); 
}

export function isImeInProgress(): boolean { 
	return _in(0x801879a9, 0xb4f4b2fb, _r); 
}

export function isInItemset(item: number, itemset: number): boolean { 
	return _in(0x2d0fc594, 0xd1e9c107, item, itemset, _r); 
}

export function isInVehicleMobilePhoneCameraRendering(): boolean { 
	return _in(0x1f2300cb, 0x7fa7b7f6, _r); 
}

/**
 * =======================================================
 * Correction, I have change this to int, instead of int*
 * as it doesn't use a pointer to the createdIncident.
 * If you try it you will crash (or) freeze.
 * =======================================================
 * @param incidentId
 */
export function isIncidentValid(incidentId: number): boolean { 
	return _in(0xc8bc6461, 0xe629beaa, incidentId, _r); 
}

export function isInteriorCapped(interior: number): boolean { 
	return _in(0x92bac8ac, 0xf88cec26, interior, _r); 
}

export function isInteriorDisabled(interior: number): boolean { 
	return _in(0xbc5115a5, 0xa939dd15, interior, _r); 
}

/**
 * Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json
 * @param interior
 * @param entitySetName
 */
export function isInteriorEntitySetActive(interior: number, entitySetName: string): boolean { 
	return _in(0x35f7dd45, 0xe8c0a16d, interior, _ts(entitySetName), _r); 
}

export function isInteriorReady(interior: number): boolean { 
	return _in(0x6726bdcc, 0xc1932f0e, interior, _r); 
}

export function isInteriorScene(): boolean { 
	return _in(0xbc72b5d7, 0xa1cbd54d, _r); 
}

export function isInterpolatingFromScriptCams(): boolean { 
	return _in(0x3044240d, 0x2e0fa842, _r); 
}

export function isInterpolatingToScriptCams(): boolean { 
	return _in(0x705a276e, 0xbff3133d, _r); 
}

/**
 * Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json
 * @param iplName
 */
export function isIplActive(iplName: string): boolean { 
	return _in(0x88a741e4, 0x4a2b3495, _ts(iplName), _r); 
}

export function isItemsetValid(itemset: number): boolean { 
	return _in(0xb1b1ea59, 0x6344dfab, itemset, _r); 
}

export function isJapaneseVersion(): boolean { 
	return _in(0xb8c0bb75, 0xd8a77db3, _r); 
}

export function isLookInverted(): boolean { 
	return _in(0x77b61253, 0x1280010d, _r); 
}

export function isMemoryCardInUse(): boolean { 
	return _in(0x8a75ce29, 0x56274add, _r); 
}

export function isMessageBeingDisplayed(): boolean { 
	return _in(0x7984c03a, 0xa5cc2f41, _r); 
}

export function isMinigameInProgress(): boolean { 
	return _in(0x2b4a15e4, 0x4de0f478, _r); 
}

export function isMinimapRendering(): boolean { 
	return _in(0xaf754f20, 0xeb5cd51a, _r); 
}

export function isMissionCompletePlaying(): boolean { 
	return _in(0x19a30c23, 0xf5827f8a, _r); 
}

export function isMissionCompleteReadyForUi(): boolean { 
	return _in(0x6f259f82, 0xd873b8b8, _r); 
}

export function isMissionCreatorBlip(blip: number): boolean { 
	return _in(0x26f49bf3, 0x381d933d, blip, _r); 
}

export function isMissionNewsStoryUnlocked(newsStory: number): boolean { 
	return _in(0x66e49bf5, 0x5b4b1874, newsStory, _r); 
}

export function isMissionTrain(train: number): boolean { 
	return _in(0xad464f2e, 0x18836bfc, train, _r); 
}

export function isMobileInterferenceActive(): boolean { 
	return _in(0xc8b1b242, 0x5604cdd0, _r); 
}

export function isMobilePhoneCallOngoing(): boolean { 
	return _in(0x7497d2ce, 0x2c30d24c, _r); 
}

export function isMobilePhoneRadioActive(): boolean { 
	return _in(0xb35ce999, 0xe8ef317e, _r); 
}

export function isMobilePhoneToPedEar(ped: number): boolean { 
	return _in(0xa3f3564a, 0x5b3646c0, ped, _r); 
}

export function isModelAPed(model: number): boolean { 
	return _in(0x75816577, 0xfea6dad5, _ch(model), _r); 
}

/**
 * Returns whether the specified model represents a vehicle.
 * @param model
 */
export function isModelAVehicle(model: number): boolean { 
	return _in(0x19aac8f0, 0x7bfec53e, _ch(model), _r); 
}

/**
 * Check if model is in cdimage(rpf)
 * @param model
 */
export function isModelInCdimage(model: number): boolean { 
	return _in(0x35b9e080, 0x3292b641, _ch(model), _r); 
}

/**
 * Returns whether the specified model exists in the game.
 * @param model
 */
export function isModelValid(model: number): boolean { 
	return _in(0xc0296a2e, 0xdf545e92, _ch(model), _r); 
}

export function isMountedWeaponTaskUnderneathDrivingTask(ped: number): boolean { 
	return _in(0xa320ef04, 0x6186fa3b, ped, _r); 
}

/**
 * Used with IS_LOOK_INVERTED() and negates its affect.
 * 
 * --
 * 
 * Not sure how the person above got that description, but here's an actual example:
 * 
 * if (PAD::IS_USING_KEYBOARD_AND_MOUSE(2)) {
 * if (a_5) {
 * if (PAD::IS_LOOK_INVERTED()) {
 * a_3 *= -1;
 * }
 * if (PAD::IS_MOUSE_LOOK_INVERTED()) {
 * a_3 *= -1;
 * }
 * }
 * }
 */
export function isMouseLookInverted(): boolean { 
	return _in(0xe1615ec0, 0x3b3bb4fd, _r); 
}

/**
 * Returns TRUE if mouse is hovering above instructional buttons. Works with all buttons gfx, such as popup_warning, pause_menu_instructional_buttons, instructional_buttons, etc. Note: You have to call TOGGLE_MOUSE_BUTTONS on the scaleform if you want this native to work.
 */
export function isMouseRolledOverInstructionalButtons(): boolean { 
	return _in(0x3d9acb1e, 0xb139e702, _r); 
}

export function isMoveBlendRatioRunning(ped: number): boolean { 
	return _in(0xd4d8636c, 0x0199a939, ped, _r); 
}

export function isMoveBlendRatioSprinting(ped: number): boolean { 
	return _in(0x24a2ad74, 0xfa9814e2, ped, _r); 
}

export function isMoveBlendRatioStill(ped: number): boolean { 
	return _in(0x349ce7b5, 0x6dafd95c, ped, _r); 
}

export function isMoveBlendRatioWalking(ped: number): boolean { 
	return _in(0xf133bbbe, 0x91e1691f, ped, _r); 
}

export function isMpGamerTagActive(gamerTagId: number): boolean { 
	return _in(0x4e929e7a, 0x5796fd26, gamerTagId, _r); 
}

export function isMpGamerTagFree(gamerTagId: number): boolean { 
	return _in(0x595b5178, 0xe412e199, gamerTagId, _r); 
}

export function isMpGamerTagMovieActive(): boolean { 
	return _in(0x6e0eb3eb, 0x47c8d7aa, _r); 
}

/**
 * Returns whether or not the text chat (MULTIPLAYER_CHAT Scaleform component) is active.
 */
export function isMpTextChatTyping(): boolean { 
	return _in(0xb118af58, 0xb5f332a1, _r); 
}

export function isMultiheadFadeUp(): boolean { 
	return _in(0xa0fe7616, 0x8a189ddb, _r); 
}

export function isMusicOneshotPlaying(): boolean { 
	return _in(0xa097ab27, 0x5061fb21, _r); 
}

export function isNamedRendertargetLinked(modelHash: number): boolean { 
	return _in(0x11375053, 0x8fa31298, _ch(modelHash), _r); 
}

export function isNamedRendertargetRegistered(name: string): boolean { 
	return _in(0x78dcdc15, 0xc9f116b4, _ts(name), _r); 
}

export function isNavigatingMenuContent(): boolean { 
	return _in(0x4e3cd0ef, 0x8a489541, _r); 
}

/**
 * Returns whether navmesh for the region is loaded. The region is a rectangular prism defined by it's top left deepest corner to it's bottom right shallowest corner.
 * 
 * If you can re-word this so it makes more sense, please do. I'm horrible with words sometimes...
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 */
export function isNavmeshLoadedInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): boolean { 
	return _in(0xf813c7e6, 0x3f9062a5, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _r); 
}

export function isNavmeshRequiredRegionInUse(): boolean { 
	return _in(0x705a8440, 0x02b39dc0, _r); 
}

export function isNetworkIdOwnedByParticipant(netId: number): boolean { 
	return _in(0xa1607996, 0x431332df, netId, _r); 
}

export function isNetworkLoadingScene(): boolean { 
	return _in(0x41ca5a33, 0x160ea4ab, _r); 
}

export function isNetworkVehicleRunningRespotTimer(networkID: number): boolean { 
	return _in(0xdd7cef5b, 0x3a4da8a6, networkID, _r); 
}

export function isNewLoadSceneActive(): boolean { 
	return _in(0xa41a05b6, 0xcb741b85, _r); 
}

export function isNewLoadSceneLoaded(): boolean { 
	return _in(0x01b8247a, 0x7a8b9ad1, _r); 
}

export function isNextWeatherType(weatherType: string): boolean { 
	return _in(0x2faa3a30, 0xbec0f25d, _ts(weatherType), _r); 
}

export function isNitrousActive(vehicle: number): boolean { 
	return _in(0x491e822b, 0x2c464fe4, vehicle, _r); 
}

export function isObjectAPickup(object: number): boolean { 
	return _in(0xfc481c64, 0x1ebbd27d, object, _r); 
}

export function isObjectAPortablePickup(object: number): boolean { 
	return _in(0x0378c085, 0x04160d0d, object, _r); 
}

/**
 * Despite the name, it does work for any entity type.
 * @param garageHash
 * @param entity
 * @param p2
 * @param p3
 */
export function isObjectEntirelyInsideGarage(garageHash: number, entity: number, p2: number, p3: number): boolean { 
	return _in(0x372ef669, 0x9146a1e4, _ch(garageHash), entity, _fv(p2), p3, _r); 
}

export function isObjectNearPoint(objectHash: number, x: number, y: number, z: number, range: number): boolean { 
	return _in(0x8c90fe4b, 0x381ba60a, _ch(objectHash), _fv(x), _fv(y), _fv(z), _fv(range), _r); 
}

/**
 * Despite the name, it does work for any entity type.
 * @param garageHash
 * @param entity
 * @param p2
 */
export function isObjectPartiallyInsideGarage(garageHash: number, entity: number, p2: number): boolean { 
	return _in(0xf0eed5a6, 0xbc7b237a, _ch(garageHash), entity, p2, _r); 
}

export function isObjectReassignmentInProgress(): boolean { 
	return _in(0x28123c8b, 0x056cc8aa, _r); 
}

export function isObjectVisible(object: number): boolean { 
	return _in(0x8b32ace6, 0x326a7546, object, _r); 
}

export function isObjectWithinBrainActivationRange(object: number): boolean { 
	return _in(0xccba1542, 0x09823057, object, _r); 
}

/**
 * Returns the same as IS_SOCIAL_CLUB_ACTIVE
 */
export function isOnlinePoliciesMenuActive(): boolean { 
	return _in(0x6f72cd94, 0xf7b5b68c, _r); 
}

/**
 * PS4
 */
export function isOrbisVersion(): boolean { 
	return _in(0xa72bc0b6, 0x75b1519e, _r); 
}

export function isPauseMenuActive(): boolean { 
	return _in(0xb0034a22, 0x3497ffcb, _r); 
}

export function isPauseMenuRestarting(): boolean { 
	return _in(0x1c491717, 0x107431c7, _r); 
}

export function isPausemapInInteriorMode(): boolean { 
	return _in(0x9049fe33, 0x9d5f6f6f, _r); 
}

export function isPcVersion(): boolean { 
	return _in(0x48af3644, 0x4b965238, _r); 
}

/**
 * Returns true if the given ped has a valid pointer to CPlayerInfo in its CPed class. That's all.
 * @param ped
 */
export function isPedAPlayer(ped: number): boolean { 
	return _in(0x12534c34, 0x8c6cb68b, ped, _r); 
}

export function isPedActiveInScenario(ped: number): boolean { 
	return _in(0xaa135f94, 0x82c82cc3, ped, _r); 
}

export function isPedAimingFromCover(ped: number): boolean { 
	return _in(0x3998b127, 0x6a3300e5, ped, _r); 
}

/**
 * Checks if the ped is currently equipped with a weapon matching a bit specified using a bitwise-or in typeFlags.
 * 
 * Type flag bit values:
 * 1 = Melee weapons
 * 2 = Explosive weapons
 * 4 = Any other weapons
 * 
 * Not specifying any bit will lead to the native *always* returning 'false', and for example specifying '4 | 2' will check for any weapon except fists and melee weapons.
 * 7 returns true if you are equipped with any weapon except your fists.
 * 6 returns true if you are equipped with any weapon except melee weapons.
 * 5 returns true if you are equipped with any weapon except the Explosives weapon group.
 * 4 returns true if you are equipped with any weapon except Explosives weapon group AND melee weapons.
 * 3 returns true if you are equipped with either Explosives or Melee weapons (the exact opposite of 4).
 * 2 returns true only if you are equipped with any weapon from the Explosives weapon group.
 * 1 returns true only if you are equipped with any Melee weapon.
 * 0 never returns true.
 * 
 * Note: When I say "Explosives weapon group", it does not include the Jerry can and Fire Extinguisher.
 * @param ped
 * @param typeFlags
 */
export function isPedArmed(ped: number, typeFlags: number): boolean { 
	return _in(0x475768a9, 0x75d5ad17, ped, typeFlags, _r); 
}

/**
 * This function is hard-coded to always return 0.
 * @param ped
 */
export function isPedBeingArrested(ped: number): boolean { 
	return _in(0x90a09f3a, 0x45fed688, ped, _r); 
}

export function isPedBeingJacked(ped: number): boolean { 
	return _in(0x9a497fe2, 0xdf198913, ped, _r); 
}

export function isPedBeingStealthKilled(ped: number): boolean { 
	return _in(0x863b23ef, 0xde9c5df2, ped, _r); 
}

/**
 * p1 is always 0
 * @param ped
 * @param p1
 */
export function isPedBeingStunned(ped: number, p1: number): boolean { 
	return _in(0x4fbacce3, 0xb4138ee8, ped, p1, _r); 
}

export function isPedBlushFacepaintTintForBarber(colorId: number): boolean { 
	return _in(0x09e7eca9, 0x81d9b210, colorId, _r); 
}

export function isPedBlushTintForBarber(colorID: number): boolean { 
	return _in(0x604e8101, 0x89ee3a59, colorID, _r); 
}

export function isPedBlushTintForCreator(colorId: number): boolean { 
	return _in(0xf41b5d29, 0x0c99a3d6, colorId, _r); 
}

export function isPedClimbing(ped: number): boolean { 
	return _in(0x53e8cb4f, 0x48bfe623, ped, _r); 
}

/**
 * Checks if the component variation is valid, this works great for randomizing components using loops.
 * 
 * List of component/props ID
 * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
 * 
 * Full list of ped components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedComponentVariations.json
 * @param ped
 * @param componentId
 * @param drawableId
 * @param textureId
 */
export function isPedComponentVariationValid(ped: number, componentId: number, drawableId: number, textureId: number): boolean { 
	return _in(0xe825f6b6, 0xcea7671d, ped, componentId, drawableId, textureId, _r); 
}

export function isPedCuffed(ped: number): boolean { 
	return _in(0x74e559b3, 0xbc910685, ped, _r); 
}

/**
 * This native returns a true or false value.
 * 
 * Ped ped = The ped whose weapon you want to check.
 * @param ped
 */
export function isPedCurrentWeaponSilenced(ped: number): boolean { 
	return _in(0x65f0c5ae, 0x05943ec7, ped, _r); 
}

/**
 * Seems to consistently return true if the ped is dead.
 * 
 * p1 is always passed 1 in the scripts.
 * 
 * I suggest to remove "OR_DYING" part, because it does not detect dying phase.
 * 
 * That's what the devs call it, cry about it.
 * 
 * lol
 * @param ped
 * @param p1
 */
export function isPedDeadOrDying(ped: number, p1: boolean): boolean { 
	return _in(0x3317dedb, 0x88c95038, ped, p1, _r); 
}

export function isPedDefensiveAreaActive(ped: number, p1: boolean): boolean { 
	return _in(0xba63d9fe, 0x45412247, ped, p1, _r); 
}

export function isPedDiving(ped: number): boolean { 
	return _in(0x5527b824, 0x6fef9b11, ped, _r); 
}

export function isPedDoingABeastJump(p0: number): boolean { 
	return _in(0x451d0501, 0x2ccec234, p0, _r); 
}

export function isPedDoingDriveby(ped: number): boolean { 
	return _in(0xb2c086cc, 0x1bf8f2bf, ped, _r); 
}

export function isPedDucking(ped: number): boolean { 
	return _in(0xd125ae74, 0x8725c6bc, ped, _r); 
}

/**
 * Presumably returns the Entity that the Ped is currently diving out of the way of.
 * 
 * var num3;
 * if (PED::IS_PED_EVASIVE_DIVING(A_0, &num3) != 0)
 * if (ENTITY::IS_ENTITY_A_VEHICLE(num3) != 0)
 * @param ped
 * @param evadingEntity
 */
export function isPedEvasiveDiving(ped: number, evadingEntity: number): [boolean, number] { 
	const [retval, evadingEntity_out] = _in(0x414641c2, 0x6e105898, ped, _ii(evadingEntity), _r);
	return [retval as boolean, evadingEntity_out as number]; 
}

export function isPedExclusiveDriverOfVehicle(ped: number, vehicle: number, outIndex: number): [boolean, number] { 
	const [retval, outIndex_out] = _in(0xb09d25e7, 0x7c33eb3f, ped, vehicle, _ii(outIndex), _r);
	return [retval as boolean, outIndex_out as number]; 
}

/**
 * angle is ped's view cone
 * @param ped
 * @param otherPed
 * @param angle
 */
export function isPedFacingPed(ped: number, otherPed: number, angle: number): boolean { 
	return _in(0xd71649db, 0x0a545aa3, ped, otherPed, _fv(angle), _r); 
}

export function isPedFalling(ped: number): boolean { 
	return _in(0xfb92a102, 0xf1c4dfa3, ped, _r); 
}

/**
 * Gets a value indicating whether this ped's health is below its fatally injured threshold. The default threshold is 100.
 * If the handle is invalid, the function returns true.
 * @param ped
 */
export function isPedFatallyInjured(ped: number): boolean { 
	return _in(0xd8394507, 0x56ed5a80, ped, _r); 
}

export function isPedFleeing(ped: number): boolean { 
	return _in(0xbbcce00b, 0x381f8482, ped, _r); 
}

export function isPedGesturing(p0: number): boolean { 
	return _in(0xc30bdaee, 0x47256c13, p0, _r); 
}

export function isPedGettingIntoAVehicle(ped: number): boolean { 
	return _in(0xbb062b2b, 0x5722478e, ped, _r); 
}

export function isPedGettingUp(ped: number): boolean { 
	return _in(0x2a74e1d5, 0xf2f00eec, ped, _r); 
}

export function isPedGoingIntoCover(ped: number): boolean { 
	return _in(0x9f65dbc5, 0x37e59ad5, ped, _r); 
}

export function isPedGroupMember(ped: number, groupId: number): boolean { 
	return _in(0x9bb01e38, 0x34671191, ped, groupId, _r); 
}

export function isPedHairTintForBarber(colorID: number): boolean { 
	return _in(0xe0d36e5d, 0x9e99cc21, colorID, _r); 
}

export function isPedHairTintForCreator(colorId: number): boolean { 
	return _in(0xed6d8e27, 0xa43b8cde, colorId, _r); 
}

export function isPedHangingOnToVehicle(ped: number): boolean { 
	return _in(0x1c86d8ae, 0xf8254b78, ped, _r); 
}

export function isPedHeadingTowardsPosition(ped: number, x: number, y: number, z: number, p4: number): boolean { 
	return _in(0xfcf37a45, 0x7cb96dc0, ped, _fv(x), _fv(y), _fv(z), _fv(p4), _r); 
}

export function isPedHeadtrackingEntity(ped: number, entity: number): boolean { 
	return _in(0x813a0a7c, 0x9d2e831f, ped, entity, _r); 
}

export function isPedHeadtrackingPed(ped1: number, ped2: number): boolean { 
	return _in(0x5cd3cb88, 0xa7f8850d, ped1, ped2, _r); 
}

export function isPedHelmetVisorUp(ped: number): boolean { 
	return _in(0xb9496ce4, 0x7546db2c, ped, _r); 
}

/**
 * Returns true/false if the ped is/isn't humanoid.
 * @param ped
 */
export function isPedHuman(ped: number): boolean { 
	return _in(0xb980061d, 0xa992779d, ped, _r); 
}

/**
 * Returns whether the specified ped is hurt.
 * @param ped
 */
export function isPedHurt(ped: number): boolean { 
	return _in(0x5983bb44, 0x9d7fdb12, ped, _r); 
}

export function isPedInAnyBoat(ped: number): boolean { 
	return _in(0x2e0e1c2b, 0x4f6cb339, ped, _r); 
}

export function isPedInAnyHeli(ped: number): boolean { 
	return _in(0x298b91ae, 0x825e5705, ped, _r); 
}

export function isPedInAnyPlane(ped: number): boolean { 
	return _in(0x5fff4cfc, 0x74d8fb80, ped, _r); 
}

export function isPedInAnyPoliceVehicle(ped: number): boolean { 
	return _in(0x0bd04e29, 0x640c9c12, ped, _r); 
}

export function isPedInAnySub(ped: number): boolean { 
	return _in(0xfbfc01cc, 0xfb35d99e, ped, _r); 
}

export function isPedInAnyTaxi(ped: number): boolean { 
	return _in(0x6e575d6a, 0x898ab852, ped, _r); 
}

export function isPedInAnyTrain(ped: number): boolean { 
	return _in(0x6f972c1a, 0xb75a1ed0, ped, _r); 
}

/**
 * Gets a value indicating whether the specified ped is in any vehicle.
 * 
 * If 'atGetIn' is false, the function will not return true until the ped is sitting in the vehicle and is about to close the door. If it's true, the function returns true the moment the ped starts to get onto the seat (after opening the door). Eg. if false, and the ped is getting into a submersible, the function will not return true until the ped has descended down into the submersible and gotten into the seat, while if it's true, it'll return true the moment the hatch has been opened and the ped is about to descend into the submersible.
 * @param ped
 * @param atGetIn
 */
export function isPedInAnyVehicle(ped: number, atGetIn: boolean): boolean { 
	return _in(0x997abd67, 0x1d25ca0b, ped, atGetIn, _r); 
}

/**
 * Checks to see if ped and target are in combat with eachother. Only goes one-way: if target is engaged in combat with ped but ped has not yet reacted, the function will return false until ped starts fighting back.
 * 
 * p1 is usually 0 in the scripts because it gets the ped id during the task sequence. For instance: PED::IS_PED_IN_COMBAT(l_42E[4 -- [[14]] ], PLAYER::PLAYER_PED_ID()) // armenian2.ct4: 43794
 * @param ped
 * @param target
 */
export function isPedInCombat(ped: number, target: number): boolean { 
	return _in(0x4859f1fc, 0x66a6278e, ped, target, _r); 
}

/**
 * p1 is nearly always 0 in the scripts.
 * @param ped
 * @param exceptUseWeapon
 */
export function isPedInCover(ped: number, exceptUseWeapon: boolean): boolean { 
	return _in(0x60dfd069, 0x1a170b88, ped, exceptUseWeapon, _r); 
}

export function isPedInCoverFacingLeft(ped: number): boolean { 
	return _in(0x845333b3, 0x150583ab, ped, _r); 
}

export function isPedInCurrentConversation(ped: number): boolean { 
	return _in(0x049e937f, 0x18f4020c, ped, _r); 
}

export function isPedInFlyingVehicle(ped: number): boolean { 
	return _in(0x91348735, 0x37fa419c, ped, _r); 
}

export function isPedInGroup(ped: number): boolean { 
	return _in(0x5891cac5, 0xd4acff74, ped, _r); 
}

export function isPedInHighCover(ped: number): boolean { 
	return _in(0x6a03bf94, 0x3d767c93, ped, _r); 
}

/**
 * Notes: The function only returns true while the ped is:
 * A.) Swinging a random melee attack (including pistol-whipping)
 * 
 * B.) Reacting to being hit by a melee attack (including pistol-whipping)
 * 
 * C.) Is locked-on to an enemy (arms up, strafing/skipping in the default fighting-stance, ready to dodge+counter).
 * 
 * You don't have to be holding the melee-targetting button to be in this stance; you stay in it by default for a few seconds after swinging at someone. If you do a sprinting punch, it returns true for the duration of the punch animation and then returns false again, even if you've punched and made-angry many peds
 * @param ped
 */
export function isPedInMeleeCombat(ped: number): boolean { 
	return _in(0x4e209b2c, 0x1ead5159, ped, _r); 
}

export function isPedInModel(ped: number, modelHash: number): boolean { 
	return _in(0x796d90ef, 0xb19aa332, ped, _ch(modelHash), _r); 
}

export function isPedInParachuteFreeFall(ped: number): boolean { 
	return _in(0x7dce8bda, 0x0f1c1200, ped, _r); 
}

export function isPedInSphereAreaOfAnyEnemyPeds(ped: number, x: number, y: number, z: number, range: number): boolean { 
	return _in(0x082d79e1, 0x5302f0c2, ped, _fv(x), _fv(y), _fv(z), _fv(range), _r); 
}

/**
 * Gets a value indicating whether the specified ped is in the specified vehicle.
 * 
 * If 'atGetIn' is false, the function will not return true until the ped is sitting in the vehicle and is about to close the door. If it's true, the function returns true the moment the ped starts to get onto the seat (after opening the door). Eg. if false, and the ped is getting into a submersible, the function will not return true until the ped has descended down into the submersible and gotten into the seat, while if it's true, it'll return true the moment the hatch has been opened and the ped is about to descend into the submersible.
 * @param ped
 * @param vehicle
 * @param atGetIn
 */
export function isPedInVehicle(ped: number, vehicle: number, atGetIn: boolean): boolean { 
	return _in(0xa3ee4a07, 0x279bb9db, ped, vehicle, atGetIn, _r); 
}

/**
 * This native checks if a ped is on the ground, in pain from a (gunshot) wound.
 * Returns `true` if the ped is in writhe, `false` otherwise.
 * @param ped
 */
export function isPedInWrithe(ped: number): boolean { 
	return _in(0xdeb6d521, 0x26e7d640, ped, _r); 
}

/**
 * Gets a value indicating whether this ped's health is below its injured threshold.
 * 
 * The default threshold is 100.
 * @param ped
 */
export function isPedInjured(ped: number): boolean { 
	return _in(0x84a2dd9a, 0xc37c35c1, ped, _r); 
}

export function isPedJacking(ped: number): boolean { 
	return _in(0x4ae4ff91, 0x1dfb61da, ped, _r); 
}

export function isPedJumping(ped: number): boolean { 
	return _in(0xcedabc59, 0x00a0bf97, ped, _r); 
}

export function isPedJumpingOutOfVehicle(ped: number): boolean { 
	return _in(0x433ddffe, 0x2044b636, ped, _r); 
}

export function isPedLanding(p0: number): boolean { 
	return _in(0x412f1364, 0xfa066cfb, p0, _r); 
}

export function isPedLipstickTintForBarber(colorID: number): boolean { 
	return _in(0x0525a2c2, 0x562f3cd4, colorID, _r); 
}

export function isPedLipstickTintForCreator(colorId: number): boolean { 
	return _in(0x3e802f11, 0xfbe27674, colorId, _r); 
}

/**
 * Returns true/false if the ped is/isn't male.
 * @param ped
 */
export function isPedMale(ped: number): boolean { 
	return _in(0x6d9f5faa, 0x7488ba46, ped, _r); 
}

export function isPedModel(ped: number, modelHash: number): boolean { 
	return _in(0xc9d55b1a, 0x358a5bf7, ped, _ch(modelHash), _r); 
}

export function isPedOnAnyBike(ped: number): boolean { 
	return _in(0x94495889, 0xe22c6479, ped, _r); 
}

export function isPedOnFoot(ped: number): boolean { 
	return _in(0x01fee67d, 0xb37f59b2, ped, _r); 
}

/**
 * Same function call as PED::GET_MOUNT, aka just returns 0
 * @param ped
 */
export function isPedOnMount(ped: number): boolean { 
	return _in(0x460bc76a, 0x0e10655e, ped, _r); 
}

export function isPedOnSpecificVehicle(ped: number, vehicle: number): boolean { 
	return _in(0xec5f66e4, 0x59af3bb2, ped, vehicle, _r); 
}

/**
 * Gets a value indicating whether the specified ped is on top of any vehicle.
 * 
 * Return 1 when ped is on vehicle.
 * Return 0 when ped is not on a vehicle.
 * 
 * @param ped
 */
export function isPedOnVehicle(ped: number): boolean { 
	return _in(0x67722aeb, 0x798e5fab, ped, _r); 
}

/**
 * Returns true if the ped is currently opening a door (CTaskOpenDoor).
 * @param ped
 */
export function isPedOpeningDoor(ped: number): boolean { 
	return _in(0x26af0e8e, 0x30bd2a2c, ped, _r); 
}

export function isPedPerformingACounterAttack(ped: number): boolean { 
	return _in(0xebd0edba, 0x5be957cf, ped, _r); 
}

export function isPedPerformingMeleeAction(ped: number): boolean { 
	return _in(0xdcca191d, 0xf9980fd7, ped, _r); 
}

export function isPedPerformingStealthKill(ped: number): boolean { 
	return _in(0xfd4ccdbc, 0xc59941b7, ped, _r); 
}

export function isPedPlantingBomb(ped: number): boolean { 
	return _in(0xc70b5fae, 0x151982d8, ped, _r); 
}

/**
 * Used only once (am_mp_property_int)
 * 
 * ped was PLAYER_PED_ID()
 * 
 * Related to CTaskAmbientClips.
 * @param ped
 */
export function isPedPlayingBaseClipInScenario(ped: number): boolean { 
	return _in(0x621c6e47, 0x29388e41, ped, _r); 
}

export function isPedProne(ped: number): boolean { 
	return _in(0xd6a86331, 0xa537a7b9, ped, _r); 
}

/**
 * If the ped handle passed through the parenthesis is in a ragdoll state this will return true.
 * @param ped
 */
export function isPedRagdoll(ped: number): boolean { 
	return _in(0x47e4e977, 0x581c5b55, ped, _r); 
}

/**
 * Returns whether the specified ped is reloading.
 * @param ped
 */
export function isPedReloading(ped: number): boolean { 
	return _in(0x24b100c6, 0x8c645951, ped, _r); 
}

export function isPedRespondingToEvent(ped: number, event: number): boolean { 
	return _in(0x625b774d, 0x75c87068, ped, event, _r); 
}

export function isPedRingtonePlaying(ped: number): boolean { 
	return _in(0x1e8e5e20, 0x937e3137, ped, _r); 
}

export function isPedRunning(ped: number): boolean { 
	return _in(0xc5286ffc, 0x176f28a2, ped, _r); 
}

export function isPedRunningArrestTask(ped: number): boolean { 
	return _in(0x3dc52677, 0x769b4ae0, ped, _r); 
}

export function isPedRunningMeleeTask(ped: number): boolean { 
	return _in(0xd1871251, 0xf3b5acd7, ped, _r); 
}

export function isPedRunningMobilePhoneTask(ped: number): boolean { 
	return _in(0x2afe52f7, 0x82f25775, ped, _r); 
}

export function isPedRunningRagdollTask(ped: number): boolean { 
	return _in(0xe3b6097c, 0xc25aa69e, ped, _r); 
}

export function isPedShaderReady(ped: number): boolean { 
	return _in(0x81aa517f, 0xbba05d39, ped, _r); 
}

export function isPedSheltered(ped: number): boolean { 
	return _in(0xb8b52e49, 0x8014f5b0, ped, _r); 
}

/**
 * Returns whether the specified ped is shooting.
 * @param ped
 */
export function isPedShooting(ped: number): boolean { 
	return _in(0x34616828, 0xcd07f1a1, ped, _r); 
}

export function isPedShootingInArea(ped: number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, p7: boolean, p8: boolean): boolean { 
	return _in(0x7e9dfe24, 0xac1e58ef, ped, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), p7, p8, _r); 
}

/**
 * Detect if ped is in any vehicle
 * [True/False]
 * @param ped
 */
export function isPedSittingInAnyVehicle(ped: number): boolean { 
	return _in(0x826aa586, 0xedb9fef8, ped, _r); 
}

/**
 * Detect if ped is sitting in the specified vehicle
 * [True/False]
 * @param ped
 * @param vehicle
 */
export function isPedSittingInVehicle(ped: number, vehicle: number): boolean { 
	return _in(0xa808aa1d, 0x79230fc2, ped, vehicle, _r); 
}

export function isPedSprinting(ped: number): boolean { 
	return _in(0x57e457cd, 0x2c0fc168, ped, _r); 
}

export function isPedStill(ped: number): boolean { 
	return _in(0xac29253e, 0xef8f0180, ped, _r); 
}

/**
 * Returns true if the ped doesn't do any movement. If the ped is being pushed forwards by using APPLY_FORCE_TO_ENTITY for example, the function returns false.
 * @param ped
 */
export function isPedStopped(ped: number): boolean { 
	return _in(0x530944f6, 0xf4b8a214, ped, _r); 
}

/**
 * What's strafing?
 * @param ped
 */
export function isPedStrafing(ped: number): boolean { 
	return _in(0xe45b7f22, 0x2de47e09, ped, _r); 
}

export function isPedSwimming(ped: number): boolean { 
	return _in(0x9de32763, 0x1295b4c2, ped, _r); 
}

export function isPedSwimmingUnderWater(ped: number): boolean { 
	return _in(0xc024869a, 0x53992f34, ped, _r); 
}

export function isPedSwitchingWeapon(Ped: number): boolean { 
	return _in(0x3795688a, 0x307e1eb6, Ped, _r); 
}

export function isPedTakingOffHelmet(ped: number): boolean { 
	return _in(0x14590ddb, 0xedb1ec85, ped, _r); 
}

export function isPedTracked(ped: number): boolean { 
	return _in(0x4c5e1f08, 0x7cd10bb7, ped, _r); 
}

export function isPedTryingToEnterALockedVehicle(ped: number): boolean { 
	return _in(0x44d28d5d, 0xdfe5f68c, ped, _r); 
}

export function isPedUsingActionMode(ped: number): boolean { 
	return _in(0x00e73468, 0xd085f745, ped, _r); 
}

export function isPedUsingAnyScenario(ped: number): boolean { 
	return _in(0x57ab4a30, 0x80f85143, ped, _r); 
}

/**
 * Full list of ped scenarios by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenariosCompact.json
 * @param ped
 * @param scenario
 */
export function isPedUsingScenario(ped: number, scenario: string): boolean { 
	return _in(0x1bf09473, 0x6dd62c2e, ped, _ts(scenario), _r); 
}

export function isPedVaulting(ped: number): boolean { 
	return _in(0x117c70d1, 0xf5730b5e, ped, _r); 
}

export function isPedWalking(ped: number): boolean { 
	return _in(0xde4c184b, 0x2b9b071a, ped, _r); 
}

/**
 * Full list of weapons & components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param componentHash
 */
export function isPedWeaponComponentActive(ped: number, weaponHash: number, componentHash: number): boolean { 
	return _in(0x0d78de05, 0x72d3969e, ped, _ch(weaponHash), _ch(componentHash), _r); 
}

export function isPedWeaponReadyToShoot(ped: number): boolean { 
	return _in(0xb80ca294, 0xf2f26749, ped, _r); 
}

/**
 * Returns true if the ped passed through the parenthesis is wearing a helmet.
 * @param ped
 */
export function isPedWearingHelmet(ped: number): boolean { 
	return _in(0xf33bdfe1, 0x9b309b19, ped, _r); 
}

export function isPedheadshotImgUploadAvailable(): boolean { 
	return _in(0xebb37677, 0x9a760aa8, _r); 
}

/**
 * gtaforums.com/topic/885580-ped-headshotmugshot-txd/
 * @param id
 */
export function isPedheadshotReady(id: number): boolean { 
	return _in(0x70852288, 0x42b13a67, id, _r); 
}

/**
 * gtaforums.com/topic/885580-ped-headshotmugshot-txd/
 * @param id
 */
export function isPedheadshotValid(id: number): boolean { 
	return _in(0xa0a9668f, 0x158129a2, id, _r); 
}

export function isPickupWeaponObjectValid(object: number): boolean { 
	return _in(0x11d1e53a, 0x726891fe, object, _r); 
}

export function isPlaneLandingGearIntact(plane: number): boolean { 
	return _in(0x4198ab00, 0x22b15f87, plane, _r); 
}

export function isPlaybackGoingOnForVehicle(vehicle: number): boolean { 
	return _in(0x1c8a4c2c, 0x19e68eec, vehicle, _r); 
}

export function isPlaybackUsingAiGoingOnForVehicle(vehicle: number): boolean { 
	return _in(0xaea8fd59, 0x1fad4106, vehicle, _r); 
}

/**
 * Returns true if an unk value is greater than 0.0f
 * @param player
 */
export function isPlayerBattleAware(player: number): boolean { 
	return _in(0x38d28da8, 0x1e4e9bf9, player, _r); 
}

/**
 * Return true while player is being arrested / busted.
 * 
 * If atArresting is set to 1, this function will return 1 when player is being arrested (while player is putting his hand up, but still have control)
 * 
 * If atArresting is set to 0, this function will return 1 only when the busted screen is shown.
 * @param player
 * @param atArresting
 */
export function isPlayerBeingArrested(player: number, atArresting: boolean): boolean { 
	return _in(0x388a47c5, 0x1abdac8e, player, atArresting, _r); 
}

export function isPlayerBluetoothEnable(player: number): boolean { 
	return _in(0x65faee42, 0x5de637b0, player, _r); 
}

/**
 * Returns TRUE if the player ('s ped) is climbing at the moment.
 * @param player
 */
export function isPlayerClimbing(player: number): boolean { 
	return _in(0x95e8f73d, 0xc65efb9c, player, _r); 
}

/**
 * Can the player control himself, used to disable controls for player for things like a cutscene.
 * 
 * ---
 * 
 * You can't disable controls with this, use SET_PLAYER_CONTROL(...) for this.
 * @param player
 */
export function isPlayerControlOn(player: number): boolean { 
	return _in(0x49c32d60, 0x007afa47, player, _r); 
}

export function isPlayerDead(player: number): boolean { 
	return _in(0x424d4687, 0xfa1e5652, player, _r); 
}

export function isPlayerEntirelyInsideGarage(garageHash: number, player: number, p2: number, p3: number): boolean { 
	return _in(0x024a60de, 0xb0ea69f0, _ch(garageHash), player, _fv(p2), p3, _r); 
}

/**
 * Gets a value indicating whether the specified player is currently aiming freely.
 * @param player
 */
export function isPlayerFreeAiming(player: number): boolean { 
	return _in(0x2e397fd2, 0xecd37c87, player, _r); 
}

/**
 * Gets a value indicating whether the specified player is currently aiming freely at the specified entity.
 * @param player
 * @param entity
 */
export function isPlayerFreeAimingAtEntity(player: number, entity: number): boolean { 
	return _in(0x3c06b5c8, 0x39b38f7b, player, entity, _r); 
}

export function isPlayerFreeForAmbientTask(player: number): boolean { 
	return _in(0xdccfd3f1, 0x06c36ab4, player, _r); 
}

export function isPlayerInCutscene(player: number): boolean { 
	return _in(0xe73092f4, 0x157cd126, player, _r); 
}

/**
 * this function is hard-coded to always return 0.
 */
export function isPlayerLoggingInNp(): boolean { 
	return _in(0x74556e14, 0x20867eca, _r); 
}

/**
 * Returns TRUE if the game is in online mode and FALSE if in offline mode.
 * 
 * This is an alias for NETWORK_IS_SIGNED_ONLINE.
 */
export function isPlayerOnline(): boolean { 
	return _in(0xf25d331d, 0xc2627bbc, _r); 
}

export function isPlayerPartiallyInsideGarage(garageHash: number, player: number, p2: number): boolean { 
	return _in(0x1761dc5d, 0x8471cbaa, _ch(garageHash), player, p2, _r); 
}

/**
 * Checks whether the specified player has a Ped, the Ped is not dead, is not injured and is not arrested.
 * @param player
 */
export function isPlayerPlaying(player: number): boolean { 
	return _in(0x5e9564d8, 0x246b909a, player, _r); 
}

export function isPlayerPressingHorn(player: number): boolean { 
	return _in(0xfa1e2bf8, 0xb10598f9, player, _r); 
}

export function isPlayerReadyForCutscene(player: number): boolean { 
	return _in(0x908cbecc, 0x2caa3690, player, _r); 
}

/**
 * Returns true if the player is riding a train.
 * @param player
 */
export function isPlayerRidingTrain(player: number): boolean { 
	return _in(0x4ec12697, 0x209f2196, player, _r); 
}

export function isPlayerScriptControlOn(player: number): boolean { 
	return _in(0x8a876a65, 0x283dd7d7, player, _r); 
}

/**
 * Returns true if the player is currently switching, false otherwise.
 * (When the camera is in the sky moving from Trevor to Franklin for example)
 */
export function isPlayerSwitchInProgress(): boolean { 
	return _in(0xd9d2cfff, 0x49fab35f, _r); 
}

export function isPlayerTargettingAnything(player: number): boolean { 
	return _in(0x78cfe518, 0x96b6b8a4, player, _r); 
}

export function isPlayerTargettingEntity(player: number, entity: number): boolean { 
	return _in(0x7912f7fc, 0x4f6264b6, player, entity, _r); 
}

export function isPlayerTeleportActive(): boolean { 
	return _in(0x02b15662, 0xd7f8886f, _r); 
}

export function isPlayerVehRadioEnable(): boolean { 
	return _in(0x5f43d83f, 0xd6738741, _r); 
}

export function isPlayerVehicleWeaponToggledToNonHoming(p0: number): boolean { 
	return _in(0x6e4361ff, 0x3e8cd7ca, p0, _r); 
}

export function isPlayerWantedLevelGreater(player: number, wantedLevel: number): boolean { 
	return _in(0x238db2a2, 0xc23ee9ef, player, wantedLevel, _r); 
}

export function isPlayingPhoneGestureAnim(ped: number): boolean { 
	return _in(0xb8ebb1e9, 0xd3588c10, ped, _r); 
}

export function isPlaylistOnChannel(tvChannel: number, p1: number): boolean { 
	return _in(0x1f710bff, 0x7dae6261, tvChannel, p1, _r); 
}

/**
 * An angled area is an X-Z oriented rectangle with three parameters:
 * 1. origin: the mid-point along a base edge of the rectangle;
 * 2. extent: the mid-point of opposite base edge on the other Z;
 * 3. width: the length of the base edge; (named derived from logging strings ``CNetworkRoadNodeWorldStateData``).
 * 
 * The oriented rectangle can then be derived from the direction of the two points (``norm(origin - extent)``), its orthonormal, and the width, e.g:
 * 1. golf_mp https://i.imgur.com/JhsQAK9.png
 * 2. am_taxi https://i.imgur.com/TJWCZaT.jpg
 * @param xPos
 * @param yPos
 * @param zPos
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param width
 * @param debug
 * @param includeZ
 */
export function isPointInAngledArea(xPos: number, yPos: number, zPos: number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number, debug: boolean, includeZ: boolean): boolean { 
	return _in(0x2a70bae8, 0x883e4c81, _fv(xPos), _fv(yPos), _fv(zPos), _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(width), debug, includeZ, _r); 
}

export function isPointObscuredByAMissionEntity(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): boolean { 
	return _in(0xe54e209c, 0x35ffa18d, _fv(p0), _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), p6, _r); 
}

/**
 * Gets a value indicating whether the specified position is on a road.
 * The vehicle parameter is not implemented (ignored).
 * @param x
 * @param y
 * @param z
 * @param vehicle
 */
export function isPointOnRoad(x: number, y: number, z: number, vehicle: number): boolean { 
	return _in(0x125bf4ab, 0xfc536b09, _fv(x), _fv(y), _fv(z), vehicle, _r); 
}

export function isPopMultiplierAreaNetworked(id: number): boolean { 
	return _in(0x1312f4b2, 0x42609ce3, id, _r); 
}

/**
 * `range`: The range, seems to not be very accurate during testing.
 * `p4`: Unknown, when set to true it seems to always return true no matter what I try.
 * `checkVehicle`: Check for any vehicles in that area.
 * `checkPeds`: Check for any peds in that area.
 * `ignoreEntity`: This entity will be ignored if it's in the area. Set to 0 if you don't want to exclude any entities.
 * The BOOL parameters that are documented have not been confirmed. They are just documented from what I've found during testing. They may not work as expected in all cases.
 * 
 * Returns true if there is anything in that location matching the provided parameters.
 * @param x
 * @param y
 * @param z
 * @param range
 * @param p4
 * @param checkVehicles
 * @param checkPeds
 * @param p7
 * @param p8
 * @param ignoreEntity
 * @param p10
 */
export function isPositionOccupied(x: number, y: number, z: number, range: number, p4: boolean, checkVehicles: boolean, checkPeds: boolean, p7: boolean, p8: boolean, ignoreEntity: number, p10: boolean): boolean { 
	return _in(0xadcde75e, 0x1c60f32d, _fv(x), _fv(y), _fv(z), _fv(range), p4, checkVehicles, checkPeds, p7, p8, ignoreEntity, p10, _r); 
}

export function isPrevWeatherType(weatherType: string): boolean { 
	return _in(0x44f28f86, 0x433b10a9, _ts(weatherType), _r); 
}

/**
 * Determines whether there is a projectile within the specified coordinates. The coordinates form a rectangle.
 * 
 * - Nacorpio
 * 
 * 
 * ownedByPlayer = only projectiles fired by the player will be detected.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param ownedByPlayer
 */
export function isProjectileInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, ownedByPlayer: boolean): boolean { 
	return _in(0x5270a8fb, 0xc098c3f8, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), ownedByPlayer, _r); 
}

/**
 * See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param width
 * @param p7
 * @param ownedByPlayer
 */
export function isProjectileTypeInAngledArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number, p7: number, ownedByPlayer: boolean): boolean { 
	return _in(0xf0bc1240, 0x1061dea0, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(width), p7, ownedByPlayer, _r); 
}

/**
 * Determines whether there is a projectile of a specific type within the specified coordinates. The coordinates form a axis-aligned bounding box.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param type
 * @param ownedByPlayer
 */
export function isProjectileTypeInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, type: number, ownedByPlayer: boolean): boolean { 
	return _in(0x2e0dc353, 0x342c4a6d, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), type, ownedByPlayer, _r); 
}

export function isProjectileTypeWithinDistance(x: number, y: number, z: number, projectileHash: number, radius: number, ownedByPlayer: boolean): boolean { 
	return _in(0x34318593, 0x248c8fb2, _fv(x), _fv(y), _fv(z), _ch(projectileHash), _fv(radius), ownedByPlayer, _r); 
}

export function isPropLightOverriden(object: number): boolean { 
	return _in(0xadf084fb, 0x8f075d06, object, _r); 
}

/**
 * PS5 (Prospero) version...
 */
export function isProsperoVersion(): boolean { 
	return _in(0x807abe1a, 0xb65c24d2, _r); 
}

export function isPs3Version(): boolean { 
	return _in(0xcca1072c, 0x29d096c2, _r); 
}

export function isRadarHidden(): boolean { 
	return _in(0x157f93b0, 0x36700462, _r); 
}

export function isRadarPreferenceSwitchedOn(): boolean { 
	return _in(0x9eb6522e, 0xa68f22fe, _r); 
}

export function isRadioFadedOut(): boolean { 
	return _in(0x0626a247, 0xd2405330, _r); 
}

export function isRadioRetuning(): boolean { 
	return _in(0xa151a739, 0x4a214e65, _r); 
}

export function isRadioStationFavourited(radioStation: string): boolean { 
	return _in(0x2b1784db, 0x08afea79, _ts(radioStation), _r); 
}

export function isRemotePlayerInNonClonedVehicle(player: number): boolean { 
	return _in(0x690a61a6, 0xd13583f6, player, _r); 
}

export function isReplayAvailable(): boolean { 
	return _in(0x4282e081, 0x74868be3, _r); 
}

export function isReplayInitialized(): boolean { 
	return _in(0xdf4b952f, 0x7d381b95, _r); 
}

export function isReplayRecordSpaceAvailable(p0: boolean): boolean { 
	return _in(0x33d47e85, 0xb476abcd, p0, _r); 
}

/**
 * Checks if you're recording, returns TRUE when you start recording (F1) or turn on action replay (F2)
 * 
 * mov al, cs:g_bIsRecordingGameplay // byte_141DD0CD0 in b944
 * retn
 */
export function isReplayRecording(): boolean { 
	return _in(0x1897ca71, 0x995a90b4, _r); 
}

export function isReportugcMenuOpen(): boolean { 
	return _in(0x9135584d, 0x09a3437e, _r); 
}

export function isRocketBoostActive(vehicle: number): boolean { 
	return _in(0x3d34e80e, 0xed4ae3be, vehicle, _r); 
}

export function isRopeAttachedAtBothEnds(ropeId: number): [boolean, number] { 
	const [retval, ropeId_out] = _in(0x84de3b5f, 0xb3e666f0, _ii(ropeId), _r);
	return [retval as boolean, ropeId_out as number]; 
}

export function isSafeToStartPlayerSwitch(): boolean { 
	return _in(0x71e7b2e6, 0x57449aad, _r); 
}

/**
 * val is 1-20. Return is related to INSTRUCTIONAL_BUTTONS, COLOUR_SWITCHER_02, etc?
 * @param val
 */
export function isScaleformMovieDeleting(val: number): boolean { 
	return _in(0x86255b1f, 0xc929e33e, val, _r); 
}

/**
 * methodReturn: The return value of this native: END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE
 * Returns true if the return value of a scaleform function is ready to be collected (using GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_STRING or GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT).
 * @param methodReturn
 */
export function isScaleformMovieMethodReturnValueReady(methodReturn: number): boolean { 
	return _in(0x768ff896, 0x1ba904d6, methodReturn, _r); 
}

/**
 * Xbox Series (Scarlett) version...
 */
export function isScarlettVersion(): boolean { 
	return _in(0xc545ab1c, 0xf97abb34, _r); 
}

export function isScePlatform(): boolean { 
	return _in(0xf911e695, 0xc1eb8518, _r); 
}

/**
 * Full list of scenario groups used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenarioGroupNames.json
 * Occurrences in the b617d scripts:
 * 
 * "ARMY_GUARD",
 * "ARMY_HELI",
 * "BLIMP",
 * "Cinema_Downtown",
 * "Cinema_Morningwood",
 * "Cinema_Textile",
 * "City_Banks",
 * "Countryside_Banks",
 * "DEALERSHIP",
 * "KORTZ_SECURITY",
 * "LSA_Planes",
 * "MP_POLICE",
 * "Observatory_Bikers",
 * "POLICE_POUND1",
 * "POLICE_POUND2",
 * "POLICE_POUND3",
 * "POLICE_POUND4",
 * "POLICE_POUND5",
 * "Rampage1",
 * "SANDY_PLANES",
 * "SCRAP_SECURITY",
 * "SEW_MACHINE",
 * "SOLOMON_GATE"
 * 
 * Sometimes used with DOES_SCENARIO_GROUP_EXIST:
 * if (TASK::DOES_SCENARIO_GROUP_EXIST("Observatory_Bikers") &&   (!TASK::IS_SCENARIO_GROUP_ENABLED("Observatory_Bikers"))) {
 * else if (TASK::IS_SCENARIO_GROUP_ENABLED("BLIMP")) {
 * @param scenarioGroup
 */
export function isScenarioGroupEnabled(scenarioGroup: string): boolean { 
	return _in(0x367a09de, 0xd4e05b99, _ts(scenarioGroup), _r); 
}

export function isScenarioOccupied(x: number, y: number, z: number, maxRange: number, onlyUsersActuallyAtScenario: boolean): boolean { 
	return _in(0x788756d7, 0x3ac2e07c, _fv(x), _fv(y), _fv(z), _fv(maxRange), onlyUsersActuallyAtScenario, _r); 
}

/**
 * Full list of scenario types used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenariosCompact.json
 * Occurrences in the b617d scripts:
 * "PROP_HUMAN_SEAT_CHAIR",
 * "WORLD_HUMAN_DRINKING",
 * "WORLD_HUMAN_HANG_OUT_STREET",
 * "WORLD_HUMAN_SMOKING",
 * "WORLD_MOUNTAIN_LION_WANDER",
 * "WORLD_HUMAN_DRINKING"
 * 
 * Sometimes used together with MISC::IS_STRING_NULL_OR_EMPTY in the scripts.
 * 
 * scenarioType could be the same as scenarioName, used in for example TASK::TASK_START_SCENARIO_AT_POSITION.
 * 
 * @param scenarioType
 */
export function isScenarioTypeEnabled(scenarioType: string): boolean { 
	return _in(0x3a815db3, 0xea088722, _ts(scenarioType), _r); 
}

export function isScreenFadedIn(): boolean { 
	return _in(0x5a859503, 0xb0c08678, _r); 
}

export function isScreenFadedOut(): boolean { 
	return _in(0xb16fce9d, 0xdc7ba182, _r); 
}

export function isScreenFadingIn(): boolean { 
	return _in(0x5c544bc6, 0xc57ac575, _r); 
}

export function isScreenFadingOut(): boolean { 
	return _in(0x797ac7cb, 0x535ba28f, _r); 
}

/**
 * Returns whether screen transition to blur/from blur is running.
 */
export function isScreenblurFadeRunning(): boolean { 
	return _in(0x7b226c78, 0x5a52a0a9, _r); 
}

/**
 * In drunk_controller.c4, sub_309
 * if (CAM::IS_SCRIPT_GLOBAL_SHAKING()) {
 * CAM::STOP_SCRIPT_GLOBAL_SHAKING(0);
 * }
 */
export function isScriptGlobalShaking(): boolean { 
	return _in(0xc912af07, 0x8af19212, _r); 
}

export function isScriptedConversationLoaded(): boolean { 
	return _in(0xdf0d54be, 0x7a776737, _r); 
}

export function isScriptedConversationOngoing(): boolean { 
	return _in(0x16754c55, 0x6d2ede3d, _r); 
}

export function isScriptedHudComponentActive(id: number): boolean { 
	return _in(0xdd100eb1, 0x7a94ff65, id, _r); 
}

export function isScriptedHudComponentHiddenThisFrame(id: number): boolean { 
	return _in(0x09c0403e, 0xd9a751c2, id, _r); 
}

/**
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param ped
 * @param animDict
 * @param anim
 */
export function isScriptedScenarioPedUsingConditionalAnim(ped: number, animDict: string, anim: string): boolean { 
	return _in(0x6ec47a34, 0x4923e1ed, ped, _ts(animDict), _ts(anim), _r); 
}

export function isScriptedSpeechPlaying(p0: number): boolean { 
	return _in(0xcc9aa18d, 0xcc7084f4, p0, _r); 
}

export function isSeatWarpOnly(vehicle: number, seatIndex: number): boolean { 
	return _in(0xf7f203e3, 0x1f96f6a1, vehicle, seatIndex, _r); 
}

/**
 * eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
 * @param eventType
 * @param x
 * @param y
 * @param z
 * @param radius
 */
export function isShockingEventInSphere(eventType: number, x: number, y: number, z: number, radius: number): boolean { 
	return _in(0x1374abb7, 0xc15bab92, eventType, _fv(x), _fv(y), _fv(z), _fv(radius), _r); 
}

/**
 * Determines whether there is a sniper bullet within the specified coordinates. The coordinates form an axis-aligned bounding box.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 */
export function isSniperBulletInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): boolean { 
	return _in(0xfefcf11b, 0x01287125, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _r); 
}

/**
 * This function is hard-coded to always return 0.
 */
export function isSniperInverted(): boolean { 
	return _in(0x61a23b7e, 0xda9bda24, _r); 
}

export function isSocialClubActive(): boolean { 
	return _in(0xc406be34, 0x3fc4b9af, _r); 
}

export function isSpecialAbilityActive(player: number, p1: number): boolean { 
	return _in(0x3e5f7fc8, 0x5d854e15, player, p1, _r); 
}

export function isSpecialAbilityEnabled(player: number, p1: number): boolean { 
	return _in(0xb1d200fe, 0x26aef3cb, player, p1, _r); 
}

export function isSpecialAbilityMeterFull(player: number, p1: number): boolean { 
	return _in(0x05a1fe50, 0x4b7f2587, player, p1, _r); 
}

export function isSpecialAbilityUnlocked(playerModel: number): boolean { 
	return _in(0xc6017f6a, 0x6cdfa694, _ch(playerModel), _r); 
}

export function isSphereVisible(x: number, y: number, z: number, radius: number): boolean { 
	return _in(0xe33d59da, 0x70b58fdf, _fv(x), _fv(y), _fv(z), _fv(radius), _r); 
}

export function isSphereVisibleToAnotherMachine(p0: number, p1: number, p2: number, p3: number): boolean { 
	return _in(0xd82cf8e6, 0x4c8729d8, _fv(p0), _fv(p1), _fv(p2), _fv(p3), _r); 
}

export function isSphereVisibleToPlayer(p0: number, p1: number, p2: number, p3: number, p4: number): boolean { 
	return _in(0xdc3a3102, 0x19e5da62, p0, _fv(p1), _fv(p2), _fv(p3), _fv(p4), _r); 
}

/**
 * Returns true when the srl from BEGIN_SRL is loaded.
 */
export function isSrlLoaded(): boolean { 
	return _in(0xd0263801, 0xa4c5b0bb, _r); 
}

export function isSteamVersion(): boolean { 
	return _in(0x0a27b2b6, 0x282f7169, _r); 
}

export function isStoreAvailableToUser(): boolean { 
	return _in(0x883d79c4, 0x071e18b3, _r); 
}

export function isStorePendingNetworkShutdownToOpen(): boolean { 
	return _in(0x2f057596, 0xf2bd0061, _r); 
}

export function isStreamPlaying(): boolean { 
	return _in(0xd11fa52e, 0xb849d978, _r); 
}

export function isStreamingAdditionalText(p0: number): boolean { 
	return _in(0x8b6817b7, 0x1b85ebf0, p0, _r); 
}

export function isStreamvolActive(): boolean { 
	return _in(0xbc9823ab, 0x80a3dcac, _r); 
}

export function isStringNull(string: string): boolean { 
	return _in(0xf22b6c47, 0xc6eab066, _ts(string), _r); 
}

export function isStringNullOrEmpty(string: string): boolean { 
	return _in(0xca042b69, 0x57743895, _ts(string), _r); 
}

export function isStuntJumpInProgress(): boolean { 
	return _in(0x7a3f1970, 0x0a4d0525, _r); 
}

export function isStuntJumpMessageShowing(): boolean { 
	return _in(0x2272b0a1, 0x343129f4, _r); 
}

export function isSubtitlePreferenceSwitchedOn(): boolean { 
	return _in(0xad6daca4, 0xba53e0a4, _r); 
}

export function isSwitchReadyForDescent(): boolean { 
	return _in(0xdfa80cb2, 0x5d0a19b3, _r); 
}

export function isSwitchSkippingDescent(): boolean { 
	return _in(0x5b74ea8c, 0xfd5e3e7e, _r); 
}

export function isSwitchToMultiFirstpartFinished(): boolean { 
	return _in(0x933bbeeb, 0x8c61b5f4, _r); 
}

export function isSynchronizedSceneHoldLastFrame(sceneID: number): boolean { 
	return _in(0x7f2f4f13, 0xac5257ef, sceneID, _r); 
}

export function isSynchronizedSceneLooped(sceneID: number): boolean { 
	return _in(0x62522002, 0xe0c391ba, sceneID, _r); 
}

/**
 * Returns true if a synchronized scene is running
 * @param sceneId
 */
export function isSynchronizedSceneRunning(sceneId: number): boolean { 
	return _in(0x25d39b93, 0x5a038a26, sceneId, _r); 
}

export function isSystemUiBeingDisplayed(): boolean { 
	return _in(0x5d511e38, 0x67c87139, _r); 
}

export function isTargetPedInPerceptionArea(ped: number, targetPed: number, p2: number, p3: number, p4: number, p5: number): boolean { 
	return _in(0x06087579, 0xe7aa85a9, ped, targetPed, _fv(p2), _fv(p3), _fv(p4), _fv(p5), _r); 
}

export function isTaskMoveNetworkActive(ped: number): boolean { 
	return _in(0x921ce12c, 0x489c4c41, ped, _r); 
}

export function isTaskMoveNetworkReadyForTransition(ped: number): boolean { 
	return _in(0x30ed88d5, 0xe0c56a37, ped, _r); 
}

export function isTaxiLightOn(vehicle: number): boolean { 
	return _in(0x7504c0f1, 0x13ab50fc, vehicle, _r); 
}

export function isTennisMode(ped: number): boolean { 
	return _in(0x5d5479d1, 0x15290c3f, ped, _r); 
}

export function isThisAMinigameScript(): boolean { 
	return _in(0x7b30f65d, 0x7b710098, _r); 
}

export function isThisModelABicycle(model: number): boolean { 
	return _in(0xbf94dd42, 0xf63bded2, _ch(model), _r); 
}

export function isThisModelABike(model: number): boolean { 
	return _in(0xb50c0b0c, 0xedc6ce84, _ch(model), _r); 
}

export function isThisModelABoat(model: number): boolean { 
	return _in(0x45a91879, 0x28f4b9e3, _ch(model), _r); 
}

/**
 * To check if the model is an amphibious car, use IS_THIS_MODEL_AN_AMPHIBIOUS_CAR.
 * @param model
 */
export function isThisModelACar(model: number): boolean { 
	return _in(0x7f6db52e, 0xefc96df8, _ch(model), _r); 
}

export function isThisModelAHeli(model: number): boolean { 
	return _in(0xdce43347, 0x88af94ea, _ch(model), _r); 
}

/**
 * Checks if model is a boat, then checks for FLAG_IS_JETSKI.
 * @param model
 */
export function isThisModelAJetski(model: number): boolean { 
	return _in(0x95370974, 0x12cf75fe, _ch(model), _r); 
}

export function isThisModelAPlane(model: number): boolean { 
	return _in(0xa0948ab4, 0x2d7ba0de, _ch(model), _r); 
}

export function isThisModelAQuadbike(model: number): boolean { 
	return _in(0x39dac362, 0xee65fa28, _ch(model), _r); 
}

export function isThisModelATrain(model: number): boolean { 
	return _in(0xab935175, 0xb22e822b, _ch(model), _r); 
}

export function isThisModelAnAmphibiousCar(model: number): boolean { 
	return _in(0x633f6f44, 0xa537ebb6, _ch(model), _r); 
}

export function isThisModelAnAmphibiousQuadbike(model: number): boolean { 
	return _in(0xa1a9fc1c, 0x76a6730d, _ch(model), _r); 
}

export function isThreadActive(threadId: number): boolean { 
	return _in(0x46e9ae36, 0xd8fa6417, threadId, _r); 
}

/**
 * Returns true if the two times are equal; otherwise returns false.
 * @param timeA
 * @param timeB
 */
export function isTimeEqualTo(timeA: number, timeB: number): boolean { 
	return _in(0xf5bc9585, 0x7bd6d512, timeA, timeB, _r); 
}

/**
 * Subtracts the second argument from the first, then returns whether the result is negative.
 * @param timeA
 * @param timeB
 */
export function isTimeLessThan(timeA: number, timeB: number): boolean { 
	return _in(0xcb2cf514, 0x8012c8d0, timeA, timeB, _r); 
}

/**
 * Subtracts the first argument from the second, then returns whether the result is negative.
 * @param timeA
 * @param timeB
 */
export function isTimeMoreThan(timeA: number, timeB: number): boolean { 
	return _in(0xde350f86, 0x51e4346c, timeA, timeB, _r); 
}

export function isToggleModOn(vehicle: number, modType: number): boolean { 
	return _in(0x84b233a8, 0xc8fc8ae7, vehicle, modType, _r); 
}

/**
 * returns whether or not a ped is visible within your FOV, not this check auto's to false after a certain distance.
 * 
 * 
 * Target needs to be tracked.. won't work otherwise.
 * @param ped
 */
export function isTrackedPedVisible(ped: number): boolean { 
	return _in(0x91c8e617, 0xf64188ac, ped, _r); 
}

export function isTrackedPointVisible(point: number): boolean { 
	return _in(0xc45ccdaa, 0xc9221ca8, point, _r); 
}

export function isTurretSeat(vehicle: number, seatIndex: number): boolean { 
	return _in(0xe33ffa90, 0x6ce74880, vehicle, seatIndex, _r); 
}

export function isTvshowCurrentlyPlaying(videoCliphash: number): boolean { 
	return _in(0x0ad973ca, 0x1e077b60, _ch(videoCliphash), _r); 
}

export function isUpdatingMpGamerTagNameAndCrewDetails(gamerTagId: number): boolean { 
	return _in(0xeb709a36, 0x958abe0d, gamerTagId, _r); 
}

export function isUserOldEnoughToAccessStore(): boolean { 
	return _in(0x59328eb0, 0x8c5ceb2b, _r); 
}

/**
 * control: see IS_CONTROL_ENABLED
 * @param control
 */
export function isUsingCursor(control: number): boolean { 
	return _in(0x13337b38, 0xdb572509, control, _r); 
}

/**
 * control: unused parameter
 * @param control
 */
export function isUsingKeyboardAndMouse(control: number): boolean { 
	return _in(0xa571d467, 0x27e2b718, control, _r); 
}

export function isUsingPedScubaGearVariation(p0: number): boolean { 
	return _in(0xfec9a3b1, 0x820f3331, p0, _r); 
}

/**
 * control: see IS_CONTROL_ENABLED
 * 
 * Hardcoded to return false.
 * @param control
 */
export function isUsingRemotePlay(control: number): boolean { 
	return _in(0x23f09ead, 0xc01449d6, control, _r); 
}

export function isValidInterior(interior: number): boolean { 
	return _in(0x26b0e73d, 0x7eaaf4d3, interior, _r); 
}

/**
 * Returns true if the vehicle has a convertible roof.
 * 
 * p1 is false almost always. However, in launcher_carwash/carwash1/carwash2 scripts, p1 is true and is accompanied by DOES_VEHICLE_HAVE_ROOF. If p1 is true, it seems that every single vehicle will return true irrespective of being a convertible.
 * @param vehicle
 * @param p1
 */
export function isVehicleAConvertible(vehicle: number, p1: boolean): boolean { 
	return _in(0x52f357a3, 0x0698bcce, vehicle, p1, _r); 
}

export function isVehicleAlarmActivated(vehicle: number): boolean { 
	return _in(0x4319e335, 0xb71fff34, vehicle, _r); 
}

export function isVehicleAttachedToCargobob(cargobob: number, vehicleAttached: number): boolean { 
	return _in(0xd40148f2, 0x2e81a1d9, cargobob, vehicleAttached, _r); 
}

/**
 * Scripts verify that towTruck is the first parameter, not the second.
 * @param towTruck
 * @param vehicle
 */
export function isVehicleAttachedToTowTruck(towTruck: number, vehicle: number): boolean { 
	return _in(0x146df9ec, 0x4c4b9fd4, towTruck, vehicle, _r); 
}

export function isVehicleAttachedToTrailer(vehicle: number): boolean { 
	return _in(0xe7cf3c4f, 0x9f489f0c, vehicle, _r); 
}

export function isVehicleAudiblyDamaged(vehicle: number): boolean { 
	return _in(0x5db8010e, 0xe71fdef2, vehicle, _r); 
}

/**
 * Returns true if vehicle is halted by BRING_VEHICLE_TO_HALT
 * @param vehicle
 */
export function isVehicleBeingBroughtToHalt(vehicle: number): boolean { 
	return _in(0xc69bb1d8, 0x32a710ef, vehicle, _r); 
}

export function isVehicleBumperBouncing(vehicle: number, frontBumper: boolean): boolean { 
	return _in(0x27b92677, 0x9deb502d, vehicle, frontBumper, _r); 
}

export function isVehicleBumperBrokenOff(vehicle: number, frontBumper: boolean): boolean { 
	return _in(0x468056a6, 0xbb6f3846, vehicle, frontBumper, _r); 
}

/**
 * doorID starts at 0, not seeming to skip any numbers. Four door vehicles intuitively range from 0 to 3.
 * @param veh
 * @param doorID
 */
export function isVehicleDoorDamaged(veh: number, doorID: number): boolean { 
	return _in(0xb8e181e5, 0x59464527, veh, doorID, _r); 
}

/**
 * doorId: see SET_VEHICLE_DOOR_SHUT
 * @param vehicle
 * @param doorId
 */
export function isVehicleDoorFullyOpen(vehicle: number, doorId: number): boolean { 
	return _in(0x3e933cff, 0x7b111c22, vehicle, doorId, _r); 
}

/**
 * p1 is always 0 in the scripts.
 * 
 * p1 = check if vehicle is on fire
 * @param vehicle
 * @param isOnFireCheck
 */
export function isVehicleDriveable(vehicle: number, isOnFireCheck: boolean): boolean { 
	return _in(0x4c241e39, 0xb23df959, vehicle, isOnFireCheck, _r); 
}

export function isVehicleExtraTurnedOn(vehicle: number, extraId: number): boolean { 
	return _in(0xd2e6822d, 0xbfd6c8bd, vehicle, extraId, _r); 
}

export function isVehicleGen9ExclusiveModel(vehicleModel: number): boolean { 
	return _in(0x6638c0f1, 0x9de692fe, _ch(vehicleModel), _r); 
}

export function isVehicleHighDetail(vehicle: number): boolean { 
	return _in(0x1f25887f, 0x3c104278, vehicle, _r); 
}

/**
 * Returns whether the specified vehicle is currently in a burnout.
 * 
 * 
 * vb.net
 * Public Function isVehicleInBurnout(vh As Vehicle) As Boolean
 * Return Native.Function.Call(Of Boolean)(Hash.IS_VEHICLE_IN_BURNOUT, vh)
 * End Function
 * @param vehicle
 */
export function isVehicleInBurnout(vehicle: number): boolean { 
	return _in(0x1297a88e, 0x081430eb, vehicle, _r); 
}

/**
 * garageName example "Michael - Beverly Hills"
 * 
 * Full list of garages by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/garages.json
 * @param garageName
 * @param vehicle
 */
export function isVehicleInGarageArea(garageName: string, vehicle: number): boolean { 
	return _in(0xcee4490c, 0xd57bb3c2, _ts(garageName), vehicle, _r); 
}

export function isVehicleInSubmarineMode(vehicle: number): boolean { 
	return _in(0xa77dc70b, 0xd689a1e5, vehicle, _r); 
}

/**
 * Returns true for any mod part listed in GEN9_EXCLUSIVE_ASSETS_VEHICLES_FILE.
 * @param vehicle
 * @param modType
 * @param modIndex
 */
export function isVehicleModGen9Exclusive(vehicle: number, modType: number, modIndex: number): boolean { 
	return _in(0x00834eac, 0x4a96e010, vehicle, modType, modIndex, _r); 
}

export function isVehicleModel(vehicle: number, model: number): boolean { 
	return _in(0x423e8de3, 0x7d934d89, vehicle, _ch(model), _r); 
}

/**
 * Returns true if the id is non zero.
 * @param vehicleNodeId
 */
export function isVehicleNodeIdValid(vehicleNodeId: number): boolean { 
	return _in(0x1eaf30fc, 0xfbf5af74, vehicleNodeId, _r); 
}

/**
 * Public Function isVehicleOnAllWheels(vh As Vehicle) As Boolean
 * Return Native.Function.Call(Of Boolean)(Hash.IS_VEHICLE_ON_ALL_WHEELS, vh)
 * End Function
 * 
 * @param vehicle
 */
export function isVehicleOnAllWheels(vehicle: number): boolean { 
	return _in(0xb104cd1b, 0xabf302e2, vehicle, _r); 
}

export function isVehicleOnBoostPad(vehicle: number): boolean { 
	return _in(0x71c6302c, 0xbca6ca35, vehicle, _r); 
}

export function isVehicleParachuteDeployed(vehicle: number): boolean { 
	return _in(0x3de51e9c, 0x80b116cf, vehicle, _r); 
}

/**
 * Returns true if the vehicle is being slipstreamed by another vehicle
 * @param vehicle
 */
export function isVehicleProducingSlipStream(vehicle: number): boolean { 
	return _in(0x48c633e9, 0x4a8142a7, vehicle, _r); 
}

export function isVehicleRadioOn(vehicle: number): boolean { 
	return _in(0x0be4be94, 0x6463f917, vehicle, _r); 
}

/**
 * Possibly: Returns whether the searchlight (found on police vehicles) is toggled on.
 * 
 * @Author Nac
 * @param vehicle
 */
export function isVehicleSearchlightOn(vehicle: number): boolean { 
	return _in(0xc0f97fce, 0x55094987, vehicle, _r); 
}

/**
 * Check if a vehicle seat is free.
 * 
 * seatIndex  = -1 being the driver seat.
 * Use GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS(vehicle) - 1 for last seat index.
 * isTaskRunning = on true the function returns already false while a task on the target seat is running (TASK_ENTER_VEHICLE/TASK_SHUFFLE_TO_NEXT_VEHICLE_SEAT) - on false only when a ped is finally sitting in the seat.
 * @param vehicle
 * @param seatIndex
 * @param isTaskRunning
 */
export function isVehicleSeatFree(vehicle: number, seatIndex: number, isTaskRunning: boolean): boolean { 
	return _in(0x22ac59a8, 0x70e6a669, vehicle, seatIndex, isTaskRunning, _r); 
}

export function isVehicleSirenAudioOn(vehicle: number): boolean { 
	return _in(0xb5cc40fb, 0xcb586380, vehicle, _r); 
}

export function isVehicleSirenOn(vehicle: number): boolean { 
	return _in(0x4c9bf537, 0xbe2634b2, vehicle, _r); 
}

/**
 * Returns false if the vehicle has the FLAG_NO_RESPRAY flag set.
 * @param vehicle
 */
export function isVehicleSprayable(vehicle: number): boolean { 
	return _in(0x8d474c8f, 0xaeff6cde, vehicle, _r); 
}

/**
 * Only returns true if the vehicle was marked as stolen with SET_VEHICLE_IS_STOLEN.
 * @param vehicle
 */
export function isVehicleStolen(vehicle: number): boolean { 
	return _in(0x4af9bd80, 0xeebeb453, vehicle, _r); 
}

/**
 * Returns true if the vehicle's current speed is less than, or equal to 0.0025f.
 * 
 * For some vehicles it returns true if the current speed is <= 0.00039999999.
 * @param vehicle
 */
export function isVehicleStopped(vehicle: number): boolean { 
	return _in(0x5721b434, 0xad84d57a, vehicle, _r); 
}

export function isVehicleStoppedAtTrafficLights(vehicle: number): boolean { 
	return _in(0x2959f696, 0xae390a99, vehicle, _r); 
}

export function isVehicleStuckOnRoof(vehicle: number): boolean { 
	return _in(0xb497f06b, 0x288dcfdf, vehicle, _r); 
}

/**
 * p1 can be anywhere from 0 to 3 in the scripts.
 * p2 being how long in milliseconds the vehicle has been stuck
 * @param vehicle
 * @param p1
 * @param ms
 */
export function isVehicleStuckTimerUp(vehicle: number, p1: number, ms: number): boolean { 
	return _in(0x679be1da, 0xf71da874, vehicle, p1, ms, _r); 
}

/**
 * wheelID used for 4 wheelers seem to be (0, 1, 4, 5)
 * completely - is to check if tire completely gone from rim.
 * 
 * '0 = wheel_lf / bike, plane or jet front
 * '1 = wheel_rf
 * '2 = wheel_lm / in 6 wheels trailer, plane or jet is first one on left
 * '3 = wheel_rm / in 6 wheels trailer, plane or jet is first one on right
 * '4 = wheel_lr / bike rear / in 6 wheels trailer, plane or jet is last one on left
 * '5 = wheel_rr / in 6 wheels trailer, plane or jet is last one on right
 * '45 = 6 wheels trailer mid wheel left
 * '47 = 6 wheels trailer mid wheel right
 * @param vehicle
 * @param wheelID
 * @param completely
 */
export function isVehicleTyreBurst(vehicle: number, wheelID: number, completely: boolean): boolean { 
	return _in(0xba291848, 0xa0815ca9, vehicle, wheelID, completely, _r); 
}

/**
 * must be called after TRACK_VEHICLE_VISIBILITY
 * 
 * it's not instant so probabilly must pass an 'update' to see correct result.
 * @param vehicle
 */
export function isVehicleVisible(vehicle: number): boolean { 
	return _in(0xaa0a52d2, 0x4fb98293, vehicle, _r); 
}

/**
 * Full list of weapons by DurtyFree (Search for VEHICLE_*): https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param weaponHash
 * @param vehicle
 * @param owner
 */
export function isVehicleWeaponDisabled(weaponHash: number, vehicle: number, owner: number): boolean { 
	return _in(0x563b65a6, 0x43ed072e, _ch(weaponHash), vehicle, owner, _r); 
}

/**
 * This will return false if the window is broken, or rolled down.
 * Window indexes:
 * 0 = Front Right Window
 * 1 = Front Left Window
 * 2 = Back Right Window
 * 3 = Back Left Window
 * 
 * 
 * Those numbers go on for vehicles that have more than 4 doors with windows.
 * @param vehicle
 * @param windowIndex
 */
export function isVehicleWindowIntact(vehicle: number, windowIndex: number): boolean { 
	return _in(0x46e571a0, 0xe20d01f1, vehicle, windowIndex, _r); 
}

export function isWantedAndHasBeenSeenByCops(player: number): boolean { 
	return _in(0x7e07c789, 0x25d5fd96, player, _r); 
}

export function isWarningMessageActive(): boolean { 
	return _in(0xe18b138f, 0xabc53103, _r); 
}

export function isWarningMessageReadyForControl(): boolean { 
	return _in(0xaf42195a, 0x42c63bba, _r); 
}

export function isWaypointActive(): boolean { 
	return _in(0x1dd1f58f, 0x493f1da5, _r); 
}

export function isWaypointPlaybackGoingOnForPed(ped: number): boolean { 
	return _in(0xe03b3f2d, 0x3dc59b64, ped, _r); 
}

export function isWaypointPlaybackGoingOnForVehicle(vehicle: number): boolean { 
	return _in(0xf5134943, 0xea29868c, vehicle, _r); 
}

/**
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param weaponHash
 */
export function isWeaponValid(weaponHash: number): boolean { 
	return _in(0x937c7116, 0x5cf334b3, _ch(weaponHash), _r); 
}

/**
 * Gets whether the world point the calling script is registered to is within desired range of the player.
 */
export function isWorldPointWithinBrainActivationRange(): boolean { 
	return _in(0xc5042cc6, 0xf5e3d450, _r); 
}

export function isXbox360Version(): boolean { 
	return _in(0xf6201b4d, 0xaf662a9d, _r); 
}

export function isXboxPlatform(): boolean { 
	return _in(0x138679ca, 0x01e21f53, _r); 
}

export function isXboxpcVersion(): boolean { 
	return _in(0xe2bcd0ef, 0xae90d1f4, _r); 
}

/**
 * List of component/props ID
 * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
 * @param ped
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 */
export function knockOffPedProp(ped: number, p1: boolean, p2: boolean, p3: boolean, p4: boolean): void { 
	return _in(0x6fd7816a, 0x36615f48, ped, p1, p2, p3, p4); 
}

export function knockPedOffVehicle(ped: number): void { 
	return _in(0x45bbcba7, 0x7c29a841, ped); 
}

/**
 * Returns true if the current frontend menu is FE_MENU_VERSION_LANDING_MENU
 */
export function landingScreenStartedEndUserBenchmark(): boolean { 
	return _in(0x3bbbd13e, 0x5041a79e, _r); 
}

export function leaderboards2ReadByHandle(): [boolean, number, number] { 
	const [retval, p0_out, p1_out] = _in(0xc30713a3, 0x83bfbf0e, _i, _i, _r);
	return [retval as boolean, p0_out as number, p1_out as number]; 
}

export function leaderboards2ReadByPlaform(gamerHandleCsv: string, platformName: string): [boolean, number] { 
	const [retval, p0_out] = _in(0xf1ae5dcd, 0xbfca2721, _i, _ts(gamerHandleCsv), _ts(platformName), _r);
	return [retval as boolean, p0_out as number]; 
}

export function leaderboards2ReadByRadius(p1: number): [boolean, number, number] { 
	const [retval, p0_out, p2_out] = _in(0x5ce587fb, 0x5a42c8c4, _i, p1, _i, _r);
	return [retval as boolean, p0_out as number, p2_out as number]; 
}

export function leaderboards2ReadByRank(p1: number, p2: number): [boolean, number] { 
	const [retval, p0_out] = _in(0xba2c7db0, 0xc129449a, _i, p1, p2, _r);
	return [retval as boolean, p0_out as number]; 
}

export function leaderboards2ReadByScoreFloat(p1: number, p2: number): [boolean, number] { 
	const [retval, p0_out] = _in(0xe662c8b7, 0x59d08f3c, _i, _fv(p1), p2, _r);
	return [retval as boolean, p0_out as number]; 
}

export function leaderboards2ReadByScoreInt(p1: number, p2: number): [boolean, number] { 
	const [retval, p0_out] = _in(0x7eec7e4f, 0x6984a16a, _i, p1, p2, _r);
	return [retval as boolean, p0_out as number]; 
}

export function leaderboards2ReadFriendsByRow(p2: number, p3: boolean, p4: number, p5: number): [boolean, number, number] { 
	const [retval, p0_out, p1_out] = _in(0x918b1016, 0x66f9cb83, _i, _i, p2, p3, p4, p5, _r);
	return [retval as boolean, p0_out as number, p1_out as number]; 
}

export function leaderboards2ReadGetRowDataEnd(): void { 
	return _in(0x71b00805, 0x6e5692d6); 
}

export function leaderboards2ReadGetRowDataFloat(p0: number, p1: number): number { 
	return _in(0x38491439, 0xb6ba7f7d, p0, p1, _r, _rf); 
}

export function leaderboards2ReadGetRowDataInfo(p0: number, p1: number): [boolean, number] { 
	const [retval, p1_out] = _in(0x34770b9c, 0xe0e03b91, p0, _ii(p1), _r);
	return [retval as boolean, p1_out as number]; 
}

export function leaderboards2ReadGetRowDataInt(p0: number, p1: number): number { 
	return _in(0x88578f6e, 0xc36b4a3a, p0, p1, _r, _ri); 
}

export function leaderboards2ReadGetRowDataStart(p0: number): [boolean, number] { 
	const [retval, p0_out] = _in(0xa0f93d54, 0x65b3094d, _ii(p0), _r);
	return [retval as boolean, p0_out as number]; 
}

export function leaderboards2ReadRankPrediction(): [boolean, number, number, number] { 
	const [retval, p0_out, p1_out, p2_out] = _in(0xc38dc1e9, 0x0d22547c, _i, _i, _i, _r);
	return [retval as boolean, p0_out as number, p1_out as number, p2_out as number]; 
}

export function leaderboards2WriteData(p0: number): [boolean, number] { 
	const [retval, p0_out] = _in(0xae220654, 0x5888ae49, _ii(p0), _r);
	return [retval as boolean, p0_out as number]; 
}

export function leaderboards2WriteDataForEventType(): [boolean, number, number] { 
	const [retval, p0_out, p1_out] = _in(0xc980e62e, 0x33df1d5c, _i, _i, _r);
	return [retval as boolean, p0_out as number, p1_out as number]; 
}

export function leaderboardsCacheDataRow(p0: number): [boolean, number] { 
	const [retval, p0_out] = _in(0xb9bb18e2, 0xc40142ed, _ii(p0), _r);
	return [retval as boolean, p0_out as number]; 
}

export function leaderboardsClearCacheData(): void { 
	return _in(0xd4b02a6b, 0x476e1fdc); 
}

export function leaderboardsClearCacheDataId(p0: number): void { 
	return _in(0x8ec74ceb, 0x042e7cff, p0); 
}

export function leaderboardsGetCacheDataRow(p0: number, p1: number, p2: number): [boolean, number] { 
	const [retval, p2_out] = _in(0x9120e8db, 0xa3d69273, p0, p1, _ii(p2), _r);
	return [retval as boolean, p2_out as number]; 
}

export function leaderboardsGetCacheExists(p0: number): boolean { 
	return _in(0x9c51349b, 0xe6cdfe2c, p0, _r); 
}

export function leaderboardsGetCacheNumberOfRows(p0: number): number { 
	return _in(0x58a651cd, 0x201d89ad, p0, _r, _ri); 
}

export function leaderboardsGetCacheTime(p0: number): number { 
	return _in(0xf04c1c27, 0xda35f6c8, p0, _r, _ri); 
}

export function leaderboardsGetColumnId(p0: number, p1: number, p2: number): number { 
	return _in(0xc4b5467a, 0x1886ea7e, p0, p1, p2, _r, _ri); 
}

export function leaderboardsGetColumnType(p0: number, p1: number, p2: number): number { 
	return _in(0xbf4fef46, 0xdb7894d3, p0, p1, p2, _r, _ri); 
}

export function leaderboardsGetNumberOfColumns(p0: number, p1: number): number { 
	return _in(0x117b4515, 0x6d7eff2e, p0, p1, _r, _ri); 
}

export function leaderboardsReadAnyPending(): boolean { 
	return _in(0xa31fd151, 0x97b192bd, _r); 
}

export function leaderboardsReadClear(p0: number, p1: number, p2: number): number { 
	return _in(0x7cce5c73, 0x7a665701, p0, p1, p2, _r, _ri); 
}

export function leaderboardsReadClearAll(): number { 
	return _in(0xa34cb6e6, 0xf0df4a0b, _r, _ri); 
}

export function leaderboardsReadPending(p0: number, p1: number, p2: number): boolean { 
	return _in(0xac392c84, 0x83342ac2, p0, p1, p2, _r); 
}

export function leaderboardsReadSuccessful(p0: number, p1: number, p2: number): boolean { 
	return _in(0x2fb19228, 0x983e832c, p0, p1, p2, _r); 
}

export function leaderboardsWriteAddColumn(p0: number, p1: number, p2: number): void { 
	return _in(0x0bca1d2c, 0x47b0d269, p0, p1, _fv(p2)); 
}

export function leaderboardsWriteAddColumnLong(p0: number, p1: number, p2: number): void { 
	return _in(0x2e652486, 0x09523599, p0, p1, p2); 
}

export function linkNamedRendertarget(modelHash: number): void { 
	return _in(0xf6c09e27, 0x6aeb3f2d, _ch(modelHash)); 
}

/**
 * Full list of static emitters by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/staticEmitters.json
 * @param emitterName
 * @param entity
 */
export function linkStaticEmitterToEntity(emitterName: string, entity: number): void { 
	return _in(0x651d3228, 0x960d08af, _ts(emitterName), entity); 
}

export function loadAllObjectsNow(): void { 
	return _in(0xbd6e8463, 0x2dd4cb3f); 
}

export function loadAllPathNodes(set: boolean): boolean { 
	return _in(0xc2ab6bfe, 0x34e92f8b, set, _r); 
}

/**
 * The following cloudhats are useable:
 * altostratus
 * Cirrus
 * cirrocumulus
 * Clear 01
 * Cloudy 01
 * Contrails
 * Horizon
 * horizonband1
 * horizonband2
 * horizonband3
 * horsey
 * Nimbus
 * Puffs
 * RAIN
 * Snowy 01
 * Stormy 01
 * stratoscumulus
 * Stripey
 * shower
 * Wispy
 * 
 * @param name
 * @param transitionTime
 */
export function loadCloudHat(name: string, transitionTime: number): void { 
	return _in(0xfc4842a3, 0x4657bfcb, _ts(name), _fv(transitionTime)); 
}

/**
 * 0 - default
 * 1 - HeistIsland
 * @param waterType
 */
export function loadGlobalWaterFile(waterType: number): void { 
	return _in(0x7e3f55ed, 0x251b76d3, waterType); 
}

/**
 * This function is hard-coded to always return 0.
 * @param p0
 */
export function loadHighQualityPhoto(p0: number): boolean { 
	return _in(0xec72c258, 0x667be5ea, p0, _r); 
}

export function loadMissionCreatorPhoto(p1: number, p2: number, p3: number): [boolean, number] { 
	const [retval, p0_out] = _in(0x4862437a, 0x486f91b0, _i, p1, p2, p3, _r);
	return [retval as boolean, p0_out as number]; 
}

export function loadMovieMeshSet(movieMeshSetName: string): number { 
	return _in(0xb6606445, 0x2270e8f1, _ts(movieMeshSetName), _r, _ri); 
}

/**
 * Rope presets can be found in the gamefiles. One example is "ropeFamily3", it is NOT a hash but rather a string.
 * @param ropeId
 * @param rope_preset
 */
export function loadRopeData(ropeId: number, rope_preset: string): void { 
	return _in(0xcbb203c0, 0x4d1abd27, ropeId, _ts(rope_preset)); 
}

export function loadScene(x: number, y: number, z: number): void { 
	return _in(0x4448eb75, 0xb4904bdb, _fv(x), _fv(y), _fv(z)); 
}

/**
 * Example:
 * AUDIO::LOAD_STREAM("CAR_STEAL_1_PASSBY", "CAR_STEAL_1_SOUNDSET");
 * 
 * All found occurrences in the b678d decompiled scripts: https://pastebin.com/3rma6w5w
 * 
 * Stream names often ends with "_MASTER", "_SMALL" or "_STREAM". Also "_IN", "_OUT" and numbers.
 * 
 * soundSet is often set to 0 in the scripts. These are common to end the soundSets: "_SOUNDS", "_SOUNDSET" and numbers.
 * 
 * Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json
 * @param streamName
 * @param soundSet
 */
export function loadStream(streamName: string, soundSet: string): boolean { 
	return _in(0x1f1f9571, 0x54ec51df, _ts(streamName), _ts(soundSet), _r); 
}

/**
 * Example:
 * AUDIO::LOAD_STREAM_WITH_START_OFFSET("STASH_TOXIN_STREAM", 2400, "FBI_05_SOUNDS");
 * 
 * Only called a few times in the scripts.
 * 
 * Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json
 * @param streamName
 * @param startOffset
 * @param soundSet
 */
export function loadStreamWithStartOffset(streamName: string, startOffset: number, soundSet: string): boolean { 
	return _in(0x59c16b79, 0xf53b3712, _ts(streamName), startOffset, _ts(soundSet), _r); 
}

export function lobbyAutoMultiplayerEvent(): boolean { 
	return _in(0x8aa464d4, 0xe0f6accd, _r); 
}

export function lobbyAutoMultiplayerFreemode(): boolean { 
	return _in(0xef7d17bc, 0x6c85264c, _r); 
}

/**
 * This function is hard-coded to always return 0.
 */
export function lobbyAutoMultiplayerMenu(): boolean { 
	return _in(0xf2ca003f, 0x167e21d2, _r); 
}

export function lobbyAutoMultiplayerRandomJob(): boolean { 
	return _in(0xc6dc8232, 0x53fbb366, _r); 
}

export function lobbySetAutoMpRandomJob(toggle: boolean): void { 
	return _in(0xc7e7181c, 0x09f33b69, toggle); 
}

export function lobbySetAutoMultiplayer(toggle: boolean): void { 
	return _in(0xb0c56bd3, 0xd808d863, toggle); 
}

export function lobbySetAutoMultiplayerEvent(toggle: boolean): void { 
	return _in(0xfc309e94, 0x546fcdb5, toggle); 
}

/**
 * Possible return values: 0, 1, 2
 */
export function localizationGetSystemDateType(): number { 
	return _in(0xa8ae43ae, 0xc1a61314, _r, _ri); 
}

/**
 * Same return values as GET_CURRENT_LANGUAGE
 */
export function localizationGetSystemLanguage(): number { 
	return _in(0x497420e0, 0x22796b3f, _r, _ri); 
}

export function lockDoorsWhenNoLongerNeeded(vehicle: number): void { 
	return _in(0xcfd778e7, 0x904c255e, vehicle); 
}

/**
 * Locks the minimap to the specified angle in integer degrees.
 * 
 * angle: The angle in whole degrees. If less than 0 or greater than 360, unlocks the angle.
 * @param angle
 */
export function lockMinimapAngle(angle: number): void { 
	return _in(0x299faebb, 0x108ae05b, angle); 
}

/**
 * Locks the minimap to the specified world position.
 * @param x
 * @param y
 */
export function lockMinimapPosition(x: number, y: number): void { 
	return _in(0x1279e861, 0xa329e73f, _fv(x), _fv(y)); 
}

/**
 * Disables the radio station (hides it from the radio wheel).
 * @param radioStationName
 * @param toggle
 */
export function lockRadioStation(radioStationName: string, toggle: boolean): void { 
	return _in(0x477d9db4, 0x8f889591, _ts(radioStationName), toggle); 
}

export function lockRadioStationTrackList(radioStation: string, trackListName: string): void { 
	return _in(0xff5e5ea2, 0xdceeacf3, _ts(radioStation), _ts(trackListName)); 
}

export function log10(value: number): number { 
	return _in(0xe816e655, 0xde37fe20, _fv(value), _r, _rf); 
}

export function lowerConvertibleRoof(vehicle: number, instantlyLower: boolean): void { 
	return _in(0xded51f70, 0x3d0fa83d, vehicle, instantlyLower); 
}

export function lowerForkliftForks(forklift: number): void { 
	return _in(0x923a2933, 0x61df44e5, forklift); 
}

/**
 * Forces a ped to reload only if they are able to; if they have a full magazine, they will not reload.
 * @param ped
 */
export function makePedReload(ped: number): boolean { 
	return _in(0x20ae33f3, 0xac9c0033, ped, _r); 
}

export function markPedDecorationsAsClonedFromLocalPlayer(ped: number, p1: boolean): void { 
	return _in(0x2b694afc, 0xf64e6994, ped, p1); 
}

export function modifyVehicleTopSpeed(vehicle: number, value: number): void { 
	return _in(0x93a39963, 0x68c94158, vehicle, _fv(value)); 
}

/**
 * Sets the water height for a given position and radius.
 * 
 * @param x
 * @param y
 * @param radius
 * @param height
 */
export function modifyWater(x: number, y: number, radius: number, height: number): void { 
	return _in(0xc443fd75, 0x7c3ba637, _fv(x), _fv(y), _fv(radius), _fv(height)); 
}

export function moveVehicleDecals(p0: number, p1: number): void { 
	return _in(0x84c8d7c2, 0xd30d3280, p0, p1); 
}

/**
 * Hides the chat history, closes the input box and makes it unable to be opened unless called again with FALSE.
 * @param toggle
 */
export function mpTextChatDisable(toggle: boolean): void { 
	return _in(0x1db21a44, 0xb09e8ba3, toggle); 
}

export function mpTextChatIsTeamJob(p0: number): void { 
	return _in(0x7c226d53, 0x46d4d10a, p0); 
}

export function netGameserverBasketAddItem(quantity: number): [boolean, number] { 
	const [retval, itemData_out] = _in(0xf3098071, 0x8c8ed876, _i, quantity, _r);
	return [retval as boolean, itemData_out as number]; 
}

export function netGameserverBasketApplyServerData(p0: number, p1: number): [boolean, number] { 
	const [retval, p1_out] = _in(0xe1a0450e, 0xd46a7812, p0, _ii(p1), _r);
	return [retval as boolean, p1_out as number]; 
}

export function netGameserverBasketEnd(): boolean { 
	return _in(0xfa336e7f, 0x40c0a0d0, _r); 
}

export function netGameserverBasketIsActive(): boolean { 
	return _in(0xa6556812, 0x1df2ea26, _r); 
}

export function netGameserverBasketIsFull(): boolean { 
	return _in(0x27f76cc6, 0xc55ad30e, _r); 
}

export function netGameserverBasketStart(categoryHash: number, actionHash: number, flags: number): [boolean, number] { 
	const [retval, transactionId_out] = _in(0x279f08b1, 0xa4b29b7e, _i, _ch(categoryHash), _ch(actionHash), flags, _r);
	return [retval as boolean, transactionId_out as number]; 
}

export function netGameserverBeginService(categoryHash: number, itemHash: number, actionTypeHash: number, value: number, flags: number): [boolean, number] { 
	const [retval, transactionId_out] = _in(0x3c5fd37b, 0x5499582e, _i, _ch(categoryHash), _ch(itemHash), _ch(actionTypeHash), value, flags, _r);
	return [retval as boolean, transactionId_out as number]; 
}

export function netGameserverCatalogIsValid(): boolean { 
	return _in(0x3c448746, 0x1e9b0dcb, _r); 
}

export function netGameserverCatalogItemIsValid(name: string): boolean { 
	return _in(0xbd4d7eaf, 0x8a30f637, _ts(name), _r); 
}

export function netGameserverCatalogItemKeyIsValid(hash: number): boolean { 
	return _in(0x247f0f73, 0xa182ea0b, _ch(hash), _r); 
}

export function netGameserverCheckoutStart(transactionId: number): boolean { 
	return _in(0x39be7cea, 0x8d9cc8e6, transactionId, _r); 
}

export function netGameserverClearSession(p0: number): boolean { 
	return _in(0x74a0fd06, 0x88f1ee45, p0, _r); 
}

export function netGameserverDeleteCharacter(slot: number, transfer: boolean, reason: number): boolean { 
	return _in(0x51f1a8e4, 0x8c3d2f6d, slot, transfer, _ch(reason), _r); 
}

export function netGameserverDeleteCharacterGetStatus(): number { 
	return _in(0x0a6d923d, 0xffc9bd89, _r, _ri); 
}

export function netGameserverDeleteSetTelemetryNonceSeed(): boolean { 
	return _in(0x112cef16, 0x15a1139f, _r); 
}

export function netGameserverEndService(transactionId: number): boolean { 
	return _in(0xe2a99a9b, 0x524befff, transactionId, _r); 
}

export function netGameserverGetCatalogCloudCrc(): number { 
	return _in(0x85f6c9ab, 0xa1de2bcf, _r, _ri); 
}

/**
 * bool is always true in game scripts
 * @param itemHash
 * @param categoryHash
 * @param p2
 */
export function netGameserverGetPrice(itemHash: number, categoryHash: number, p2: boolean): number { 
	return _in(0xc2700942, 0x2fcca88d, _ch(itemHash), _ch(categoryHash), p2, _r, _ri); 
}

export function netGameserverGetSessionStateAndStatus(): [boolean, number, boolean] { 
	const [retval, p0_out, p1_out] = _in(0x897433d2, 0x92b44130, _i, _i, _r);
	return [retval as boolean, p0_out as number, p1_out as boolean]; 
}

export function netGameserverInitSession(): boolean { 
	return _in(0xe3e5a7c6, 0x4ca2c6ed, _r); 
}

export function netGameserverIsCatalogCurrent(): boolean { 
	return _in(0x2b949a1e, 0x6aec8f6a, _r); 
}

export function netGameserverIsSessionRefreshPending(): boolean { 
	return _in(0x810e8431, 0xc0614bf9, _r); 
}

export function netGameserverIsSessionValid(charSlot: number): boolean { 
	return _in(0xb24f0944, 0xda203d9e, charSlot, _r); 
}

export function netGameserverRefreshServerCatalog(): boolean { 
	return _in(0x357b152e, 0xf96c30b6, _r); 
}

export function netGameserverRetrieveCatalogRefreshStatus(state: number): [boolean, number] { 
	const [retval, state_out] = _in(0xcf38dafb, 0xb49ede5e, _ii(state), _r);
	return [retval as boolean, state_out as number]; 
}

export function netGameserverRetrieveInitSessionStatus(p0: number): [boolean, number] { 
	const [retval, p0_out] = _in(0x0395cb47, 0xb022e62c, _ii(p0), _r);
	return [retval as boolean, p0_out as number]; 
}

export function netGameserverRetrieveSessionErrorCode(p0: number): [boolean, number] { 
	const [retval, p0_out] = _in(0xc13c38e4, 0x7ea5df31, _ii(p0), _r);
	return [retval as boolean, p0_out as number]; 
}

export function netGameserverRetrieveStartSessionStatus(p0: number): [boolean, number] { 
	const [retval, p0_out] = _in(0x17091009, 0x3218c8b9, _ii(p0), _r);
	return [retval as boolean, p0_out as number]; 
}

export function netGameserverSessionApplyReceivedData(charSlot: number): boolean { 
	return _in(0x2f41d51b, 0xa3bcd1f1, charSlot, _r); 
}

export function netGameserverSetTelemetryNonceSeed(p0: number): boolean { 
	return _in(0x9507d427, 0x1988e1ae, p0, _r); 
}

export function netGameserverStartSession(charSlot: number): boolean { 
	return _in(0xa135ac89, 0x2a58fc07, charSlot, _r); 
}

export function netGameserverStartSessionPending(): boolean { 
	return _in(0x72eb7ba9, 0xb69bf6ab, _r); 
}

/**
 * Note: only one of the arguments can be set to true at a time
 * @param inventory
 * @param playerbalance
 */
export function netGameserverStartSessionRestart(inventory: boolean, playerbalance: boolean): boolean { 
	return _in(0x35a1b3e1, 0xd1315cfa, inventory, playerbalance, _r); 
}

export function netGameserverTransactionInProgress(): boolean { 
	return _in(0x613f125b, 0xa3bd2eb9, _r); 
}

export function netGameserverTransferBankToWallet(charSlot: number, amount: number): boolean { 
	return _in(0xd47a2c1b, 0xa117471d, charSlot, amount, _r); 
}

/**
 * Same as 0x350AA5EBC03D3BD2
 */
export function netGameserverTransferBankToWalletGetStatus(): number { 
	return _in(0x23789e77, 0x7d14ce44, _r, _ri); 
}

/**
 * Used to be NETWORK_SHOP_CASH_TRANSFER_SET_TELEMETRY_NONCE_SEED
 */
export function netGameserverTransferCashSetTelemetryNonceSeed(): boolean { 
	return _in(0x498c1e05, 0xce5f7877, _r); 
}

export function netGameserverTransferWalletToBank(charSlot: number, amount: number): boolean { 
	return _in(0xc2f7fe53, 0x09181c7d, charSlot, amount, _r); 
}

/**
 * Same as 0x23789E777D14CE44
 */
export function netGameserverTransferWalletToBankGetStatus(): number { 
	return _in(0x350aa5eb, 0xc03d3bd2, _r, _ri); 
}

export function netGameserverUseServerTransactions(): boolean { 
	return _in(0x7d270879, 0x6355b20b, _r); 
}

/**
 * gets the entity id of a network id
 * @param netHandle
 */
export function netToEnt(netHandle: number): number { 
	return _in(0xbffeab45, 0xa9a9094a, netHandle, _r, _ri); 
}

/**
 * gets the object id of a network id
 * @param netHandle
 */
export function netToObj(netHandle: number): number { 
	return _in(0xd8515f5f, 0xea14cb3f, netHandle, _r, _ri); 
}

/**
 * gets the ped id of a network id
 * @param netHandle
 */
export function netToPed(netHandle: number): number { 
	return _in(0xbdcd95fc, 0x216a8b3e, netHandle, _r, _ri); 
}

export function netToVeh(netHandle: number): number { 
	return _in(0x367b9366, 0x10ba360c, netHandle, _r, _ri); 
}

export function networkAcceptPresenceInvite(p0: number): boolean { 
	return _in(0xfa91550d, 0xf9318b22, p0, _r); 
}

export function networkAccessTunableBool(tunableContext: string, tunableName: string): boolean { 
	return _in(0xaa6a47a5, 0x73abb75a, _ts(tunableContext), _ts(tunableName), _r); 
}

export function networkAccessTunableBoolHash(tunableContext: number, tunableName: number): boolean { 
	return _in(0xea16b69d, 0x93d71a45, _ch(tunableContext), _ch(tunableName), _r); 
}

export function networkAccessTunableBoolModificationDetectionRegistrationHash(contextHash: number, nameHash: number, value: boolean): [boolean, boolean] { 
	const [retval, value_out] = _in(0x697f5088, 0x61875b42, _ch(contextHash), _ch(nameHash), _i, _r);
	return [retval as boolean, value_out as boolean]; 
}

export function networkAccessTunableFloat(tunableContext: string, tunableName: string, value: number): [boolean, number] { 
	const [retval, value_out] = _in(0xe5608ca7, 0xbc163a5f, _ts(tunableContext), _ts(tunableName), _fi(value), _r);
	return [retval as boolean, value_out as number]; 
}

export function networkAccessTunableFloatHash(tunableContext: number, tunableName: number, value: number): [boolean, number] { 
	const [retval, value_out] = _in(0x972bc203, 0xbbc4c4d5, _ch(tunableContext), _ch(tunableName), _fi(value), _r);
	return [retval as boolean, value_out as number]; 
}

export function networkAccessTunableFloatModificationDetectionRegistrationHash(contextHash: number, nameHash: number, value: number): [boolean, number] { 
	const [retval, value_out] = _in(0x1950dae9, 0x848a4739, _ch(contextHash), _ch(nameHash), _fi(value), _r);
	return [retval as boolean, value_out as number]; 
}

export function networkAccessTunableInt(tunableContext: string, tunableName: string, value: number): [boolean, number] { 
	const [retval, value_out] = _in(0x8be1146d, 0xfd5d4468, _ts(tunableContext), _ts(tunableName), _ii(value), _r);
	return [retval as boolean, value_out as number]; 
}

export function networkAccessTunableIntHash(tunableContext: number, tunableName: number, value: number): [boolean, number] { 
	const [retval, value_out] = _in(0x40fce03e, 0x50e8dbe8, _ch(tunableContext), _ch(tunableName), _ii(value), _r);
	return [retval as boolean, value_out as number]; 
}

export function networkAccessTunableIntModificationDetectionRegistrationHash(contextHash: number, nameHash: number, value: number): [boolean, number] { 
	const [retval, value_out] = _in(0x3a8b55fd, 0xa4c8ddef, _ch(contextHash), _ch(nameHash), _ii(value), _r);
	return [retval as boolean, value_out as number]; 
}

export function networkAccessTunableModificationDetectionClear(): boolean { 
	return _in(0xfafc23ae, 0xe23868db, _r); 
}

export function networkActionFollowInvite(): boolean { 
	return _in(0xc88156eb, 0xb786f8d5, _r); 
}

export function networkAddClientEntityAngledArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, radius: number): number { 
	return _in(0x2b1c6238, 0x23db0d9d, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(radius), _r, _ri); 
}

export function networkAddClientEntityArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): number { 
	return _in(0x25b99872, 0xd588a101, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _r, _ri); 
}

/**
 * To remove, see: NETWORK_REMOVE_ENTITY_AREA
 * See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param width
 */
export function networkAddEntityAngledArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number): number { 
	return _in(0x376c6375, 0xba60293a, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(width), _r, _ri); 
}

export function networkAddEntityArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): number { 
	return _in(0x494c8fb2, 0x99290269, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _r, _ri); 
}

export function networkAddEntityToSynchronisedScene(entity: number, netScene: number, animDict: string, animName: string, speed: number, speedMulitiplier: number, flag: number): void { 
	return _in(0xf2404d68, 0xcbc855fa, entity, netScene, _ts(animDict), _ts(animName), _fv(speed), _fv(speedMulitiplier), flag); 
}

/**
 * ..
 * @param p0
 * @param p1
 */
export function networkAddFollowers(p1: number): number { 
	return _in(0x236406f6, 0x0cf216d6, _i, p1); 
}

export function networkAddFriend(message: string): [boolean, number] { 
	const [retval, gamerHandle_out] = _in(0x8e02d739, 0x14064223, _i, _ts(message), _r);
	return [retval as boolean, gamerHandle_out as number]; 
}

export function networkAddInvalidObjectModel(modelHash: number, p1: number): void { 
	return _in(0x7f562dbc, 0x212e81f9, _ch(modelHash), p1); 
}

/**
 * Similar structure as NETWORK_ADD_ENTITY_TO_SYNCHRONISED_SCENE but it includes this time a hash.
 * In casino_slots it is used one time in a synced scene involving a ped and the slot machine?
 * @param netScene
 * @param modelHash
 * @param x
 * @param y
 * @param z
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 * @param flags
 */
export function networkAddMapEntityToSynchronisedScene(netScene: number, modelHash: number, x: number, y: number, z: number, p5: number, p6: string, p7: number, p8: number, flags: number): void { 
	return _in(0x45f35c0e, 0xdc33b03b, netScene, _ch(modelHash), _fv(x), _fv(y), _fv(z), _fv(p5), _ts(p6), _fv(p7), _fv(p8), flags); 
}

export function networkAddPedToSynchronisedScene(ped: number, netScene: number, animDict: string, animnName: string, speed: number, speedMultiplier: number, duration: number, flag: number, playbackRate: number, p9: number): void { 
	return _in(0x742a6374, 0x71bcecd9, ped, netScene, _ts(animDict), _ts(animnName), _fv(speed), _fv(speedMultiplier), duration, flag, _fv(playbackRate), p9); 
}

export function networkAddPedToSynchronisedSceneWithIk(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number): void { 
	return _in(0xa5eafe47, 0x3e45c442, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9); 
}

export function networkAddSynchronisedSceneCamera(netScene: number, animDict: string, animName: string): void { 
	return _in(0xcf8bd3b0, 0xbd6d42d7, netScene, _ts(animDict), _ts(animName)); 
}

export function networkAllowCloningWhileInTutorial(p0: number, p1: number): void { 
	return _in(0x0f1a4b45, 0xb7693b95, p0, p1); 
}

/**
 * teamId must be < 3, instanceId must be < 64
 * @param teamId
 * @param instanceId
 */
export function networkAllowGangToJoinTutorialSession(teamId: number, instanceId: number): void { 
	return _in(0xfb680d40, 0x3909dc70, teamId, instanceId); 
}

export function networkAllowInviteProcessInPlayerSwitch(p0: boolean): void { 
	return _in(0x6b07b9ce, 0x4d390375, p0); 
}

export function networkAllowRemoteAttachmentModification(entity: number, toggle: boolean): void { 
	return _in(0x267c78c6, 0x0e806b9a, entity, toggle); 
}

export function networkAllowRemoteSyncedSceneLocalPlayerRequests(p0: number): void { 
	return _in(0x144da052, 0x257ae7d8, p0); 
}

export function networkAmIBlockedByGamer(gamerHandle: number): [boolean, number] { 
	const [retval, gamerHandle_out] = _in(0x15337c7c, 0x268a27b2, _ii(gamerHandle), _r);
	return [retval as boolean, gamerHandle_out as number]; 
}

export function networkAmIBlockedByPlayer(player: number): boolean { 
	return _in(0x87f395d9, 0x57d4353d, player, _r); 
}

export function networkAmIMutedByGamer(gamerHandle: number): [boolean, number] { 
	const [retval, gamerHandle_out] = _in(0xdf02a2c9, 0x3f1f26da, _ii(gamerHandle), _r);
	return [retval as boolean, gamerHandle_out as number]; 
}

export function networkAmIMutedByPlayer(player: number): boolean { 
	return _in(0x9d6981df, 0xc91a8604, player, _r); 
}

export function networkApplyCachedPlayerHeadBlendData(ped: number, player: number): boolean { 
	return _in(0x99b72c7a, 0xbde5c910, ped, player, _r); 
}

export function networkApplyPedScarData(ped: number, p1: number): void { 
	return _in(0xe66c6902, 0x48f11150, ped, p1); 
}

export function networkApplyTransitionParameter(p0: number, p1: number): void { 
	return _in(0x521638ad, 0xa1ba0d18, p0, p1); 
}

export function networkApplyTransitionParameterString(p0: number, string: string, p2: boolean): void { 
	return _in(0xebefc2e7, 0x7084f599, p0, _ts(string), p2); 
}

export function networkApplyVoiceProximityOverride(x: number, y: number, z: number): void { 
	return _in(0xdbd20566, 0x52689917, _fv(x), _fv(y), _fv(z)); 
}

export function networkAreHandlesTheSame(): [boolean, number, number] { 
	const [retval, gamerHandle1_out, gamerHandle2_out] = _in(0x57dba049, 0xe110f217, _i, _i, _r);
	return [retval as boolean, gamerHandle1_out as number, gamerHandle2_out as number]; 
}

export function networkArePlayersInSameTutorialSession(player: number, index: number): boolean { 
	return _in(0x9de986fc, 0x9a87c474, player, index, _r); 
}

export function networkAreSocialClubPoliciesCurrent(): boolean { 
	return _in(0xba977557, 0x0db788cf, _r); 
}

export function networkAreTransitionDetailsValid(p0: number): boolean { 
	return _in(0x2615aa2a, 0x695930c1, p0, _r); 
}

export function networkAttachSynchronisedSceneToEntity(netScene: number, entity: number, bone: number): void { 
	return _in(0x478dcbd2, 0xa98b705a, netScene, entity, bone); 
}

export function networkBail(p0: number, p1: number, p2: number): void { 
	return _in(0x95914459, 0xa87eba28, p0, p1, p2); 
}

export function networkBailTransition(p0: number, p1: number, p2: number): void { 
	return _in(0xeaa57203, 0x6990cd1b, p0, p1, p2); 
}

export function networkBlockInvites(toggle: boolean): void { 
	return _in(0x34f9e904, 0x9454a7a0, toggle); 
}

export function networkBlockJoinQueueInvites(toggle: boolean): void { 
	return _in(0xcfeb8af2, 0x4fc1d0bb, toggle); 
}

export function networkBlockProxyMigrationBetweenTutorialSessions(p0: number): void { 
	return _in(0xfea7a352, 0xddb34d52, p0); 
}

/**
 * p1 = 0 (always)
 * p2 = 1 (always)
 * @param cost
 * @param p1
 * @param p2
 * @param p3
 */
export function networkBuyAirstrike(cost: number, p1: boolean, p2: boolean, p3: number): void { 
	return _in(0x763b4bd3, 0x05338f19, cost, p1, p2, p3); 
}

export function networkBuyBackupGang(p0: number, p1: number, p2: boolean, p3: boolean, npcProvider: number): void { 
	return _in(0xa3eddaa4, 0x2411d3b9, p0, p1, p2, p3, npcProvider); 
}

/**
 * p1 is just an assumption. p2 was false and p3 was true.
 * @param amount
 * @param victim
 * @param p2
 * @param p3
 * @param p4
 */
export function networkBuyBounty(amount: number, victim: number, p2: boolean, p3: boolean, p4: number): void { 
	return _in(0x7b718e19, 0x7453f2d9, amount, victim, p2, p3, p4); 
}

export function networkBuyContrabandMission(p0: number, p1: number, p2: number, p3: boolean, p4: boolean): void { 
	return _in(0x30fd873e, 0xce50e9f6, p0, p1, _ch(p2), p3, p4); 
}

/**
 * The first parameter is the amount spent which is store in a global when this native is called. The global returns 10. Which is the price for both rides.
 * 
 * The last 3 parameters are,
 * 2,0,1 in the am_ferriswheel.c
 * 1,0,1 in the am_rollercoaster.c
 * 
 * @param amount
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 */
export function networkBuyFairgroundRide(amount: number, p1: number, p2: boolean, p3: boolean, p4: number): void { 
	return _in(0x8a7b3952, 0xdd64d2b5, amount, p1, p2, p3, p4); 
}

export function networkBuyHealthcare(cost: number, p1: boolean, p2: boolean): void { 
	return _in(0xd9b067e5, 0x5253e3dd, cost, p1, p2); 
}

/**
 * p1 = 0 (always)
 * p2 = 1 (always)
 * @param cost
 * @param p1
 * @param p2
 * @param p3
 */
export function networkBuyHeliStrike(cost: number, p1: boolean, p2: boolean, p3: number): void { 
	return _in(0x81aa4610, 0xe3fd3a69, cost, p1, p2, p3); 
}

export function networkBuyItem(amount: number, item: number, p2: number, p3: number, p4: boolean, item_name: string, p6: number, p7: number, p8: number, p9: boolean): void { 
	return _in(0xf0077c79, 0x7f66a355, amount, _ch(item), p2, p3, p4, _ts(item_name), p6, p7, p8, p9); 
}

export function networkBuyProperty(cost: number, propertyName: number, p2: boolean, p3: boolean): void { 
	return _in(0x650a08a2, 0x80870af6, cost, _ch(propertyName), p2, p3); 
}

export function networkBuySmokes(p0: number, p1: boolean, p2: boolean): void { 
	return _in(0x75af80e6, 0x1248eebd, p0, p1, p2); 
}

export function networkCacheLocalPlayerHeadBlendData(): void { 
	return _in(0xbd0be0bf, 0xc927eac1); 
}

/**
 * 11 - Need to download tunables.
 * 12 - Need to download background script.
 * 
 * Returns 1 if the multiplayer is loaded, otherwhise 0.
 * @param loadingState
 */
export function networkCanAccessMultiplayer(loadingState: number): [boolean, number] { 
	const [retval, loadingState_out] = _in(0xaf50da1a, 0x3f8b1ba4, _ii(loadingState), _r);
	return [retval as boolean, loadingState_out as number]; 
}

export function networkCanBail(): boolean { 
	return _in(0x580ce443, 0x8479cc61, _r); 
}

export function networkCanBet(amount: number): boolean { 
	return _in(0x3a54e336, 0x60ded67f, amount, _r); 
}

export function networkCanCommunicateWithGamer(gamerHandle: number): [boolean, number] { 
	const [retval, gamerHandle_out] = _in(0x8f5d1ad8, 0x32aeb06c, _ii(gamerHandle), _r);
	return [retval as boolean, gamerHandle_out as number]; 
}

export function networkCanEnterMultiplayer(): boolean { 
	return _in(0x7e782a91, 0x0c362c25, _r); 
}

export function networkCanGamerPlayMultiplayerWithMe(gamerHandle: number): [boolean, number] { 
	const [retval, gamerHandle_out] = _in(0x135f9b7b, 0x7add2185, _ii(gamerHandle), _r);
	return [retval as boolean, gamerHandle_out as number]; 
}

export function networkCanPlayMultiplayerWithGamer(gamerHandle: number): [boolean, number] { 
	const [retval, gamerHandle_out] = _in(0x07dd29d5, 0xe22763f1, _ii(gamerHandle), _r);
	return [retval as boolean, gamerHandle_out as number]; 
}

export function networkCanQueueForPreviousSessionJoin(): boolean { 
	return _in(0x2bf66d2e, 0x7414f686, _r); 
}

export function networkCanReceiveLocalInvite(gamerHandle: number): [boolean, number] { 
	const [retval, gamerHandle_out] = _in(0x421e34c5, 0x5f125964, _ii(gamerHandle), _r);
	return [retval as boolean, gamerHandle_out as number]; 
}

export function networkCanReceivePlayerCash(p0: number, p1: number, p2: number, p3: number): boolean { 
	return _in(0x5d17be59, 0xd2123284, p0, p1, p2, p3, _r); 
}

export function networkCanSendLocalInvite(gamerHandle: number): [boolean, number] { 
	const [retval, gamerHandle_out] = _in(0x021abcbd, 0x98ec4320, _ii(gamerHandle), _r);
	return [retval as boolean, gamerHandle_out as number]; 
}

export function networkCanSessionEnd(): boolean { 
	return _in(0x4eebc369, 0x4e49c572, _r); 
}

export function networkCanSetWaypoint(): boolean { 
	return _in(0xc927ec22, 0x9934af60, _r); 
}

export function networkCanShareJobCash(): boolean { 
	return _in(0x1c247330, 0x1b1c66ba, _r); 
}

export function networkCanSpendMoney(p0: number, p1: boolean, p2: boolean, p3: boolean, p4: number, p5: number): boolean { 
	return _in(0xab3caa6b, 0x422164da, p0, p1, p2, p3, p4, p5, _r); 
}

export function networkCanSpendMoney2(p0: number, p1: boolean, p2: boolean, p3: boolean, p5: number, p6: number): [boolean, number] { 
	const [retval, p4_out] = _in(0x7303e27c, 0xc6532080, p0, p1, p2, p3, _i, p5, p6, _r);
	return [retval as boolean, p4_out as number]; 
}

export function networkCanTextChatWithGamer(gamerHandle: number): [boolean, number] { 
	const [retval, gamerHandle_out] = _in(0xa150a4f0, 0x65806b1f, _ii(gamerHandle), _r);
	return [retval as boolean, gamerHandle_out as number]; 
}

/**
 * NETWORK_CAN_*
 * @param gamerHandle
 */
export function networkCanTextFromGamerBeViewed(gamerHandle: number): [boolean, number] { 
	const [retval, gamerHandle_out] = _in(0x9f633448, 0xe4c73207, _ii(gamerHandle), _r);
	return [retval as boolean, gamerHandle_out as number]; 
}

export function networkCanViewGamerUserContent(gamerHandle: number): [boolean, number] { 
	const [retval, gamerHandle_out] = _in(0xb57a4954, 0x5ba53ce7, _ii(gamerHandle), _r);
	return [retval as boolean, gamerHandle_out as number]; 
}

export function networkCancelRespawnSearch(): void { 
	return _in(0xfb8f2a6f, 0x3df08cbe); 
}

export function networkCancelTransitionMatchmaking(): void { 
	return _in(0x023782ef, 0xc70585ee); 
}

/**
 * Default:1000||This sets a value which is used when NETWORK_ENABLE_EMPTY_CROWDING_VEHICLES_REMOVAL(true) is called each frame.
 * @param p0
 */
export function networkCapEmptyCrowdingVehiclesRemoval(p0: number): void { 
	return _in(0xa4a9a4c4, 0x0e615885, p0); 
}

export function networkCasinoBuyChips(p0: number, p1: number): boolean { 
	return _in(0x3bd10147, 0x1c7f9eec, p0, p1, _r); 
}

/**
 * GTAO_CASINO_HOUSE
 * GTAO_CASINO_INSIDETRACK
 * GTAO_CASINO_LUCKYWHEEL
 * GTAO_CASINO_BLACKJACK
 * GTAO_CASINO_ROULETTE
 * GTAO_CASINO_SLOTS
 * GTAO_CASINO_PURCHASE_CHIPS
 * 
 * NETWORK_C*
 * @param hash
 */
export function networkCasinoCanBet(hash: number): boolean { 
	return _in(0x158c16f5, 0xe4cf41f8, _ch(hash), _r); 
}

export function networkCasinoCanBetAmount(p0: number): boolean { 
	return _in(0xf62f6d95, 0x28358fe4, p0, _r); 
}

export function networkCasinoCanBetPvc(): boolean { 
	return _in(0x394dcdb9, 0xe836b7a9, _r); 
}

export function networkCasinoCanBuyChipsPvc(): boolean { 
	return _in(0x8968d4d8, 0xc6c40c11, _r); 
}

export function networkCasinoSellChips(p0: number, p1: number): boolean { 
	return _in(0xed44897c, 0xb336f480, p0, p1, _r); 
}

export function networkChangeTransitionSlots(p0: number, p1: boolean): void { 
	return _in(0xeeeda5e6, 0xd7080987, p0, p1); 
}

export function networkCheckCommunicationPrivileges(p0: number, p1: number, p2: boolean): boolean { 
	return _in(0x83f28ce4, 0x9fbbffba, p0, p1, p2, _r); 
}

export function networkCheckDataManagerForHandle(p0: number, gamerHandle: number): [boolean, number] { 
	const [retval, gamerHandle_out] = _in(0x4ad490ae, 0x1536933b, p0, _ii(gamerHandle), _r);
	return [retval as boolean, gamerHandle_out as number]; 
}

export function networkCheckDataManagerSucceededForHandle(p0: number, gamerHandle: number): [boolean, number] { 
	const [retval, gamerHandle_out] = _in(0x44b37cdc, 0xae765aae, p0, _ii(gamerHandle), _r);
	return [retval as boolean, gamerHandle_out as number]; 
}

export function networkCheckOnlinePrivileges(p0: number, p1: boolean): boolean { 
	return _in(0x78321bea, 0x235fd8cd, p0, p1, _r); 
}

export function networkCheckPrivileges(p0: number, p1: number, p2: number): boolean { 
	return _in(0x0cf6cc51, 0xaa18f0f8, p0, p1, p2, _r); 
}

/**
 * Returns true if profile setting 901 is set to true and sets it to false.
 */
export function networkCheckRosLinkWentdownNotNet(): boolean { 
	return _in(0x60edd13e, 0xb3ac1ff3, _r); 
}

export function networkCheckTextCommunicationPrivileges(p0: number, p1: number, p2: number): boolean { 
	return _in(0x07eab372, 0xc8841d99, p0, p1, p2, _r); 
}

export function networkCheckUserContentPrivileges(p0: number, p1: number, p2: boolean): boolean { 
	return _in(0x595f0286, 0x98072dd9, p0, p1, p2, _r); 
}

export function networkClanAnyDownloadMembershipPending(): boolean { 
	return _in(0xb3f64a6a, 0x91432477, _r); 
}

export function networkClanCrewinfoGetCrewranktitle(p0: number, p1: string): boolean { 
	return _in(0x2b51edbe, 0xfc301339, p0, _ts(p1), _r); 
}

/**
 * Only documented...
 * 
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param animDict
 * @param animName
 */
export function networkClanCrewinfoGetStringValue(animDict: string, animName: string): boolean { 
	return _in(0x729e3401, 0xf0430686, _ts(animDict), _ts(animName), _r); 
}

export function networkClanDownloadMembership(gamerHandle: number): [boolean, number] { 
	const [retval, gamerHandle_out] = _in(0xa989044e, 0x70010abe, _ii(gamerHandle), _r);
	return [retval as boolean, gamerHandle_out as number]; 
}

export function networkClanDownloadMembershipPending(p0: number): [boolean, number] { 
	const [retval, p0_out] = _in(0x5b9e023d, 0xc6ebedc0, _ii(p0), _r);
	return [retval as boolean, p0_out as number]; 
}

export function networkClanGetEmblemTxdName(txdName: string): [boolean, number] { 
	const [retval, netHandle_out] = _in(0x5835d9cd, 0x92e83184, _i, _ts(txdName), _r);
	return [retval as boolean, netHandle_out as number]; 
}

export function networkClanGetLocalMembershipsCount(): number { 
	return _in(0x1f471b79, 0xacc90bef, _r, _ri); 
}

export function networkClanGetMembership(p2: number): [boolean, number, number] { 
	const [retval, p0_out, clanMembership_out] = _in(0xc8bc2011, 0xf67b3411, _i, _i, p2, _r);
	return [retval as boolean, p0_out as number, clanMembership_out as number]; 
}

export function networkClanGetMembershipCount(p0: number): [number, number] { 
	const [retval, p0_out] = _in(0xaab11f6c, 0x4adbc2c1, _ii(p0), _r, _ri);
	return [retval as number, p0_out as number]; 
}

export function networkClanGetMembershipDesc(p1: number): [boolean, number] { 
	const [retval, memberDesc_out] = _in(0x48de78af, 0x2c8885b8, _i, p1, _r);
	return [retval as boolean, memberDesc_out as number]; 
}

export function networkClanGetMembershipValid(p1: number): [boolean, number] { 
	const [retval, p0_out] = _in(0x48a59cf8, 0x8d43df0e, _i, p1, _r);
	return [retval as boolean, p0_out as number]; 
}

/**
 * bufferSize is 35 in the scripts.
 * @param clanDesc
 * @param bufferSize
 * @param formattedTag
 */
export function networkClanGetUiFormattedTag(bufferSize: number, formattedTag: string): number { 
	return _in(0xf4535242, 0x6ff3a4f0, _i, bufferSize, _ts(formattedTag)); 
}

export function networkClanHasCrewinfoMetadataBeenReceived(): boolean { 
	return _in(0xc32ea7a2, 0xf6ca7557, _r); 
}

export function networkClanIsEmblemReady(p0: number, p1: number): [boolean, number] { 
	const [retval, p1_out] = _in(0xa134777f, 0xf7f33331, p0, _ii(p1), _r);
	return [retval as boolean, p1_out as number]; 
}

/**
 * bufferSize is 35 in the scripts.
 * @param clanDesc
 * @param bufferSize
 */
export function networkClanIsRockstarClan(bufferSize: number): [boolean, number] { 
	const [retval, clanDesc_out] = _in(0x7543bb43, 0x9f63792b, _i, bufferSize, _r);
	return [retval as boolean, clanDesc_out as number]; 
}

export function networkClanJoin(clanDesc: number): boolean { 
	return _in(0x9faaa4f4, 0xfc71f87f, clanDesc, _r); 
}

/**
 * bufferSize is 35 in the scripts.
 * 
 * bufferSize is the elementCount of p0(desc), sizeof(p0) == 280 == p1*8 == 35 * 8, p2(netHandle) is obtained from NETWORK::NETWORK_HANDLE_FROM_PLAYER.  And no, I can't explain why 35 * sizeof(int) == 280 and not 140, but I'll get back to you on that.
 * 
 * the answer is: because p0 an int64_t* / int64_t[35].  and FYI p2 is an int64_t[13]
 * 
 * https://pastebin.com/cSZniHak
 * @param clanDesc
 * @param bufferSize
 * @param gamerHandle
 */
export function networkClanPlayerGetDesc(bufferSize: number): [boolean, number, number] { 
	const [retval, clanDesc_out, gamerHandle_out] = _in(0xeee6eacb, 0xe8874fba, _i, bufferSize, _i, _r);
	return [retval as boolean, clanDesc_out as number, gamerHandle_out as number]; 
}

export function networkClanPlayerIsActive(gamerHandle: number): [boolean, number] { 
	const [retval, gamerHandle_out] = _in(0xb124b57f, 0x571d8f18, _ii(gamerHandle), _r);
	return [retval as boolean, gamerHandle_out as number]; 
}

export function networkClanReleaseEmblem(p0: number): void { 
	return _in(0x113e6e3e, 0x50e286b0, p0); 
}

export function networkClanRemoteMembershipsAreInCache(p0: number): [boolean, number] { 
	const [retval, p0_out] = _in(0xbb6e6fee, 0x99d866b2, _ii(p0), _r);
	return [retval as boolean, p0_out as number]; 
}

export function networkClanRequestEmblem(p0: number): boolean { 
	return _in(0x13518ff1, 0xc6b28938, p0, _r); 
}

export function networkClanServiceIsValid(): boolean { 
	return _in(0x579cced0, 0x265d4896, _r); 
}

export function networkClearCharacterWallet(characterSlot: number): void { 
	return _in(0xa921ded1, 0x5fdf28f5, characterSlot); 
}

export function networkClearClockTimeOverride(): void { 
	return _in(0xd972df67, 0x326f966e); 
}

export function networkClearFollowInvite(): boolean { 
	return _in(0x439bfde3, 0xcd0610f6, _r); 
}

export function networkClearFollowers(): void { 
	return _in(0x058f43ec, 0x59a8631a); 
}

export function networkClearFoundGamers(): void { 
	return _in(0x6d14ccee, 0x1b40381a); 
}

export function networkClearGetGamerStatus(): void { 
	return _in(0x86e0660e, 0x4f5c956d); 
}

export function networkClearGroupActivity(): void { 
	return _in(0x18886949, 0x23ef4591); 
}

export function networkClearInvalidObjectModels(): void { 
	return _in(0x03b2f03a, 0x53d85e41); 
}

export function networkClearOfflineInvitePending(): void { 
	return _in(0x140e6a44, 0x870a11ce); 
}

export function networkClearPropertyId(): void { 
	return _in(0xc2b82527, 0xca77053e); 
}

export function networkClearQueuedJoinRequest(): void { 
	return _in(0x6ce50e47, 0xf5543d0c); 
}

export function networkClearTransactionTelemetryNonce(): void { 
	return _in(0xe03b9f95, 0x556e48e9); 
}

export function networkClearTransitionCreatorHandle(): void { 
	return _in(0xfb327222, 0x9a82c759); 
}

/**
 * Clears tunable contexts that were set up using _NETWORK_SET_TUNABLES_REGISTRATION_CONTEXTS
 */
export function networkClearTunablesRegistrationContexts(): void { 
	return _in(0x0c87c83c, 0x8950432b); 
}

export function networkClearVoiceChannel(): void { 
	return _in(0xe036a705, 0xf989e049); 
}

export function networkClearVoiceProximityOverride(): void { 
	return _in(0xf0375569, 0x6450470c); 
}

export function networkCloseTransitionMatchmaking(): void { 
	return _in(0x43f4dba6, 0x9710e01e); 
}

export function networkConcealEntity(entity: number, toggle: boolean): void { 
	return _in(0x1632be0a, 0xc1e62876, entity, toggle); 
}

export function networkConcealPlayer(player: number, toggle: boolean, p2: boolean): void { 
	return _in(0xbbdf0662, 0x52829606, player, toggle, p2); 
}

/**
 * If the restart reason is 4 (BE_RESTART_EF_DISABLED_WITH_BE), will cause the game to exit with exit code 622011. Otherwise exits with code 622010. Has no effect when a restart hasn't been requested (reason == 0 or reason > 6).
 * 
 * Note that this 'confirmation' itself does not restart the game, a call to QUIT_GAME or similar is required afterwards.
 */
export function networkConfirmGameRestart(): void { 
	return _in(0x0a141818, 0xca2311ad); 
}

export function networkCreateSynchronisedScene(x: number, y: number, z: number, xRot: number, yRot: number, zRot: number, rotationOrder: number, useOcclusionPortal: boolean, looped: boolean, p9: number, animTime: number, p11: number): number { 
	return _in(0x7cd6bc4c, 0x2bbdd526, _fv(x), _fv(y), _fv(z), _fv(xRot), _fv(yRot), _fv(zRot), rotationOrder, useOcclusionPortal, looped, _fv(p9), _fv(animTime), _fv(p11), _r, _ri); 
}

export function networkDeductCash(amount: number, p1: string, p2: string, p3: boolean, p4: boolean, p5: boolean): void { 
	return _in(0x18b7ae22, 0x4b087e26, amount, _ts(p1), _ts(p2), p3, p4, p5); 
}

/**
 * Does nothing (it's a nullsub).
 */
export function networkDeferCashTransactionsUntilShopSave(): void { 
	return _in(0xcd0f5b5d, 0x932ae473); 
}

/**
 * Note the 2nd parameters are always 1, 0. I have a feeling it deals with your money, wallet, bank. So when you delete the character it of course wipes the wallet cash at that time. So if that was the case, it would be eg, NETWORK_DELETE_CHARACTER(characterIndex, deleteWalletCash, deleteBankCash);
 * @param characterSlot
 * @param p1
 * @param p2
 */
export function networkDeleteCharacter(characterSlot: number, p1: boolean, p2: boolean): void { 
	return _in(0x05a50af3, 0x8947eb8d, characterSlot, p1, p2); 
}

export function networkDidFindGamersSucceed(): boolean { 
	return _in(0xf9b83b77, 0x929d8863, _r); 
}

export function networkDidGetGamerStatusSucceed(): boolean { 
	return _in(0x5ae17c6b, 0x0134b7f1, _r); 
}

export function networkDisableInvincibleFlashing(player: number, toggle: boolean): void { 
	return _in(0x9dd368bf, 0x06983221, player, toggle); 
}

export function networkDisableLeaveRemotePedBehind(toggle: boolean): void { 
	return _in(0xc505036a, 0x35afd01b, toggle); 
}

export function networkDisableProximityMigration(netID: number): void { 
	return _in(0x407091cf, 0x6037118e, netID); 
}

export function networkDisableRealtimeMultiplayer(): void { 
	return _in(0x236905c7, 0x00fdb54d); 
}

export function networkDisableVoiceBandwidthRestriction(player: number): void { 
	return _in(0xca575c39, 0x1fea25cc, player); 
}

/**
 * Hardcoded to return -1.
 * @param p0
 * @param p1
 */
export function networkDisplaynamesFromHandlesStart(p1: number): [number, number] { 
	const [retval, p0_out] = _in(0xd66c9e72, 0xb3cc4982, _i, p1, _r, _ri);
	return [retval as number, p0_out as number]; 
}

export function networkDoTransitionQuickmatch(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number): boolean { 
	return _in(0x71fb0ebc, 0xd4915d56, p0, p1, p2, p3, p4, p5, _r); 
}

export function networkDoTransitionQuickmatchAsync(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number): boolean { 
	return _in(0xa091a5e4, 0x4f0072e5, p0, p1, p2, p3, p4, p5, _r); 
}

export function networkDoTransitionQuickmatchWithGroup(p0: number, p1: number, p2: number, p3: number, p5: number, p6: number, p7: number): [boolean, number] { 
	const [retval, p4_out] = _in(0x9c4ab584, 0x91fdc98a, p0, p1, p2, p3, _i, p5, p6, p7, _r);
	return [retval as boolean, p4_out as number]; 
}

/**
 * p2 is true 3/4 of the occurrences I found.
 * 'players' is the number of players for a session. On PS3/360 it's always 18. On PC it's 32.
 * @param p0
 * @param p1
 * @param p2
 * @param players
 * @param p4
 */
export function networkDoTransitionToFreemode(p1: number, p2: boolean, players: number, p4: boolean): [boolean, number] { 
	const [retval, p0_out] = _in(0x3aad8b2f, 0xca1e289f, _i, p1, p2, players, p4, _r);
	return [retval as boolean, p0_out as number]; 
}

export function networkDoTransitionToGame(p0: boolean, maxPlayers: number): boolean { 
	return _in(0x3e9bb381, 0x02a589b0, p0, maxPlayers, _r); 
}

export function networkDoTransitionToNewFreemode(p1: number, players: number, p3: boolean, p4: boolean, p5: boolean): [boolean, number] { 
	const [retval, p0_out] = _in(0x9e80a5ba, 0x8109f974, _i, p1, players, p3, p4, p5, _r);
	return [retval as boolean, p0_out as number]; 
}

export function networkDoTransitionToNewGame(p0: boolean, maxPlayers: number, p2: boolean): boolean { 
	return _in(0x4665f51e, 0xfed00034, p0, maxPlayers, p2, _r); 
}

/**
 * communicationType: 0 = VOICE; 1 = TEXT_CHAT; 2 = TEXT_MESSAGE; 3 = EMAIL; 4 = USER_CONTENT;  5 = USER_TEXT
 * @param communicationType
 */
export function networkDoesCommunicationGroupExist(communicationType: number): boolean { 
	return _in(0xdbdf8067, 0x3bba3d65, communicationType, _r); 
}

export function networkDoesEntityExistWithNetworkId(netId: number): boolean { 
	return _in(0x18a47d07, 0x4708fd68, netId, _r); 
}

export function networkDoesNetworkIdExist(netId: number): boolean { 
	return _in(0x38ce16c9, 0x6bd11344, netId, _r); 
}

export function networkDoesTunableExist(tunableContext: string, tunableName: string): boolean { 
	return _in(0x85e5f8b9, 0xb898b20a, _ts(tunableContext), _ts(tunableName), _r); 
}

export function networkDoesTunableExistHash(tunableContext: number, tunableName: number): boolean { 
	return _in(0xe4e53e14, 0x19d81127, _ch(tunableContext), _ch(tunableName), _r); 
}

/**
 * Does nothing (it's a nullsub).
 */
export function networkDumpNetIfConfig(): void { 
	return _in(0xaedf1bc1, 0xc133d6e3); 
}

export function networkEarnAgency(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0x0cb1be06, 0x33c024a8, p0, p1, p2, p3); 
}

export function networkEarnAgencyContract(p0: number, p1: number): void { 
	return _in(0x38482ad4, 0x9cb905c7, p0, p1); 
}

export function networkEarnAgencyPhone(p0: number, p1: number, p2: number): void { 
	return _in(0xe29f3d5f, 0xa63b1b82, p0, p1, p2); 
}

export function networkEarnAgencySafe(p0: number, p1: number): void { 
	return _in(0x663b4b9d, 0x11742a12, p0, p1); 
}

export function networkEarnArcade(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number): void { 
	return _in(0xd29334ed, 0x1a256dbf, p0, p1, p2, p3, p4, p5); 
}

export function networkEarnArenaCareerProgression(amount: number, p1: number): void { 
	return _in(0x0f99f70c, 0x61f14619, amount, p1); 
}

export function networkEarnArenaSkillLevelProgression(amount: number, p1: number): void { 
	return _in(0xe08256f9, 0x72c7bb2c, amount, p1); 
}

export function networkEarnArenaWar(amount: number, p1: number, p2: number, p3: number): void { 
	return _in(0x631f1cb8, 0xfb4130aa, amount, p1, p2, p3); 
}

export function networkEarnArenaWarAssassinateTarget(amount: number): void { 
	return _in(0x5e7ae8aa, 0xbe8b7c0d, amount); 
}

export function networkEarnArenaWarEventCargo(amount: number): void { 
	return _in(0xa8295906, 0x2361b259, amount); 
}

export function networkEarnAssassinateTargetKilled(amount: number): void { 
	return _in(0xfa700d8a, 0x9905f78a, amount); 
}

export function networkEarnAutoshopBusiness(p0: number, p1: number, p2: number): void { 
	return _in(0x36a7fd5a, 0x7194b03e, p0, p1, p2); 
}

export function networkEarnAutoshopIncome(p0: number, p1: number): void { 
	return _in(0xc66d1cf9, 0x9ed7fe25, p0, p1); 
}

/**
 * Used for SERVICE_EARN_AVENGER_OPERATIONS & SERVICE_EARN_AVENGER_OPS_BONUS
 * @param amount
 * @param p1
 */
export function networkEarnAvenger(amount: number, p1: number): void { 
	return _in(0x55f006b9, 0xd4a46c1d, amount, p1); 
}

export function networkEarnAwardAcidLab(p0: number, p1: number): void { 
	return _in(0xd1a81657, 0x67ad2d23, p0, p1); 
}

export function networkEarnAwardContract(p0: number, p1: number): void { 
	return _in(0x146d4eb6, 0xd22a403f, p0, p1); 
}

export function networkEarnAwardDailyStash(p0: number, p1: number): void { 
	return _in(0xc30650fa, 0x74a19d02, p0, p1); 
}

export function networkEarnAwardDeadDrop(p0: number, p1: number): void { 
	return _in(0xd01ebaea, 0x1f905ef6, p0, p1); 
}

export function networkEarnAwardFixerMission(p0: number, p1: number): void { 
	return _in(0x88d6c327, 0xd6c57c45, p0, p1); 
}

export function networkEarnAwardJuggaloMission(p0: number, p1: number): void { 
	return _in(0xddf04757, 0x7f1a02a7, p0, p1); 
}

export function networkEarnAwardPhone(p0: number, p1: number): void { 
	return _in(0x7397a115, 0x030f1be3, p0, p1); 
}

export function networkEarnAwardRandomEvent(p0: number, p1: number): void { 
	return _in(0xbeafbb1b, 0x98b7ef55, p0, p1); 
}

export function networkEarnAwardShortTrip(p0: number, p1: number): void { 
	return _in(0x5b4dbded, 0x84d6a420, p0, p1); 
}

export function networkEarnAwardTaxi(p0: number, p1: number): void { 
	return _in(0xa914768a, 0xd35cd3a5, p0, p1); 
}

export function networkEarnBbEventBonus(amount: number): void { 
	return _in(0xfdd8d244, 0x0daf1590, amount); 
}

export function networkEarnBeachPartyLostFound(p0: number, p1: number, p2: number): void { 
	return _in(0xa51338e0, 0xdccd4065, p0, p1, p2); 
}

export function networkEarnBiker(p0: number): void { 
	return _in(0x71bec32f, 0xa466e105, p0); 
}

export function networkEarnBikerShop(p0: number, p1: number): void { 
	return _in(0x2c5809eb, 0x9df57257, p0, p1); 
}

export function networkEarnBonusObjective(amount: number, p1: number, p2: number): void { 
	return _in(0xdcef983c, 0x24191997, amount, p1, p2); 
}

export function networkEarnBoss(p0: number, p1: number, p2: number): void { 
	return _in(0x08b0ca7a, 0x6ab3ac32, p0, p1, p2); 
}

export function networkEarnBountyHunterReward(p0: number): void { 
	return _in(0xf6b170f9, 0xa02e9e87, p0); 
}

export function networkEarnCarclubMembership(p0: number): void { 
	return _in(0xbc622779, 0x2a188e2e, p0); 
}

export function networkEarnCasinoAward(amount: number, hash: number): void { 
	return _in(0x973a9781, 0xa34f8deb, amount, _ch(hash)); 
}

export function networkEarnCasinoCollectableCompletedCollection(amount: number): void { 
	return _in(0x83ad64f5, 0x3f4e9483, amount); 
}

export function networkEarnCasinoHeist(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): void { 
	return _in(0x72e7c7b9, 0x615fa3c3, p0, p1, p2, p3, p4, p5, p6); 
}

export function networkEarnCasinoHeistAwards(p0: number, p1: number, p2: number, p3: number, p4: number): void { 
	return _in(0x3ec7471e, 0x6909798a, p0, p1, p2, p3, p4); 
}

export function networkEarnCasinoMissionParticipation(amount: number): void { 
	return _in(0x09e8f186, 0x41be2575, amount); 
}

export function networkEarnCasinoMissionReward(amount: number): void { 
	return _in(0x566fd402, 0xb25787de, amount); 
}

export function networkEarnCasinoStoryMissionReward(amount: number): void { 
	return _in(0xac95ed55, 0x2157e092, amount); 
}

export function networkEarnCasinoTimeTrialWin(amount: number): void { 
	return _in(0x0819db99, 0xfd2fbbd8, amount); 
}

export function networkEarnChallenge(amount: number, p1: number, p2: number): void { 
	return _in(0x0dd362f1, 0x4f18942a, amount, p1, p2); 
}

export function networkEarnCollectableCompletedCollection(amount: number, p1: number): void { 
	return _in(0x5c9b198a, 0xf5a54fa6, amount, p1); 
}

export function networkEarnCollectableItem(amount: number, p1: number): void { 
	return _in(0x84ff63bd, 0x4966f33d, amount, p1); 
}

export function networkEarnCollectables(p0: number, p1: number, p2: number): void { 
	return _in(0xa95cfb4e, 0x02390842, p0, p1, p2); 
}

export function networkEarnCollectablesActionFigures(amount: number): void { 
	return _in(0x5517f900, 0x43466049, amount); 
}

export function networkEarnDailyObjectiveEvent(amount: number): void { 
	return _in(0x5128df14, 0xa5bb86fc, amount); 
}

export function networkEarnDailyStashHouseCompleted(p0: number, p1: number): void { 
	return _in(0xcabc9874, 0xafa70d6d, p0, p1); 
}

export function networkEarnDailyStashHouseParticipation(p0: number, p1: number): void { 
	return _in(0x9c0c6bd0, 0xf94ce391, p0, p1); 
}

export function networkEarnDailyVehicle(p0: number, p1: number): void { 
	return _in(0x533073e8, 0xa596008c, p0, p1); 
}

export function networkEarnDailyVehicleBonus(p0: number): void { 
	return _in(0xfe65afe7, 0x308e32b2, p0); 
}

export function networkEarnDarChallenge(amount: number, p1: number): void { 
	return _in(0xcac67208, 0x7b4a24ab, amount, p1); 
}

export function networkEarnDispatchCall(amount: number, p1: number): void { 
	return _in(0xe2e244ab, 0x823b4483, amount, p1); 
}

export function networkEarnDoomsdayFinaleBonus(amount: number, vehicleHash: number): void { 
	return _in(0x128a747f, 0x4a230952, amount, _ch(vehicleHash)); 
}

export function networkEarnFirstTimeBonus(p0: number, p1: number, p2: number): void { 
	return _in(0x11b0a20c, 0x493f7e36, p0, p1, p2); 
}

export function networkEarnFixerAgencyShortTrip(p0: number, p1: number): void { 
	return _in(0xf4a8e574, 0x60bf2037, p0, p1); 
}

export function networkEarnFixerFinale(p0: number, p1: number): void { 
	return _in(0xba154373, 0xc5fe51e8, p0, p1); 
}

export function networkEarnFixerPrep(p0: number, p1: number): void { 
	return _in(0x6283e5de, 0x4c4460c6, p0, p1); 
}

export function networkEarnFixerRivalDelivery(p0: number, p1: number): void { 
	return _in(0x235d4121, 0x0b3a1a5e, p0, p1); 
}

export function networkEarnFmbbWageBonus(p0: number): void { 
	return _in(0xfffba1b1, 0xf7c0b6f4, p0); 
}

/**
 * JUGGALO_PHONE_MISSION...
 * @param p0
 * @param p1
 */
export function networkEarnFooliganJob(p0: number, p1: number): void { 
	return _in(0xce4452ae, 0x85f5e252, p0, p1); 
}

/**
 * JUGGALO_PHONE_MISSION_PARTICIPATION...
 * @param p0
 * @param p1
 */
export function networkEarnFooliganJobParticipation(p0: number, p1: number): void { 
	return _in(0xc376b92d, 0x0e060970, p0, p1); 
}

/**
 * DSPORT
 * @param p0
 * @param p1
 */
export function networkEarnFromAiTargetKill(p0: number, p1: number): void { 
	return _in(0x515b4a22, 0xe4d3c6d7, p0, p1); 
}

/**
 * Example for p1: "AM_DISTRACT_COPS"
 * @param p0
 * @param p1
 * @param p2
 */
export function networkEarnFromAmbientJob(p0: number, p1: string, p2: number): number { 
	return _in(0xfb6db092, 0xfbae29e6, p0, _ts(p1), _ii(p2)); 
}

export function networkEarnFromBendJob(amount: number, heistHash: string): void { 
	return _in(0x61326ee6, 0xdf15b0ca, amount, _ts(heistHash)); 
}

export function networkEarnFromBetting(amount: number, p1: string): void { 
	return _in(0x827a5ba1, 0xa44aca6d, amount, _ts(p1)); 
}

export function networkEarnFromBounty(amount: number, p3: number): [number, number] { 
	const [gamerHandle_out, p2_out] = _in(0x131bb5da, 0x15453acf, amount, _i, _i, p3);
	return [gamerHandle_out as number, p2_out as number]; 
}

export function networkEarnFromBusinessBattle(p0: number): void { 
	return _in(0x42fce14f, 0x50f27291, p0); 
}

export function networkEarnFromBusinessHubSell(p0: number, p1: number, p2: number): void { 
	return _in(0x0b39cf0d, 0x53f1c883, p0, p1, p2); 
}

export function networkEarnFromBusinessProduct(amount: number, p1: number, p2: number, p3: number): void { 
	return _in(0x85867897, 0x30b10caf, amount, p1, p2, p3); 
}

export function networkEarnFromCashingOut(amount: number): void { 
	return _in(0x718fbbf6, 0x7414fa36, amount); 
}

export function networkEarnFromChallengeWin(p0: number, p2: boolean): number { 
	return _in(0x2b171e6b, 0x2f64d8df, p0, _i, p2); 
}

export function networkEarnFromClubManagementParticipation(p0: number, p1: number): void { 
	return _in(0xa75eac69, 0xf59e96e7, p0, p1); 
}

export function networkEarnFromContraband(amount: number, p1: number): void { 
	return _in(0xeca658ce, 0x2a4e5a72, amount, p1); 
}

export function networkEarnFromCrateDrop(amount: number): void { 
	return _in(0xb1cc1b9e, 0xc3007a2a, amount); 
}

export function networkEarnFromCriminalMastermind(p0: number, p1: number, p2: number): void { 
	return _in(0xfa009a62, 0x990671d4, p0, p1, p2); 
}

/**
 * type either Monthly,Weekly,Daily
 * @param amount
 * @param type
 * @param characterSlot
 */
export function networkEarnFromDailyObjectives(amount: number, type: string, characterSlot: number): void { 
	return _in(0x6ea318c9, 0x1c1a8786, amount, _ts(type), characterSlot); 
}

export function networkEarnFromDestroyingContraband(p0: number, p1: number, p2: number): void { 
	return _in(0x84c0116d, 0x012e8fc2, p0, p1, p2); 
}

export function networkEarnFromFmbbBossWork(p0: number): void { 
	return _in(0x1fda0aa6, 0x79c9919b, p0); 
}

export function networkEarnFromFmbbPhonecallMission(p0: number): void { 
	return _in(0xc5156361, 0xf26e2212, p0); 
}

export function networkEarnFromGangattackPickup(amount: number): void { 
	return _in(0xa03d4ace, 0x0a3284ce, amount); 
}

export function networkEarnFromHangarTrade(p0: number, p1: number): void { 
	return _in(0x31ba138f, 0x6304fb9f, p0, p1); 
}

export function networkEarnFromHoldups(amount: number): void { 
	return _in(0x45b8154e, 0x077d9e4d, amount); 
}

export function networkEarnFromImportExport(amount: number, modelHash: number): void { 
	return _in(0xf92a014a, 0x634442d6, amount, _ch(modelHash)); 
}

export function networkEarnFromIslandHeistDjMission(p0: number, p1: number): void { 
	return _in(0xe2bb399d, 0x90942091, p0, p1); 
}

export function networkEarnFromJob(amount: number, p1: string): void { 
	return _in(0xb2cc4836, 0x834e8a98, amount, _ts(p1)); 
}

export function networkEarnFromJobBonus(p0: number): [number, number] { 
	const [p1_out, p2_out] = _in(0x6816fb44, 0x16760775, p0, _i, _i);
	return [p1_out as number, p2_out as number]; 
}

export function networkEarnFromJobx2(amount: number, p1: string): void { 
	return _in(0xdebbf584, 0x665411d0, amount, _ts(p1)); 
}

export function networkEarnFromNotBadsport(amount: number): void { 
	return _in(0x4337511f, 0xa8221d36, amount); 
}

export function networkEarnFromPersonalVehicle(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number): void { 
	return _in(0x3f4d0016, 0x7e41e0ad, p0, p1, p2, p3, p4, p5, p6, p7, p8); 
}

export function networkEarnFromPickup(amount: number): void { 
	return _in(0xed1517d3, 0xaf17c698, amount); 
}

export function networkEarnFromPremiumJob(amount: number, p1: string): void { 
	return _in(0xc8407624, 0xcef2354b, amount, _ts(p1)); 
}

export function networkEarnFromProperty(amount: number, propertyName: number): void { 
	return _in(0x84964834, 0x9d77f5c5, amount, _ch(propertyName)); 
}

/**
 * For the money bags that drop a max of $40,000. Often called 40k bags.
 * 
 * Most likely NETWORK_EARN_FROM_ROB***
 * @param amount
 */
export function networkEarnFromRobArmoredCars(amount: number): void { 
	return _in(0xf514621e, 0x8ea463d0, amount); 
}

export function networkEarnFromSellBunker(amount: number, bunkerHash: number): void { 
	return _in(0x9251b6ab, 0xf2d0a5b4, amount, _ch(bunkerHash)); 
}

export function networkEarnFromSmugglerWork(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number): void { 
	return _in(0x6b7e4fb5, 0x0d5f3d65, p0, p1, p2, p3, p4, p5); 
}

export function networkEarnFromVehicle(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number): void { 
	return _in(0xb539bd8a, 0x4c1eecf8, p0, p1, p2, p3, p4, p5, p6, p7); 
}

export function networkEarnFromVehicleExport(amount: number, p1: number, p2: number): void { 
	return _in(0xedead9a9, 0x1ec768b3, amount, p1, p2); 
}

export function networkEarnFromWarehouse(amount: number, id: number): void { 
	return _in(0x3e4adaff, 0x1830f146, amount, id); 
}

export function networkEarnGangopsAward(amount: number, p1: string, p2: number): void { 
	return _in(0xa9a31475, 0xf530dfda, amount, _ts(p1), p2); 
}

export function networkEarnGangopsElite(amount: number, p1: string, actIndex: number): void { 
	return _in(0x2597a0d4, 0xa4fc2c77, amount, _ts(p1), actIndex); 
}

export function networkEarnGangopsFinale(amount: number, p1: string): void { 
	return _in(0x1c121fc9, 0x545e0d52, amount, _ts(p1)); 
}

export function networkEarnGangopsPrepParticipation(amount: number): void { 
	return _in(0xed26584f, 0x6bdcbbfd, amount); 
}

export function networkEarnGangopsSetup(amount: number, p1: string): void { 
	return _in(0xa9160796, 0xd47a2cf8, amount, _ts(p1)); 
}

export function networkEarnGangopsWages(amount: number, p1: number): void { 
	return _in(0x2dcb19ab, 0xab0380a8, amount, p1); 
}

export function networkEarnGangopsWagesBonus(amount: number, p1: number): void { 
	return _in(0x15bb2a5c, 0x757eb91f, amount, p1); 
}

/**
 * _NETWORK_EARN_G*
 * @param amount
 * @param earn
 * @param p2
 * @param p3
 * @param data
 */
export function networkEarnGeneric(amount: number, earn: number, p2: string, p3: string, data: number): number { 
	return _in(0xbf7b5bb7, 0xed890380, amount, _ch(earn), _ts(p2), _ts(p3), _ii(data)); 
}

export function networkEarnGoon(p0: number, p1: number, p2: number): void { 
	return _in(0xcda1c62b, 0xe2777802, p0, p1, p2); 
}

export function networkEarnHackerTruck(p0: number, amount: number, p2: number, p3: number): void { 
	return _in(0xe8815fe9, 0x93896ad3, p0, amount, p2, p3); 
}

export function networkEarnHeistAward(p0: number, p1: number, p2: number): void { 
	return _in(0x9d4fdbb0, 0x35229669, p0, p1, p2); 
}

export function networkEarnIslandHeist(amount1: number, p1: number, p2: number, p3: number, amount2: number, p5: number): void { 
	return _in(0xd21d111c, 0x46ba9f15, amount1, p1, p2, p3, amount2, p5); 
}

export function networkEarnJuggaloStoryMission(p0: number, p1: number): void { 
	return _in(0xe01d10ba, 0x8cd53621, p0, p1); 
}

export function networkEarnJuggaloStoryMissionParticipation(p0: number, p1: number): void { 
	return _in(0x40ff6ccc, 0xc476185c, p0, p1); 
}

export function networkEarnNightclub(p0: number, p1: number): void { 
	return _in(0xe0f82d68, 0xc7039158, p0, p1); 
}

export function networkEarnNightclubAndWarehouse(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): void { 
	return _in(0xc6e74cf8, 0xc884c880, p0, p1, p2, p3, p4, p5, p6); 
}

export function networkEarnNightclubDancing(p0: number): void { 
	return _in(0xb4deae67, 0xf35e2acd, p0); 
}

export function networkEarnProgressHub(p0: number, p1: number): void { 
	return _in(0xf8332b06, 0xf0eecc9c, p0, p1); 
}

export function networkEarnPurchaseClubHouse(p0: number, p1: number): void { 
	return _in(0x55a1e095, 0xdb052fa5, p0, p1); 
}

export function networkEarnRcTimeTrial(amount: number): void { 
	return _in(0xdff49ee9, 0x84e7aae8, amount); 
}

export function networkEarnRdrBonus(amount: number, p1: number): void { 
	return _in(0x7a5349b7, 0x73584675, amount, p1); 
}

export function networkEarnSellAcid(p0: number, p1: number): void { 
	return _in(0x79b65693, 0x7df6df5d, p0, p1); 
}

export function networkEarnSellBase(amount: number, baseNameHash: number): void { 
	return _in(0x0e1e2ff3, 0xf4ec11aa, amount, _ch(baseNameHash)); 
}

export function networkEarnSellParticipationAcidLab(p0: number, p1: number): void { 
	return _in(0xca3ef9b0, 0x9a8d76b4, p0, p1); 
}

export function networkEarnSellPrizeVehicle(amount: number, p1: number, p2: number): void { 
	return _in(0x8bcb27a0, 0x57df7b7f, amount, p1, p2); 
}

export function networkEarnSetupParticipationAcidLab(p0: number, p1: number): void { 
	return _in(0xe3942d59, 0xe8a7f70d, p0, p1); 
}

export function networkEarnSightseeingReward(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0x45087ae4, 0x80b233ac, p0, p1, p2, p3); 
}

export function networkEarnSmugglerAgency(amount: number, p1: number, p2: number, p3: number): void { 
	return _in(0xdee612f2, 0xd71b0308, amount, p1, p2, p3); 
}

export function networkEarnSmugglerOps(p0: number, p1: number, p2: number): void { 
	return _in(0xdea273d5, 0xf8a9661a, p0, p1, p2); 
}

export function networkEarnSourceParticipationAcidLab(p0: number, p1: number): void { 
	return _in(0x136f11b5, 0xdf1b304d, p0, p1); 
}

export function networkEarnSpinTheWheelCash(amount: number): void { 
	return _in(0x676c4877, 0x6cacbb5a, amount); 
}

export function networkEarnStreetDealer(p0: number, p1: number): void { 
	return _in(0xa81017ee, 0x1324fdfe, p0, p1); 
}

export function networkEarnTargetRefund(amount: number, p1: number): void { 
	return _in(0x5b669cf2, 0x299a271f, amount, p1); 
}

export function networkEarnTaxiJob(p0: number, p1: number): void { 
	return _in(0x991e1588, 0xfad9019d, p0, p1); 
}

export function networkEarnTunerAward(p0: number, p1: number, p2: number): void { 
	return _in(0xb846f547, 0xd3792df6, p0, p1, p2); 
}

export function networkEarnTunerRobbery(p0: number, p1: number, p2: number, p3: number, p4: number): void { 
	return _in(0xbcb26624, 0x7193ac61, p0, p1, p2, p3, p4); 
}

export function networkEarnUpgradeAgency(p0: number, p1: number): void { 
	return _in(0xd07c7c3f, 0x1995108c, p0, p1); 
}

export function networkEarnUpgradeArcade(p0: number, p1: number, p2: number): void { 
	return _in(0x4c3b7569, 0x4f7e0d9c, p0, p1, p2); 
}

export function networkEarnUpgradeAutoshop(p0: number, p1: number): void { 
	return _in(0xc10322a8, 0xd3e061ee, p0, p1); 
}

export function networkEarnWagePayment(amount: number, p1: number): void { 
	return _in(0x35f8da0e, 0x8a31ef1b, amount, p1); 
}

export function networkEarnWagePaymentBonus(amount: number): void { 
	return _in(0x005aca71, 0x00bd101d, amount); 
}

export function networkEarnYatchMission(amount: number, p1: number): void { 
	return _in(0xde68e30d, 0x89f97132, amount, p1); 
}

export function networkEconomyHasFixedCrazyNumbers(): boolean { 
	return _in(0x7c4fccd2, 0xe4deb394, _r); 
}

export function networkEnableEmptyCrowdingVehiclesRemoval(toggle: boolean): void { 
	return _in(0x51db102f, 0x4a3ba5e0, toggle); 
}

export function networkEnableExtraVehicleOrientationBlendChecks(netId: number, toggle: boolean): void { 
	return _in(0xe6717e65, 0x2b8c8d8a, netId, toggle); 
}

export function networkEnableVoiceBandwidthRestriction(player: number): void { 
	return _in(0x5e3aa4ca, 0x2b6fb0ee, player); 
}

export function networkEndTutorialSession(): void { 
	return _in(0xd0afaff5, 0xa51d72f7); 
}

export function networkEntityAreaDoesExist(areaHandle: number): boolean { 
	return _in(0xe64a3ca0, 0x8dfa37a9, areaHandle, _r); 
}

export function networkEntityAreaHaveAllReplied(areaHandle: number): boolean { 
	return _in(0x4df7cfff, 0x471a7fb1, areaHandle, _r); 
}

export function networkEntityAreaIsOccupied(areaHandle: number): boolean { 
	return _in(0x4a2d4e8b, 0xf4265b0f, areaHandle, _r); 
}

export function networkEntityGetObjectId(entity: number): number { 
	return _in(0x815f18ad, 0x865f057f, entity, _r, _ri); 
}

export function networkEntityUseHighPrecisionRotation(netId: number, toggle: boolean): void { 
	return _in(0x95baf97c, 0x82464629, netId, toggle); 
}

export function networkExplodeHeli(vehicle: number, isAudible: boolean, isInvisible: boolean, netId: number): void { 
	return _in(0x2a5e0621, 0xdd815a9a, vehicle, isAudible, isInvisible, netId); 
}

/**
 * In the console script dumps, this is only referenced once.
 * NETWORK::NETWORK_EXPLODE_VEHICLE(vehicle, 1, 0, 0);
 * 
 * ^^^^^ That must be PC script dumps? In X360 Script Dumps it is reference a few times with 2 differences in the parameters.
 * Which as you see below is 1, 0, 0 + 1, 1, 0 + 1, 0, and a *param?
 * 
 * am_plane_takedown.c
 * network_explode_vehicle(net_to_veh(Local_40.imm_2), 1, 1, 0);
 * 
 * armenian2.c
 * network_explode_vehicle(Local_80[6 <2>], 1, 0, 0);
 * 
 * fm_horde_controler.c
 * network_explode_vehicle(net_to_veh(*uParam0), 1, 0, *uParam0);
 * 
 * fm_mission_controller.c, has 6 hits so not going to list them.
 * 
 * Side note, setting the first parameter to 0 seems to mute sound or so?
 * 
 * Seems it's like ADD_EXPLOSION, etc. the first 2 params. The 3rd atm no need to worry since it always seems to be 0.
 * 
 * @param vehicle
 * @param isAudible
 * @param isInvisible
 * @param netId
 */
export function networkExplodeVehicle(vehicle: number, isAudible: boolean, isInvisible: boolean, netId: number): boolean { 
	return _in(0x301a4215, 0x3c9ad707, vehicle, isAudible, isInvisible, netId, _r); 
}

/**
 * state - 0 does 5 fades
 * state - 1 does 6 fades
 * 
 * p3: setting to 1 made vehicle fade in slower, probably "slow" as per NETWORK_FADE_OUT_ENTITY
 * @param entity
 * @param state
 * @param p2
 */
export function networkFadeInEntity(entity: number, state: boolean, p2: number): void { 
	return _in(0x1f4ed342, 0xacefe62d, entity, state, p2); 
}

/**
 * normal - transition like when your coming out of LSC
 * slow - transition like when you walk into a mission
 * 
 * @param entity
 * @param normal
 * @param slow
 */
export function networkFadeOutEntity(entity: number, normal: boolean, slow: boolean): void { 
	return _in(0xde564951, 0xf95e09ed, entity, normal, slow); 
}

export function networkFindGamersInCrew(crewId: number): boolean { 
	return _in(0xe532d681, 0x1b3a4d2a, crewId, _r); 
}

/**
 * p0 is always 0. p1 is pointing to a global.
 * @param p0
 * @param p1
 */
export function networkFindLargestBunchOfPlayers(p0: number, p1: number): boolean { 
	return _in(0xfb1f9381, 0xe80fa13f, p0, p1, _r); 
}

/**
 * Uses attributes to find players with similar stats. Upper/Lower limit must be above zero or the fallback limit +/-0.1 is used.
 * There can be up to 15 attributes, they are as follows:
 * 
 * 0 = Races
 * 1 = Parachuting
 * 2 = Horde
 * 3 = Darts
 * 4 = Arm Wrestling
 * 5 = Tennis
 * 6 = Golf
 * 7 = Shooting Range
 * 8 = Deathmatch
 * 9 = MPPLY_MCMWIN/MPPLY_CRMISSION
 * @param attribute
 * @param fallbackLimit
 * @param lowerLimit
 * @param upperLimit
 */
export function networkFindMatchedGamers(attribute: number, fallbackLimit: number, lowerLimit: number, upperLimit: number): boolean { 
	return _in(0xf7b2cfde, 0x5c9f700d, attribute, _fv(fallbackLimit), _fv(lowerLimit), _fv(upperLimit), _r); 
}

export function networkFinishBroadcastingData(): void { 
	return _in(0x64f62afb, 0x081e260d); 
}

/**
 * NETWORK_F[I-O]
 */
export function networkForceLocalPlayerScarSync(): void { 
	return _in(0xb7c7f6ad, 0x6424304b); 
}

export function networkForceLocalUseOfSyncedSceneCamera(netScene: number): void { 
	return _in(0xc9b43a33, 0xd09cada7, netScene); 
}

export function networkGamerHasHeadset(gamerHandle: number): [boolean, number] { 
	const [retval, gamerHandle_out] = _in(0xf2fd55cb, 0x574bcc55, _ii(gamerHandle), _r);
	return [retval as boolean, gamerHandle_out as number]; 
}

export function networkGamertagFromHandlePending(): boolean { 
	return _in(0xb071e279, 0x58ef4cf0, _r); 
}

export function networkGamertagFromHandleStart(gamerHandle: number): [boolean, number] { 
	const [retval, gamerHandle_out] = _in(0x9f0c0a98, 0x1d73fa56, _ii(gamerHandle), _r);
	return [retval as boolean, gamerHandle_out as number]; 
}

export function networkGamertagFromHandleSucceeded(): boolean { 
	return _in(0xfd00798d, 0xba7523dd, _r); 
}

export function networkGetActivityPlayerNum(p0: boolean): number { 
	return _in(0x73e2b500, 0x410da5a2, p0, _r, _ri); 
}

export function networkGetAgeGroup(): number { 
	return _in(0x9614b71f, 0x8adb982b, _r, _ri); 
}

export function networkGetAssistedDamageOfEntity(player: number, entity: number, p2: number): [boolean, number] { 
	const [retval, p2_out] = _in(0x4caca844, 0x40fa26f6, player, entity, _ii(p2), _r);
	return [retval as boolean, p2_out as number]; 
}

/**
 * NETWORK_GET_ASSISTED_DAMAGE_OF_ENTITY that ensures the entity is dead (IS_ENTITY_DEAD)
 * @param player
 * @param entity
 * @param p2
 */
export function networkGetAssistedKillOfEntity(player: number, entity: number, p2: number): [boolean, number] { 
	const [retval, p2_out] = _in(0x83660b73, 0x4994124d, player, entity, _ii(p2), _r);
	return [retval as boolean, p2_out as number]; 
}

export function networkGetAverageLatency(player: number): number { 
	return _in(0xd414be12, 0x9bb81b32, player, _r, _rf); 
}

export function networkGetAveragePacketLoss(player: number): number { 
	return _in(0x350c2394, 0x9e43686c, player, _r, _rf); 
}

/**
 * Same as NETWORK_GET_AVERAGE_LATENCY
 * @param player
 */
export function networkGetAveragePing(player: number): number { 
	return _in(0x0e3a041e, 0xd6ac2b45, player, _r, _rf); 
}

/**
 * 0x20211000 = HUD_BE_ERROR_FAILED_UNKNOWN
 * 0x20212000 = HUD_BE_ERROR_FAILED_CLIENT_INIT
 * 0x20213000 = HUD_BE_ERROR_FAILED_SERVER_INIT
 * 0x20214000 = HUD_BE_ERROR_FAILED_AUTH_ATTEMPTS
 * 0x20215000 = HUD_BE_ERROR_UNTRUSTED_HOST
 * 0x20216000 = HUD_BE_ERROR_KICKED
 * 0x20217000 = HUD_BE_ERROR_BANNED
 * 0x50140000 = HUD_BE_BLOCK_BANNED
 * 
 * Note: an invalid error code returns a null pointer!
 * @param errorCode
 */
export function networkGetBattleyeErrorMessageLabel(errorCode: number): string { 
	return _in(0xcba50f37, 0x1e45b90d, errorCode, _r, _s); 
}

export function networkGetBoneIdOfFatalHit(): number { 
	return _in(0x7db53b37, 0xa2f211a0, _r, _ri); 
}

/**
 * Returns true if bank balance >= amount.
 * @param amount
 */
export function networkGetCanSpendFromBank(amount: number): boolean { 
	return _in(0xa31fd6a0, 0x865b6d14, amount, _r); 
}

/**
 * Returns true if bank balance + wallet balance >= amount.
 * @param amount
 * @param characterSlot
 */
export function networkGetCanSpendFromBankAndWallet(amount: number, characterSlot: number): boolean { 
	return _in(0xdc18531d, 0x7019a535, amount, characterSlot, _r); 
}

/**
 * Returns true if wallet balance >= amount.
 * @param amount
 * @param characterSlot
 */
export function networkGetCanSpendFromWallet(amount: number, characterSlot: number): boolean { 
	return _in(0xed5ab886, 0x0415baba, amount, characterSlot, _r); 
}

/**
 * Returns false if amount > wallet balance or daily transfer limit has been hit.
 * @param amount
 */
export function networkGetCanTransferCash(amount: number): boolean { 
	return _in(0x08e8eead, 0xfd0dc4a0, amount, _r); 
}

/**
 * Returns communicationGroupFlag
 * communicationType: see 0xDBDF80673BBA3D65
 * 
 * enum eCommunicationGroupFlag
 * {
 * COMMUNICATION_GROUP_LOCAL_PLAYER = 1 << 0,
 * COMMUNICATION_GROUP_FRIENDS = 1 << 1,
 * COMMUNICATION_GROUP_SMALL_CREW = 1 << 2,
 * COMMUNICATION_GROUP_LARGE_CREW = 1 << 3,
 * COMMUNICATION_GROUP_RECENT_PLAYER = 1 << 4,
 * COMMUNICATION_GROUP_SAME_SESSION = 1 << 5,
 * COMMUNICATION_GROUP_SAME_TEAM = 1 << 6,
 * COMMUNICATION_GROUP_INVALID = 1 << 7,
 * };
 * @param communicationType
 */
export function networkGetCommunicationGroupFlags(communicationType: number): number { 
	return _in(0x40df02f3, 0x71f40883, communicationType, _r, _ri); 
}

/**
 * Return the content modifier id (the tunables context if you want) of a specific content.
 * 
 * It takes the content hash (which is the mission id hash), and return the content modifier id, used as the tunables context.
 * 
 * The mission id can be found on the Social club, for example, 'socialclub.rockstargames.com/games/gtav/jobs/job/A8M6Bz8MLEC5xngvDCzGwA'
 * 
 * 'A8M6Bz8MLEC5xngvDCzGwA' is the mission id, so the game hash this and use it as the parameter for this native.
 * 
 * @param contentHash
 */
export function networkGetContentModifierListId(contentHash: number): number { 
	return _in(0x187382f8, 0xa3e0a6c3, _ch(contentHash), _r, _ri); 
}

export function networkGetCurrentlySelectedGamerHandleFromInviteMenu(p0: number): [boolean, number] { 
	const [retval, p0_out] = _in(0x74881e6b, 0xcae2327c, _ii(p0), _r);
	return [retval as boolean, p0_out as number]; 
}

export function networkGetDestroyerOfEntity(entity: number, weaponHash: number): [number, number] { 
	const [retval, weaponHash_out] = _in(0xc434133d, 0x9ba52777, entity, _i, _r, _ri);
	return [retval as number, weaponHash_out as number]; 
}

export function networkGetDestroyerOfNetworkId(netId: number, weaponHash: number): [number, number] { 
	const [retval, weaponHash_out] = _in(0x7a1adeef, 0x01740a24, netId, _i, _r, _ri);
	return [retval as number, weaponHash_out as number]; 
}

/**
 * This function is hard-coded to always return 0.
 * @param p0
 * @param p1
 * @param p2
 */
export function networkGetDisplaynamesFromHandles(p0: number, p1: number, p2: number): number { 
	return _in(0x58cc1817, 0x19256197, p0, p1, p2, _r, _ri); 
}

export function networkGetEntityFromNetworkId(netId: number): number { 
	return _in(0xce4e5d9b, 0x0a4ff560, netId, _r, _ri); 
}

/**
 * I've had this return the player's ped handle sometimes, but also other random entities.
 * Whatever p0 is, it's at least not synced to other players.
 * At least not all the time, some p0 values actually output the same entity, (different handle of course, but same entity).
 * But another p0 value may return an entity for player x, but not for player y (it'll just return -1 even if the entity exists on both clients).
 * 
 * Returns an entity handle or -1, value changes based on p0's value.
 * @param p0
 */
export function networkGetEntityFromObjectId(p0: number): number { 
	return _in(0x37d5f739, 0xfd494675, p0, _r, _ri); 
}

export function networkGetEntityIsLocal(entity: number): boolean { 
	return _in(0x0991549d, 0xe4d64762, entity, _r); 
}

export function networkGetEntityIsNetworked(entity: number): boolean { 
	return _in(0xc7827959, 0x479dcc78, entity, _r); 
}

export function networkGetEntityKillerOfPlayer(player: number, weaponHash: number): [number, number] { 
	const [retval, weaponHash_out] = _in(0x42b2daa6, 0xb596f5f8, player, _i, _r, _ri);
	return [retval as number, weaponHash_out as number]; 
}

export function networkGetEvcBalance(): number { 
	return _in(0x5d1e75f9, 0x1c07dee5, _r, _ri); 
}

export function networkGetFoundGamer(p1: number): [boolean, number] { 
	const [retval, p0_out] = _in(0x9dcff2af, 0xb68b3476, _i, p1, _r);
	return [retval as boolean, p0_out as number]; 
}

export function networkGetFriendCount(): number { 
	return _in(0x203f1cfd, 0x823b27a4, _r, _ri); 
}

export function networkGetFriendDisplayName(friendIndex: number): string { 
	return _in(0x4164f227, 0xd052e293, friendIndex, _r, _s); 
}

export function networkGetFriendName(friendIndex: number): string { 
	return _in(0xe11ebbb2, 0xa783fe8b, friendIndex, _r, _s); 
}

export function networkGetGameMode(): number { 
	return _in(0x4c903416, 0x2368e206, _r, _ri); 
}

/**
 * enum eNetworkGameRestartReason
 * {
 * BE_RESTART_SERVICE_NOT_RUNNING = 1, 	// BattlEye service not running
 * BE_RESTART_SERVICE_NEEDS_UPDATE, 		// BattlEye service needs an update
 * BE_RESTART_UNKNOWN_REASON,				// Unknown BattlEye reason
 * BE_RESTART_EF_DISABLED_WITH_BE,			// BattlEye Enforcement Flag is disabled, but BattlEye is active
 * BE_RESTART_EF_ENABLED_NO_BE,			// BattlEye Enforcement Flag is enabled, but BattlEye is not active
 * BE_RESTART_BE_MODULES_FAILED_TO_LOAD,	// BattlEye modules failed to load
 * NUM_NETWORK_GAME_RESTART_REASONS
 * };
 */
export function networkGetGameRestartReason(): number { 
	return _in(0x7f7e8401, 0xf81cb65b, _r, _ri); 
}

/**
 * Returns the restart reason as a string, see _NETWORK_GET_GAME_RESTART_REASON. Returns a null pointer when a restart hasn't been requested (reason == 0 or reason > 6).
 */
export function networkGetGameRestartReasonMessageLabel(): string { 
	return _in(0x47b11d51, 0xfc50a259, _r, _s); 
}

export function networkGetGamerStatusFromQueue(): boolean { 
	return _in(0x2cc848a8, 0x61d01493, _r); 
}

export function networkGetGamerStatusResult(p1: number): [boolean, number] { 
	const [retval, p0_out] = _in(0x02a8bec6, 0xfd9af660, _i, p1, _r);
	return [retval as boolean, p0_out as number]; 
}

export function networkGetGamertagFromHandle(gamerHandle: number): [string, number] { 
	const [retval, gamerHandle_out] = _in(0x42614116, 0x2ebe5cdb, _ii(gamerHandle), _r, _s);
	return [retval as string, gamerHandle_out as number]; 
}

export function networkGetGlobalMultiplayerClock(): [number, number, number] { 
	const [hours_out, minutes_out, seconds_out] = _in(0x6d03bfbd, 0x643b2a02, _i, _i, _i);
	return [hours_out as number, minutes_out as number, seconds_out as number]; 
}

export function networkGetHighestReliableResendCount(player: number): number { 
	return _in(0x52c1eada, 0xf7b10302, player, _r, _ri); 
}

/**
 * scriptName examples:
 * "freemode", "AM_CR_SecurityVan", ...
 * 
 * Most of the time, these values are used:
 * instance_id = -1
 * position_hash = 0
 * @param scriptName
 * @param instance_id
 * @param position_hash
 */
export function networkGetHostOfScript(scriptName: string, instance_id: number, position_hash: number): number { 
	return _in(0x1d6a14f1, 0xf9a736fc, _ts(scriptName), instance_id, position_hash, _r, _ri); 
}

export function networkGetHostOfThisScript(): number { 
	return _in(0xc7b4d79b, 0x01fa7a5c, _r, _ri); 
}

export function networkGetHostPlayerIndex(): number { 
	return _in(0x8251fb94, 0xdc4fdfc8, _r, _ri); 
}

export function networkGetInstanceIdOfThisScript(): number { 
	return _in(0x638a3a81, 0x733086db, _r, _ri); 
}

export function networkGetInviteReplyStatus(p0: number): number { 
	return _in(0x3855fb5e, 0xb2c5e8b2, p0, _r, _ri); 
}

export function networkGetKillerOfPlayer(player: number, weaponHash: number): [number, number] { 
	const [retval, weaponHash_out] = _in(0x2da41ed6, 0xe1fcd7a5, player, _i, _r, _ri);
	return [retval as number, weaponHash_out as number]; 
}

export function networkGetLastEntityPosReceivedOverNetwork(entity: number): Vector3 { 
	return _mv(_in(0x64d77965, 0x9bc37b19, entity, _r, _rv)); 
}

/**
 * Returns the coordinates of another player.
 * Does not work if you enter your own player id as p0 (will return `(0.0, 0.0, 0.0)` in that case).
 * @param player
 */
export function networkGetLastPlayerPosReceivedOverNetwork(player: number): Vector3 { 
	return _mv(_in(0x125e6d63, 0x8b8605d4, player, _r, _rv)); 
}

/**
 * Used by NetBlender
 * @param entity
 */
export function networkGetLastVelReceivedOverNetwork(entity: number): Vector3 { 
	return _mv(_in(0x33de49ed, 0xf4dde77a, entity, _r, _rv)); 
}

export function networkGetLocalHandle(gamerHandleSize: number): number { 
	return _in(0xe8605178, 0x6b66cd8e, _i, gamerHandleSize); 
}

export function networkGetLocalSceneFromNetworkId(netId: number): number { 
	return _in(0x02c40bf8, 0x85c567b6, netId, _r, _ri); 
}

export function networkGetMaxFriends(): number { 
	return _in(0xafebb0d5, 0xd8f687d2, _r, _ri); 
}

export function networkGetMaxNumParticipants(): number { 
	return _in(0xa6c90fbc, 0x38e395ee, _r, _ri); 
}

/**
 * NETWORK_GET_M[A-U]
 * @param p0
 * @param p1
 * @param p2
 */
export function networkGetMuteCountForPlayer(p0: number): [number, number] { 
	const [p1_out, p2_out] = _in(0xadb57e5b, 0x663cca8b, p0, _f, _f);
	return [p1_out as number, p2_out as number]; 
}

/**
 * Does nothing (it's a nullsub).
 * @param p0
 */
export function networkGetNetStatisticsInfo(p0: number): number { 
	return _in(0x6fd992c4, 0xa1c1b986, _ii(p0)); 
}

export function networkGetNetworkIdFromEntity(entity: number): number { 
	return _in(0xa1170068, 0x2f3ad45c, entity, _r, _ri); 
}

/**
 * Hardcoded to return zero.
 * 
 * ==== PS4 specific info ====
 * 
 * Returns some sort of unavailable reason:
 * -1 = REASON_INVALID
 * 0 = REASON_OTHER
 * 1 = REASON_SYSTEM_UPDATE
 * 2 = REASON_GAME_UPDATE
 * 3 = REASON_SIGNED_OUT
 * 4 = REASON_AGE
 * 5 = REASON_CONNECTION
 * 
 * =================================
 */
export function networkGetNpUnavailableReason(): number { 
	return _in(0x74fb3e29, 0xe6d10fa9, _r, _ri); 
}

/**
 * Returns the amount of players connected in the current session. Only works when connected to a session/server.
 */
export function networkGetNumConnectedPlayers(): number { 
	return _in(0xa4a79dd2, 0xd9600654, _r, _ri); 
}

export function networkGetNumFoundGamers(): number { 
	return _in(0xa1b043ee, 0x79a916fb, _r, _ri); 
}

export function networkGetNumParticipants(): number { 
	return _in(0x18d0456e, 0x86604654, _r, _ri); 
}

export function networkGetNumPresenceInvites(): number { 
	return _in(0xcefa9689, 0x12d0f78d, _r, _ri); 
}

export function networkGetNumScriptParticipants(scriptName: string, instance_id: number, position_hash: number): number { 
	return _in(0x3658e8cd, 0x94fc121a, _ts(scriptName), instance_id, position_hash, _r, _ri); 
}

export function networkGetNumTransitionNonAsyncGamers(): number { 
	return _in(0x617f49c2, 0x668e6155, _r, _ri); 
}

export function networkGetNumUnackedReliables(player: number): number { 
	return _in(0xff8fcf9f, 0xfc458a1c, player, _r, _ri); 
}

export function networkGetNumberBodyTrackerHits(): number { 
	return _in(0xd38c4a6d, 0x047c019d, _r, _ri); 
}

export function networkGetParticipantIndex(index: number): number { 
	return _in(0x1b84df6a, 0xf2a46938, index, _r, _ri); 
}

export function networkGetPlatformPartyMemberCount(): number { 
	return _in(0x01abce5e, 0x7cbda196, _r, _ri); 
}

export function networkGetPlatformPartyMembers(dataSize: number): [number, number] { 
	const [retval, data_out] = _in(0x120364de, 0x2845daf8, _i, dataSize, _r, _ri);
	return [retval as number, data_out as number]; 
}

export function networkGetPlayerAccountId(player: number): number { 
	return _in(0xdb663cc9, 0xff3407a9, player, _r, _ri); 
}

export function networkGetPlayerFromGamerHandle(gamerHandle: number): [number, number] { 
	const [retval, gamerHandle_out] = _in(0xce5f689c, 0xf5a0a49d, _ii(gamerHandle), _r, _ri);
	return [retval as number, gamerHandle_out as number]; 
}

export function networkGetPlayerIndex(player: number): number { 
	return _in(0x24fb80d1, 0x07371267, player, _r, _ri); 
}

/**
 * Returns the Player associated to a given Ped when in an online session.
 * @param ped
 */
export function networkGetPlayerIndexFromPed(ped: number): number { 
	return _in(0x6c0e2e01, 0x25610278, ped, _r, _ri); 
}

export function networkGetPlayerIsHighEarner(): boolean { 
	return _in(0xfb2456b2, 0x040a6a67, _r); 
}

export function networkGetPlayerLoudness(player: number): number { 
	return _in(0x21a1684a, 0x25c2867f, player, _r, _rf); 
}

export function networkGetPlayerOwnsWaypoint(player: number): boolean { 
	return _in(0x82377b65, 0xe943f72d, player, _r); 
}

export function networkGetPlayerTutorialSessionInstance(player: number): number { 
	return _in(0x3b392367, 0x46714134, player, _r, _ri); 
}

export function networkGetPositionHashOfThisScript(): number { 
	return _in(0x257ed0fa, 0xdf750bcf, _r, _ri); 
}

export function networkGetPredictedVelocity(entity: number, maxSpeedToPredict: number): Vector3 { 
	return _mv(_in(0xaa5fafcd, 0x2c5f5e47, entity, _fv(maxSpeedToPredict), _r, _rv)); 
}

export function networkGetPresenceInviteContentId(p0: number): string { 
	return _in(0x24409fc4, 0xc55cb22d, p0, _r, _s); 
}

export function networkGetPresenceInviteFromAdmin(p0: number): boolean { 
	return _in(0x3dbf2df0, 0xaeb7d289, p0, _r); 
}

export function networkGetPresenceInviteHandle(p0: number, p1: number): [boolean, number] { 
	const [retval, p1_out] = _in(0x38d5b0fe, 0xbb086f75, p0, _ii(p1), _r);
	return [retval as boolean, p1_out as number]; 
}

export function networkGetPresenceInviteId(p0: number): number { 
	return _in(0xdff09646, 0xe12ec386, p0, _r, _ri); 
}

export function networkGetPresenceInviteIndexById(p0: number): number { 
	return _in(0x742b58f7, 0x23233ed9, p0, _r, _ri); 
}

export function networkGetPresenceInviteInviter(p0: number): string { 
	return _in(0x4962cc4a, 0xa2f345b7, p0, _r, _s); 
}

export function networkGetPresenceInviteIsTournament(p0: number): boolean { 
	return _in(0x8806cebf, 0xabd3ce05, p0, _r); 
}

export function networkGetPresenceInvitePlaylistCurrent(p0: number): number { 
	return _in(0x728c4cc7, 0x920cd102, p0, _r, _ri); 
}

export function networkGetPresenceInvitePlaylistLength(p0: number): number { 
	return _in(0xd39b3fff, 0x8ffdd5bf, p0, _r, _ri); 
}

export function networkGetPresenceInviteSessionId(p0: number): number { 
	return _in(0x26e1cd96, 0xb0903d60, p0, _r, _ri); 
}

export function networkGetPrimaryClanDataCancel(): void { 
	return _in(0x042e4b70, 0xb93e6054); 
}

export function networkGetPrimaryClanDataClear(): boolean { 
	return _in(0x9aa46bad, 0xad0e27ed, _r); 
}

export function networkGetPrimaryClanDataNew(): [boolean, number, number] { 
	const [retval, p0_out, p1_out] = _in(0xc080ff65, 0x8b2e41da, _i, _i, _r);
	return [retval as boolean, p0_out as number, p1_out as number]; 
}

export function networkGetPrimaryClanDataPending(): boolean { 
	return _in(0xb5074db8, 0x04e28ce7, _r); 
}

export function networkGetPrimaryClanDataStart(p1: number): [boolean, number] { 
	const [retval, p0_out] = _in(0xce86d819, 0x1b762107, _i, p1, _r);
	return [retval as boolean, p0_out as number]; 
}

export function networkGetPrimaryClanDataSuccess(): boolean { 
	return _in(0x5b4f04f1, 0x9376a0ba, _r); 
}

export function networkGetPvcBalance(): number { 
	return _in(0x4f54f3b6, 0xc202fb4e, _r, _ri); 
}

/**
 * Retturns the same value as NETWORK_GET_REMAINING_TRANSFER_BALANCE.
 */
export function networkGetPvcTransferBalance(): number { 
	return _in(0x13a8de2f, 0xd77d04f3, _r, _ri); 
}

export function networkGetRandomFloatRanged(rangeStart: number, rangeEnd: number): number { 
	return _in(0x04bd27b5, 0xacb67067, _fv(rangeStart), _fv(rangeEnd), _r, _rf); 
}

export function networkGetRandomInt(): number { 
	return _in(0x599e4fa1, 0xf87eb5ff, _r, _ri); 
}

/**
 * Same as GET_RANDOM_INT_IN_RANGE
 * @param rangeStart
 * @param rangeEnd
 */
export function networkGetRandomIntRanged(rangeStart: number, rangeEnd: number): number { 
	return _in(0xe30cf56f, 0x1efa5f43, rangeStart, rangeEnd, _r, _ri); 
}

/**
 * Returns the same value as NETWORK_GET_PVC_TRANSFER_BALANCE.
 */
export function networkGetRemainingTransferBalance(): number { 
	return _in(0xea560ac9, 0xeeb1e19b, _r, _ri); 
}

/**
 * Based on scripts such as in freemode.c how they call their vars vVar and fVar the 2nd and 3rd param it a Vector3 and Float, but the first is based on get_random_int_in_range..
 * @param randomInt
 * @param coordinates
 * @param heading
 */
export function networkGetRespawnResult(randomInt: number): [Vector3, number] { 
	const [coordinates_out, heading_out] = _in(0x371ea436, 0x92861cf1, randomInt, _v, _f);
	return [_mv(coordinates_out), heading_out as number]; 
}

export function networkGetRespawnResultFlags(p0: number): number { 
	return _in(0x6c34f120, 0x8b8923fd, p0, _r, _ri); 
}

export function networkGetScriptStatus(): number { 
	return _in(0x57d15864, 0x7a6bfabf, _r, _ri); 
}

/**
 * Does nothing (it's a nullsub).
 * @param p0
 */
export function networkGetSignallingInfo(p0: number): number { 
	return _in(0x2555cf7d, 0xa5473794, _ii(p0)); 
}

export function networkGetStringBankBalance(): string { 
	return _in(0xa6fa3979, 0xbed01b81, _r, _s); 
}

export function networkGetStringBankWalletBalance(character: number): string { 
	return _in(0x700af71a, 0xe615e6dd, character, _r, _s); 
}

export function networkGetStringWalletBalance(characterSlot: number): string { 
	return _in(0xf9b10b52, 0x9dcfb33b, characterSlot, _r, _s); 
}

export function networkGetTalkerProximity(): number { 
	return _in(0x84f0f131, 0x20b4e098, _r, _rf); 
}

export function networkGetThisScriptIsNetworkScript(): boolean { 
	return _in(0x29106699, 0x69e9535e, _r); 
}

export function networkGetTimeoutTime(): number { 
	return _in(0x5ed0356a, 0x0ce3a34f, _r, _ri); 
}

export function networkGetTotalNumPlayers(): number { 
	return _in(0xcf61d4b4, 0x702ee9eb, _r, _ri); 
}

export function networkGetTransitionHost(gamerHandle: number): [boolean, number] { 
	const [retval, gamerHandle_out] = _in(0x65042b97, 0x74c4435e, _ii(gamerHandle), _r);
	return [retval as boolean, gamerHandle_out as number]; 
}

/**
 * Returns count.
 * @param data
 * @param dataCount
 */
export function networkGetTransitionMembers(dataCount: number): [number, number] { 
	const [retval, data_out] = _in(0x73b000f7, 0xfbc55829, _i, dataCount, _r, _ri);
	return [retval as number, data_out as number]; 
}

/**
 * Actually returns the version (TUNABLE_VERSION)
 */
export function networkGetTunableCloudCrc(): number { 
	return _in(0x10bd227a, 0x753b0d84, _r, _ri); 
}

/**
 * Checks if the given tunable exists and returns its value. Otherwise returns defaultValue.
 * Possible tunable contexts must first be set up using _NETWORK_SET_TUNABLES_REGISTRATION_CONTEXTS.
 * @param tunableName
 * @param defaultValue
 */
export function networkGetTunablesRegistrationBool(tunableName: number, defaultValue: boolean): boolean { 
	return _in(0xb327cf1b, 0x8c2c0ea3, _ch(tunableName), defaultValue, _r); 
}

/**
 * Checks if the given tunable exists and returns its value. Otherwise returns defaultValue.
 * Possible tunable contexts must first be set up using _NETWORK_SET_TUNABLES_REGISTRATION_CONTEXTS.
 * @param tunableName
 * @param defaultValue
 */
export function networkGetTunablesRegistrationFloat(tunableName: number, defaultValue: number): number { 
	return _in(0x367e5e33, 0xe7f0dd1a, _ch(tunableName), _fv(defaultValue), _r, _rf); 
}

/**
 * Checks if the given tunable exists and returns its value. Otherwise returns defaultValue.
 * Possible tunable contexts must first be set up using _NETWORK_SET_TUNABLES_REGISTRATION_CONTEXTS.
 * @param tunableName
 * @param defaultValue
 */
export function networkGetTunablesRegistrationInt(tunableName: number, defaultValue: number): number { 
	return _in(0x0d94071e, 0x55f4c9ce, _ch(tunableName), defaultValue, _r, _ri); 
}

export function networkGetUnreliableResendCount(player: number): number { 
	return _in(0x3765c3a3, 0xe8192e10, player, _r, _ri); 
}

export function networkGetVcBalance(): number { 
	return _in(0x5cbad97e, 0x059e1b94, _r, _ri); 
}

export function networkGetVcBankBalance(): number { 
	return _in(0x76ef28da, 0x05ea395a, _r, _ri); 
}

export function networkGetVcWalletBalance(characterSlot: number): number { 
	return _in(0xa40f9c26, 0x23f6a8b5, characterSlot, _r, _ri); 
}

export function networkGivePlayerJobshareCash(amount: number, gamerHandle: number): number { 
	return _in(0xfb18df9c, 0xb95e0105, amount, _ii(gamerHandle)); 
}

export function networkHandleFromFriend(friendIndex: number, gamerHandleSize: number): number { 
	return _in(0xd45cb817, 0xd7e177d2, friendIndex, _i, gamerHandleSize); 
}

export function networkHandleFromMemberId(memberId: string, gamerHandleSize: number): number { 
	return _in(0xa0fd21be, 0xd61e5c4c, _ts(memberId), _i, gamerHandleSize); 
}

export function networkHandleFromPlayer(player: number, gamerHandleSize: number): number { 
	return _in(0x388eb2b8, 0x6c73b6b3, player, _i, gamerHandleSize); 
}

export function networkHandleFromUserId(userId: string, gamerHandleSize: number): number { 
	return _in(0xdcd51dd8, 0xf87aec5c, _ts(userId), _i, gamerHandleSize); 
}

export function networkHasAgeRestrictions(): boolean { 
	return _in(0x1353f87e, 0x89946207, _r); 
}

export function networkHasAutomuteOverride(): boolean { 
	return _in(0x26f07dd8, 0x3a5f7f98, _r); 
}

export function networkHasBoneBeenHitByKiller(boneIndex: number): boolean { 
	return _in(0x2e0bf682, 0xcc778d49, boneIndex, _r); 
}

export function networkHasCachedPlayerHeadBlendData(player: number): boolean { 
	return _in(0x237d5336, 0xa9a54108, player, _r); 
}

export function networkHasConfirmedInvite(): boolean { 
	return _in(0xc42dd763, 0x159f3461, _r); 
}

export function networkHasControlOfDoor(doorHash: number): boolean { 
	return _in(0xcb3c68ad, 0xb06195df, _ch(doorHash), _r); 
}

export function networkHasControlOfEntity(entity: number): boolean { 
	return _in(0x01bf60a5, 0x00e28887, entity, _r); 
}

export function networkHasControlOfNetworkId(netId: number): boolean { 
	return _in(0x4d36070f, 0xe0215186, netId, _r); 
}

export function networkHasControlOfPickup(pickup: number): boolean { 
	return _in(0x5bc9495f, 0x0b3b6fa6, pickup, _r); 
}

export function networkHasEntityBeenRegisteredWithThisThread(entity: number): boolean { 
	return _in(0xb07d3185, 0xe11657a5, entity, _r); 
}

export function networkHasFollowInvite(): boolean { 
	return _in(0x76d9b976, 0xc4c09fde, _r); 
}

export function networkHasHeadset(): boolean { 
	return _in(0xe870f9f1, 0xf7b4f1fa, _r); 
}

export function networkHasInvitedGamer(p0: number): [boolean, number] { 
	const [retval, p0_out] = _in(0x4d86cd31, 0xe8976ece, _ii(p0), _r);
	return [retval as boolean, p0_out as number]; 
}

export function networkHasInvitedGamerToTransition(p0: number): [boolean, number] { 
	const [retval, p0_out] = _in(0x7284a47b, 0x3540e6cf, _ii(p0), _r);
	return [retval as boolean, p0_out as number]; 
}

export function networkHasMadeInviteDecision(gamerHandle: number): [boolean, number] { 
	const [retval, gamerHandle_out] = _in(0x71dc455f, 0x5cd1c2b1, _ii(gamerHandle), _r);
	return [retval as boolean, gamerHandle_out as number]; 
}

export function networkHasPendingInvite(): boolean { 
	return _in(0xac8c7b9b, 0x88c4a668, _r); 
}

/**
 * _NETWORK_HAS_P*
 * checkType 3 is similar as using 0x9F633448E4C73207
 * @param checkType
 * @param gamerHandle
 */
export function networkHasPlayerPassedCheckType(checkType: number, gamerHandle: number): [boolean, number] { 
	const [retval, gamerHandle_out] = _in(0x62e29cda, 0x11f9c230, checkType, _ii(gamerHandle), _r);
	return [retval as boolean, gamerHandle_out as number]; 
}

export function networkHasPlayerStartedTransition(player: number): boolean { 
	return _in(0x9ac9ccbf, 0xa8c29795, player, _r); 
}

export function networkHasReceivedHostBroadcastData(): boolean { 
	return _in(0x5d10b379, 0x5f3fc886, _r); 
}

/**
 * index is always 18 in scripts
 * @param index
 */
export function networkHasRosPrivilege(index: number): boolean { 
	return _in(0xa699957e, 0x60d80214, index, _r); 
}

export function networkHasRosPrivilegeEndDate(privilege: number): [boolean, number, number] { 
	const [retval, banType_out, timeData_out] = _in(0xc22912b1, 0xd85f26b1, privilege, _i, _i, _r);
	return [retval as boolean, banType_out as number, timeData_out as number]; 
}

/**
 * Checks for privilege 29
 */
export function networkHasRosPrivilegeMpTextCommunication(): boolean { 
	return _in(0xd9719341, 0x663c385f, _r); 
}

/**
 * Checks for privilege 30
 */
export function networkHasRosPrivilegeMpVoiceCommunication(): boolean { 
	return _in(0x8956a309, 0xbe90057c, _r); 
}

export function networkHasRosPrivilegePlayedLastGen(): boolean { 
	return _in(0x593570c2, 0x89a77688, _r); 
}

/**
 * Checks for privilege 31
 */
export function networkHasRosPrivilegeReporting(): boolean { 
	return _in(0x9ba54b3c, 0xfb82addd, _r); 
}

export function networkHasRosPrivilegeSpecialEditionContent(): boolean { 
	return _in(0x91b87c55, 0x093de351, _r); 
}

export function networkHasSocialClubAccount(): boolean { 
	return _in(0x67a55896, 0x28e0cff6, _r); 
}

export function networkHasSocialNetworkingSharingPriv(): boolean { 
	return _in(0x76bf03fa, 0xdbf154f5, _r); 
}

export function networkHasTransitionInviteBeenAcked(p0: number): [boolean, number] { 
	const [retval, p0_out] = _in(0x3f9990bf, 0x5f22759c, _ii(p0), _r);
	return [retval as boolean, p0_out as number]; 
}

/**
 * Returns whether the signed-in user has valid Rockstar Online Services (ROS) credentials.
 */
export function networkHasValidRosCredentials(): boolean { 
	return _in(0x85443ff4, 0xc328f53b, _r); 
}

export function networkHasViewGamerUserContentResult(gamerHandle: number): [boolean, number] { 
	const [retval, gamerHandle_out] = _in(0xcca4318e, 0x1ab03f1f, _ii(gamerHandle), _r);
	return [retval as boolean, gamerHandle_out as number]; 
}

export function networkHashFromGamerHandle(gamerHandle: number): [number, number] { 
	const [retval, gamerHandle_out] = _in(0x58575ac3, 0xcf2ca8ec, _ii(gamerHandle), _r, _ri);
	return [retval as number, gamerHandle_out as number]; 
}

export function networkHashFromPlayerHandle(player: number): number { 
	return _in(0xbc1d768f, 0x2f5d6c05, player, _r, _ri); 
}

export function networkHaveCommunicationPrivileges(p0: number, player: number): boolean { 
	return _in(0xaeef48cd, 0xf5b6ce7c, p0, player, _r); 
}

export function networkHaveOnlinePrivileges(): boolean { 
	return _in(0x25cb5a9f, 0x37bfd063, _r); 
}

/**
 * Appears to be PlayStation-specific. Always returns true on other platforms if signed in with the primary user profile
 */
export function networkHavePlatformCommunicationPrivileges(): boolean { 
	return _in(0xe1e02509, 0x169c124e, _r); 
}

export function networkHavePlatformSubscription(): boolean { 
	return _in(0x5ea784d1, 0x97556507, _r); 
}

export function networkHaveRosBannedPriv(): boolean { 
	return _in(0x8020a738, 0x47e0ca7d, _r); 
}

export function networkHaveRosCreateTicketPriv(): boolean { 
	return _in(0xa0ad7e2a, 0xf5349f61, _r); 
}

export function networkHaveRosLeaderboardWritePriv(): boolean { 
	return _in(0x422d396f, 0x80a96547, _r); 
}

export function networkHaveRosMultiplayerPriv(): boolean { 
	return _in(0x5f91d5d0, 0xb36aa310, _r); 
}

export function networkHaveRosSocialClubPriv(): boolean { 
	return _in(0x606e4d3e, 0x3cccf3eb, _r); 
}

export function networkHaveScsPrivateMsgPriv(): boolean { 
	return _in(0x66b59cff, 0xd78467af, _r); 
}

export function networkHaveUserContentPrivileges(p0: number): boolean { 
	return _in(0x72d918c9, 0x9bcacc54, p0, _r); 
}

export function networkHideEntityInTutorialSession(netHandle: number, hide: boolean): void { 
	return _in(0xcfe359cc, 0xcfe359cc, netHandle, hide); 
}

export function networkHideProjectileInCutscene(): void { 
	return _in(0xfac18e73, 0x56bd3210); 
}

/**
 * p0: Unknown int
 * p1: Unknown int
 * p2: Unknown int
 * p3: Unknown int
 * p4: Unknown always 0 in decompiled scripts
 * p5: BOOL purpose unknown, both 0 and 1 are used in decompiled scripts.
 * p6: BOOL purpose unknown, both 0 and 1 are used in decompiled scripts.
 * p7: Unknown int, it's an int according to decompiled scripts, however the value is always 0 or 1.
 * p8: Unknown int, it's an int according to decompiled scripts, however the value is always 0 or 1.
 * p9: Unknown int, sometimes 0, but also 32768 or 16384 appear in decompiled scripst, maybe a flag of some sort?
 * 
 * From what I can tell it looks like it does the following:
 * Creates/hosts a new transition to another online session, using this in FiveM will result in other players being disconencted from the server/preventing them from joining. This is most likely because I entered the wrong session parameters since they're pretty much all unknown right now.
 * You also need to use `NetworkJoinTransition(Player player)` and `NetworkLaunchTransition()`.
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 * @param p9
 */
export function networkHostTransition(p0: number, p1: number, p2: number, p3: number, p4: number, p5: boolean, p6: boolean, p7: number, p8: number, p9: number): boolean { 
	return _in(0xa60bb5ce, 0x242bb254, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, _r); 
}

export function networkIgnoreRemoteWaypoints(): void { 
	return _in(0x4c2a9fdc, 0x22377075); 
}

export function networkInitializeCash(wallet: number, bank: number): void { 
	return _in(0x3da5ecd1, 0xa56cba6d, wallet, bank); 
}

/**
 * Clears the failed invite join alert reason
 */
export function networkInviteClearJoinFailReason(): void { 
	return _in(0x8ef5f581, 0x1a940f82); 
}

export function networkInviteGamers(p1: number, p3: number): [boolean, number, number] { 
	const [retval, p0_out, p2_out] = _in(0x9d80cd1d, 0x0e6327de, _i, p1, _i, p3, _r);
	return [retval as boolean, p0_out as number, p2_out as number]; 
}

export function networkInviteGamersToTransition(p1: number): [boolean, number] { 
	const [retval, p0_out] = _in(0x4a595c32, 0xf77dff76, _i, p1, _r);
	return [retval as boolean, p0_out as number]; 
}

/**
 * Retrieves the failed invite join alert reason
 */
export function networkInviteGetJoinFailReason(): string { 
	return _in(0x7b335f84, 0x501145bb, _r, _s); 
}

export function networkIsActivitySession(): boolean { 
	return _in(0x05095437, 0x424397fa, _r); 
}

export function networkIsActivitySpectator(): boolean { 
	return _in(0x12103b9e, 0x0c9f92fb, _r); 
}

export function networkIsActivitySpectatorFromHandle(gamerHandle: number): [boolean, number] { 
	const [retval, gamerHandle_out] = _in(0x2763bbaa, 0x72a7bcb9, _ii(gamerHandle), _r);
	return [retval as boolean, gamerHandle_out as number]; 
}

export function networkIsAddingFriend(): boolean { 
	return _in(0x6ea10160, 0x6f6e4d81, _r); 
}

/**
 * Hardcoded to return 0.
 */
export function networkIsAmericasVersion(): boolean { 
	return _in(0x0292bd7f, 0x3766cebc, _r); 
}

export function networkIsAnyPlayerNear(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): boolean { 
	return _in(0x2e4c123d, 0x1c8a710e, p0, p1, p2, p3, p4, p5, p6, _r); 
}

export function networkIsCableConnected(): boolean { 
	return _in(0xeffb2545, 0x3d8600f9, _r); 
}

/**
 * This would be nice to see if someone is in party chat, but 2 sad notes.
 * 1) It only becomes true if said person is speaking in that party at the time.
 * 2) It will never, become true unless you are in that party with said person.
 * @param gamerHandle
 */
export function networkIsChattingInPlatformParty(gamerHandle: number): [boolean, number] { 
	const [retval, gamerHandle_out] = _in(0x8de9945b, 0xcc9aec52, _ii(gamerHandle), _r);
	return [retval as boolean, gamerHandle_out as number]; 
}

export function networkIsClockTimeOverridden(): boolean { 
	return _in(0xd7c95d32, 0x2ff57522, _r); 
}

export function networkIsCloudAvailable(): boolean { 
	return _in(0x9a4cf4f4, 0x8ad77302, _r); 
}

export function networkIsCloudBackgroundScriptRequestPending(): boolean { 
	return _in(0x8132c0eb, 0x8b2b3293, _r); 
}

export function networkIsConnectedViaRelay(player: number): boolean { 
	return _in(0x16d3d499, 0x02f697bb, player, _r); 
}

/**
 * This function is hard-coded to always return 1.
 */
export function networkIsConnetedToNpPresence(): boolean { 
	return _in(0x7808619f, 0x31ff22db, _r); 
}

export function networkIsDoorNetworked(doorHash: number): boolean { 
	return _in(0xc01e93fa, 0xc20c3346, _ch(doorHash), _r); 
}

/**
 * Note: This only works for vehicles, which appears to be a bug (since the setter _does_ work for every entity type and the name is 99% correct).
 * @param entity
 */
export function networkIsEntityConcealed(entity: number): boolean { 
	return _in(0x71302ec7, 0x0689052a, entity, _r); 
}

export function networkIsEntityFading(entity: number): boolean { 
	return _in(0x422f32cc, 0x7e56abad, entity, _r); 
}

export function networkIsFindingGamers(): boolean { 
	return _in(0xdddf64c9, 0x1bfcf0aa, _r); 
}

export function networkIsFriend(gamerHandle: number): [boolean, number] { 
	const [retval, gamerHandle_out] = _in(0x1a24a179, 0xf9b31654, _ii(gamerHandle), _r);
	return [retval as boolean, gamerHandle_out as number]; 
}

export function networkIsFriendHandleOnline(gamerHandle: number): [boolean, number] { 
	const [retval, gamerHandle_out] = _in(0x87eb7a3f, 0xfcb314db, _ii(gamerHandle), _r);
	return [retval as boolean, gamerHandle_out as number]; 
}

export function networkIsFriendInMultiplayer(friendName: string): boolean { 
	return _in(0x57005c18, 0x827f3a28, _ts(friendName), _r); 
}

/**
 * In scripts R* calls 'NETWORK_GET_FRIEND_NAME' in this param.
 * @param friendName
 */
export function networkIsFriendInSameTitle(friendName: string): boolean { 
	return _in(0x2ea9a3be, 0xdf3f17b8, _ts(friendName), _r); 
}

export function networkIsFriendIndexOnline(friendIndex: number): boolean { 
	return _in(0xbad8f2a4, 0x2b844821, friendIndex, _r); 
}

export function networkIsFriendOnline(name: string): boolean { 
	return _in(0x425a4453, 0x3437b64d, _ts(name), _r); 
}

export function networkIsGameInProgress(): boolean { 
	return _in(0x10fab354, 0x28ccc9d7, _r); 
}

export function networkIsGamerBlockedByMe(gamerHandle: number): [boolean, number] { 
	const [retval, gamerHandle_out] = _in(0xe944c4f5, 0xaf1b5883, _ii(gamerHandle), _r);
	return [retval as boolean, gamerHandle_out as number]; 
}

export function networkIsGamerInMySession(gamerHandle: number): [boolean, number] { 
	const [retval, gamerHandle_out] = _in(0x0f10b05d, 0xdf8d16e9, _ii(gamerHandle), _r);
	return [retval as boolean, gamerHandle_out as number]; 
}

export function networkIsGamerMutedByMe(gamerHandle: number): [boolean, number] { 
	const [retval, gamerHandle_out] = _in(0xce60de01, 0x1b6c7978, _ii(gamerHandle), _r);
	return [retval as boolean, gamerHandle_out as number]; 
}

export function networkIsGamerTalking(gamerHandle: number): [boolean, number] { 
	const [retval, gamerHandle_out] = _in(0x71c33b22, 0x606cd88a, _ii(gamerHandle), _r);
	return [retval as boolean, gamerHandle_out as number]; 
}

export function networkIsGettingGamerStatus(): boolean { 
	return _in(0x94a8394d, 0x150b013a, _r); 
}

export function networkIsHandleValid(gamerHandleSize: number): [boolean, number] { 
	const [retval, gamerHandle_out] = _in(0x6f79b93b, 0x0a8e4133, _i, gamerHandleSize, _r);
	return [retval as boolean, gamerHandle_out as number]; 
}

/**
 * If you are host, returns true else returns false.
 */
export function networkIsHost(): boolean { 
	return _in(0x8db296b8, 0x14edda07, _r); 
}

export function networkIsHostOfThisScript(): boolean { 
	return _in(0x83cd99a1, 0xe6061ab5, _r); 
}

export function networkIsInMpCutscene(): boolean { 
	return _in(0x6cc27c9f, 0xa2040220, _r); 
}

/**
 * Hardcoded to return false.
 */
export function networkIsInPlatformParty(): boolean { 
	return _in(0x2fc5650b, 0x0271cb57, _r); 
}

/**
 * Hardcoded to return false.
 */
export function networkIsInPlatformPartyChat(): boolean { 
	return _in(0xfd8b834a, 0x8ba05048, _r); 
}

export function networkIsInSession(): boolean { 
	return _in(0xca972461, 0x03b63917, _r); 
}

export function networkIsInSpectatorMode(): boolean { 
	return _in(0x048746e3, 0x88762e11, _r); 
}

export function networkIsInTransition(): boolean { 
	return _in(0x68049aef, 0xf83d8f0a, _r); 
}

export function networkIsInTutorialSession(): boolean { 
	return _in(0xada24309, 0xfe08dacf, _r); 
}

export function networkIsInactiveProfile(p0: number): [boolean, number] { 
	const [retval, p0_out] = _in(0x7e587455, 0x04313a2e, _ii(p0), _r);
	return [retval as boolean, p0_out as number]; 
}

export function networkIsLocalPlayerInvincible(): boolean { 
	return _in(0x8a8694b4, 0x8715b000, _r); 
}

/**
 * This function is hard-coded to always return 0.
 */
export function networkIsLoggedInToPsn(): boolean { 
	return _in(0xa0fa4ec6, 0xa05da44e, _r); 
}

export function networkIsMultiplayerDisabled(): boolean { 
	return _in(0x97472928, 0x07126eda, _r); 
}

/**
 * Returns true if the specified network id is controlled by someone else.
 * @param netId
 */
export function networkIsNetworkIdRemotelyControlled(netId: number): boolean { 
	return _in(0x7242f8b7, 0x41ce1086, netId, _r); 
}

/**
 * This function is hard-coded to always return 1.
 */
export function networkIsNpAvailable(): boolean { 
	return _in(0xbd545d44, 0xcce70597, _r); 
}

/**
 * This function is hard-coded to always return 1.
 */
export function networkIsNpPending(): boolean { 
	return _in(0xebcab9e5, 0x048434f4, _r); 
}

export function networkIsOfflineInvitePending(): boolean { 
	return _in(0x74698374, 0xc45701d2, _r); 
}

export function networkIsParticipantActive(p0: number): boolean { 
	return _in(0x6ff8ff40, 0xb6357d45, p0, _r); 
}

/**
 * This function is hard-coded to always return 0.
 * @param p0
 */
export function networkIsPendingFriend(p0: number): boolean { 
	return _in(0x0be73da6, 0x984a6e33, p0, _r); 
}

export function networkIsPlatformSubscriptionCheckPending(): boolean { 
	return _in(0xa8acb645, 0x9542a8c8, _r); 
}

export function networkIsPlayerAParticipant(player: number): boolean { 
	return _in(0x3ca58f6c, 0xb7cbd784, player, _r); 
}

export function networkIsPlayerAParticipantOnScript(player: number, script: string, instance_id: number): boolean { 
	return _in(0x1ad5b715, 0x86b94820, player, _ts(script), instance_id, _r); 
}

export function networkIsPlayerActive(player: number): boolean { 
	return _in(0xb8dfd30d, 0x6973e135, player, _r); 
}

export function networkIsPlayerBlockedByMe(player: number): boolean { 
	return _in(0x57af1f8e, 0x27483721, player, _r); 
}

export function networkIsPlayerConcealed(player: number): boolean { 
	return _in(0x919b3c98, 0xed8292f9, player, _r); 
}

export function networkIsPlayerConnected(player: number): boolean { 
	return _in(0x93dc1be4, 0xe1abe9d1, player, _r); 
}

export function networkIsPlayerFading(player: number): boolean { 
	return _in(0x631dc5df, 0xf4b110e3, player, _r); 
}

export function networkIsPlayerInMpCutscene(player: number): boolean { 
	return _in(0x63f9ee20, 0x3c3619f2, player, _r); 
}

export function networkIsPlayerMutedByMe(player: number): boolean { 
	return _in(0x8c71288a, 0xe68ede39, player, _r); 
}

export function networkIsPlayerOnBlocklist(gamerHandle: number): [boolean, number] { 
	const [retval, gamerHandle_out] = _in(0xad4326fc, 0xa30d62f8, _ii(gamerHandle), _r);
	return [retval as boolean, gamerHandle_out as number]; 
}

/**
 * returns true if someone is screaming or talking in a microphone
 * @param player
 */
export function networkIsPlayerTalking(player: number): boolean { 
	return _in(0x031e11f3, 0xd447647e, player, _r); 
}

/**
 * Hardcoded to return false.
 */
export function networkIsPrivilegeCheckInProgress(): boolean { 
	return _in(0x64e5c4cc, 0x82847b73, _r); 
}

export function networkIsPushToTalkActive(): boolean { 
	return _in(0xc0d2af00, 0xbcc234ca, _r); 
}

export function networkIsQueuingForSessionJoin(): boolean { 
	return _in(0x14922ed3, 0xe38761f0, _r); 
}

export function networkIsRefreshingRosCredentials(): boolean { 
	return _in(0x8d11e61a, 0x4abf49cc, _r); 
}

export function networkIsScriptActive(scriptName: string, instance_id: number, p2: boolean, position_hash: number): boolean { 
	return _in(0x9d40df90, 0xfad26098, _ts(scriptName), instance_id, p2, position_hash, _r); 
}

export function networkIsScriptActiveByHash(scriptHash: number, p1: number, p2: boolean, p3: number): boolean { 
	return _in(0xda7de67f, 0x5fe5ee13, _ch(scriptHash), p1, p2, p3, _r); 
}

export function networkIsSessionActive(): boolean { 
	return _in(0xd83c2b94, 0xe7508980, _r); 
}

export function networkIsSessionBusy(): boolean { 
	return _in(0xf4435d66, 0xa8e2905e, _r); 
}

/**
 * This checks if player is playing on gta online or not.
 * Please add an if and block your mod if this is "true".
 */
export function networkIsSessionStarted(): boolean { 
	return _in(0x9de624d2, 0xfc4b603f, _r); 
}

export function networkIsShowingSystemUiOrRecentlyRequestedUpsell(): boolean { 
	return _in(0x7788dfe1, 0x5016a182, _r); 
}

/**
 * Returns whether the player is signed into Social Club.
 */
export function networkIsSignedIn(): boolean { 
	return _in(0x054354a9, 0x9211eb96, _r); 
}

/**
 * Returns whether the game is not in offline mode.
 * 
 * seemed not to work for some ppl
 */
export function networkIsSignedOnline(): boolean { 
	return _in(0x1077788e, 0x268557c2, _r); 
}

export function networkIsThreadANetworkScript(threadId: number): boolean { 
	return _in(0x560b423d, 0x73015e77, threadId, _r); 
}

/**
 * This function is hard-coded to always return 0.
 */
export function networkIsTitleUpdateRequired(): boolean { 
	return _in(0x6fb7bb36, 0x07d27fa2, _r); 
}

export function networkIsTransitionBusy(): boolean { 
	return _in(0x520f3282, 0xa53d26b7, _r); 
}

export function networkIsTransitionClosedCrew(): boolean { 
	return _in(0x0dbd5d7e, 0x3c5bec3b, _r); 
}

export function networkIsTransitionClosedFriends(): boolean { 
	return _in(0x6512765e, 0x3be78c50, _r); 
}

export function networkIsTransitionHost(): boolean { 
	return _in(0x0b824797, 0xc9bf2159, _r); 
}

export function networkIsTransitionHostFromHandle(gamerHandle: number): [boolean, number] { 
	const [retval, gamerHandle_out] = _in(0x6b5c83ba, 0x3efe6a10, _ii(gamerHandle), _r);
	return [retval as boolean, gamerHandle_out as number]; 
}

export function networkIsTransitionLeavePostponed(): boolean { 
	return _in(0xc571d0e7, 0x7d8bbc29, _r); 
}

export function networkIsTransitionMatchmaking(): boolean { 
	return _in(0x292564c7, 0x35375edf, _r); 
}

export function networkIsTransitionOpenToMatchmaking(): boolean { 
	return _in(0x37a44944, 0x83b9f5c9, _r); 
}

export function networkIsTransitionPrivate(): boolean { 
	return _in(0x5a6aa44f, 0xf8e931e6, _r); 
}

export function networkIsTransitionSolo(): boolean { 
	return _in(0x5dc57720, 0x1723960a, _r); 
}

export function networkIsTransitionStarted(): boolean { 
	return _in(0x53fa8340, 0x1d9c07fe, _r); 
}

export function networkIsTransitionToGame(): boolean { 
	return _in(0x9d7696d8, 0xf4fa6cb7, _r); 
}

export function networkIsTransitionVisibilityLocked(): boolean { 
	return _in(0xd0a484cb, 0x2f829fbe, _r); 
}

export function networkIsTunableCloudRequestPending(): boolean { 
	return _in(0x0467c11e, 0xd88b7d28, _r); 
}

export function networkIsTutorialSessionChangePending(): boolean { 
	return _in(0x35f0b98a, 0x8387274d, _r); 
}

export function networkIsUsingOnlinePromotion(): boolean { 
	return _in(0x906ca41a, 0x4b74eca4, _r); 
}

export function networkJoinGroupActivity(): boolean { 
	return _in(0xa06509a6, 0x91d12be4, _r); 
}

export function networkJoinPreviouslyFailedSession(): boolean { 
	return _in(0x59df7931, 0x7f85a7e0, _r); 
}

export function networkJoinPreviouslyFailedTransition(): boolean { 
	return _in(0xffe1e5b7, 0x92d92b34, _r); 
}

/**
 * int handle[76];
 * NETWORK_HANDLE_FROM_FRIEND(iSelectedPlayer, &handle[0], 13);
 * Player uVar2 = NETWORK_GET_PLAYER_FROM_GAMER_HANDLE(&handle[0]);
 * NETWORK_JOIN_TRANSITION(uVar2);
 * nothing doin.
 * @param player
 */
export function networkJoinTransition(player: number): boolean { 
	return _in(0x9d060b08, 0xcd63321a, player, _r); 
}

export function networkKeepEntityCollisionDisabledAfterAnimScene(p0: number, p1: number): void { 
	return _in(0x17c9e241, 0x111a674d, p0, p1); 
}

export function networkLaunchTransition(): boolean { 
	return _in(0x2dcf46cb, 0x1a4f0884, _r); 
}

export function networkLeavePedBehindBeforeCutscene(player: number, p1: boolean): void { 
	return _in(0xbf22e0f3, 0x2968e967, player, p1); 
}

/**
 * p4 and p5 are always 0 in scripts
 * @param player
 * @param x
 * @param y
 * @param z
 * @param p4
 * @param p5
 */
export function networkLeavePedBehindBeforeWarp(player: number, x: number, y: number, z: number, p4: boolean, p5: boolean): void { 
	return _in(0x9769f811, 0xd1785b03, player, _fv(x), _fv(y), _fv(z), p4, p5); 
}

export function networkLeaveTransition(): boolean { 
	return _in(0xd23a1a81, 0x5d21db19, _r); 
}

/**
 * Returns the name from given friend gamer handle.
 * @param gamerHandle
 */
export function networkLoadGamerDisplayName(gamerHandle: number): [string, number] { 
	const [retval, gamerHandle_out] = _in(0x338ece36, 0x37937bc2, _ii(gamerHandle), _r, _s);
	return [retval as string, gamerHandle_out as number]; 
}

export function networkManualDeleteCharacter(characterSlot: number): void { 
	return _in(0x821418c7, 0x27fcacd7, characterSlot); 
}

export function networkMarkAsPreferredActivity(p0: boolean): void { 
	return _in(0x261e97ad, 0x7bcf3d40, p0); 
}

export function networkMarkAsWaitingAsync(p0: boolean): void { 
	return _in(0x39917e1b, 0x4cb0f911, p0); 
}

export function networkMarkTransitionGamerAsFullyJoined(p0: number): [boolean, number] { 
	const [retval, p0_out] = _in(0x5728bb6d, 0x63e3ff1d, _ii(p0), _r);
	return [retval as boolean, p0_out as number]; 
}

export function networkMemberIdFromGamerHandle(gamerHandle: number): [string, number] { 
	const [retval, gamerHandle_out] = _in(0xc8263013, 0x2081bb6f, _ii(gamerHandle), _r, _s);
	return [retval as string, gamerHandle_out as number]; 
}

export function networkMoneyCanBet(amount: number, p1: boolean, p2: boolean): boolean { 
	return _in(0x81404f3d, 0xc124fe5b, amount, p1, p2, _r); 
}

/**
 * For the XboxPC version this returns true if XPRIVILEGE_MULTIPLAYER_SESSIONS is granted but XPRIVILEGE_CROSS_PLAY is NOT granted.
 * For more information, see https://learn.microsoft.com/en-us/gaming/gdk/_content/gc/live/features/identity/privileges/concepts/live-user-privileges-client#privilege-ids-to-check
 * 
 * Always returns false for non-XboxPC versions.
 */
export function networkMultiplayerCrossplayNotAllowed(): boolean { 
	return _in(0xa6bc0d9b, 0xcf9662fa, _r); 
}

export function networkNeedToStartNewGameButBlocked(): boolean { 
	return _in(0x53c10c8b, 0xd774f2c9, _r); 
}

export function networkOnReturnToSinglePlayer(): void { 
	return _in(0x283b6062, 0xa2c01e9b); 
}

export function networkOpenTransitionMatchmaking(): void { 
	return _in(0x2b3a8f7c, 0xa3a38fde); 
}

/**
 * Could possibly bypass being muted or automatically muted
 * @param player
 * @param toggle
 */
export function networkOverrideChatRestrictions(player: number, toggle: boolean): void { 
	return _in(0x3039ae5a, 0xd2c9c0c4, player, toggle); 
}

export function networkOverrideClockRate(ms: number): void { 
	return _in(0x42bf1d2e, 0x723b6d7e, ms); 
}

/**
 * Works in Singleplayer too.
 * Passing wrong data (e.g. hours above 23) will cause the game to crash.
 * @param hours
 * @param minutes
 * @param seconds
 */
export function networkOverrideClockTime(hours: number, minutes: number, seconds: number): void { 
	return _in(0xe679e3e0, 0x6e363892, hours, minutes, seconds); 
}

export function networkOverrideCoordsAndHeading(entity: number, x: number, y: number, z: number, heading: number): void { 
	return _in(0xa7e30de9, 0x272b6d49, entity, _fv(x), _fv(y), _fv(z), _fv(heading)); 
}

/**
 * R* uses this to hear all player when spectating.
 * It allows you to hear other online players when their chat is on none, crew and or friends
 * @param player
 * @param toggle
 */
export function networkOverrideReceiveRestrictions(player: number, toggle: boolean): void { 
	return _in(0xddf73e2b, 0x1fec5ab4, player, toggle); 
}

/**
 * p0 is always false in scripts.
 * @param toggle
 */
export function networkOverrideReceiveRestrictionsAll(toggle: boolean): void { 
	return _in(0x0ff2862b, 0x61a58af9, toggle); 
}

/**
 * This is used alongside the native,
 * 'NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS'. Read its description for more info.
 * @param player
 * @param toggle
 */
export function networkOverrideSendRestrictions(player: number, toggle: boolean): void { 
	return _in(0x97dd4c59, 0x44cc2e6a, player, toggle); 
}

export function networkOverrideSendRestrictionsAll(toggle: boolean): void { 
	return _in(0x57b192b4, 0xd4ad23d5, toggle); 
}

export function networkOverrideTeamRestrictions(team: number, toggle: boolean): void { 
	return _in(0x6f697a66, 0xce78674e, team, toggle); 
}

export function networkOverrideTransitionChat(p0: boolean): void { 
	return _in(0xaf66059a, 0x131aa269, p0); 
}

export function networkPatchPostCutsceneHs4fTunEnt(ped: number): void { 
	return _in(0xf0bc9bcd, 0x24a511d5, ped); 
}

export function networkPayEmployeeWage(p0: number, p1: boolean, p2: boolean): void { 
	return _in(0x5fd5ed82, 0xcbbe9989, p0, p1, p2); 
}

export function networkPayMatchEntryFee(amount: number, matchId: string, p2: boolean, p3: boolean): void { 
	return _in(0x9346e14f, 0x2af74d46, amount, _ts(matchId), p2, p3); 
}

export function networkPermissionsHasGamerRecord(gamerHandle: number): [boolean, number] { 
	const [retval, gamerHandle_out] = _in(0x559ebf90, 0x1a8c68e0, _ii(gamerHandle), _r);
	return [retval as boolean, gamerHandle_out as number]; 
}

export function networkPlayerGetCheaterReason(): number { 
	return _in(0x172f75b6, 0xee2233ba, _r, _ri); 
}

/**
 * Returns the name of a given player. Returns "**Invalid**" if rlGamerInfo of the given player cannot be retrieved or the player doesn't exist.
 * @param player
 */
export function networkPlayerGetName(player: number): string { 
	return _in(0x7718d2e2, 0x060837d2, player, _r, _s); 
}

/**
 * Returns a string of the player's Rockstar Id.
 * Takes a 24 char buffer. Returns the buffer or "**Invalid**" if rlGamerInfo of the given player cannot be retrieved or the player doesn't exist.
 * @param player
 * @param userID
 */
export function networkPlayerGetUserid(player: number, userID: number): [string, number] { 
	const [retval, userID_out] = _in(0x4927fc39, 0xcd0869a0, player, _ii(userID), _r, _s);
	return [retval as string, userID_out as number]; 
}

export function networkPlayerHasHeadset(player: number): boolean { 
	return _in(0x3fb99a8b, 0x08d18fd6, player, _r); 
}

/**
 * Does exactly the same thing as PLAYER_ID()
 */
export function networkPlayerIdToInt(): number { 
	return _in(0xee68096f, 0x9f37341e, _r, _ri); 
}

export function networkPlayerIndexIsCheater(player: number): boolean { 
	return _in(0x565e430d, 0xb3b05bec, player, _r); 
}

export function networkPlayerIsBadsport(): boolean { 
	return _in(0x19d8da0e, 0x5a68045a, _r); 
}

export function networkPlayerIsCheater(): boolean { 
	return _in(0x655b91f1, 0x495a9090, _r); 
}

/**
 * Checks if a specific value (BYTE) in CNetGamePlayer is nonzero.
 * Returns always false in Singleplayer.
 * 
 * No longer used for dev checks since first mods were released on PS3 & 360.
 * R* now checks with the IS_DLC_PRESENT native for the dlc hash 2532323046,
 * if that is present it will unlock dev stuff.
 * @param player
 */
export function networkPlayerIsRockstarDev(player: number): boolean { 
	return _in(0x544abdda, 0x3b409b6d, player, _r); 
}

export function networkPreventScriptHostMigration(): void { 
	return _in(0x2302c026, 0x4ea58d31); 
}

export function networkQueryRespawnResults(p0: number): [number, number] { 
	const [retval, p0_out] = _in(0x3c891a25, 0x1567dfce, _ii(p0), _r, _ri);
	return [retval as number, p0_out as number]; 
}

export function networkQueueGamerForStatus(p0: number): [boolean, number] { 
	const [retval, p0_out] = _in(0x85a0ef54, 0xa500882c, _ii(p0), _r);
	return [retval as boolean, p0_out as number]; 
}

export function networkQuitMpToDesktop(): void { 
	return _in(0x45a83257, 0xed02d9bc); 
}

export function networkReceivePlayerJobshareCash(value: number, gamerHandle: number): number { 
	return _in(0x56a3b519, 0x44c50598, value, _ii(gamerHandle)); 
}

/**
 * index
 * -------
 * See function sub_1005 in am_boat_taxi.ysc
 * 
 * context
 * ----------
 * "BACKUP_VAGOS"
 * "BACKUP_LOST"
 * "BACKUP_FAMILIES"
 * "HIRE_MUGGER"
 * "HIRE_MERCENARY"
 * "BUY_CARDROPOFF"
 * "HELI_PICKUP"
 * "BOAT_PICKUP"
 * "CLEAR_WANTED"
 * "HEAD_2_HEAD"
 * "CHALLENGE"
 * "SHARE_LAST_JOB"
 * "DEFAULT"
 * 
 * reason
 * ---------
 * "NOTREACHTARGET"
 * "TARGET_ESCAPE"
 * "DELIVERY_FAIL"
 * "NOT_USED"
 * "TEAM_QUIT"
 * "SERVER_ERROR"
 * "RECEIVE_LJ_L"
 * "CHALLENGE_PLAYER_LEFT"
 * "DEFAULT"
 * 
 * unk
 * -----
 * Unknown bool value
 * 
 * 
 * @param index
 * @param context
 * @param reason
 * @param p3
 */
export function networkRefundCash(index: number, context: string, reason: string, p3: boolean): void { 
	return _in(0xf9c812cd, 0x7c46e817, index, _ts(context), _ts(reason), p3); 
}

export function networkRegisterEntityAsNetworked(entity: number): void { 
	return _in(0x06faacd6, 0x25d80caa, entity); 
}

export function networkRegisterHighFrequencyHostBroadcastVariables(p0: number, p1: number, p2: number): void { 
	return _in(0xea8c0ddb, 0x10e2822a, p0, p1, p2); 
}

export function networkRegisterHighFrequencyPlayerBroadcastVariables(p0: number, p1: number, p2: number): void { 
	return _in(0xd6d7478c, 0xa62b8d41, p0, p1, p2); 
}

export function networkRegisterHostBroadcastVariables(numVars: number, debugName: string): number { 
	return _in(0x3e9b2f01, 0xc50df595, _i, numVars, _ts(debugName)); 
}

export function networkRegisterPlayerBroadcastVariables(numVars: number, debugName: string): number { 
	return _in(0x3364aa97, 0x340ca215, _i, numVars, _ts(debugName)); 
}

export function networkRemainInGameChat(p0: boolean): void { 
	return _in(0xcfeb46dc, 0xd7d8d5eb, p0); 
}

export function networkRemoveAllQueuedJoinRequests(): void { 
	return _in(0x25d990f8, 0xe0e3f13c); 
}

export function networkRemoveAllTransitionInvite(): void { 
	return _in(0x726e0375, 0xc7a26368); 
}

export function networkRemoveAndCancelAllInvites(): void { 
	return _in(0xebf8284d, 0x8cadeb53); 
}

export function networkRemoveAndCancelAllTransitionInvites(): void { 
	return _in(0xf083835b, 0x70ba9bfe); 
}

export function networkRemoveEntityArea(areaHandle: number): boolean { 
	return _in(0x93cf869b, 0xaa0c4874, areaHandle, _r); 
}

export function networkRemoveInvalidObjectModel(modelHash: number): void { 
	return _in(0x791edb58, 0x03b2f468, _ch(modelHash)); 
}

export function networkRemovePresenceInvite(p0: number): boolean { 
	return _in(0xf0210268, 0xdb0974b1, p0, _r); 
}

export function networkRemoveTransitionInvite(p0: number): number { 
	return _in(0x7524b431, 0xb2e6f7ee, _ii(p0)); 
}

export function networkReportCodeTamper(): void { 
	return _in(0x5626d9d6, 0x810730d5); 
}

export function networkRequestCloudBackgroundScripts(): boolean { 
	return _in(0x924426bf, 0xfd82e915, _r); 
}

export function networkRequestCloudTunables(): void { 
	return _in(0x42fb3b53, 0x2d526e6c); 
}

export function networkRequestControlOfDoor(doorID: number): boolean { 
	return _in(0x870ddfd5, 0xa4a796e4, doorID, _r); 
}

export function networkRequestControlOfEntity(entity: number): boolean { 
	return _in(0xb69317bf, 0x5e782347, entity, _r); 
}

export function networkRequestControlOfNetworkId(netId: number): boolean { 
	return _in(0xa670b366, 0x2faffbd0, netId, _r); 
}

/**
 * Triggers a CEventNetworkInviteConfirmed event
 */
export function networkRequestInviteConfirmedEvent(): boolean { 
	return _in(0x62a0296c, 0x1bb1ceb3, _r); 
}

export function networkRequestToBeHostOfThisScript(): void { 
	return _in(0x741a3d83, 0x80319a81); 
}

export function networkResetBodyTracker(): void { 
	return _in(0x72433699, 0xb4e6dd64); 
}

/**
 * Hardcoded to return true.
 */
export function networkResolvePrivilegeUserContent(): boolean { 
	return _in(0xde922585, 0x4f37bf72, _r); 
}

export function networkResurrectLocalPlayer(x: number, y: number, z: number, heading: number, p4: boolean, changetime: boolean, p6: boolean, p7: number, p8: number): void { 
	return _in(0xea23c49e, 0xaa83acfb, _fv(x), _fv(y), _fv(z), _fv(heading), p4, changetime, p6, p7, p8); 
}

export function networkRetainActivityGroup(): void { 
	return _in(0xb13e88e6, 0x55e5a3bc); 
}

export function networkSeedRandomNumberGenerator(seed: number): void { 
	return _in(0xf1b84178, 0xf8674195, seed); 
}

/**
 * Contains the string "NETWORK_SEND_PRESENCE_TRANSITION_INVITE" but so does 0xC116FF9B4D488291; seems to fit alphabetically here, tho.
 * @param gamerHandle
 * @param p1
 * @param dataCount
 * @param p3
 */
export function networkSendImportantTransitionInviteViaPresence(p1: string, dataCount: number, p3: number): [boolean, number] { 
	const [retval, gamerHandle_out] = _in(0x1171a97a, 0x3d3981b6, _i, _ts(p1), dataCount, p3, _r);
	return [retval as boolean, gamerHandle_out as number]; 
}

export function networkSendInviteViaPresence(p1: string, dataCount: number, p3: number): [boolean, number] { 
	const [retval, gamerHandle_out] = _in(0xc3c7a6af, 0xdb244624, _i, _ts(p1), dataCount, p3, _r);
	return [retval as boolean, gamerHandle_out as number]; 
}

export function networkSendQueuedJoinRequest(): void { 
	return _in(0xfa2888e3, 0x833c8e96); 
}

/**
 * Message is limited to 64 characters.
 * @param message
 * @param gamerHandle
 */
export function networkSendTextMessage(message: string, gamerHandle: number): [boolean, number] { 
	const [retval, gamerHandle_out] = _in(0x3a214f2e, 0xc889b100, _ts(message), _ii(gamerHandle), _r);
	return [retval as boolean, gamerHandle_out as number]; 
}

export function networkSendTransitionGamerInstruction(p1: string, p2: number, p3: number, p4: boolean): [boolean, number] { 
	const [retval, gamerHandle_out] = _in(0x31d1d2b8, 0x58d25e6b, _i, _ts(p1), p2, p3, p4, _r);
	return [retval as boolean, gamerHandle_out as number]; 
}

export function networkSendTransitionInviteViaPresence(p1: string, dataCount: number, p3: number): [boolean, number] { 
	const [retval, gamerHandle_out] = _in(0xc116ff9b, 0x4d488291, _i, _ts(p1), dataCount, p3, _r);
	return [retval as boolean, gamerHandle_out as number]; 
}

export function networkServiceEarnGangopsRivalDelivery(earnedMoney: number): void { 
	return _in(0x1b882107, 0xc23a9022, earnedMoney); 
}

/**
 * groupId range: [0, 4]
 * @param groupId
 */
export function networkSessionAddActiveMatchmakingGroup(groupId: number): void { 
	return _in(0xcae55f48, 0xd3d7875c, groupId); 
}

export function networkSessionBlockJoinRequests(toggle: boolean): void { 
	return _in(0xa7366748, 0x4d7037c3, toggle); 
}

export function networkSessionCancelInvite(): void { 
	return _in(0x2fbf47b1, 0xb36d36f9); 
}

/**
 * num player slots allowed in session, seems to work? 32 max
 * @param slots
 * @param p1
 */
export function networkSessionChangeSlots(slots: number, p1: boolean): void { 
	return _in(0xb4ab419e, 0x0d86acae, slots, p1); 
}

export function networkSessionDoActivityQuickmatch(p0: number, p1: number, p2: number, p3: number, p4: number): boolean { 
	return _in(0xbe3e347a, 0x87aceb82, p0, p1, p2, p3, p4, _r); 
}

/**
 * p4 seems to be unused in 1.60/build 2628
 * @param crewId
 * @param p1
 * @param p2
 * @param maxPlayers
 */
export function networkSessionDoCrewMatchmaking(crewId: number, p1: number, p2: number, maxPlayers: number): boolean { 
	return _in(0x94bc51e9, 0x449d917f, crewId, p1, p2, maxPlayers, _r); 
}

export function networkSessionDoFreeroamQuickmatch(p0: number, p1: number, p2: number): boolean { 
	return _in(0x330ed4d0, 0x5491934f, p0, p1, p2, _r); 
}

export function networkSessionDoFriendMatchmaking(p0: number, p1: number, p2: number): boolean { 
	return _in(0x2cfc76e0, 0xd087c994, p0, p1, p2, _r); 
}

/**
 * p0 is always false and p1 varies.
 * NETWORK_SESSION_END(0, 1)
 * NETWORK_SESSION_END(0, 0)
 * Results in: "Connection to session lost due to an unknown network error. Please return to Grand Theft Auto V and try again later."
 * @param p0
 * @param p1
 */
export function networkSessionEnd(p0: boolean, p1: boolean): boolean { 
	return _in(0xa02e5956, 0x2d711006, p0, p1, _r); 
}

export function networkSessionForceCancelInvite(): void { 
	return _in(0xa29177f7, 0x703b5644); 
}

export function networkSessionGetHostAimPreference(): number { 
	return _in(0xdffa5be8, 0x381c3314, _r, _ri); 
}

export function networkSessionGetInviter(gamerHandle: number): number { 
	return _in(0xe57397b4, 0xa3429dd0, _ii(gamerHandle)); 
}

export function networkSessionGetKickVote(player: number): boolean { 
	return _in(0xd6d09a6f, 0x32f49ef1, player, _r); 
}

export function networkSessionGetMatchmakingGroupFree(p0: number): number { 
	return _in(0x56ce8208, 0x30ef040b, p0, _r, _ri); 
}

export function networkSessionGetPrivateSlots(): number { 
	return _in(0x53afd64c, 0x6758f2f9, _r, _ri); 
}

export function networkSessionGetUniqueCrewLimit(): number { 
	return _in(0xcdc936bf, 0x35edcb73, _r, _ri); 
}

/**
 * Does nothing in online but in offline it will cause the screen to fade to black. Nothing happens past then, the screen will sit at black until you restart GTA. Other stuff must be needed to actually host a session.
 * @param p0
 * @param maxPlayers
 * @param p2
 */
export function networkSessionHost(p0: number, maxPlayers: number, p2: boolean): boolean { 
	return _in(0x6f3d4ed9, 0xbee4e61d, p0, maxPlayers, p2, _r); 
}

export function networkSessionHostClosed(p0: number, maxPlayers: number): boolean { 
	return _in(0xed34c0c0, 0x2c098bb7, p0, maxPlayers, _r); 
}

/**
 * Does nothing in online but in offline it will cause the screen to fade to black. Nothing happens past then, the screen will sit at black until you restart GTA. Other stuff must be needed to actually host a session.
 * @param p0
 * @param maxPlayers
 */
export function networkSessionHostFriendsOnly(p0: number, maxPlayers: number): boolean { 
	return _in(0xb9cfd27a, 0x5d578d83, p0, maxPlayers, _r); 
}

/**
 * Loads up the map that is loaded when beeing in mission creator
 * Player gets placed in a mix between online/offline mode
 * p0 is always 2 in R* scripts.
 * 
 * Appears to be patched in gtav b757 (game gets terminated) alonside with most other network natives to prevent online modding ~ghost30812
 * @param p0
 */
export function networkSessionHostSinglePlayer(p0: number): void { 
	return _in(0xc74c33fc, 0xa52856d5, p0); 
}

/**
 * Seems to be true while "Getting GTA Online session details" shows up.
 */
export function networkSessionIsAwaitingInviteResponse(): boolean { 
	return _in(0xd313de83, 0x394af134, _r); 
}

export function networkSessionIsClosedCrew(): boolean { 
	return _in(0x74732c6c, 0xa90da2b4, _r); 
}

export function networkSessionIsClosedFriends(): boolean { 
	return _in(0xfbcfa2ea, 0x2e206890, _r); 
}

export function networkSessionIsDisplayingInviteConfirmation(): boolean { 
	return _in(0xbdb6f89c, 0x729cf388, _r); 
}

export function networkSessionIsInVoiceSession(): boolean { 
	return _in(0x855bc388, 0x18f6f684, _r); 
}

export function networkSessionIsPrivate(): boolean { 
	return _in(0xcef70aa5, 0xb3f89ba1, _r); 
}

export function networkSessionIsSolo(): boolean { 
	return _in(0xf3929c23, 0x79b60cce, _r); 
}

export function networkSessionIsVisible(): boolean { 
	return _in(0xba416d68, 0xc631496a, _r); 
}

export function networkSessionIsVoiceSessionActive(): boolean { 
	return _in(0xb5d3453c, 0x98456528, _r); 
}

export function networkSessionIsVoiceSessionBusy(): boolean { 
	return _in(0xef0912dd, 0xf7c4cb4b, _r); 
}

export function networkSessionJoinInvite(): void { 
	return _in(0xc6f8ab8a, 0x4189cf3a); 
}

/**
 * Only works as host.
 * @param player
 */
export function networkSessionKickPlayer(player: number): void { 
	return _in(0xfa8904dc, 0x5f304220, player); 
}

export function networkSessionLeave(p0: number): boolean { 
	return _in(0xb9351a07, 0xa0d458b1, p0, _r); 
}

export function networkSessionLeaveIncludingReason(leaveFlags: number, leaveReason: number): boolean { 
	return _in(0xe0128328, 0xcf1fd9f4, leaveFlags, leaveReason, _r); 
}

export function networkSessionLeaveSinglePlayer(): void { 
	return _in(0x34427754, 0x28fd2daa); 
}

export function networkSessionMarkVisible(toggle: boolean): void { 
	return _in(0x271cc6ab, 0x59ebf9a5, toggle); 
}

export function networkSessionReserveSlotsTransition(p0: number, p1: number, p2: number): boolean { 
	return _in(0x041c7f2a, 0x6c9894e6, p0, p1, p2, _r); 
}

export function networkSessionSetCrewLimitMaxMembersTransition(p0: number): void { 
	return _in(0x702bc4d6, 0x05522539, p0); 
}

export function networkSessionSetGamemode(p0: number): void { 
	return _in(0x600f8cb3, 0x1c7aab6e, p0); 
}

export function networkSessionSetMatchmakingGroup(matchmakingGroup: number): void { 
	return _in(0x49ec8030, 0xf5015f8b, matchmakingGroup); 
}

/**
 * playerType is an unsigned int from 0 to 4
 * 0 = regular joiner
 * 4 = spectator
 * @param playerType
 * @param playerCount
 */
export function networkSessionSetMatchmakingGroupMax(playerType: number, playerCount: number): void { 
	return _in(0x8b6a4dd0, 0xaf9ce215, playerType, playerCount); 
}

/**
 * p0 in the decompiled scripts is always the stat mesh_texblend * 0.07 to int
 * @param p0
 */
export function networkSessionSetMatchmakingMentalState(p0: number): void { 
	return _in(0xf1eea2dd, 0xa9ffa69d, p0); 
}

export function networkSessionSetMatchmakingPropertyId(p0: boolean): void { 
	return _in(0x3f52e880, 0xaaf6c8ca, p0); 
}

export function networkSessionSetNumBosses(num: number): void { 
	return _in(0x59d42168, 0x3d31835a, num); 
}

export function networkSessionSetScriptValidateJoin(): void { 
	return _in(0x1153fa02, 0xa659051c); 
}

export function networkSessionSetUniqueCrewLimit(p0: number): void { 
	return _in(0xf49abc20, 0xd8552257, p0); 
}

export function networkSessionSetUniqueCrewLimitTransition(p0: number): void { 
	return _in(0x4811bbac, 0x21c5fcd5, p0); 
}

export function networkSessionSetUniqueCrewOnlyCrewsTransition(p0: boolean): void { 
	return _in(0x5539c3eb, 0xf104a53a, p0); 
}

export function networkSessionValidateJoin(p0: boolean): void { 
	return _in(0xc19f6c8e, 0x7865a6ff, p0); 
}

export function networkSessionVoiceConnectToPlayer(gamerHandle: number): number { 
	return _in(0xabd5e88b, 0x8a2d3db2, _ii(gamerHandle)); 
}

export function networkSessionVoiceHost(): boolean { 
	return _in(0x9c155670, 0x5f864230, _r); 
}

export function networkSessionVoiceLeave(): boolean { 
	return _in(0x6793e42b, 0xe02b575d, _r); 
}

export function networkSessionVoiceRespondToRequest(p0: boolean, p1: number): void { 
	return _in(0x7f8413b7, 0xfc2aa6b9, p0, p1); 
}

export function networkSessionVoiceSetTimeout(timeout: number): void { 
	return _in(0x5b8ed3db, 0x018927b1, timeout); 
}

export function networkSessionWasInvited(): boolean { 
	return _in(0x23dfb504, 0x655d0ce4, _r); 
}

export function networkSetActivityPlayerMax(p0: number): void { 
	return _in(0x0e4f77f7, 0xb9d74d84, p0); 
}

export function networkSetActivitySpectator(toggle: boolean): void { 
	return _in(0x75138790, 0xb4359a74, toggle); 
}

export function networkSetActivitySpectatorMax(maxSpectators: number): void { 
	return _in(0x9d277b76, 0xd1d12222, maxSpectators); 
}

export function networkSetAntagonisticToPlayer(toggle: boolean, player: number): void { 
	return _in(0x5c707a66, 0x7df8b9fa, toggle, player); 
}

export function networkSetAttributeDamageToPlayer(ped: number, player: number): boolean { 
	return _in(0x0ede326d, 0x47cd0f3e, ped, player, _r); 
}

export function networkSetCanReceiveRsInvites(p0: boolean): void { 
	return _in(0x68980414, 0x688f7f9d, p0); 
}

/**
 * communicationType: see 0xDBDF80673BBA3D65
 * communicationGroupFlag: see 0x40DF02F371F40883
 * @param communicationType
 * @param communicationGroupFlag
 */
export function networkSetCommunicationGroupFlags(communicationType: number, communicationGroupFlag: number): void { 
	return _in(0xe549f846, 0xde7d32d5, communicationType, communicationGroupFlag); 
}

export function networkSetCurrentChatOption(newChatOption: number): void { 
	return _in(0x3dad0026, 0x5fbf356b, newChatOption); 
}

export function networkSetCurrentDataManagerHandle(p0: number): [boolean, number] { 
	const [retval, p0_out] = _in(0x796a87b3, 0xb68d1f3d, _ii(p0), _r);
	return [retval as boolean, p0_out as number]; 
}

export function networkSetCurrentPublicContentId(missionId: string): void { 
	return _in(0x2c863acd, 0xcd12b3db, _ts(missionId)); 
}

/**
 * mpSettingSpawn:
 * 
 * enum eMpSettingSpawn
 * {
 * MP_SETTING_SPAWN_NULL,
 * MP_SETTING_SPAWN_PROPERTY,
 * MP_SETTING_SPAWN_LAST_POSITION,
 * MP_SETTING_SPAWN_GARAGE,
 * MP_SETTING_SPAWN_RANDOM,
 * MP_SETTING_SPAWN_PRIVATE_YACHT,
 * MP_SETTING_SPAWN_OFFICE,
 * MP_SETTING_SPAWN_CLUBHOUSE,
 * MP_SETTING_SPAWN_IE_WAREHOUSE,
 * MP_SETTING_SPAWN_BUNKER,
 * MP_SETTING_SPAWN_HANGAR,
 * MP_SETTING_SPAWN_DEFUNCT_BASE,
 * MP_SETTING_SPAWN_NIGHTCLUB,
 * MP_SETTING_SPAWN_ARENA_GARAGE,
 * MP_SETTING_SPAWN_CASINO_APARTMENT,
 * MP_SETTING_SPAWN_ARCADE,
 * MP_SETTING_SPAWN_SUBMARINE,
 * MP_SETTING_SPAWN_CAR_MEET,
 * MP_SETTING_SPAWN_AUTO_SHOP,
 * MP_SETTING_SPAWN_FIXER_HQ,
 * MP_SETTING_SPAWN_MAX,
 * };
 * @param mpSettingSpawn
 */
export function networkSetCurrentSpawnLocationOption(mpSettingSpawn: number): void { 
	return _in(0xaa6d5451, 0xdc3448b6, _ch(mpSettingSpawn)); 
}

export function networkSetCurrentlySelectedGamerHandleFromInviteMenu(p0: number): [boolean, number] { 
	const [retval, p0_out] = _in(0x7206f674, 0xf2a3b1bb, _ii(p0), _r);
	return [retval as boolean, p0_out as number]; 
}

export function networkSetCustomArenaBallParams(netId: number): void { 
	return _in(0xa6fceccf, 0x4721d679, netId); 
}

/**
 * Appears to set whether a transition should be started when the session is migrating.
 * @param toggle
 */
export function networkSetDoNotLaunchFromJoinAsMigratedHost(toggle: boolean): void { 
	return _in(0xa2e9c1ab, 0x8a92e8cd, toggle); 
}

export function networkSetEntityCanBlend(entity: number, toggle: boolean): void { 
	return _in(0xd830567d, 0x88a1e873, entity, toggle); 
}

/**
 * if set to true other network players can't see it
 * if set to false other network player can see it
 * =========================================
 * ^^ I attempted this by grabbing an object with GET_ENTITY_PLAYER_IS_FREE_AIMING_AT and setting this naive no matter the toggle he could still see it.
 * 
 * pc or last gen?
 * 
 * ^^ last-gen
 * @param entity
 * @param toggle
 */
export function networkSetEntityOnlyExistsForParticipants(entity: number, toggle: boolean): void { 
	return _in(0xf1ca12b1, 0x8aef5298, entity, toggle); 
}

export function networkSetFriendlyFireOption(toggle: boolean): void { 
	return _in(0xf808475f, 0xa571d823, toggle); 
}

export function networkSetGamerInvitedToTransition(gamerHandle: number): number { 
	return _in(0xca2c8073, 0x411ecdb6, _ii(gamerHandle)); 
}

export function networkSetIgnoreSpectatorChatLimitsSameTeam(toggle: boolean): void { 
	return _in(0x6a5d89d7, 0x769a40d8, toggle); 
}

export function networkSetInFreeCamMode(toggle: boolean): void { 
	return _in(0xfc18db55, 0xae19e046, toggle); 
}

export function networkSetInMpCutscene(p0: boolean, p1: boolean): void { 
	return _in(0x9ca5de65, 0x5269fec4, p0, p1); 
}

export function networkSetInProgressFinishTime(p0: number): void { 
	return _in(0x2ce9d95e, 0x4051aecd, p0); 
}

export function networkSetInSpectatorMode(toggle: boolean, playerPed: number): void { 
	return _in(0x423de385, 0x4bb50894, toggle, playerPed); 
}

export function networkSetInSpectatorModeExtended(toggle: boolean, playerPed: number, p2: boolean): void { 
	return _in(0x419594e1, 0x37637120, toggle, playerPed, p2); 
}

export function networkSetInviteFailedMessageForInviteMenu(): [number, number] { 
	const [p0_out, p1_out] = _in(0x0d77a82d, 0xc2d0da59, _i, _i);
	return [p0_out as number, p1_out as number]; 
}

export function networkSetInviteOnCallForInviteMenu(p0: number): number { 
	return _in(0x66f010a4, 0xb031a331, _ii(p0)); 
}

export function networkSetLocalPlayerInvincibleTime(time: number): void { 
	return _in(0x2d95c7e2, 0xd7e07307, time); 
}

export function networkSetLocalPlayerSyncLookAt(toggle: boolean): void { 
	return _in(0x524ff0ae, 0xff9c3973, toggle); 
}

export function networkSetLookAtTalkers(p0: boolean): void { 
	return _in(0x7d395ea6, 0x1622e116, p0); 
}

export function networkSetMinimumRankForMission(p0: boolean): void { 
	return _in(0x94538037, 0xee44f5cf, p0); 
}

export function networkSetMissionFinished(): void { 
	return _in(0x3b3d11cd, 0x9ffcdfc9); 
}

/**
 * Stops current cutscene with a fade transition
 * p0: always true in R* Scripts
 * You will need to manually fade the screen back in
 * SET_CUTSCENE_INPUTS_PARTIALLY_FADE?
 * @param p0
 */
export function networkSetMocapCutsceneCanBeSkipped(p0: boolean): void { 
	return _in(0x2f137b50, 0x8de238f2, p0); 
}

export function networkSetNoLongerNeeded(entity: number, toggle: boolean): void { 
	return _in(0x3fc79569, 0x1834481d, entity, toggle); 
}

export function networkSetNoSpectatorChat(toggle: boolean): void { 
	return _in(0xf46a1e03, 0xe8755980, toggle); 
}

export function networkSetObjectCanBlendWhenFixed(object: number, toggle: boolean): void { 
	return _in(0x0379daf8, 0x9ba09aa5, object, toggle); 
}

export function networkSetObjectScopeDistance(object: number, range: number): void { 
	return _in(0xba7f0b77, 0xd80a4eb7, object, _fv(range)); 
}

export function networkSetOverrideSpectatorMode(toggle: boolean): void { 
	return _in(0x70da3bf8, 0xdacd3210, toggle); 
}

export function networkSetOverrideTutorialSessionChat(toggle: boolean): void { 
	return _in(0x3c5c1e2c, 0x2ff814b1, toggle); 
}

export function networkSetPlayerIsPassive(toggle: boolean): void { 
	return _in(0x1b857666, 0x604b1a74, toggle); 
}

/**
 * p0 in the decompiled scripts is always the stat mesh_texblend * 0.07 to int
 * @param p0
 */
export function networkSetPlayerMentalState(p0: number): void { 
	return _in(0x367ef5e2, 0xf439b4c6, p0); 
}

/**
 * Does nothing. It's just a nullsub.
 * @param toggle
 */
export function networkSetPresenceSessionInvitesBlocked(toggle: boolean): void { 
	return _in(0x4a9fde3a, 0x5a6d0437, toggle); 
}

export function networkSetPrivilegeCheckResultNotNeeded(): void { 
	return _in(0x1f7bc353, 0x9f9e0224); 
}

/**
 * value must be < 255
 * @param id
 */
export function networkSetPropertyId(id: number): void { 
	return _in(0x1775961c, 0x2fbbcb5c, id); 
}

export function networkSetProximityAffectsTeam(toggle: boolean): void { 
	return _in(0x9d7afcbf, 0x21c51712, toggle); 
}

/**
 * This native does absolutely nothing, just a nullsub
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function networkSetRichPresence(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0x1dccacdc, 0xfc569362, p0, p1, p2, p3); 
}

/**
 * This native does absolutely nothing, just a nullsub
 * @param p0
 * @param textLabel
 */
export function networkSetRichPresenceString(p0: number, textLabel: string): void { 
	return _in(0x3e200c2b, 0xcf4164eb, p0, _ts(textLabel)); 
}

export function networkSetSameTeamAsLocalPlayer(p0: number, p1: number): boolean { 
	return _in(0x4348bfda, 0x56023a2f, p0, p1, _r); 
}

export function networkSetScriptAutomuted(p0: number): boolean { 
	return _in(0xb309ebea, 0x797e001f, p0, _r); 
}

export function networkSetScriptControllingTeams(p0: number): void { 
	return _in(0x265559da, 0x40b3f327, p0); 
}

export function networkSetScriptIsSafeForNetworkGame(): void { 
	return _in(0x9243bac9, 0x6d64c050); 
}

export function networkSetScriptReadyForEvents(toggle: boolean): void { 
	return _in(0x7ac75210, 0x3856fb20, toggle); 
}

export function networkSetSpectatorToNonSpectatorTextChat(toggle: boolean): void { 
	return _in(0x8ef52aca, 0xecc51d9c, toggle); 
}

export function networkSetTalkerProximity(value: number): void { 
	return _in(0xcbf12d65, 0xf95ad686, _fv(value)); 
}

/**
 * A value between 1.0 and 5.0
 * 
 * _NETWORK_SET_TASK_CUTSCENE_PROXIMITY_SCALE?
 * @param p0
 */
export function networkSetTaskCutsceneInscopeMultipler(p0: number): void { 
	return _in(0xc6fcee21, 0xc6fcee21, p0); 
}

export function networkSetTeamOnlyChat(toggle: boolean): void { 
	return _in(0xd5b4883a, 0xc32f24c3, toggle); 
}

export function networkSetThisScriptIsNetworkScript(maxNumMissionParticipants: number, p1: boolean, instanceId: number): void { 
	return _in(0x1ca59e30, 0x6ecb80a5, maxNumMissionParticipants, p1, instanceId); 
}

export function networkSetTransitionActivityId(p0: number): void { 
	return _in(0x30de938b, 0x516f0ad2, p0); 
}

export function networkSetTransitionCreatorHandle(p0: number): number { 
	return _in(0xef26739b, 0xcd9907d5, _ii(p0)); 
}

export function networkSetTransitionVisibilityLock(p0: boolean, p1: boolean): void { 
	return _in(0x0c978fda, 0x19692c2c, p0, p1); 
}

/**
 * Sets up tunable contexts for _NETWORK_GET_TUNABLES_REGISTRATION_{BOOL|INT|FLOAT}
 * @param tunableContextData
 */
export function networkSetTunablesRegistrationContexts(tunableContextData: number): number { 
	return _in(0x014a7344, 0x9675121d, _ii(tunableContextData)); 
}

/**
 * Used by MetricVEHICLE_DIST_DRIVEN
 * @param toggle
 */
export function networkSetVehicleDrivenInTestDrive(toggle: boolean): void { 
	return _in(0x8c70252f, 0xc40f320b, toggle); 
}

/**
 * Sets 'loc' variable used in MetricVEHICLE_DIST_DRIVEN
 * @param location
 */
export function networkSetVehicleDrivenLocation(location: number): void { 
	return _in(0xa0ce91e4, 0x7531d3bb, _ch(location)); 
}

export function networkSetVoiceActive(toggle: boolean): void { 
	return _in(0xbabec9e6, 0x9a91c57b, toggle); 
}

export function networkSetVoiceChannel(channel: number): void { 
	return _in(0xef6212c2, 0xefef1a23, channel); 
}

export function networkShouldShowPromotionAlertScreen(): boolean { 
	return _in(0x023acab2, 0xdc9dc4a4, _r); 
}

/**
 * Returns true if the NAT type is Strict (3) and a certain number of connections have failed.
 */
export function networkShouldShowStrictNatWarning(): boolean { 
	return _in(0x82a2b386, 0x716608f1, _r); 
}

export function networkShowAccountUpgradeUi(): void { 
	return _in(0x83fe8d72, 0x29593017); 
}

/**
 * Does nothing (it's a nullsub).
 * @param player
 */
export function networkShowChatRestrictionMsc(player: number): void { 
	return _in(0x6bff5f84, 0x102df80a, player); 
}

export function networkShowProfileUi(gamerHandle: number): number { 
	return _in(0x859ed1ce, 0xa343fca8, _ii(gamerHandle)); 
}

/**
 * This native does absolutely nothing, just a nullsub
 */
export function networkShowPsnUgcRestriction(): void { 
	return _in(0x5c497525, 0xf803486b); 
}

export function networkSkipRadioResetNextClose(): void { 
	return _in(0x9465e683, 0xb12d3f6b); 
}

export function networkSkipRadioResetNextOpen(): void { 
	return _in(0xca59ccae, 0x5d01e4ce); 
}

/**
 * Returns true if dinput8.dll is present in the game directory.
 * You will get following error message if that is true: "You are attempting to access GTA Online servers with an altered version of the game."
 */
export function networkSkipRadioWarning(): boolean { 
	return _in(0x659cf2ef, 0x7f550c4f, _r); 
}

export function networkSpendAgency(p0: number, p1: number, p2: number, p3: number, p4: number): void { 
	return _in(0x1b212040, 0x5080125c, p0, p1, p2, p3, p4); 
}

export function networkSpendApartmentUtilities(amount: number, p1: boolean, p2: boolean, data: number): number { 
	return _in(0x1254b5b3, 0x925efd3d, amount, p1, p2, _ii(data)); 
}

export function networkSpendArcade(p0: number, p1: number, p2: number, p3: number, p4: number): void { 
	return _in(0x43aa7fac, 0x4e6d6687, p0, p1, p2, p3, p4); 
}

export function networkSpendArcadeMgmt(p0: number, p1: number, p2: number, p3: number, p4: number): void { 
	return _in(0xb5b58e24, 0x868cb09e, p0, p1, p2, p3, p4); 
}

export function networkSpendArenaPremium(amount: number, p1: boolean, p2: boolean): void { 
	return _in(0x619496d8, 0x37efd920, amount, p1, p2); 
}

/**
 * type either, 1 for cam spectate, 2 for drone
 * @param amount
 * @param type
 * @param p2
 * @param p3
 */
export function networkSpendArenaSpectatorBox(amount: number, type: number, p2: boolean, p3: boolean): void { 
	return _in(0x7049bf85, 0x8601dc0f, amount, type, p2, p3); 
}

export function networkSpendAutoshopModify(p0: number, p1: number, p2: number, p3: number, p4: number): void { 
	return _in(0x9bea350d, 0x7c48061b, p0, p1, p2, p3, p4); 
}

export function networkSpendBeachParty(p0: number): void { 
	return _in(0x54aba22f, 0xa6371249, p0); 
}

export function networkSpendBikeShop(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0x923aea8e, 0x78f8df0b, p0, p1, p2, p3); 
}

export function networkSpendBoss(p0: number, p1: number, p2: number): void { 
	return _in(0xdbc966a0, 0x1c02bca7, p0, p1, p2); 
}

export function networkSpendBountyHunterMission(amount: number, p1: boolean, p2: boolean): void { 
	return _in(0x1bea0cd9, 0x3470bb1f, amount, p1, p2); 
}

export function networkSpendBusinessPropertyFees(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0x92d1cfda, 0x1227ff1c, p0, p1, p2, p3); 
}

export function networkSpendBuyAcidLab(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0xf1e26a79, 0x24327152, p0, p1, p2, p3); 
}

export function networkSpendBuyAgency(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0xea8cd3c9, 0xb3c35884, p0, p1, p2, p3); 
}

export function networkSpendBuyArcade(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0x870289a5, 0x58348378, p0, p1, p2, p3); 
}

export function networkSpendBuyArena(amount: number, p1: boolean, p2: boolean, p3: string): void { 
	return _in(0x40d5da95, 0x50b7cb46, amount, p1, p2, _ts(p3)); 
}

export function networkSpendBuyAutoshop(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0xeeb7e5d1, 0xfeb20869, p0, p1, p2, p3); 
}

export function networkSpendBuyCasino(amount: number, p1: boolean, p2: boolean, data: number): number { 
	return _in(0x34a6fc4d, 0x06c4da0f, amount, p1, p2, _ii(data)); 
}

export function networkSpendBuyMfgarage(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0xa2ed36dc, 0xf0fca413, p0, p1, p2, p3); 
}

export function networkSpendBuySub(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0x90cd7c68, 0x71fbf1b4, p0, p1, p2, p3); 
}

export function networkSpendBuySupplies(p0: number, p1: boolean, p2: boolean, p3: number): void { 
	return _in(0xb48185c0, 0xca67b16b, p0, p1, p2, p3); 
}

export function networkSpendCarClubBar(p0: number, p1: boolean, p2: boolean, p3: number): void { 
	return _in(0x92522780, 0x3a0eaa1b, p0, p1, p2, p3); 
}

export function networkSpendCarClubMembership(amount1: number, p1: number, p2: number, amount2: number, p4: number): void { 
	return _in(0x1464e172, 0x07cd36e2, amount1, p1, p2, amount2, p4); 
}

export function networkSpendCarClubTakeover(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0xd1e46824, 0xe6fb92b5, p0, p1, p2, p3); 
}

export function networkSpendCasinoClub(amount1: number, p1: number, p2: boolean, p3: number, p4: number, p5: number, p6: number, amount2: number, p8: number): void { 
	return _in(0xc991c255, 0xaa6d90b2, amount1, p1, p2, p3, p4, p5, p6, amount2, p8); 
}

export function networkSpendCasinoGeneric(amount: number, p1: number, p2: number, p3: number, p4: number): void { 
	return _in(0x88bf9b61, 0x2b84d3c3, amount, p1, p2, p3, p4); 
}

export function networkSpendCasinoHeist(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number, p10: number): void { 
	return _in(0xd30e8392, 0xf407c328, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10); 
}

export function networkSpendCasinoHeistSkipMission(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0x487009dd, 0x91d93429, p0, p1, p2, p3); 
}

export function networkSpendCasinoMembership(amount: number, p1: boolean, p2: boolean, p3: number): void { 
	return _in(0xfbbe0570, 0xedf39d46, amount, p1, p2, p3); 
}

export function networkSpendCompSuv(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0xd86581f9, 0xe7cda383, p0, p1, p2, p3); 
}

/**
 * Hardcoded to return 0.
 * @param amount
 */
export function networkSpendEarnedFromBankAndWallets(amount: number): number { 
	return _in(0x9b5016a6, 0x433a68c5, amount, _r, _ri); 
}

export function networkSpendGangopsCannon(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0x771adb0e, 0x7635b7bf, p0, p1, p2, p3); 
}

export function networkSpendGangopsRepairCost(p0: number, p1: number, p2: number): void { 
	return _in(0x2a7cec72, 0xc3443bcc, p0, p1, p2); 
}

export function networkSpendGangopsSkipMission(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0xda947ae8, 0x880d5c18, p0, p1, p2, p3); 
}

export function networkSpendGangopsStartStrand(type: number, amount: number, p2: boolean, p3: boolean): void { 
	return _in(0xa19ec078, 0x6e326e06, type, amount, p2, p3); 
}

export function networkSpendGangopsTripSkip(amount: number, p1: boolean, p2: boolean): void { 
	return _in(0x5ece6fd7, 0xb4ec8d6a, amount, p1, p2); 
}

export function networkSpendGoon(p0: number, p1: number, amount: number): void { 
	return _in(0x08a1b82b, 0x91900682, p0, p1, amount); 
}

export function networkSpendGunrunning(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0x2ceb0e0b, 0xc2a77c05, p0, p1, p2, p3); 
}

export function networkSpendHidden(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0xbf8793b9, 0x1ea094a7, p0, p1, p2, p3); 
}

export function networkSpendInteractionMenuAbility(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0x93aa4165, 0xcb67e925, p0, p1, p2, p3); 
}

export function networkSpendIslandHeist(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0xe86689e5, 0xf82de429, p0, p1, p2, p3); 
}

export function networkSpendMakeItRain(amount: number, p1: boolean, p2: boolean): void { 
	return _in(0xe5f5a060, 0x439c2f5d, amount, p1, p2); 
}

export function networkSpendNightclubAndWarehouse(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0x65482bfd, 0x0923c8a1, p0, p1, p2, p3); 
}

export function networkSpendNightclubBarDrink(amount: number, p1: number, p2: boolean, p3: boolean): void { 
	return _in(0xdd21b016, 0xe4289465, amount, p1, p2, p3); 
}

export function networkSpendPlayArcade(p0: number, p1: number, p2: number, p3: number, p4: number): void { 
	return _in(0xead3d81f, 0x2c3a1458, p0, p1, p2, p3, p4); 
}

export function networkSpendRenameAcidLab(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0x842b1c5a, 0xf61acde9, p0, p1, p2, p3); 
}

export function networkSpendRenameAcidProduct(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0x446798f7, 0x495dd7d8, p0, p1, p2, p3); 
}

export function networkSpendSetCommonFields(p0: number, p1: number, p2: number, p3: boolean): void { 
	return _in(0xb9f7a469, 0x460e7a4a, p0, p1, p2, p3); 
}

export function networkSpendSetDiscount(p0: boolean): void { 
	return _in(0x7e2f4e8f, 0x44caf4e0, p0); 
}

export function networkSpendSourceBike(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0xd9df467c, 0xbe4398c8, p0, p1, p2, p3); 
}

export function networkSpendSpinTheWheelPayment(amount: number, p1: number, p2: boolean): void { 
	return _in(0x9a5bd1d0, 0x000b339c, amount, p1, p2); 
}

export function networkSpendSubmarine(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number): void { 
	return _in(0x6c8bc148, 0x8527aaab, p0, p1, p2, p3, p4, p5); 
}

export function networkSpendSupply(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0xebd482b8, 0x2acb8bad, p0, p1, p2, p3); 
}

export function networkSpendSuvFstTrvl(p0: number, p1: boolean, p2: boolean, p3: number): void { 
	return _in(0x61a2df64, 0xed2d396e, p0, p1, p2, p3); 
}

export function networkSpendUpgradeAcidLabArmor(p0: number, p1: boolean, p2: boolean, p3: number): void { 
	return _in(0xa7d541c9, 0xacd63133, p0, p1, p2, p3); 
}

export function networkSpendUpgradeAcidLabEquipment(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0x110ee9d4, 0x86c23126, p0, p1, p2, p3); 
}

export function networkSpendUpgradeAcidLabMines(p0: number, p1: boolean, p2: boolean, p3: number): void { 
	return _in(0x4b99ab08, 0xc92c54e4, p0, p1, p2, p3); 
}

export function networkSpendUpgradeAcidLabScoop(p0: number, p1: boolean, p2: boolean, p3: number): void { 
	return _in(0x2940558e, 0x05bcc2ec, p0, p1, p2, p3); 
}

export function networkSpendUpgradeAgency(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0x6cca6484, 0x0589a3b6, p0, p1, p2, p3); 
}

export function networkSpendUpgradeArcade(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0x55746376, 0x81911fda, p0, p1, p2, p3); 
}

export function networkSpendUpgradeArena(amount: number, p1: boolean, p2: boolean, p3: string): void { 
	return _in(0x037abb06, 0x825d7ab1, amount, p1, p2, _ts(p3)); 
}

export function networkSpendUpgradeAutoshop(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0xdd829aa1, 0x98fdc46c, p0, p1, p2, p3); 
}

export function networkSpendUpgradeCasino(amount: number, p1: boolean, p2: boolean, data: number): number { 
	return _in(0x4740d62b, 0xc1b4ebea, amount, p1, p2, _ii(data)); 
}

export function networkSpendUpgradeMfgarage(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0xcf8f346d, 0xddc66643, p0, p1, p2, p3); 
}

export function networkSpendUpgradeSub(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0x89049a84, 0x065ce68e, p0, p1, p2, p3); 
}

export function networkSpendVehicleRequested(p0: number, p1: number, p2: number, p3: number, p4: number): void { 
	return _in(0x02d24a35, 0xa9cc3503, p0, p1, p2, p3, p4); 
}

export function networkSpentAirFreight(hangarCargoSourcingPrice: number, fromBank: boolean, fromBankAndWallet: boolean, cost: number, warehouseId: number, warehouseSlot: number): void { 
	return _in(0x8c7e8d6f, 0x96c9e948, hangarCargoSourcingPrice, fromBank, fromBankAndWallet, cost, warehouseId, warehouseSlot); 
}

export function networkSpentAmmoDrop(p0: number, p1: boolean, p2: boolean, p3: number): void { 
	return _in(0xb162dc95, 0xc0a3317b, p0, p1, p2, p3); 
}

export function networkSpentArenaJoinSpectator(amount: number, p1: number, p2: boolean, p3: boolean): void { 
	return _in(0x14eaea58, 0xf93b55af, amount, p1, p2, p3); 
}

export function networkSpentArrestBail(p0: number, p1: boolean, p2: boolean): void { 
	return _in(0x812f5488, 0xb1b2a299, p0, p1, p2); 
}

export function networkSpentBallisticEquipment(amount: number, p1: boolean, p2: boolean): void { 
	return _in(0x5d97630a, 0x8a0ef123, amount, p1, p2); 
}

export function networkSpentBankInterest(p0: number, p1: boolean, p2: boolean): void { 
	return _in(0xca230c96, 0x82556cf1, p0, p1, p2); 
}

export function networkSpentBetting(amount: number, p1: number, matchId: string, p3: boolean, p4: boolean): void { 
	return _in(0x1c436fd1, 0x1ffa692f, amount, p1, _ts(matchId), p3, p4); 
}

export function networkSpentBoatPickup(p0: number, p1: boolean, p2: boolean, p3: number): void { 
	return _in(0x524ee43a, 0x37232c00, p0, p1, p2, p3); 
}

export function networkSpentBossGoon(amount: number, p1: boolean, p2: boolean): boolean { 
	return _in(0xffbe02cd, 0x385356bd, amount, p1, p2, _r); 
}

export function networkSpentBounty(p0: number, p1: boolean, p2: boolean): void { 
	return _in(0x29b260b8, 0x4947dfcc, p0, p1, p2); 
}

export function networkSpentBullShark(p0: number, p1: boolean, p2: boolean, p3: number): void { 
	return _in(0xa6dd8458, 0xce24012c, p0, p1, p2, p3); 
}

export function networkSpentBuyBase(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0x4ea3f425, 0xc7744d21, p0, p1, p2, p3); 
}

export function networkSpentBuyBunker(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0x12d148d2, 0x6538d0f9, p0, p1, p2, p3); 
}

export function networkSpentBuyOfftheradar(p0: number, p1: boolean, p2: boolean, p3: number): void { 
	return _in(0xa628a745, 0xe2275c5d, p0, p1, p2, p3); 
}

export function networkSpentBuyPassiveMode(p0: number, p1: boolean, p2: boolean, p3: number): void { 
	return _in(0x6d3a430d, 0x1a809179, p0, p1, p2, p3); 
}

export function networkSpentBuyRevealPlayers(p0: number, p1: boolean, p2: boolean, p3: number): void { 
	return _in(0x6e176f1b, 0x18bc0637, p0, p1, p2, p3); 
}

export function networkSpentBuyTiltrotor(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0x0cce73bc, 0x7a11e885, p0, p1, p2, p3); 
}

export function networkSpentBuyTruck(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0xac272c0a, 0xe01b4bd8, p0, p1, p2, p3); 
}

export function networkSpentBuyWantedlevel(p0: number, p2: boolean, p3: boolean, p4: number): number { 
	return _in(0xe1b13771, 0xa843c4f6, p0, _i, p2, p3, p4); 
}

export function networkSpentCallPlayer(p0: number, p2: boolean, p3: boolean): number { 
	return _in(0xacde7185, 0xb374177c, p0, _i, p2, p3); 
}

export function networkSpentCargoSourcing(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number): void { 
	return _in(0x948705f6, 0xf9c50824, p0, p1, p2, p3, p4, p5); 
}

export function networkSpentCarwash(p0: number, p1: number, p2: number, p3: boolean, p4: boolean): void { 
	return _in(0xec03c719, 0xdb2f4306, p0, p1, p2, p3, p4); 
}

export function networkSpentCashDrop(amount: number, p1: boolean, p2: boolean): void { 
	return _in(0x289016ec, 0x778d60e0, amount, p1, p2); 
}

export function networkSpentChangeAppearance(p0: number, p1: number, p2: number): void { 
	return _in(0x5f456788, 0xb05faeac, p0, p1, p2); 
}

export function networkSpentCinema(p0: number, p1: number, p2: boolean, p3: boolean): void { 
	return _in(0x6b38ecb0, 0x5a63a685, p0, p1, p2, p3); 
}

export function networkSpentEmployAssassins(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0x5bbbd921, 0x86e1f1c5, p0, p1, p2, p3); 
}

export function networkSpentFromRockstar(p0: number, p1: boolean, p2: boolean): void { 
	return _in(0x6a445b64, 0xed7abeb5, p0, p1, p2); 
}

export function networkSpentGeneric(price: number, p1: boolean, p2: boolean, stat: number, spent: number, p5: string, p6: string, data: number): number { 
	return _in(0x2803b027, 0x479fb640, price, p1, p2, _ch(stat), _ch(spent), _ts(p5), _ts(p6), _ii(data)); 
}

export function networkSpentHangarStaffCharges(amount: number, p1: boolean, p2: boolean): void { 
	return _in(0xb1f1346f, 0xd57685d7, amount, p1, p2); 
}

export function networkSpentHangarUtilityCharges(amount: number, p1: boolean, p2: boolean): void { 
	return _in(0xb18ac2ec, 0xbb15cb6a, amount, p1, p2); 
}

export function networkSpentHeliPickup(p0: number, p1: boolean, p2: boolean, p3: number): void { 
	return _in(0x7bf1d73d, 0xb2eca492, p0, p1, p2, p3); 
}

export function networkSpentHireMercenary(p0: number, p1: boolean, p2: boolean, p3: number): void { 
	return _in(0xe7b80e2b, 0xf9d80bd6, p0, p1, p2, p3); 
}

/**
 * Only used once in a script (am_contact_requests)
 * p1 = 0
 * p2 = 1
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function networkSpentHireMugger(p0: number, p1: boolean, p2: boolean, p3: number): void { 
	return _in(0xe404bfb9, 0x81665bf0, p0, p1, p2, p3); 
}

export function networkSpentHoldups(p0: number, p1: boolean, p2: boolean): void { 
	return _in(0xd9b86b98, 0x72039763, p0, p1, p2); 
}

export function networkSpentImportExportRepair(p0: number, p1: number, p2: number): void { 
	return _in(0xc1952f37, 0x73ba18fe, p0, p1, p2); 
}

export function networkSpentInStripclub(p0: number, p1: boolean, p2: number, p3: boolean): void { 
	return _in(0xee99784e, 0x4467689c, p0, p1, p2, p3); 
}

export function networkSpentJobSkip(amount: number, matchId: string, p2: boolean, p3: boolean): void { 
	return _in(0x28f174a6, 0x7b8d0c2f, amount, _ts(matchId), p2, p3); 
}

export function networkSpentJukebox(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0x5bcde0f6, 0x40c773d2, p0, p1, p2, p3); 
}

export function networkSpentMcAbility(p0: number, p1: number, p2: number, p3: number, p4: number): void { 
	return _in(0xd7cccba2, 0x8c4ecaf0, p0, p1, p2, p3, p4); 
}

/**
 * Hash p3 = MISSILE_JAMMER
 * @param amount
 * @param fromBank
 * @param fromBankAndWallet
 * @param p3
 */
export function networkSpentMissileJammer(amount: number, fromBank: boolean, fromBankAndWallet: boolean, p3: number): void { 
	return _in(0xd687100f, 0x616163f4, amount, fromBank, fromBankAndWallet, _ch(p3)); 
}

export function networkSpentMoveSubmarine(p0: number, p1: number, p2: number): void { 
	return _in(0xcd4d66b4, 0x3b1dd28d, p0, p1, p2); 
}

export function networkSpentMoveYacht(amount: number, p1: boolean, p2: boolean): void { 
	return _in(0xe7df4e05, 0x45dfb56e, amount, p1, p2); 
}

export function networkSpentNightclubEntryFee(player: number, amount: number, p1: number, p2: boolean, p3: boolean): void { 
	return _in(0x87605668, 0x4281655d, player, amount, p1, p2, p3); 
}

export function networkSpentNoCops(p0: number, p1: boolean, p2: boolean, p3: number): void { 
	return _in(0xd5bb406f, 0x4e04019f, p0, p1, p2, p3); 
}

export function networkSpentOrderBodyguardVehicle(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0xe8b0b270, 0xb6e7c76e, p0, p1, p2, p3); 
}

export function networkSpentOrderWarehouseVehicle(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0x05f04155, 0xa226fbbf, p0, p1, p2, p3); 
}

export function networkSpentPaHeliPickup(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0x0fe8e1fc, 0xd2b86b33, p0, p1, p2, p3); 
}

export function networkSpentPaServiceDancer(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0xb49eca12, 0x2467d05f, p0, p1, p2, p3); 
}

export function networkSpentPaServiceHeli(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0x112209ce, 0x0290c03a, p0, p1, p2, p3); 
}

export function networkSpentPaServiceImpound(p0: number, p1: number, p2: number): void { 
	return _in(0xe23adc6f, 0xcb1f29ae, p0, p1, p2); 
}

export function networkSpentPaServiceSnack(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0x0d30eb83, 0x668e63c5, p0, p1, p2, p3); 
}

export function networkSpentPaServiceVehicle(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0xed5fd7af, 0x10f5e262, p0, p1, p2, p3); 
}

export function networkSpentPayBusinessSupplies(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0x0035bb91, 0x4316f1e3, p0, p1, p2, p3); 
}

/**
 * According to how I understood this in the freemode script alone,
 * The first parameter is determined by a function named, func_5749 within the freemode script which has a list of all the vehicles and a set price to return which some vehicles deals with globals as well. So the first parameter is basically the set in stone insurance cost it's gonna charge you for that specific vehicle model.
 * 
 * The second parameter whoever put it was right, they call GET_ENTITY_MODEL with the vehicle as the paremeter.
 * 
 * The third parameter is the network handle as they call their little struct<13> func or atleast how the script decompiled it to look which in lamens terms just returns the network handle of the previous owner based on DECOR_GET_INT(vehicle, "Previous_Owner").
 * 
 * The fourth parameter is a bool that returns true/false depending on if your bank balance is greater then 0.
 * 
 * The fifth and last parameter is a bool that returns true/false depending on if you have the money for the car based on the cost returned by func_5749. In the freemode script eg,
 * bool hasTheMoney = MONEY::_GET_BANK_BALANCE() < carCost.
 * @param amount
 * @param vehicleModel
 * @param gamerHandle
 * @param notBankrupt
 * @param hasTheMoney
 */
export function networkSpentPayVehicleInsurancePremium(amount: number, vehicleModel: number, notBankrupt: boolean, hasTheMoney: boolean): number { 
	return _in(0x9ff28d88, 0xc766e3e8, amount, _ch(vehicleModel), _i, notBankrupt, hasTheMoney); 
}

export function networkSpentPlayerHealthcare(p0: number, p1: number, p2: boolean, p3: boolean): void { 
	return _in(0x7c99101f, 0x7fce2ee5, p0, p1, p2, p3); 
}

export function networkSpentProstitutes(p0: number, p1: boolean, p2: boolean): void { 
	return _in(0xb21b8950, 0x1cfac79e, p0, p1, p2); 
}

export function networkSpentPurchaseBusinessProperty(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0x6fd97159, 0xfe3c971a, p0, p1, p2, p3); 
}

export function networkSpentPurchaseClubHouse(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0x998e18ce, 0xb44487fc, p0, p1, p2, p3); 
}

export function networkSpentPurchaseHackerTruck(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0x2a93c46a, 0xab1eacc9, p0, p1, p2, p3); 
}

export function networkSpentPurchaseHangar(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0xccb339cc, 0x970452da, p0, p1, p2, p3); 
}

export function networkSpentPurchaseImpexpWarehouseProperty(amount: number, p2: boolean, p3: boolean): number { 
	return _in(0x33981d68, 0x04e62f49, amount, _i, p2, p3); 
}

export function networkSpentPurchaseNightclubAndWarehouse(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0xed76d195, 0xe6e3bf7f, p0, p1, p2, p3); 
}

export function networkSpentPurchaseOfficeGarage(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0xb4c2ec46, 0x3672474e, p0, p1, p2, p3); 
}

export function networkSpentPurchaseOfficeProperty(p0: number, p1: number, p2: number, p3: number, p4: number): void { 
	return _in(0x69ef772b, 0x192614c1, p0, p1, p2, p3, p4); 
}

export function networkSpentPurchaseWarehouseProperty(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0xbd0efb25, 0xcca8f97a, p0, p1, p2, p3); 
}

export function networkSpentRdrHatchetBonus(amount: number, p1: boolean, p2: boolean): void { 
	return _in(0xe284d46f, 0xfdb82e36, amount, p1, p2); 
}

export function networkSpentRehireDj(amount: number, p1: number, p2: boolean, p3: boolean): void { 
	return _in(0xf6c8a544, 0xe4cf14fc, amount, p1, p2, p3); 
}

export function networkSpentRenameOrganization(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0xfc4ee00a, 0x7b3bfb76, p0, p1, p2, p3); 
}

export function networkSpentRequestHeist(p0: number, p1: boolean, p2: boolean, p3: number): void { 
	return _in(0x9d26502b, 0xb97bfe62, p0, p1, p2, p3); 
}

export function networkSpentRequestJob(p0: number, p1: boolean, p2: boolean, p3: number): void { 
	return _in(0x8204da79, 0x34df3155, p0, p1, p2, p3); 
}

export function networkSpentRobbedByMugger(amount: number, p1: boolean, p2: boolean, p3: number): void { 
	return _in(0x995a65f1, 0x5f581359, amount, p1, p2, p3); 
}

export function networkSpentSkipCargoSourceSetup(amount: number, fromBank: boolean, fromBankAndWallet: boolean, cost: number): void { 
	return _in(0xed1b407b, 0xada42cec, amount, fromBank, fromBankAndWallet, cost); 
}

/**
 * Hash p3 = STEALTH_MODULE
 * @param amount
 * @param fromBank
 * @param fromBankAndWallet
 * @param p3
 */
export function networkSpentStealthModule(amount: number, fromBank: boolean, fromBankAndWallet: boolean, p3: number): void { 
	return _in(0x95ce79a6, 0x939c537a, amount, fromBank, fromBankAndWallet, _ch(p3)); 
}

export function networkSpentTaxi(amount: number, p1: boolean, p2: boolean, p3: number, p4: number): void { 
	return _in(0x17c3a7d3, 0x1eae39f9, amount, p1, p2, p3, p4); 
}

export function networkSpentTelescope(p0: number, p1: boolean, p2: boolean): void { 
	return _in(0x7fe61782, 0xad94cc09, p0, p1, p2); 
}

export function networkSpentTradeBusinessProperty(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0xa51b086b, 0x0b2c0f7a, p0, p1, p2, p3); 
}

export function networkSpentTradeImpexpWarehouseProperty(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0x2fab6614, 0xce22e196, p0, p1, p2, p3); 
}

export function networkSpentUpgradeBase(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0x3dd3f33a, 0x5d55ea6f, p0, p1, p2, p3); 
}

export function networkSpentUpgradeBusinessProperty(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0x675d19c6, 0x067cae08, p0, p1, p2, p3); 
}

export function networkSpentUpgradeClubHouse(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0xfa07759e, 0x6fddd7cf, p0, p1, p2, p3); 
}

export function networkSpentUpgradeHackerTruck(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0x226c284c, 0x830d0ca8, p0, p1, p2, p3); 
}

export function networkSpentUpgradeHangar(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0x615eb504, 0xb0788daf, p0, p1, p2, p3); 
}

export function networkSpentUpgradeImpexpWarehouseProperty(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0x41284642, 0x31e3ca0b, p0, p1, p2, p3); 
}

export function networkSpentUpgradeNightclubAndWarehouse(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0x1dc9b749, 0xe7ae282b, p0, p1, p2, p3); 
}

export function networkSpentUpgradeOfficeGarage(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0x2afc2d19, 0xb50797f2, p0, p1, p2, p3); 
}

export function networkSpentUpgradeOfficeProperty(p0: number, p1: number, p2: number, p3: number, p4: number): void { 
	return _in(0x8e243837, 0x643d9583, p0, p1, p2, p3, p4); 
}

export function networkSpentUpgradeTiltrotor(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0x165e135d, 0x6dfa2907, p0, p1, p2, p3); 
}

export function networkSpentUpgradeTruck(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0x365e877c, 0x61d6988b, p0, p1, p2, p3); 
}

export function networkSpentUpgradeWarehouseProperty(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0xa95f667a, 0x755725da, p0, p1, p2, p3); 
}

export function networkSpentUpradeBunker(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0x0c82d21a, 0x77c22d49, p0, p1, p2, p3); 
}

export function networkSpentVehicleExportMods(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number): void { 
	return _in(0xa75ccf58, 0xa60a5fd1, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9); 
}

export function networkSpentWager(p0: number, p1: number, amount: number): void { 
	return _in(0xd99db210, 0x089617fe, p0, p1, amount); 
}

/**
 * One of the first things it does is get the players ped.
 * Then it calls a function that is used in some tasks and ped based functions.
 * p5, p6, p7 is another coordinate (or zero), often related to `GET_BLIP_COORDS, in the decompiled scripts.
 * @param player
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param p5
 * @param p6
 * @param p7
 * @param flags
 */
export function networkStartRespawnSearchForPlayer(player: number, x: number, y: number, z: number, radius: number, p5: number, p6: number, p7: number, flags: number): boolean { 
	return _in(0x5a6ffa24, 0x33e2f14c, player, _fv(x), _fv(y), _fv(z), _fv(radius), _fv(p5), _fv(p6), _fv(p7), flags, _r); 
}

/**
 * p8, p9, p10 is another coordinate, or zero, often related to `GET_BLIP_COORDS in the decompiled scripts.
 * @param player
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param width
 * @param p8
 * @param p9
 * @param p10
 * @param flags
 */
export function networkStartRespawnSearchInAngledAreaForPlayer(player: number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number, p8: number, p9: number, p10: number, flags: number): boolean { 
	return _in(0x4ba92a18, 0x502bca61, player, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(width), _fv(p8), _fv(p9), _fv(p10), flags, _r); 
}

export function networkStartSoloTutorialSession(): void { 
	return _in(0x17e0198b, 0x3882c2cb); 
}

export function networkStartSynchronisedScene(netScene: number): void { 
	return _in(0x9a1b3fcd, 0xb36c8697, netScene); 
}

/**
 * Always returns -1. Seems to be XB1 specific.
 * @param netHandle
 */
export function networkStartUserContentPermissionsCheck(netHandle: number): [number, number] { 
	const [retval, netHandle_out] = _in(0xdeb2b99a, 0x1af1a2a6, _ii(netHandle), _r, _ri);
	return [retval as number, netHandle_out as number]; 
}

export function networkStopSynchronisedScene(netScene: number): void { 
	return _in(0xc254481a, 0x4574cb2f, netScene); 
}

export function networkStoreInviteThroughRestart(): void { 
	return _in(0xf814fec6, 0xa19fd6e0); 
}

export function networkSuppressInvite(toggle: boolean): void { 
	return _in(0xa0682d67, 0xef1fba3d, toggle); 
}

/**
 * Same as _IS_TEXT_CHAT_ACTIVE, except it does not check if the text chat HUD component is initialized, and therefore may crash.
 */
export function networkTextChatIsTyping(): boolean { 
	return _in(0x5fcf4d70, 0x69b09026, _r); 
}

export function networkTransitionAddStage(hash: number, p1: number, p2: number, state: number, p4: number): boolean { 
	return _in(0xc3bfed92, 0x026a2aad, _ch(hash), p1, p2, state, p4, _r); 
}

export function networkTransitionBlockJoinRequests(p0: boolean): void { 
	return _in(0x973d76aa, 0x760a6cb6, p0); 
}

export function networkTransitionFinish(p0: number, p1: number, p2: number): boolean { 
	return _in(0x04918a41, 0xbc9b8157, p0, p1, p2, _r); 
}

export function networkTransitionSetActivityIsland(p0: number): void { 
	return _in(0xf6f4383b, 0x7c92f11a, p0); 
}

export function networkTransitionSetContentCreator(p0: number): void { 
	return _in(0x1f8e00fb, 0x18239600, p0); 
}

export function networkTransitionSetInProgress(p0: number): void { 
	return _in(0x1398582b, 0x7f72b3ed, p0); 
}

export function networkTransitionStart(p0: number, p1: number, p2: number, p3: number): boolean { 
	return _in(0x8b4ffc79, 0x0ca131ef, p0, p1, p2, p3, _r); 
}

/**
 * Allows vehicle wheels to be destructible even when the vehicle entity is invincible.
 * @param entity
 * @param toggle
 */
export function networkTriggerDamageEventForZeroDamage(entity: number, toggle: boolean): void { 
	return _in(0x890e2c5a, 0xbed7236d, entity, toggle); 
}

export function networkTriggerDamageEventForZeroPedDamage(entity: number, trigger: boolean): void { 
	return _in(0xe9d0244a, 0xcbee1bc4, entity, trigger); 
}

export function networkTriggerDamageEventForZeroWeaponHash(entity: number, toggle: boolean): void { 
	return _in(0x38b7c51a, 0xb1edc7d8, entity, toggle); 
}

/**
 * Returns defaultValue if the tunable doesn't exist.
 * @param tunableContext
 * @param tunableName
 * @param defaultValue
 */
export function networkTryAccessTunableBoolHash(tunableContext: number, tunableName: number, defaultValue: boolean): boolean { 
	return _in(0xc7420099, 0x936ce286, _ch(tunableContext), _ch(tunableName), defaultValue, _r); 
}

export function networkTryToSetThisScriptIsNetworkScript(p0: number, p1: boolean, p2: number): boolean { 
	return _in(0xd1110739, 0xeeadb592, p0, p1, p2, _r); 
}

export function networkUgcNav(p0: number, p1: number): void { 
	return _in(0xc1447451, 0xddb512f0, p0, p1); 
}

export function networkUnregisterNetworkedEntity(entity: number): void { 
	return _in(0x7368e683, 0xbb9038d6, entity); 
}

export function networkUpdateLoadScene(): boolean { 
	return _in(0xc4582015, 0x556d1c46, _r); 
}

export function networkUseHighPrecisionBlending(netID: number, toggle: boolean): void { 
	return _in(0x2b1813ab, 0xa29016c5, netID, toggle); 
}

/**
 * Implemented only for trains.
 * @param vehicle
 * @param toggle
 */
export function networkUseHighPrecisionTrainBlending(vehicle: number, toggle: boolean): void { 
	return _in(0xec0c1d49, 0x22af9754, vehicle, toggle); 
}

export function networkUseLogarithmicBlendingThisFrame(entity: number): void { 
	return _in(0xcd71a4ec, 0xab22709e, entity); 
}

export function networkWaitingPopClearTutorialSession(): boolean { 
	return _in(0xb37e4e6a, 0x2388ca7b, _r); 
}

export function networkWasGameSuspended(): boolean { 
	return _in(0x4237e822, 0x315d8ba9, _r); 
}

export function networkYohanSourceGoods(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0x59498bc8, 0xb1c8b15c, p0, p1, p2, p3); 
}

/**
 * `radius` value is usually between `3f` and `7000f` in original 1868 scripts.
 * `p7` is 0, 1, 2, 3 or 4 used in decompiled scripts, 0 is by far the most common.
 * Returns True if success, used only 7 times in decompiled scripts of 1868
 * @param posX
 * @param posY
 * @param posZ
 * @param offsetX
 * @param offsetY
 * @param offsetZ
 * @param radius
 * @param p7
 */
export function newLoadSceneStart(posX: number, posY: number, posZ: number, offsetX: number, offsetY: number, offsetZ: number, radius: number, p7: number): boolean { 
	return _in(0x212a8d0d, 0x2babfac2, _fv(posX), _fv(posY), _fv(posZ), _fv(offsetX), _fv(offsetY), _fv(offsetZ), _fv(radius), p7, _r); 
}

export function newLoadSceneStartSphere(x: number, y: number, z: number, radius: number, p4: number): boolean { 
	return _in(0xaccfb4ac, 0xf53551b0, _fv(x), _fv(y), _fv(z), _fv(radius), p4, _r); 
}

export function newLoadSceneStop(): void { 
	return _in(0xc197616d, 0x221ff4a4); 
}

/**
 * p0 was always 2 in R* scripts.
 * Called before calling DISPLAY_ONSCREEN_KEYBOARD if the input needs to be saved.
 * @param p0
 */
export function nextOnscreenKeyboardResultWillDisplayUsingTheseFonts(p0: number): void { 
	return _in(0x3ed1438c, 0x1f5c6612, p0); 
}

/**
 * Lets objects spawn online simply do it like this:
 * 
 * int createdObject = OBJ_TO_NET(CREATE_OBJECT_NO_OFFSET(oball, pCoords.x, pCoords.y, pCoords.z, 1, 0, 0));
 * @param object
 */
export function objToNet(object: number): number { 
	return _in(0x99bfdc94, 0xa603e541, object, _r, _ri); 
}

/**
 * This loads the GTA:O dlc map parts (high end garages, apartments).
 * Works in singleplayer.
 * In order to use GTA:O heist IPL's you have to call this native with the following params: SET_INSTANCE_PRIORITY_MODE(1);
 */
export function onEnterMp(): void { 
	return _in(0x0888c350, 0x2dbbeef5); 
}

/**
 * Unloads GROUP_MAP (GTAO/MP) DLC data and loads GROUP_MAP_SP DLC. Neither are loaded by default, ON_ENTER_MP is a cognate to this function and loads MP DLC (and unloads SP DLC by extension).
 * Works in singleplayer.
 */
export function onEnterSp(): void { 
	return _in(0xd7c10c4a, 0x637992c9); 
}

/**
 * is this like setting is as no longer needed?
 * @param object
 */
export function onlyCleanUpObjectWhenOutOfRange(object: number): void { 
	return _in(0xadbe4809, 0xf19f927a, object); 
}

export function openAllBarriersForRace(p0: boolean): void { 
	return _in(0xc7f29ca0, 0x0f46350e, p0); 
}

export function openBombBayDoors(vehicle: number): void { 
	return _in(0x87e7f242, 0x70732cb1, vehicle); 
}

export function openCommerceStore(p0: string, p1: string, p2: number): void { 
	return _in(0x58c21165, 0xf6545892, _ts(p0), _ts(p1), p2); 
}

export function openOnlinePoliciesMenu(): void { 
	return _in(0x805d7cbb, 0x36fd6c4c); 
}

/**
 * patrolRoutes found in the b617d scripts:
 * "miss_Ass0",
 * "miss_Ass1",
 * "miss_Ass2",
 * "miss_Ass3",
 * "miss_Ass4",
 * "miss_Ass5",
 * "miss_Ass6",
 * "MISS_PATROL_6",
 * "MISS_PATROL_7",
 * "MISS_PATROL_8",
 * "MISS_PATROL_9",
 * "miss_Tower_01",
 * "miss_Tower_02",
 * "miss_Tower_03",
 * "miss_Tower_04",
 * "miss_Tower_05",
 * "miss_Tower_06",
 * "miss_Tower_07",
 * "miss_Tower_08",
 * "miss_Tower_10"
 * @param patrolRoute
 */
export function openPatrolRoute(patrolRoute: string): void { 
	return _in(0xa36bfb5e, 0xe89f3d82, _ts(patrolRoute)); 
}

/**
 * Shows a menu for reporting UGC content.
 */
export function openReportugcMenu(): void { 
	return _in(0x523a590c, 0x1a3cc0d3); 
}

export function openSequenceTask(taskSequenceId: number): number { 
	return _in(0xe8854a43, 0x26b9e12b, _ii(taskSequenceId)); 
}

/**
 * Uses the `SOCIAL_CLUB2` scaleform.
 * menu: GALLERY, MISSIONS, CREWS, MIGRATE, PLAYLISTS, JOBS
 * @param menu
 */
export function openSocialClubMenu(menu: number): void { 
	return _in(0x75d36917, 0x13c3b05a, _ch(menu)); 
}

export function orderBossVehicle(p0: number, p1: number, vehicleHash: number): void { 
	return _in(0xcea553e3, 0x5c2246e1, p0, p1, _ch(vehicleHash)); 
}

/**
 * Max value for p1 is 15.
 * @param cam
 * @param p1
 * @param p2
 * @param p3
 */
export function overrideCamSplineMotionBlur(cam: number, p1: number, p2: number, p3: number): void { 
	return _in(0x7dcf7c70, 0x8d292d55, cam, p1, _fv(p2), _fv(p3)); 
}

export function overrideCamSplineVelocity(cam: number, p1: number, p2: number, p3: number): void { 
	return _in(0x40b62fa0, 0x33eb0346, cam, p1, _fv(p2), _fv(p3)); 
}

export function overrideFreezeFlags(p0: boolean): void { 
	return _in(0xfa3ffb0e, 0xebc288a3, p0); 
}

export function overrideInteriorSmokeEnd(): void { 
	return _in(0xefb55e7c, 0x25d3b3be); 
}

export function overrideInteriorSmokeLevel(level: number): void { 
	return _in(0x1600fd8c, 0xf72ebc12, _fv(level)); 
}

export function overrideInteriorSmokeName(name: string): void { 
	return _in(0x2a2a5282, 0x4db96700, _ts(name)); 
}

/**
 * This allows you to override "extended distance scaling" setting. Needs to be called each frame.
 * Max scaling seems to be 200.0, normal is 1.0
 * See https://gfycat.com/DetailedHauntingIncatern
 * @param scaling
 */
export function overrideLodscaleThisFrame(scaling: number): void { 
	return _in(0xa76359fc, 0x80b2438e, _fv(scaling)); 
}

/**
 * Sets audio flag "OverrideMicrophoneSettings"
 * @param hash
 * @param toggle
 */
export function overrideMicrophoneSettings(hash: number, toggle: boolean): void { 
	return _in(0x75773e11, 0xba459e90, _ch(hash), toggle); 
}

export function overrideMpTextChatColor(p0: number, hudColor: number): void { 
	return _in(0xf47e567b, 0x3630dd12, p0, hudColor); 
}

export function overrideMpTextChatTeamString(gxtEntryHash: number): void { 
	return _in(0x6a1738b4, 0x323fe2d9, _ch(gxtEntryHash)); 
}

export function overrideNightvisionLightRange(p0: number): void { 
	return _in(0x43fa7cbe, 0x20dab219, _fv(p0)); 
}

/**
 * Overriding ped badge texture to a passed texture. It's synced between players (even custom textures!), don't forget to request used dict on *all* clients to make it sync properly. Can be removed by passing empty strings.
 * @param ped
 * @param txd
 * @param txn
 */
export function overridePedCrewLogoTexture(ped: number, txd: string, txn: string): boolean { 
	return _in(0x95eb5e34, 0xf821babe, ped, _ts(txd), _ts(txn), _r); 
}

/**
 * Used for helis.
 * @param vehicle
 * @param health
 */
export function overridePlaneDamageThrehsold(vehicle: number, health: number): void { 
	return _in(0x5ee5632f, 0x47ae9695, vehicle, _fv(health)); 
}

/**
 * Sets audio flag "OverridePlayerGroundMaterial"
 * @param hash
 * @param toggle
 */
export function overridePlayerGroundMaterial(hash: number, toggle: boolean): void { 
	return _in(0xd2cc78cd, 0x3d0b50f9, _ch(hash), toggle); 
}

/**
 * Only used once in the decompiled scripts. Seems to be related to scripted vehicle generators.
 * 
 * Modified example from "am_imp_exp.c4", line 6406:
 *  -- [[ popSchedules[0] = ZONE::GET_ZONE_POPSCHEDULE(ZONE::GET_ZONE_AT_COORDS(891.3, 807.9, 188.1));
 * etc.
 * ]] 
 * ZONE::OVERRIDE_POPSCHEDULE_VEHICLE_MODEL(popSchedules[index], vehicleHash);
 * STREAMING::REQUEST_MODEL(vehicleHash);
 * @param scheduleId
 * @param vehicleHash
 */
export function overridePopscheduleVehicleModel(scheduleId: number, vehicleHash: number): void { 
	return _in(0x5f7d596b, 0xac2e7777, scheduleId, _ch(vehicleHash)); 
}

export function overrideSaveHouse(p0: boolean, p1: number, p2: number, p3: number, p4: number, p5: boolean, p6: number, p7: number): boolean { 
	return _in(0x1162ea8a, 0xe9d24eea, p0, _fv(p1), _fv(p2), _fv(p3), _fv(p4), p5, _fv(p6), _fv(p7), _r); 
}

/**
 * This native enables the audio flag "TrevorRageIsOverridden" and sets the voice effect to `voiceEffect`
 * @param voiceEffect
 */
export function overrideTrevorRage(voiceEffect: string): void { 
	return _in(0x13ad6650, 0x62541a7e, _ts(voiceEffect)); 
}

export function overrideUnderwaterStream(p0: string, p1: boolean): void { 
	return _in(0xf2a9cdab, 0xcea04bd6, _ts(p0), p1); 
}

/**
 * Overrides the vehicle's horn hash.
 * When changing this hash on a vehicle, it will not return the 'overwritten' hash. It will still always return the default horn hash (same as GET_VEHICLE_DEFAULT_HORN)
 * 
 * vehicle - the vehicle whose horn should be overwritten
 * mute - p1 seems to be an option for muting the horn
 * p2 - maybe a horn id, since the function AUDIO::GET_VEHICLE_DEFAULT_HORN(veh) exists?
 * @param vehicle
 * @param override
 * @param hornHash
 */
export function overrideVehHorn(vehicle: number, override: boolean, hornHash: number): void { 
	return _in(0x3cdc1e62, 0x2cce0356, vehicle, override, hornHash); 
}

/**
 * Needs more research. Possibly used to calculate the "mask" when calling "STAT_SET_MASKED_INT"?
 * @param p0
 */
export function packedStatGetIntStatIndex(p0: number): number { 
	return _in(0x94f12abf, 0x9c79e339, p0, _r, _ri); 
}

/**
 * Return the local Participant ID
 */
export function participantId(): number { 
	return _in(0x90986e88, 0x76ce0a83, _r, _ri); 
}

/**
 * Return the local Participant ID.
 * 
 * This native is exactly the same as 'PARTICIPANT_ID' native.
 */
export function participantIdToInt(): number { 
	return _in(0x57a3bdda, 0xd8e5aa0a, _r, _ri); 
}

export function passKeyboardInputToScaleform(scaleformHandle: number): boolean { 
	return _in(0xd1c7cb17, 0x5e012964, scaleformHandle, _r); 
}

export function patchDecalDiffuseMap(decalType: number, textureDict: string, textureName: string): void { 
	return _in(0x8a35c742, 0x130c6080, decalType, _ts(textureDict), _ts(textureName)); 
}

export function pauseClock(toggle: boolean): void { 
	return _in(0x4055e40b, 0xd2dbec1d, toggle); 
}

export function pauseDeathArrestRestart(toggle: boolean): void { 
	return _in(0x2c2b3493, 0xfbf51c71, toggle); 
}

/**
 * Activates the specified frontend menu context.
 * pausemenu.xml defines some specific menu options using 'context'. Context is basically a 'condition'.
 * The `*ALL*` part of the context means that whatever is being defined, will be active when any or all of those conditions after `*ALL*` are met.
 * The `*NONE*` part of the context section means that whatever is being defined, will NOT be active if any or all of the conditions after `*NONE*` are met.
 * This basically allows you to hide certain menu sections, or things like instructional buttons.
 * @param contextHash
 */
export function pauseMenuActivateContext(contextHash: number): void { 
	return _in(0xdd564bdd, 0x0472c936, _ch(contextHash)); 
}

export function pauseMenuDeactivateContext(contextHash: number): void { 
	return _in(0x444d8cf2, 0x41ec25c5, _ch(contextHash)); 
}

export function pauseMenuGetHairColourIndex(): number { 
	return _in(0xde03620f, 0x8703a9df, _r, _ri); 
}

export function pauseMenuGetMouseClickEvent(): [boolean, number, number, number] { 
	const [retval, p0_out, p1_out, p2_out] = _in(0xc8e10711, 0x77a23be5, _i, _i, _i, _r);
	return [retval as boolean, p0_out as number, p1_out as number, p2_out as number]; 
}

export function pauseMenuGetMouseHoverIndex(): number { 
	return _in(0x359af31a, 0x4b52f5ed, _r, _ri); 
}

export function pauseMenuGetMouseHoverUniqueId(): number { 
	return _in(0x13c4b962, 0x653a5280, _r, _ri); 
}

export function pauseMenuIsContextActive(contextHash: number): boolean { 
	return _in(0x84698ab3, 0x8d0c6636, _ch(contextHash), _r); 
}

export function pauseMenuIsContextMenuActive(): boolean { 
	return _in(0x2a25adc4, 0x8f87841f, _r); 
}

export function pauseMenuRedrawInstructionalButtons(p0: number): void { 
	return _in(0x4895bdea, 0x16e7c080, p0); 
}

export function pauseMenuSetBusySpinner(p0: boolean, position: number, spinnerIndex: number): void { 
	return _in(0xc78e239a, 0xc5b2ddb9, p0, position, spinnerIndex); 
}

export function pauseMenuSetWarnOnTabChange(p0: boolean): void { 
	return _in(0xf06ebb91, 0xa81e09e3, p0); 
}

export function pauseMenuceptionGoDeeper(page: number): void { 
	return _in(0x77f16b44, 0x7824da6c, page); 
}

export function pauseMenuceptionTheKick(): void { 
	return _in(0xcdca26e8, 0x0faecb8f); 
}

export function pausePlaybackRecordedVehicle(vehicle: number): void { 
	return _in(0x632a689b, 0xf42301b1, vehicle); 
}

export function pauseScriptedConversation(p0: boolean): void { 
	return _in(0x8530ad77, 0x6cd72b12, p0); 
}

export function pauseToggleFullscreenMap(p0: number): void { 
	return _in(0x2de6c5e2, 0xe996f178, p0); 
}

/**
 * Checks if the specified sexiness flag is set
 * 
 * enum eSexinessFlags
 * {
 * SF_JEER_AT_HOT_PED = 0,
 * SF_HURRIEDFEMALES_SEXY = 1,
 * SF_HOT_PERSON = 2,
 * };
 * @param ped
 * @param sexinessFlag
 */
export function pedHasSexinessFlagSet(ped: number, sexinessFlag: number): boolean { 
	return _in(0x46b05bca, 0xe43856b0, ped, sexinessFlag, _r); 
}

export function pedHasUseScenarioTask(ped: number): boolean { 
	return _in(0x295e3cce, 0xc879ccd7, ped, _r); 
}

/**
 * gets the network id of a ped
 * @param ped
 */
export function pedToNet(ped: number): number { 
	return _in(0x0edec3c2, 0x76198689, ped, _r, _ri); 
}

export function phonephotoeditorIsActive(): boolean { 
	return _in(0xbcedb009, 0x461da156, _r); 
}

export function phonephotoeditorSetFrameTxd(textureDict: string, p1: boolean): boolean { 
	return _in(0x27feb525, 0x4759cde3, _ts(textureDict), p1, _r); 
}

export function phonephotoeditorToggle(p0: boolean): boolean { 
	return _in(0x7ac24eab, 0x6d74118d, p0, _r); 
}

export function pinInteriorInMemory(interior: number): void { 
	return _in(0x2ca429c0, 0x29ccf247, interior); 
}

export function pinRopeVertex(ropeId: number, vertex: number, x: number, y: number, z: number): void { 
	return _in(0x2b320cf1, 0x4146b69a, ropeId, vertex, _fv(x), _fv(y), _fv(z)); 
}

export function placeObjectOnGroundOrObjectProperly(object: number): boolean { 
	return _in(0xd76eeef7, 0x46057fd6, object, _r); 
}

export function placeObjectOnGroundProperly(object: number): boolean { 
	return _in(0x58a850ea, 0xee20faa3, object, _r); 
}

/**
 * Full list of speeches and voices names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/speeches.json
 * @param speechName
 * @param voiceName
 * @param x
 * @param y
 * @param z
 * @param speechParam
 */
export function playAmbientSpeechFromPositionNative(speechName: string, voiceName: string, x: number, y: number, z: number, speechParam: string): void { 
	return _in(0xed640017, 0xed337e45, _ts(speechName), _ts(voiceName), _fv(x), _fv(y), _fv(z), _ts(speechParam)); 
}

/**
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param ped
 * @param animDict
 * @param animName
 */
export function playAnimOnRunningScenario(ped: number, animDict: string, animName: string): void { 
	return _in(0x74804046, 0x0f8df5dc, ped, _ts(animDict), _ts(animName)); 
}

/**
 * Plays sounds from a ped with chop model. For example it used to play bark or sniff sounds. p1 is always 3 or 4294967295 in decompiled scripts. By a quick disassembling I can assume that this arg is unused.
 * This native is works only when you call it on the ped with right model (ac_chop only ?)
 * Speech Name can be: CHOP_SNIFF_SEQ CHOP_WHINE CHOP_LICKS_MOUTH CHOP_PANT bark GROWL SNARL BARK_SEQ
 * @param pedHandle
 * @param p1
 * @param speechName
 */
export function playAnimalVocalization(pedHandle: number, p1: number, speechName: string): void { 
	return _in(0xee066c70, 0x06c49c0a, pedHandle, p1, _ts(speechName)); 
}

export function playBinkMovie(binkMovie: number): void { 
	return _in(0x70d2cc8a, 0x542a973c, binkMovie); 
}

/**
 * Atleast one time in a script for the zRot Rockstar uses GET_ENTITY_HEADING to help fill the parameter.
 * 
 * p9 is unknown at this time.
 * p10 throughout all the X360 Scripts is always 2.
 * 
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param cam
 * @param animName
 * @param animDictionary
 * @param x
 * @param y
 * @param z
 * @param xRot
 * @param yRot
 * @param zRot
 * @param p9
 * @param p10
 */
export function playCamAnim(cam: number, animName: string, animDictionary: string, x: number, y: number, z: number, xRot: number, yRot: number, zRot: number, p9: boolean, p10: number): boolean { 
	return _in(0x9a2d0fb2, 0xe7852392, cam, _ts(animName), _ts(animDictionary), _fv(x), _fv(y), _fv(z), _fv(xRot), _fv(yRot), _fv(zRot), p9, p10, _r); 
}

/**
 * Only call found in the b617d scripts:
 * 
 * AUDIO::PLAY_DEFERRED_SOUND_FRONTEND("BACK", "HUD_FREEMODE_SOUNDSET");
 * 
 * Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json
 * @param soundName
 * @param soundsetName
 */
export function playDeferredSoundFrontend(soundName: string, soundsetName: string): void { 
	return _in(0xcada5a0d, 0x0702381e, _ts(soundName), _ts(soundsetName)); 
}

export function playEndCreditsMusic(play: boolean): void { 
	return _in(0xcd536c4d, 0x33dcc900, play); 
}

/**
 * delta and bitset are guessed fields. They are based on the fact that most of the calls have 0 or nil field types passed in.
 * 
 * The only time bitset has a value is 0x4000 and the only time delta has a value is during stealth with usually <1.0f values.
 * 
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param entity
 * @param animName
 * @param animDict
 * @param p3
 * @param loop
 * @param stayInAnim
 * @param p6
 * @param delta
 * @param bitset
 */
export function playEntityAnim(entity: number, animName: string, animDict: string, p3: number, loop: boolean, stayInAnim: boolean, p6: boolean, delta: number, bitset: number): boolean { 
	return _in(0x7fb21826, 0x2b810701, entity, _ts(animName), _ts(animDict), _fv(p3), loop, stayInAnim, p6, _fv(delta), bitset, _r); 
}

export function playEntityScriptedAnim(entity: number, blendInDelta: number, blendOutDelta: number): [number, number, number] { 
	const [priorityLowData_out, priorityMidData_out, priorityHighData_out] = _in(0x77a1eec5, 0x47e7fcf1, entity, _i, _i, _i, _fv(blendInDelta), _fv(blendOutDelta));
	return [priorityLowData_out as number, priorityMidData_out as number, priorityHighData_out as number]; 
}

/**
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param ped
 * @param animName
 * @param animDict
 */
export function playFacialAnim(ped: number, animName: string, animDict: string): void { 
	return _in(0xe1e65ca8, 0xac9c00ed, ped, _ts(animName), _ts(animDict)); 
}

/**
 * Called 38 times in the scripts. There are 5 different audioNames used.
 * One unknown removed below.
 * 
 * AUDIO::PLAY_MISSION_COMPLETE_AUDIO("DEAD");
 * AUDIO::PLAY_MISSION_COMPLETE_AUDIO("FRANKLIN_BIG_01");
 * AUDIO::PLAY_MISSION_COMPLETE_AUDIO("GENERIC_FAILED");
 * AUDIO::PLAY_MISSION_COMPLETE_AUDIO("TREVOR_SMALL_01");
 * @param audioName
 */
export function playMissionCompleteAudio(audioName: string): void { 
	return _in(0xb138aab8, 0xa70d3c69, _ts(audioName)); 
}

export function playObjectAutoStartAnim(p0: number): void { 
	return _in(0x006e4b04, 0x0ed37ec3, p0); 
}

/**
 * Needs another parameter [int p2]. The signature is PED::PLAY_PAIN(Ped ped, int painID, int p1, int p2);
 * 
 * Last 2 parameters always seem to be 0.
 * 
 * EX: Function.Call(Hash.PLAY_PAIN, TestPed, 6, 0, 0);
 * 
 * Known Pain IDs
 * ________________________
 * 
 * 1 - Doesn't seem to do anything. Does NOT crash the game like previously said. (Latest patch)
 * 6 - Scream (Short)
 * 7 - Scared Scream (Kinda Long)
 * 8 - On Fire
 * 
 * @param ped
 * @param painID
 * @param p1
 * @param p3
 */
export function playPain(ped: number, painID: number, p1: number, p3: number): void { 
	return _in(0xbc9ae166, 0x038a5cec, ped, painID, p1, p3); 
}

/**
 * Plays ambient speech. See also _0x5C57B85D.
 * 
 * See PLAY_PED_AMBIENT_SPEECH_NATIVE for parameter specifications.
 * 
 * Full list of speeches and voices names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/speeches.json
 * @param ped
 * @param speechName
 * @param speechParam
 * @param p3
 */
export function playPedAmbientSpeechAndCloneNative(ped: number, speechName: string, speechParam: string, p3: number): void { 
	return _in(0xc6941b4a, 0x3a8fbbb9, ped, _ts(speechName), _ts(speechParam), p3); 
}

/**
 * Plays ambient speech. See also _0x444180DB.
 * 
 * ped: The ped to play the ambient speech.
 * speechName: Name of the speech to play, eg. "GENERIC_HI".
 * speechParam: Can be one of the following:
 * SPEECH_PARAMS_STANDARD
 * SPEECH_PARAMS_ALLOW_REPEAT
 * SPEECH_PARAMS_BEAT
 * SPEECH_PARAMS_FORCE
 * SPEECH_PARAMS_FORCE_FRONTEND
 * SPEECH_PARAMS_FORCE_NO_REPEAT_FRONTEND
 * SPEECH_PARAMS_FORCE_NORMAL
 * SPEECH_PARAMS_FORCE_NORMAL_CLEAR
 * SPEECH_PARAMS_FORCE_NORMAL_CRITICAL
 * SPEECH_PARAMS_FORCE_SHOUTED
 * SPEECH_PARAMS_FORCE_SHOUTED_CLEAR
 * SPEECH_PARAMS_FORCE_SHOUTED_CRITICAL
 * SPEECH_PARAMS_FORCE_PRELOAD_ONLY
 * SPEECH_PARAMS_MEGAPHONE
 * SPEECH_PARAMS_HELI
 * SPEECH_PARAMS_FORCE_MEGAPHONE
 * SPEECH_PARAMS_FORCE_HELI
 * SPEECH_PARAMS_INTERRUPT
 * SPEECH_PARAMS_INTERRUPT_SHOUTED
 * SPEECH_PARAMS_INTERRUPT_SHOUTED_CLEAR
 * SPEECH_PARAMS_INTERRUPT_SHOUTED_CRITICAL
 * SPEECH_PARAMS_INTERRUPT_NO_FORCE
 * SPEECH_PARAMS_INTERRUPT_FRONTEND
 * SPEECH_PARAMS_INTERRUPT_NO_FORCE_FRONTEND
 * SPEECH_PARAMS_ADD_BLIP
 * SPEECH_PARAMS_ADD_BLIP_ALLOW_REPEAT
 * SPEECH_PARAMS_ADD_BLIP_FORCE
 * SPEECH_PARAMS_ADD_BLIP_SHOUTED
 * SPEECH_PARAMS_ADD_BLIP_SHOUTED_FORCE
 * SPEECH_PARAMS_ADD_BLIP_INTERRUPT
 * SPEECH_PARAMS_ADD_BLIP_INTERRUPT_FORCE
 * SPEECH_PARAMS_FORCE_PRELOAD_ONLY_SHOUTED
 * SPEECH_PARAMS_FORCE_PRELOAD_ONLY_SHOUTED_CLEAR
 * SPEECH_PARAMS_FORCE_PRELOAD_ONLY_SHOUTED_CRITICAL
 * SPEECH_PARAMS_SHOUTED
 * SPEECH_PARAMS_SHOUTED_CLEAR
 * SPEECH_PARAMS_SHOUTED_CRITICAL
 * 
 * Note: A list of Name and Parameters can be found here https://pastebin.com/1GZS5dCL
 * 
 * Full list of speeches and voices names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/speeches.json
 * @param ped
 * @param speechName
 * @param speechParam
 * @param p3
 */
export function playPedAmbientSpeechNative(ped: number, speechName: string, speechParam: string, p3: number): void { 
	return _in(0x8e04fedd, 0x28d42462, ped, _ts(speechName), _ts(speechParam), p3); 
}

/**
 * This is the same as PLAY_PED_AMBIENT_SPEECH_NATIVE and PLAY_PED_AMBIENT_SPEECH_AND_CLONE_NATIVE but it will allow you to play a speech file from a specific voice file. It works on players and all peds, even animals.
 * 
 * EX (C#):
 * GTA.Native.Function.Call(Hash.PLAY_PED_AMBIENT_SPEECH_WITH_VOICE_NATIVE, Game.Player.Character, "GENERIC_INSULT_HIGH", "s_m_y_sheriff_01_white_full_01", "SPEECH_PARAMS_FORCE_SHOUTED", 0);
 * 
 * The first param is the ped you want to play it on, the second is the speech name, the third is the voice name, the fourth is the speech param, and the last param is usually always 0.
 * 
 * Full list of speeches and voices names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/speeches.json
 * @param ped
 * @param speechName
 * @param voiceName
 * @param speechParam
 * @param p4
 */
export function playPedAmbientSpeechWithVoiceNative(ped: number, speechName: string, voiceName: string, speechParam: string, p4: boolean): void { 
	return _in(0x35236342, 0x55fc3318, ped, _ts(speechName), _ts(voiceName), _ts(speechParam), p4); 
}

/**
 * All found occurrences in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/RFb4GTny
 * 
 * AUDIO::PLAY_PED_RINGTONE("Remote_Ring", PLAYER::PLAYER_PED_ID(), 1);
 * AUDIO::PLAY_PED_RINGTONE("Dial_and_Remote_Ring", PLAYER::PLAYER_PED_ID(), 1);
 * 
 * @param ringtoneName
 * @param ped
 * @param p2
 */
export function playPedRingtone(ringtoneName: string, ped: number, p2: boolean): void { 
	return _in(0xf9e56683, 0xca8e11a5, _ts(ringtoneName), ped, p2); 
}

/**
 * Plays the given police radio message.
 * 
 * All found occurrences in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/GBnsQ5hr
 * Full list of police report names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/policeReportNames.json
 * @param name
 * @param p1
 */
export function playPoliceReport(name: string, p1: number): number { 
	return _in(0xdfebd56d, 0x9bd1eb16, _ts(name), _fv(p1), _r, _ri); 
}

/**
 * All found occurrences in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/A8Ny8AHZ
 * 
 * Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json
 * @param soundId
 * @param audioName
 * @param audioRef
 * @param p3
 * @param p4
 * @param p5
 */
export function playSound(soundId: number, audioName: string, audioRef: string, p3: boolean, p4: number, p5: boolean): void { 
	return _in(0x7ff4944c, 0xc209192d, soundId, _ts(audioName), _ts(audioRef), p3, p4, p5); 
}

/**
 * All found occurrences in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/eeFc5DiW
 * 
 * gtaforums.com/topic/795622-audio-for-mods
 * 
 * Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json
 * @param soundId
 * @param audioName
 * @param x
 * @param y
 * @param z
 * @param audioRef
 * @param isNetwork
 * @param range
 * @param p8
 */
export function playSoundFromCoord(soundId: number, audioName: string, x: number, y: number, z: number, audioRef: string, isNetwork: boolean, range: number, p8: boolean): void { 
	return _in(0x8d8686b6, 0x22b88120, soundId, _ts(audioName), _fv(x), _fv(y), _fv(z), _ts(audioRef), isNetwork, range, p8); 
}

/**
 * All found occurrences in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/f2A7vTj0
 * No changes made in b678d.
 * 
 * gtaforums.com/topic/795622-audio-for-mods
 * 
 * Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json
 * @param soundId
 * @param audioName
 * @param entity
 * @param audioRef
 * @param isNetwork
 * @param p5
 */
export function playSoundFromEntity(soundId: number, audioName: string, entity: number, audioRef: string, isNetwork: boolean, p5: number): void { 
	return _in(0xe65f427e, 0xb70ab1ed, soundId, _ts(audioName), entity, _ts(audioRef), isNetwork, p5); 
}

/**
 * Only used with "formation_flying_blips_soundset" and "biker_formation_blips_soundset".
 * p1 is always the model of p2
 * @param soundId
 * @param model
 * @param entity
 * @param soundSetHash
 * @param p4
 * @param p5
 */
export function playSoundFromEntityHash(soundId: number, model: number, entity: number, soundSetHash: number, p4: number, p5: number): void { 
	return _in(0x5b985329, 0x6731e88d, soundId, _ch(model), entity, _ch(soundSetHash), p4, p5); 
}

/**
 * List: https://pastebin.com/DCeRiaLJ
 * 
 * All occurrences as of Cayo Perico Heist DLC (b2189), sorted alphabetically and identical lines removed: https://git.io/JtLxM
 * 
 * Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json
 * @param soundId
 * @param audioName
 * @param audioRef
 * @param p3
 */
export function playSoundFrontend(soundId: number, audioName: string, audioRef: string, p3: boolean): void { 
	return _in(0x67c540aa, 0x08e4a6f5, soundId, _ts(audioName), _ts(audioRef), p3); 
}

/**
 * Used with AUDIO::LOAD_STREAM
 * 
 * Example from finale_heist2b.c4:
 * TASK::TASK_SYNCHRONIZED_SCENE(l_4C8[2 -- [[14]] ], l_4C8[2 -- [[14]] ]._f7, l_30A, "push_out_vault_l", 4.0, -1.5, 5, 713, 4.0, 0);
 * PED::SET_SYNCHRONIZED_SCENE_PHASE(l_4C8[2 -- [[14]] ]._f7, 0.0);
 * PED::FORCE_PED_AI_AND_ANIMATION_UPDATE(l_4C8[2 -- [[14]] ], 0, 0);
 * PED::SET_PED_COMBAT_ATTRIBUTES(l_4C8[2 -- [[14]] ], 38, 1);
 * PED::SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(l_4C8[2 -- [[14]] ], 1);
 * if (AUDIO::LOAD_STREAM("Gold_Cart_Push_Anim_01", "BIG_SCORE_3B_SOUNDS")) {
 * AUDIO::PLAY_STREAM_FROM_OBJECT(l_36F[0 -- [[1]] ]);
 * }
 * @param object
 */
export function playStreamFromObject(object: number): void { 
	return _in(0xebaa9b64, 0xd76356fd, object); 
}

export function playStreamFromPed(ped: number): void { 
	return _in(0x89049dd6, 0x3c08b5d1, ped); 
}

export function playStreamFromPosition(x: number, y: number, z: number): void { 
	return _in(0x21442f41, 0x2e8de56b, _fv(x), _fv(y), _fv(z)); 
}

export function playStreamFromVehicle(vehicle: number): void { 
	return _in(0xb70374a7, 0x58007dfa, vehicle); 
}

export function playStreamFrontend(): void { 
	return _in(0x58fce434, 0x88f9f5f4); 
}

export function playSynchronizedAudioEvent(sceneID: number): boolean { 
	return _in(0x8b2fd456, 0x0e55dd2d, sceneID, _r); 
}

/**
 * Examples:
 * 
 * CAM::PLAY_SYNCHRONIZED_CAM_ANIM(l_2734, NETWORK::NETWORK_GET_LOCAL_SCENE_FROM_NETWORK_ID(l_2739), "PLAYER_EXIT_L_CAM", "mp_doorbell");
 * 
 * CAM::PLAY_SYNCHRONIZED_CAM_ANIM(l_F0D[7 -- [[1]] ], l_F4D[15 -- [[1]] ], "ah3b_attackheli_cam2", "missheistfbi3b_helicrash");
 * @param p0
 * @param p1
 * @param animName
 * @param animDictionary
 */
export function playSynchronizedCamAnim(p0: number, p1: number, animName: string, animDictionary: string): boolean { 
	return _in(0xe32efe9a, 0xb4a9aa0c, p0, p1, _ts(animName), _ts(animDictionary), _r); 
}

/**
 * p4 and p7 are usually 1000.0f.
 * 
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param entity
 * @param syncedScene
 * @param animation
 * @param propName
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 */
export function playSynchronizedEntityAnim(entity: number, syncedScene: number, animation: string, propName: string, p4: number, p5: number, p6: number, p7: number): boolean { 
	return _in(0xc77720a1, 0x2fe14a86, entity, syncedScene, _ts(animation), _ts(propName), _fv(p4), _fv(p5), p6, _fv(p7), _r); 
}

/**
 * p6,p7 probably animname and animdict
 * 
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param p6
 * @param p7
 * @param p8
 * @param p9
 * @param p10
 * @param p11
 */
export function playSynchronizedMapEntityAnim(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, p6: string, p7: string, p8: number, p9: number, p10: number, p11: number): boolean { 
	return _in(0xb9c54555, 0xed30fbc4, _fv(x1), _fv(y1), _fv(z1), _fv(x2), y2, _fv(z2), _ts(p6), _ts(p7), _fv(p8), _fv(p9), p10, _fv(p11), _r); 
}

export function playTennisDiveAnim(ped: number, p1: number, p2: number, p3: number, p4: number, p5: boolean): void { 
	return _in(0x8fa9c42f, 0xc5d7c64b, ped, p1, _fv(p2), _fv(p3), _fv(p4), p5); 
}

/**
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param ped
 * @param animDict
 * @param animName
 * @param p3
 * @param p4
 * @param p5
 */
export function playTennisSwingAnim(ped: number, animDict: string, animName: string, p3: number, p4: number, p5: boolean): void { 
	return _in(0xe266ed23, 0x311f24d4, ped, _ts(animDict), _ts(animName), _fv(p3), _fv(p4), p5); 
}

/**
 * doorId: see SET_VEHICLE_DOOR_SHUT
 * @param vehicle
 * @param doorId
 */
export function playVehicleDoorCloseSound(vehicle: number, doorId: number): void { 
	return _in(0x62a456aa, 0x4769ef34, vehicle, doorId); 
}

/**
 * doorId: see SET_VEHICLE_DOOR_SHUT
 * @param vehicle
 * @param doorId
 */
export function playVehicleDoorOpenSound(vehicle: number, doorId: number): void { 
	return _in(0x3a539d52, 0x857ea82d, vehicle, doorId); 
}

/**
 * Only 1 match. ob_sofa_michael.
 * 
 * PLAYER::PLAYER_ATTACH_VIRTUAL_BOUND(-804.5928f, 173.1801f, 71.68436f, 0f, 0f, 0.590625f, 1f, 0.7f);1.0.335.2, 1.0.350.1/2, 1.0.372.2, 1.0.393.2, 1.0.393.4, 1.0.463.1;
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 */
export function playerAttachVirtualBound(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number): void { 
	return _in(0xed51733d, 0xc73aed51, _fv(p0), _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), _fv(p6), _fv(p7)); 
}

/**
 * 1.0.335.2, 1.0.350.1/2, 1.0.372.2, 1.0.393.2, 1.0.393.4, 1.0.463.1;
 */
export function playerDetachVirtualBound(): void { 
	return _in(0x1dd5897e, 0x2fa6e7c9); 
}

/**
 * This returns YOUR 'identity' as a Player type.
 * 
 * Always returns 0 in story mode.
 */
export function playerId(): number { 
	return _in(0x4f8644af, 0x03d0e0d6, _r, _ri); 
}

/**
 * Returns current player ped
 */
export function playerPedId(): number { 
	return _in(0xd80958fc, 0x74e988a6, _r, _ri); 
}

export function playstatsAbandonedMc(p0: number, p1: number, p2: number, p3: number, p4: number): void { 
	return _in(0xd558bec0, 0xbba7e8d2, p0, p1, p2, p3, p4); 
}

export function playstatsAcidMissionEnd(p0: number): void { 
	return _in(0x8a23d132, 0x4f6b2bac, p0); 
}

export function playstatsAcidRnd(p0: number): void { 
	return _in(0xceaccf05, 0x50fdc5ba, p0); 
}

export function playstatsAcquiredHiddenPackage(p0: number): void { 
	return _in(0x79ab33f0, 0xfbfac40c, p0); 
}

export function playstatsActivityDone(p0: number, activityId: number, p2: number): void { 
	return _in(0xa071e0ed, 0x98f91286, p0, activityId, p2); 
}

export function playstatsAlert(data: number): number { 
	return _in(0x5649ca22, 0xaf74e019, _ii(data)); 
}

export function playstatsAppendDirectorMetric(p0: number): number { 
	return _in(0x46326e13, 0xda4e0546, _ii(p0)); 
}

export function playstatsArcadeCabinet(p0: number): void { 
	return _in(0xf9096193, 0xdf1f99d4, p0); 
}

export function playstatsArcadeGame(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): void { 
	return _in(0x533a7d1e, 0xa58df958, p0, p1, p2, p3, p4, p5, p6); 
}

export function playstatsArcadeLoveMatch(p0: number, p1: number): void { 
	return _in(0x4fcdbd3f, 0x0a813c25, p0, p1); 
}

export function playstatsArenaWarsEnded(data: number): number { 
	return _in(0xb479d9f0, 0xd48a1bc5, _ii(data)); 
}

export function playstatsArenaWarsSpectator(p0: number, p1: number, p2: number, p3: number, p4: number): void { 
	return _in(0x6f4f5997, 0x53f8200a, p0, p1, p2, p3, p4); 
}

export function playstatsAttritionStageEnd(p0: number): void { 
	return _in(0xbd642335, 0xa732f1a8, p0); 
}

export function playstatsAwardBadSport(id: number): void { 
	return _in(0x47b32f56, 0x11e6e483, id); 
}

export function playstatsAwardNav(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0x70f52471, 0xe758ebae, p0, p1, p2, p3); 
}

export function playstatsAwardXp(amount: number, type: number, category: number): void { 
	return _in(0x46f917f6, 0xb4128fe4, amount, _ch(type), _ch(category)); 
}

export function playstatsBackgroundScriptAction(action: string, value: number): void { 
	return _in(0x5009dfd7, 0x41329729, _ts(action), value); 
}

export function playstatsBanAlert(p0: number): void { 
	return _in(0x516fc96e, 0xb88eefe5, p0); 
}

export function playstatsBcCarJacking(p0: number): void { 
	return _in(0x7b18da61, 0xf6bae9d5, p0); 
}

export function playstatsBcCashing(p0: number): void { 
	return _in(0x53cae13e, 0x9b426993, p0); 
}

export function playstatsBcFindersKeepers(p0: number): void { 
	return _in(0xe3261d79, 0x1eb44acb, p0); 
}

export function playstatsBcMostWanted(p0: number): void { 
	return _in(0x930f5042, 0x03f561c9, p0); 
}

export function playstatsBcPointToPoint(p0: number): void { 
	return _in(0x73001e34, 0xf85137f8, p0); 
}

export function playstatsBcProtectionRacket(p0: number): void { 
	return _in(0x14eda9ee, 0x27bd1626, p0); 
}

export function playstatsBcSalvage(p0: number): void { 
	return _in(0x7d362911, 0x61859389, p0); 
}

export function playstatsBcSmashAndGrab(p0: number): void { 
	return _in(0x06eaf70a, 0xe066441e, p0); 
}

export function playstatsBusinessBattleEnded(p0: number): void { 
	return _in(0x316db59c, 0xd14c1774, p0); 
}

export function playstatsBuyContrabandMission(data: number): number { 
	return _in(0xd6781e42, 0x755531f7, _ii(data)); 
}

export function playstatsBwAirFreight(p0: number): void { 
	return _in(0xf06a6f41, 0xcb445443, p0); 
}

export function playstatsBwAssault(p0: number): void { 
	return _in(0x678f86d8, 0xfc040bdb, p0); 
}

export function playstatsBwBellyOfTheBeast(p0: number): void { 
	return _in(0xa6f54bb2, 0xffca35ea, p0); 
}

export function playstatsBwBossonbossdeathmatch(p0: number): void { 
	return _in(0x8d8adb56, 0x2f09a245, p0); 
}

export function playstatsBwFragileGoods(p0: number): void { 
	return _in(0x282b6739, 0x644f4347, p0); 
}

export function playstatsBwHeadHunter(p0: number): void { 
	return _in(0x5ff2c33b, 0x13a02a11, p0); 
}

export function playstatsBwHuntTheBoss(p0: number): void { 
	return _in(0x88087ee1, 0xf28024ae, p0); 
}

export function playstatsBwSightseer(p0: number): void { 
	return _in(0xfcc228e0, 0x7217fcac, p0); 
}

export function playstatsBwYatchattack(p0: number): void { 
	return _in(0xd1a1ee3b, 0x4fa8e760, p0); 
}

export function playstatsCarclubChallenge(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0x1187cb58, 0xd7f3bed7, p0, p1, p2, p3); 
}

export function playstatsCarclubPoints(p0: number): void { 
	return _in(0xff14d6fe, 0xec507bbe, p0); 
}

export function playstatsCarclubPrize(p0: number, vehicleModel: number): void { 
	return _in(0x69c922b6, 0x77621428, p0, _ch(vehicleModel)); 
}

export function playstatsCasinoBlackjack(p0: number): void { 
	return _in(0x3eae9730, 0x9727e7ad, p0); 
}

export function playstatsCasinoBlackjackLight(p0: number): void { 
	return _in(0xd5451c7b, 0xf151eb6f, p0); 
}

export function playstatsCasinoChip(p0: number): void { 
	return _in(0x0999f3f0, 0x90ec5012, p0); 
}

export function playstatsCasinoInsideTrack(p0: number): void { 
	return _in(0x049f0596, 0x25058a86, p0); 
}

export function playstatsCasinoInsideTrackLight(p0: number): void { 
	return _in(0x23a3cbcd, 0x50d54e47, p0); 
}

export function playstatsCasinoLuckySeven(p0: number): void { 
	return _in(0x0c432c14, 0x35f5e4fa, p0); 
}

export function playstatsCasinoRoulette(p0: number): void { 
	return _in(0x95101c44, 0x3a84e7f1, p0); 
}

export function playstatsCasinoRouletteLight(p0: number): void { 
	return _in(0x6572aba3, 0xde1197fc, p0); 
}

export function playstatsCasinoSlotMachine(p0: number): void { 
	return _in(0xef5ec67d, 0x392b830a, p0); 
}

export function playstatsCasinoSlotMachineLight(p0: number): void { 
	return _in(0xe60054a0, 0xfae8227f, p0); 
}

export function playstatsCasinoStoryMissionEnded(p0: number, p1: number): void { 
	return _in(0xfcccac2b, 0xd3c1f180, p0, p1); 
}

export function playstatsCasinoThreeCardPoker(p0: number): void { 
	return _in(0xf740fb33, 0x9d471c35, p0); 
}

export function playstatsCasinoThreeCardPokerLight(p0: number): void { 
	return _in(0xc9001364, 0xb4388f22, p0); 
}

export function playstatsChangeMcOutfit(p0: number, p1: number, p2: number, p3: number, p4: number): void { 
	return _in(0x28ecb8ac, 0x2f607db2, p0, p1, p2, p3, p4); 
}

export function playstatsChangeMcRole(p0: number, p1: number, p2: number, p3: number, role: number, p5: number, p6: number): void { 
	return _in(0x0b565b0a, 0xae56a0e8, p0, p1, p2, p3, role, p5, p6); 
}

export function playstatsCheatApplied(cheat: string): void { 
	return _in(0x6058665d, 0x72302d3f, _ts(cheat)); 
}

export function playstatsClothChange(p0: number, p1: number, p2: number, p3: number, p4: number): void { 
	return _in(0x34b97304, 0x7a2268b9, p0, p1, p2, p3, p4); 
}

export function playstatsCollectiblePickedUp(p0: number, objectHash: number, p2: number, p3: number, moneyAmount: number, rpAmount: number, chipsAmount: number, p7: number, p8: number, p9: number, p10: number): void { 
	return _in(0xcd0a8a93, 0x38681cf2, p0, _ch(objectHash), p2, p3, moneyAmount, rpAmount, chipsAmount, p7, p8, p9, p10); 
}

export function playstatsCopyRankIntoNewSlot(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): void { 
	return _in(0xb7257ba2, 0x550ea10a, p0, p1, p2, p3, p4, p5, p6); 
}

export function playstatsCrateCreated(p0: number, p1: number, p2: number): void { 
	return _in(0xafc7e5e0, 0x75a96f46, _fv(p0), _fv(p1), _fv(p2)); 
}

export function playstatsCrateDropMissionDone(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number): void { 
	return _in(0x1cae5d2e, 0x3f9a07f0, p0, p1, p2, p3, p4, p5, p6, p7); 
}

export function playstatsCreateMatchHistoryId2(): [boolean, number, number] { 
	const [retval, playerAccountId_out, posixTime_out] = _in(0x6dee77af, 0xf8c21bd1, _i, _i, _r);
	return [retval as boolean, playerAccountId_out as number, posixTime_out as number]; 
}

export function playstatsDarCheckpoint(data: number): number { 
	return _in(0x0bc254ff, 0x3a911501, _ii(data)); 
}

export function playstatsDefendContrabandMission(data: number): number { 
	return _in(0x2605663b, 0xd4f23b5d, _ii(data)); 
}

export function playstatsDjMissionEnded(p0: number): void { 
	return _in(0xd6ca58b3, 0xb53a0f22, p0); 
}

export function playstatsDjUsage(p0: number, p1: number): void { 
	return _in(0xb26f6706, 0x85631727, p0, p1); 
}

export function playstatsDroneUsage(p0: number, p1: number, p2: number): void { 
	return _in(0x66c7bb24, 0x16ed3fce, p0, p1, p2); 
}

export function playstatsDupeDetected(data: number): number { 
	return _in(0x848b6610, 0x0ee33b05, _ii(data)); 
}

export function playstatsEarnedMcPoints(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number): void { 
	return _in(0x50147885, 0x5a6074ce, p0, p1, p2, p3, p4, p5); 
}

export function playstatsEnterSessionPack(data: number): number { 
	return _in(0x878ff156, 0xd36e9956, _ii(data)); 
}

export function playstatsExtraEvent(p0: number): void { 
	return _in(0xfa5b74ba, 0xb8a7ef99, p0); 
}

export function playstatsFastTrvl(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number, p10: number): void { 
	return _in(0x4dc416f2, 0x46a41fc8, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10); 
}

export function playstatsFlowHigh(posX: number, posY: number, posZ: number, action: string, p4: boolean, p5: number): void { 
	return _in(0xcfb0e9c3, 0x456319ea, _fv(posX), _fv(posY), _fv(posZ), _ts(action), p4, p5); 
}

export function playstatsFlowLow(posX: number, posY: number, posZ: number, action: string, p4: boolean, p5: number): void { 
	return _in(0xe6a27cda, 0x42887f93, _fv(posX), _fv(posY), _fv(posZ), _ts(action), p4, p5); 
}

export function playstatsFlowMedium(posX: number, posY: number, posZ: number, action: string, p4: boolean, p5: number): void { 
	return _in(0xc4493521, 0xbaa12cce, _fv(posX), _fv(posY), _fv(posZ), _ts(action), p4, p5); 
}

export function playstatsFmEventAtob(p0: number): void { 
	return _in(0xbaa2f049, 0x0e146be8, p0); 
}

export function playstatsFmEventChallenges(p0: number): void { 
	return _in(0x6a60e439, 0x98228229, p0); 
}

export function playstatsFmEventCheckpointcollection(p0: number): void { 
	return _in(0x3de3aa51, 0x6fb126a4, p0); 
}

export function playstatsFmEventCompetitiveurbanwarfare(p0: number): void { 
	return _in(0x6551b1f7, 0xf6cd46ea, p0); 
}

export function playstatsFmEventCriminaldamage(p0: number): void { 
	return _in(0xedbf6c9b, 0x0d2c65c8, p0); 
}

export function playstatsFmEventDeaddrop(p0: number): void { 
	return _in(0x0a9c7f36, 0xe5d7b683, p0); 
}

export function playstatsFmEventHotproperty(p0: number): void { 
	return _in(0x84dfc579, 0xc2fc214c, p0); 
}

export function playstatsFmEventHuntbeast(p0: number): void { 
	return _in(0x2cd90358, 0xf67d0aa8, p0); 
}

export function playstatsFmEventKingofthecastle(p0: number): void { 
	return _in(0x164c5ff6, 0x63790845, p0); 
}

export function playstatsFmEventPasstheparcel(p0: number): void { 
	return _in(0x41961548, 0x6bbf1956, p0); 
}

export function playstatsFmEventPennedin(p0: number): void { 
	return _in(0x1a7ce7cd, 0x3e653485, p0); 
}

export function playstatsFmEventUrbanwarfare(p0: number): void { 
	return _in(0x8c9d1160, 0x5e59d955, p0); 
}

export function playstatsFmEventVehicletarget(p0: number): void { 
	return _in(0xbfafdb5f, 0xaaa5c5ab, p0); 
}

export function playstatsFmHeistPrepEnded(data: number): number { 
	return _in(0xd8afb345, 0xa9c5ccbb, _ii(data)); 
}

export function playstatsFmMissionEnd(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0x46a70777, 0xbe6ceab9, p0, p1, p2, p3); 
}

export function playstatsFreemodeCasinoMissionEnded(data: number): number { 
	return _in(0x1a0d4a6c, 0x336b7bc5, _ii(data)); 
}

export function playstatsFriendActivity(p0: number, p1: boolean): void { 
	return _in(0x0f71de29, 0xab2258f1, p0, p1); 
}

export function playstatsGunrunningMissionEnded(data: number): number { 
	return _in(0x0eacdf84, 0x87d5155a, _ii(data)); 
}

export function playstatsGunrunningRnd(p0: number): void { 
	return _in(0xdaf80797, 0xfc534bec, p0); 
}

export function playstatsHeist3Drone(p0: number): void { 
	return _in(0xdfbd93bf, 0x2943e29b, p0); 
}

export function playstatsHeist3Finale(p0: number): void { 
	return _in(0x2e0259ba, 0xbc27a327, p0); 
}

export function playstatsHeist3Hack(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number): void { 
	return _in(0x92fc0eed, 0xfac04a14, p0, p1, p2, p3, p4, p5); 
}

export function playstatsHeist3Prep(p0: number): void { 
	return _in(0x53c31853, 0xec9531ff, p0); 
}

export function playstatsHeist4Finale(p0: number): void { 
	return _in(0xc1e963c5, 0x8664b556, p0); 
}

export function playstatsHeist4Hack(p0: number, p1: number, p2: number, p3: number, p4: number): void { 
	return _in(0x2fa31734, 0x80008493, p0, p1, p2, p3, p4); 
}

export function playstatsHeist4Prep(p0: number): void { 
	return _in(0xdfcdb143, 0x17a9b361, p0); 
}

export function playstatsHeistSaveCheat(hash: number, p1: number): void { 
	return _in(0xf4ff020a, 0x08bc8863, _ch(hash), p1); 
}

export function playstatsHitContrabandDestroyLimit(p0: number): void { 
	return _in(0x60eedc12, 0xaf66e846, p0); 
}

export function playstatsHoldUpMissionDone(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0xcb00196b, 0x31c39eb1, p0, p1, p2, p3); 
}

export function playstatsHubEntry(p0: number): void { 
	return _in(0x2818ff66, 0x38cb09de, p0); 
}

export function playstatsHubExit(p0: number): void { 
	return _in(0x5a46ace5, 0xc4661132, p0); 
}

export function playstatsIdle(p0: number, p1: number, p2: number): void { 
	return _in(0xec9553a1, 0x78e8f1d1, p0, p1, p2); 
}

export function playstatsIdleKick(msStoodIdle: number): void { 
	return _in(0x5da3a8de, 0x8cb6226f, msStoodIdle); 
}

export function playstatsImpexpMissionEnded(p0: number): void { 
	return _in(0x7d8ba056, 0x88ad64c7, p0); 
}

export function playstatsImportExportMissionDone(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0x2b69f507, 0x4c894811, p0, p1, p2, p3); 
}

export function playstatsInitMultiplayer(p0: number, p1: number, p2: number): void { 
	return _in(0x7e5eed10, 0xb11cedba, p0, p1, p2); 
}

export function playstatsInstMissionEnd(p0: number): void { 
	return _in(0xfea3f7e8, 0x3c0610fa, p0); 
}

export function playstatsInstancedHeistEnded(p1: number, p2: number, p3: number): number { 
	return _in(0x1e1497d0, 0xd2108115, _i, p1, p2, p3); 
}

export function playstatsInventory(p0: number): void { 
	return _in(0x887dad63, 0xcf5b7908, p0); 
}

export function playstatsJobActivityEnd(): [number, number, number, number] { 
	const [p0_out, p1_out, p2_out, p3_out] = _in(0xf8c54a46, 0x1c3e11dc, _i, _i, _i, _i);
	return [p0_out as number, p1_out as number, p2_out as number, p3_out as number]; 
}

export function playstatsJobBend(): [number, number, number, number] { 
	const [p0_out, p1_out, p2_out, p3_out] = _in(0xf5bb8dac, 0x426a52c0, _i, _i, _i, _i);
	return [p0_out as number, p1_out as number, p2_out as number, p3_out as number]; 
}

export function playstatsJobLtsEnd(): [number, number, number, number] { 
	const [p0_out, p1_out, p2_out, p3_out] = _in(0xa736cf7f, 0xb7c5bff4, _i, _i, _i, _i);
	return [p0_out as number, p1_out as number, p2_out as number, p3_out as number]; 
}

export function playstatsJobLtsRoundEnd(): [number, number, number, number] { 
	const [p0_out, p1_out, p2_out, p3_out] = _in(0x14e0b2d1, 0xad1044e0, _i, _i, _i, _i);
	return [p0_out as number, p1_out as number, p2_out as number, p3_out as number]; 
}

export function playstatsLeaveJobChain(p0: number, p1: number, p2: number, p3: number, p4: number): void { 
	return _in(0xc5be134e, 0xc7ba96a0, p0, p1, p2, p3, p4); 
}

export function playstatsMasterControl(p0: number, p1: number, p2: number, p3: number, p4: number): void { 
	return _in(0x810b5fcc, 0x52ec7ff0, p0, p1, p2, p3, p4); 
}

export function playstatsMatchStarted(p0: number, p1: number, p2: number): void { 
	return _in(0xbc80e22d, 0xed931e3d, p0, p1, p2); 
}

export function playstatsMcClubhouseActivity(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number): void { 
	return _in(0x8989cbd7, 0xb4e82534, p0, p1, p2, p3, p4, p5, p6, p7); 
}

export function playstatsMcFormationEnds(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): void { 
	return _in(0x03c2eebb, 0x04b3fb72, p0, p1, p2, p3, p4, p5, p6); 
}

export function playstatsMcKilledRivalMcMember(p0: number, p1: number, p2: number, p3: number, p4: number): void { 
	return _in(0xf534d94d, 0xfa2ead26, p0, p1, p2, p3, p4); 
}

export function playstatsMcRequestBike(p0: number, p1: number, p2: number, p3: number, p4: number): void { 
	return _in(0xcc25a455, 0x3dfbf9ea, p0, p1, p2, p3, p4); 
}

export function playstatsMinigameUsage(p0: number, p1: number, p2: number): void { 
	return _in(0xc14bd9f5, 0x337219b2, p0, p1, p2); 
}

export function playstatsMissionCheckpoint(p0: string, p1: number, p2: number, p3: number): void { 
	return _in(0xc900596a, 0x63978c1d, _ts(p0), p1, p2, p3); 
}

export function playstatsMissionEnded(p0: number): void { 
	return _in(0xbf371cd2, 0xb64212fd, p0); 
}

export function playstatsMissionOver(p0: string, p1: number, p2: number, p3: boolean, p4: boolean, p5: boolean): void { 
	return _in(0x7c4bb33a, 0x8ced7324, _ts(p0), p1, p2, p3, p4, p5); 
}

export function playstatsMissionStarted(p0: string, p1: number, p2: number, p3: boolean): void { 
	return _in(0xc19a2925, 0xc34d2231, _ts(p0), p1, p2, p3); 
}

export function playstatsMissionVote(p0: number): void { 
	return _in(0xc03fab2c, 0x2f92289b, p0); 
}

/**
 * Known text types: NAME_YACHT, NAME_ORG_OFFICE
 * @param isBoss
 * @param bossType
 * @param bossId1
 * @param bossId2
 * @param textType
 * @param textString
 * @param textSource
 */
export function playstatsNamedUserContent(isBoss: boolean, bossType: number, bossId1: number, bossId2: number, textType: number, textString: string, textSource: number): void { 
	return _in(0xaa434d7d, 0x0a89a95c, isBoss, bossType, bossId1, bossId2, textType, _ts(textString), textSource); 
}

export function playstatsNightclubMissionEnded(p0: number): void { 
	return _in(0x830c3a44, 0xeb3f2cf9, p0); 
}

export function playstatsNjvsVote(p0: number): void { 
	return _in(0x5cdaed54, 0xb34b0ed0, p0); 
}

export function playstatsNpcInvite(p0: string): void { 
	return _in(0x93054c88, 0xe6aa7c44, _ts(p0)); 
}

export function playstatsNpcPhone(p0: number): number { 
	return _in(0x0077f156, 0x13d36993, _ii(p0)); 
}

/**
 * This native does absolutely nothing, just a nullsub
 * @param totalTimeMs
 * @param p1
 * @param p2
 */
export function playstatsOddjobDone(totalTimeMs: number, p1: number, p2: boolean): void { 
	return _in(0x69dea3e9, 0xdb727b4c, totalTimeMs, p1, p2); 
}

export function playstatsPegasusAsPersonalAircraft(modelHash: number): void { 
	return _in(0x9572bd4d, 0xd6b72122, _ch(modelHash)); 
}

export function playstatsPimenuHideOptions(data: number): number { 
	return _in(0x203b3811, 0x33817079, _ii(data)); 
}

export function playstatsPimenuNav(data: number): number { 
	return _in(0xe6d323a5, 0xe9effb76, _ii(data)); 
}

export function playstatsPlayerStyle(p0: number): void { 
	return _in(0x48fac5dc, 0x7ac6ea99, p0); 
}

export function playstatsPropChange(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0xba739d6d, 0x5a05d6e7, p0, p1, p2, p3); 
}

export function playstatsQuickfixTool(element: number, item: string): void { 
	return _in(0x90d06228, 0x66e80445, element, _ts(item)); 
}

export function playstatsQuitMode(p0: number, p1: number, p2: number, p3: number, p4: number): void { 
	return _in(0x5bf29846, 0xc6527c54, p0, p1, p2, p3, p4); 
}

export function playstatsRaceCheckpoint(p0: number, p1: number, p2: number, p3: number, p4: number): void { 
	return _in(0x9c375c31, 0x5099dde4, p0, p1, p2, p3, p4); 
}

export function playstatsRaceToPointMissionDone(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0xaddd1c75, 0x4e2e2914, p0, p1, p2, p3); 
}

export function playstatsRandomEvent(p0: number): void { 
	return _in(0x7ea06f97, 0x0f999394, p0); 
}

export function playstatsRandomMissionDone(name: string, p1: number, p2: number, p3: number): void { 
	return _in(0x71862b1d, 0x855f32e1, _ts(name), p1, p2, p3); 
}

export function playstatsRankUp(rank: number): void { 
	return _in(0xc7f2de41, 0xd102bfb4, rank); 
}

export function playstatsRecoverContrabandMission(data: number): number { 
	return _in(0x04d90ba8, 0x207ada2d, _ii(data)); 
}

export function playstatsRecoverVehicle(data: number): number { 
	return _in(0xbeb0d930, 0xb3cce4d5, _ii(data)); 
}

export function playstatsRivalBehavior(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number): void { 
	return _in(0x27aa1c97, 0x3cacfe63, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9); 
}

export function playstatsRobberyFinale(p0: number): void { 
	return _in(0xbba55be9, 0xaaaabf44, p0); 
}

export function playstatsRobberyPrep(p0: number): void { 
	return _in(0x1a67dfbf, 0x1f5c3835, p0); 
}

export function playstatsRosBet(amount: number, act: number, player: number, cm: number): void { 
	return _in(0x121fb4dd, 0xdc2d5291, amount, act, player, _fv(cm)); 
}

export function playstatsSellContrabandMission(data: number): number { 
	return _in(0xc729991a, 0x9065376e, _ii(data)); 
}

export function playstatsSetJoinType(joinType: number): void { 
	return _in(0xd1032e48, 0x2629049e, joinType); 
}

export function playstatsShopItem(p0: number, p1: number, p2: number, p3: number, p4: number): void { 
	return _in(0x176852ac, 0xaac173d1, p0, p1, p2, p3, p4); 
}

export function playstatsShopmenuNav(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0xf96e9ea8, 0x76d9dc92, p0, p1, p2, p3); 
}

export function playstatsShowroomNav(p0: number, p1: number, entity: number): void { 
	return _in(0x961d4157, 0xb9b428db, p0, p1, _ch(entity)); 
}

/**
 * Data struct contains various tunables related to test drives at Simeons Showroom or Luxury Showcase.
 * @param data
 */
export function playstatsShowroomOverview(data: number): number { 
	return _in(0x151d6c04, 0xc9e2742f, _ii(data)); 
}

export function playstatsSmugglerMissionEnded(data: number): number { 
	return _in(0x320c3514, 0x7d5b5ddd, _ii(data)); 
}

export function playstatsSpentPiCustomLoadout(amount: number): void { 
	return _in(0xbe509b0a, 0x3693de8b, amount); 
}

export function playstatsSpinWheel(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0x6731de84, 0xa38bfad0, p0, p1, p2, p3); 
}

/**
 * Allows CEventNetworkStuntPerformed to be triggered.
 */
export function playstatsStartTrackingStunts(): void { 
	return _in(0x928dbfb8, 0x92638ef3); 
}

export function playstatsStartedSessionInOfflinemode(): void { 
	return _in(0x098760c7, 0x461724cd); 
}

export function playstatsStoneHatchetEnded(data: number): number { 
	return _in(0x35e39e55, 0x70358630, _ii(data)); 
}

/**
 * Disallows CEventNetworkStuntPerformed to be triggered.
 */
export function playstatsStopTrackingStunts(): void { 
	return _in(0x8a800dac, 0xcc0da55d); 
}

export function playstatsSubWeap(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0xd4367d31, 0x0f079db0, p0, p1, p2, p3); 
}

export function playstatsSwitchMcEmblem(p0: number, p1: number, p2: number, p3: number, p4: number): void { 
	return _in(0x0a50d260, 0x4e05cb94, p0, p1, p2, p3, p4); 
}

export function playstatsSwitchPassiveMode(p0: boolean, p1: number, p2: number, p3: number): void { 
	return _in(0x35eec6c2, 0xbc821a71, p0, p1, p2, p3); 
}

export function playstatsVehDel(bossId1: number, bossId2: number, bossType: number, vehicleID: number, reason: number): void { 
	return _in(0x10a691f5, 0x756416d0, bossId1, bossId2, bossType, vehicleID, reason); 
}

export function playstatsWarehouseMissionEnded(p0: number): void { 
	return _in(0x2d7a9b57, 0x7e72385e, p0); 
}

/**
 * This is a typo made by R*. It's supposed to be called PLAYSTATS_WEAPON_MOD_CHANGE.
 * @param weaponHash
 * @param componentHashTo
 * @param componentHashFrom
 */
export function playstatsWeaponModeChange(weaponHash: number, componentHashTo: number, componentHashFrom: number): void { 
	return _in(0xe95c8a18, 0x75a02ca4, _ch(weaponHash), _ch(componentHashTo), _ch(componentHashFrom)); 
}

export function playstatsWebsiteVisited(scaleformHash: number, p1: number): void { 
	return _in(0xddf24d53, 0x5060f811, _ch(scaleformHash), p1); 
}

/**
 * Returns duration of how long the game has been in power-saving mode (aka "constrained") in milliseconds.
 */
export function plmGetConstrainedDurationMs(): number { 
	return _in(0xabb2fa71, 0xc83a1b72, _r, _ri); 
}

/**
 * aka "constrained"
 */
export function plmIsInConstrainedMode(): boolean { 
	return _in(0x684a4197, 0x5f077262, _r); 
}

export function pointCamAtCoord(cam: number, x: number, y: number, z: number): void { 
	return _in(0xf75497bb, 0x865f0803, cam, _fv(x), _fv(y), _fv(z)); 
}

/**
 * p5 always seems to be 1 i.e TRUE
 * @param cam
 * @param entity
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 */
export function pointCamAtEntity(cam: number, entity: number, p2: number, p3: number, p4: number, p5: boolean): void { 
	return _in(0x5640bff8, 0x6b16e8dc, cam, entity, _fv(p2), _fv(p3), _fv(p4), p5); 
}

/**
 * Parameters p0-p5 seems correct. The bool p6 is unknown, but through every X360 script it's always 1. Please correct p0-p5 if any prove to be wrong.
 * @param cam
 * @param ped
 * @param boneIndex
 * @param x
 * @param y
 * @param z
 * @param p6
 */
export function pointCamAtPedBone(cam: number, ped: number, boneIndex: number, x: number, y: number, z: number, p6: boolean): void { 
	return _in(0x68b2b5f3, 0x3ba63c41, cam, ped, boneIndex, _fv(x), _fv(y), _fv(z), p6); 
}

/**
 * Pops off the "roof" bone in the direction of the specified offset from the vehicle.
 * @param vehicle
 * @param x
 * @param y
 * @param z
 */
export function popOffVehicleRoofWithImpulse(vehicle: number, x: number, y: number, z: number): void { 
	return _in(0xe38cb9d7, 0xd39fdbcc, vehicle, _fv(x), _fv(y), _fv(z)); 
}

/**
 * Detaches the vehicle's windscreen.
 * For further information, see : gtaforums.com/topic/859570-glass/#entry1068894566
 * @param vehicle
 */
export function popOutVehicleWindscreen(vehicle: number): void { 
	return _in(0x6d645d59, 0xfb5f5ad3, vehicle); 
}

export function popTimecycleModifier(): void { 
	return _in(0x3c8938d7, 0xd872211e); 
}

/**
 * spawns a few distant/out-of-sight peds, vehicles, animals etc each time it is called
 */
export function populateNow(): void { 
	return _in(0x7472bb27, 0x0d7b4f3e); 
}

export function pow(base: number, exponent: number): number { 
	return _in(0xe3621cc4, 0x0f31fe2e, _fv(base), _fv(exponent), _r, _rf); 
}

/**
 * This native is used to attribute the SRL that BEGIN_SRL is going to load. This is usually used for 'in-game' cinematics (not cutscenes but camera stuff) instead of SET_FOCUS_POS_AND_VEL because it loads a specific area of the map which is pretty useful when the camera moves from distant areas.
 * For instance, GTA:O opening cutscene.
 * https://pastebin.com/2EeKVeLA : a list of SRL found in srllist.meta
 * https://pastebin.com/zd9XYUWY here is the content of a SRL file opened with codewalker.
 * @param srl
 */
export function prefetchSrl(srl: string): void { 
	return _in(0x3d245789, 0xce12982c, _ts(srl)); 
}

export function preloadBusyspinner(): void { 
	return _in(0xc65ab383, 0xcd91df98); 
}

export function preloadCloudHat(name: string): void { 
	return _in(0x11b56fbb, 0xf7224868, _ts(name)); 
}

export function preloadScriptConversation(p0: boolean, p1: boolean, p2: boolean, p3: boolean): void { 
	return _in(0x3b3cad61, 0x66916d87, p0, p1, p2, p3); 
}

export function preloadScriptPhoneConversation(p0: boolean, p1: boolean): void { 
	return _in(0x6004bcb0, 0xe226aaea, p0, p1); 
}

export function preloadVehicleAudioBank(vehicleModel: number): void { 
	return _in(0xca4cea6a, 0xe0000a7e, _ch(vehicleModel)); 
}

export function preloadVehicleMod(vehicle: number, modType: number, modIndex: number): void { 
	return _in(0x758f49c2, 0x4925568a, vehicle, modType, modIndex); 
}

/**
 * Example:
 * 
 * bool prepareAlarm = AUDIO::PREPARE_ALARM("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS");
 * Full list of alarm names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/alarmSounds.json
 * @param alarmName
 */
export function prepareAlarm(alarmName: string): boolean { 
	return _in(0x9d74ae34, 0x3db65533, _ts(alarmName), _r); 
}

/**
 * All music event names found in the b617d scripts: https://pastebin.com/GnYt0R3P
 * Full list of music event names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/musicEventNames.json
 * @param eventName
 */
export function prepareMusicEvent(eventName: string): boolean { 
	return _in(0x1e5185b7, 0x2ef5158a, _ts(eventName), _r); 
}

/**
 * p1 is always 0 in the scripts
 * @param audioEvent
 * @param p1
 */
export function prepareSynchronizedAudioEvent(audioEvent: string, p1: number): boolean { 
	return _in(0xc7abcaca, 0x4985a766, _ts(audioEvent), p1, _r); 
}

export function prepareSynchronizedAudioEventForScene(sceneID: number, audioEvent: string): boolean { 
	return _in(0x029fe7cd, 0x1b7e2e75, sceneID, _ts(audioEvent), _r); 
}

export function presenceEventUpdatestatFloat(statHash: number, value: number, p2: number): void { 
	return _in(0x30a6614c, 0x1f7799b8, _ch(statHash), _fv(value), p2); 
}

export function presenceEventUpdatestatInt(statHash: number, value: number, p2: number): void { 
	return _in(0x11ff1c80, 0x276097ed, _ch(statHash), value, p2); 
}

export function presenceEventUpdatestatIntWithString(statHash: number, value: number, p2: number, string: string): void { 
	return _in(0x6483c258, 0x49031c4f, _ch(statHash), value, p2, _ts(string)); 
}

/**
 * Only one match in the scripts:
 * 
 * GRAPHICS::PRESET_INTERIOR_AMBIENT_CACHE("int_carrier_hanger");
 * @param timecycleModifierName
 */
export function presetInteriorAmbientCache(timecycleModifierName: string): void { 
	return _in(0xd7021272, 0xeb0a451e, _ts(timecycleModifierName)); 
}

export function preventArrestStateThisFrame(): void { 
	return _in(0xe3d969d2, 0x785ffb5e); 
}

export function preventCollectionOfPortablePickup(object: number, p1: boolean, p2: boolean): void { 
	return _in(0x92aefb5f, 0x6e294023, object, p1, p2); 
}

/**
 * This isn't a hash collision.
 * @param p0
 * @param p1
 * @param p2
 */
export function processCashGift(p2: string): [string, number, number] { 
	const [retval, p0_out, p1_out] = _in(0x20194d48, 0xeaec9a41, _i, _i, _ts(p2), _r, _s);
	return [retval as string, p0_out as number, p1_out as number]; 
}

/**
 * Called to update entity attachments.
 * @param entity
 */
export function processEntityAttachments(entity: number): void { 
	return _in(0xf4080490, 0xadc51c6f, entity); 
}

export function procgrassDisableAmbscalescan(): void { 
	return _in(0x0218ba06, 0x7d249dea); 
}

export function procgrassDisableCullsphere(handle: number): void { 
	return _in(0x649c97d5, 0x2332341a, handle); 
}

export function procgrassEnableAmbscalescan(): void { 
	return _in(0x14fc5833, 0x464340a8); 
}

export function procgrassEnableCullsphere(handle: number, x: number, y: number, z: number, scale: number): void { 
	return _in(0xae51bc85, 0x8f32ba66, handle, _fv(x), _fv(y), _fv(z), _fv(scale)); 
}

export function procgrassIsCullsphereEnabled(handle: number): boolean { 
	return _in(0x2c42340f, 0x916c5930, handle, _r); 
}

export function pulseBlip(blip: number): void { 
	return _in(0x742d6fd4, 0x3115af73, blip); 
}

export function pushTimecycleModifier(): void { 
	return _in(0x58f73529, 0x0861e6b4); 
}

export function queryMovieMeshSetState(p0: number): number { 
	return _in(0x9b6e70c5, 0xceef4eeb, p0, _r, _ri); 
}

export function queueMissionRepeatLoad(): boolean { 
	return _in(0x72de5217, 0x8c291cb5, _r); 
}

/**
 * Shows the screen which is visible before you redo a mission? The game will make a restoration point where you will cameback when the mission is over.
 * Returns 1 if the message isn't currently on screen
 */
export function queueMissionRepeatSave(): boolean { 
	return _in(0x44a0bdc5, 0x59b35f6e, _r); 
}

export function queueMissionRepeatSaveForBenchmarkTest(): boolean { 
	return _in(0xeb2104e9, 0x05c6f2e9, _r); 
}

/**
 * 2 matches across 2 scripts. Only showed in appcamera & appmedia. Both were 0.
 * @param p0
 */
export function queueOperationToCreateSortedListOfPhotos(p0: number): boolean { 
	return _in(0x2a893980, 0xe96b659a, p0, _r); 
}

/**
 * Exits the game and downloads a fresh social club update on next restart.
 */
export function quitGame(): void { 
	return _in(0xeb6891f0, 0x3362fb12); 
}

export function raiseConvertibleRoof(vehicle: number, instantlyRaise: boolean): void { 
	return _in(0x8f5fb35d, 0x7e88fc70, vehicle, instantlyRaise); 
}

export function reactivateAllObjectBrainsThatAreWaitingTillOutOfRange(): void { 
	return _in(0x4d953df7, 0x8ebf8158); 
}

export function reactivateAllWorldBrainsThatAreWaitingTillOutOfRange(): void { 
	return _in(0x0b40ed49, 0xd7d6ff84); 
}

/**
 * Looks like a cousin of above function _6D6840CEE8845831 as it was found among them. Must be similar
 * 
 * Here are possible values of argument -
 * 
 * "ob_tv"
 * "launcher_Darts"
 * @param scriptName
 */
export function reactivateNamedObjectBrainsWaitingTillOutOfRange(scriptName: string): void { 
	return _in(0x6e91b04e, 0x08773030, _ts(scriptName)); 
}

/**
 * Possible values:
 * 
 * act_cinema
 * am_mp_carwash_launch
 * am_mp_carwash_control
 * am_mp_property_ext
 * chop
 * fairgroundHub
 * launcher_BasejumpHeli
 * launcher_BasejumpPack
 * launcher_CarWash
 * launcher_golf
 * launcher_Hunting_Ambient
 * launcher_MrsPhilips
 * launcher_OffroadRacing
 * launcher_pilotschool
 * launcher_Racing
 * launcher_rampage
 * launcher_rampage
 * launcher_range
 * launcher_stunts
 * launcher_stunts
 * launcher_tennis
 * launcher_Tonya
 * launcher_Triathlon
 * launcher_Yoga
 * ob_mp_bed_low
 * ob_mp_bed_med
 * @param scriptName
 */
export function reactivateNamedWorldBrainsWaitingTillOutOfRange(scriptName: string): void { 
	return _in(0x6d6840ce, 0xe8845831, _ts(scriptName)); 
}

export function recordBrokenGlass(x: number, y: number, z: number, radius: number): void { 
	return _in(0xfbe20329, 0x593dec9d, _fv(x), _fv(y), _fv(z), _fv(radius)); 
}

/**
 * Does nothing (it's a nullsub).
 * @param p0
 * @param p1
 * @param p2
 */
export function recordGreatestMoment(p0: number, p1: number, p2: number): void { 
	return _in(0x66972397, 0xe0757e7a, p0, p1, p2); 
}

export function refillAmmoInstantly(ped: number): boolean { 
	return _in(0x8c0d57ea, 0x686fad87, ped, _r); 
}

export function refreshClosestOceanShoreline(): void { 
	return _in(0x5d2bfaab, 0x8d956e0e); 
}

export function refreshInterior(interior: number): void { 
	return _in(0x41f37c34, 0x27c75ae0, interior); 
}

export function refreshPlayerListStats(p0: number): boolean { 
	return _in(0xe26ccff8, 0x094d8c74, p0, _r); 
}

export function refreshWaypoint(): void { 
	return _in(0x81fa173f, 0x170560d1); 
}

export function registerBoolToSave(name: string): number { 
	return _in(0xc8f41314, 0x14c835a1, _i, _ts(name)); 
}

/**
 * Does nothing (it's a nullsub).
 * @param p0
 * @param p1
 */
export function registerEffectForReplayEditor(p0: string, p1: boolean): void { 
	return _in(0x7e2bd3ef, 0x6c205f09, _ts(p0), p1); 
}

export function registerEntityForCutscene(cutscenePed: number, cutsceneEntName: string, p2: number, modelHash: number, p4: number): void { 
	return _in(0xe40c1c56, 0xdf95c2e8, cutscenePed, _ts(cutsceneEntName), p2, _ch(modelHash), p4); 
}

export function registerEnumToSave(name: string): number { 
	return _in(0x10c2fa78, 0xd0e128a1, _i, _ts(name)); 
}

export function registerFloatToSave(name: string): number { 
	return _in(0x7caec29e, 0xcb5dfebb, _i, _ts(name)); 
}

/**
 * Based on TASK_COMBAT_HATED_TARGETS_AROUND_PED, the parameters are likely similar (PedHandle, and area to attack in).
 * @param ped
 * @param radius
 */
export function registerHatedTargetsAroundPed(ped: number, radius: number): void { 
	return _in(0x9222f300, 0xbf8354fe, ped, _fv(radius)); 
}

export function registerInt64ToSave(name: string): number { 
	return _in(0xa735353c, 0x77334ea0, _i, _ts(name)); 
}

export function registerIntToSave(name: string): number { 
	return _in(0x34c9ee59, 0x86258415, _i, _ts(name)); 
}

export function registerNamedRendertarget(name: string, p1: boolean): boolean { 
	return _in(0x57d9c126, 0x35e25ce3, _ts(name), p1, _r); 
}

/**
 * Used with 'NG_filmnoir_BW{01,02}' timecycles and the "NOIR_FILTER_SOUNDS" audioref.
 */
export function registerNoirLensEffect(): void { 
	return _in(0xa44ff770, 0xdfbc5dae); 
}

/**
 * Registers a script for any object with a specific model hash.
 * 
 * BRAIN::REGISTER_OBJECT_SCRIPT_BRAIN("ob_telescope", ${prop_telescope_01}, 100, 4.0, -1, 9);
 * 
 * - Nacorpio
 * @param scriptName
 * @param modelHash
 * @param p2
 * @param activationRange
 * @param p4
 * @param p5
 */
export function registerObjectScriptBrain(scriptName: string, modelHash: number, p2: number, activationRange: number, p4: number, p5: number): void { 
	return _in(0x0be84c31, 0x8ba6ec22, _ts(scriptName), _ch(modelHash), p2, _fv(activationRange), p4, p5); 
}

/**
 * gtaforums.com/topic/885580-ped-headshotmugshot-txd/
 * @param ped
 */
export function registerPedheadshot(ped: number): number { 
	return _in(0x44626587, 0x88425076, ped, _r, _ri); 
}

export function registerPedheadshotHires(ped: number): number { 
	return _in(0xba8805a1, 0x108a2515, ped, _r, _ri); 
}

/**
 * Similar to REGISTER_PEDHEADSHOT but creates a transparent background instead of black. Example: https://i.imgur.com/iHz8ztn.png
 * @param ped
 */
export function registerPedheadshotTransparent(ped: number): number { 
	return _in(0x953563ce, 0x563143af, ped, _r, _ri); 
}

export function registerPostfxBulletImpact(weaponWorldPosX: number, weaponWorldPosY: number, weaponWorldPosZ: number, intensity: number): void { 
	return _in(0x170911f3, 0x7f646f29, _fv(weaponWorldPosX), _fv(weaponWorldPosY), _fv(weaponWorldPosZ), _fv(intensity)); 
}

/**
 * returns savehouseHandle
 * @param x
 * @param y
 * @param z
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 */
export function registerSaveHouse(x: number, y: number, z: number, p3: number, p4: string, p5: number, p6: number): number { 
	return _in(0xc0714d0a, 0x7eeeca54, _fv(x), _fv(y), _fv(z), _fv(p3), _ts(p4), p5, p6, _r, _ri); 
}

/**
 * Registers a protected variable that will be checked for modifications by the anticheat
 * @param variable
 */
export function registerScriptVariable(variable: number): number { 
	return _in(0x40eb1efd, 0x921822bc, _ii(variable)); 
}

/**
 * This native does absolutely nothing, just a nullsub
 * @param p0
 */
export function registerScriptWithAudio(p0: number): void { 
	return _in(0xc6ed9d50, 0x92438d91, p0); 
}

/**
 * PED::REGISTER_TARGET(l_216, PLAYER::PLAYER_PED_ID()); from re_prisonbreak.txt.
 * 
 * l_216 = RECSBRobber1
 * @param ped
 * @param target
 */
export function registerTarget(ped: number, target: number): void { 
	return _in(0x2f25d9ae, 0xfa34fba2, ped, target); 
}

/**
 * MISC::REGISTER_TEXT_LABEL_15_TO_SAVE(&a_0._f1, "tlPlateText");
 * MISC::REGISTER_TEXT_LABEL_15_TO_SAVE(&a_0._f1C, "tlPlateText_pending");
 * MISC::REGISTER_TEXT_LABEL_15_TO_SAVE(&a_0._f10B, "tlCarAppPlateText");
 * @param p0
 * @param name
 */
export function registerTextLabel15ToSave(name: string): number { 
	return _in(0x6f7794f2, 0x8c6b2535, _i, _ts(name)); 
}

/**
 * Only found 3 times in decompiled scripts.
 * 
 * MISC::REGISTER_TEXT_LABEL_23_TO_SAVE(a_0, "Movie_Name_For_This_Player");
 * MISC::REGISTER_TEXT_LABEL_23_TO_SAVE(&a_0._fB, "Ringtone_For_This_Player");
 * MISC::REGISTER_TEXT_LABEL_23_TO_SAVE(&a_0._f1EC4._f12[v_A -- [[6]] ], &v_13); // where v_13 is "MPATMLOGSCRS0" thru "MPATMLOGSCRS15"
 * @param p0
 * @param name
 */
export function registerTextLabel23ToSave(name: string): number { 
	return _in(0x48f06926, 0x5a0e4bec, _i, _ts(name)); 
}

/**
 * Only found 2 times in decompiled scripts.
 * 
 * MISC::REGISTER_TEXT_LABEL_31_TO_SAVE(&a_0._f1F5A._f6[0 -- [[8]] ], "TEMPSTAT_LABEL"); // gets saved in a struct called "g_SaveData_STRING_ScriptSaves"
 * MISC::REGISTER_TEXT_LABEL_31_TO_SAVE(&a_0._f4B4[v_1A -- [[8]] ], &v_5); // where v_5 is "Name0" thru "Name9", gets saved in a struct called "OUTFIT_Name"
 * @param p0
 * @param name
 */
export function registerTextLabel31ToSave(name: string): number { 
	return _in(0x8269816f, 0x6cfd40f8, _i, _ts(name)); 
}

/**
 * MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(a_0, "Thumb_label");
 * MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f10, "Photo_label");
 * MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(a_0, "GXTlabel");
 * MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f21, "StringComp");
 * MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f43, "SecondStringComp");
 * MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f53, "ThirdStringComp");
 * MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f32, "SenderStringComp");
 * MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f726[v_1A -- [[16]] ], &v_20); // where v_20 is "LastJobTL_0_1" thru "LastJobTL_2_1", gets saved in a struct called "LAST_JobGamer_TL"
 * MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f4B, "PAID_PLAYER");
 * MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f5B, "RADIO_STATION");
 * @param p0
 * @param name
 */
export function registerTextLabel63ToSave(name: string): number { 
	return _in(0xfaa457ef, 0x263e8763, _i, _ts(name)); 
}

export function registerTextLabelToSave(name: string): number { 
	return _in(0xedb1232c, 0x5beae62f, _i, _ts(name)); 
}

export function registerWorldPointScriptBrain(scriptName: string, activationRange: number, p2: number): void { 
	return _in(0x3cdc7136, 0x613284bd, _ts(scriptName), _fv(activationRange), p2); 
}

export function releaseAllCommerceItemImages(): void { 
	return _in(0x72d0706c, 0xd6ccdb58); 
}

export function releaseAmbientAudioBank(): void { 
	return _in(0x65475a21, 0x8ffaa93d); 
}

export function releaseBinkMovie(binkMovie: number): void { 
	return _in(0x04d950ee, 0xfa4eed8c, binkMovie); 
}

/**
 * Enables frontend (works in custom frontends, not sure about regular pause menu) navigation keys on keyboard if they were disabled using the native below.
 * To disable the keys, use `0xEC9264727EEC0F28`
 */
export function releaseControlOfFrontend(): void { 
	return _in(0x14621bb1, 0xdf14e2b2); 
}

export function releaseMissionAudioBank(): void { 
	return _in(0x0ec92a1b, 0xf0857187); 
}

export function releaseMovieMeshSet(movieMeshSet: number): void { 
	return _in(0xeb119aa0, 0x14e89183, movieMeshSet); 
}

export function releaseNamedRendertarget(name: string): boolean { 
	return _in(0xe9f6ffe8, 0x37354dd4, _ts(name), _r); 
}

/**
 * Full list of script audio bank names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scriptAudioBankNames.json
 * @param audioBank
 */
export function releaseNamedScriptAudioBank(audioBank: string): void { 
	return _in(0x77ed1706, 0x67f50170, _ts(audioBank)); 
}

export function releasePedPreloadPropData(ped: number): void { 
	return _in(0xf79f9def, 0x0aade61a, ped); 
}

export function releasePedPreloadVariationData(ped: number): void { 
	return _in(0x5aab586f, 0xfec0fd96, ped); 
}

export function releasePedheadshotImgUpload(id: number): void { 
	return _in(0x5d517b27, 0xcf6ecd04, id); 
}

export function releasePreloadMods(vehicle: number): void { 
	return _in(0x445d79f9, 0x95508307, vehicle); 
}

export function releaseScriptAudioBank(): void { 
	return _in(0x7a2d8ad0, 0xa9eb9c3f); 
}

/**
 * Invalidates the entity handle passed by removing the fwScriptGuid from the entity. This should be used when receiving an ambient entity from shape testing natives, but can also be used for other natives returning an 'irrelevant' entity handle.
 * @param entityHit
 */
export function releaseScriptGuidFromEntity(entityHit: number): void { 
	return _in(0x2b3334bc, 0xa57cd799, entityHit); 
}

export function releaseSoundId(soundId: number): void { 
	return _in(0x353fc880, 0x830b88fa, soundId); 
}

export function releaseWeaponAudio(): void { 
	return _in(0xce4ac043, 0x9f607045); 
}

export function reloadMapMenu(): void { 
	return _in(0x2916a928, 0x514c9827); 
}

export function remapLodscaleRangeThisFrame(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0xbed8ca5f, 0xf5e04113, _fv(p0), _fv(p1), _fv(p2), _fv(p3)); 
}

export function remoteCheaterPlayerDetected(player: number, a: number, b: number): boolean { 
	return _in(0x472841a0, 0x26d26d8b, player, a, b, _r); 
}

export function removeActionModeAsset(asset: string): void { 
	return _in(0x13e940f8, 0x8470fa51, _ts(asset)); 
}

export function removeAirDefenceSphere(zoneId: number): boolean { 
	return _in(0x0abf5358, 0x77897560, zoneId, _r); 
}

export function removeAllAirDefenceSpheres(): void { 
	return _in(0x1e45b34a, 0xdebee48e); 
}

export function removeAllCoverBlockingAreas(): void { 
	return _in(0xdb6708c0, 0xb46f56d8); 
}

/**
 * setting the last params to false it does that same so I would suggest its not a toggle
 * @param ped
 * @param p1
 */
export function removeAllPedWeapons(ped: number, p1: boolean): void { 
	return _in(0xf25df915, 0xfa38c5f3, ped, p1); 
}

/**
 * Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
 * @param pickupHash
 */
export function removeAllPickupsOfType(pickupHash: number): void { 
	return _in(0x27f9d613, 0x092159cf, _ch(pickupHash)); 
}

/**
 * If `explode` true, then removal is done through exploding the projectile. Basically the same as EXPLODE_PROJECTILES but without defining the owner ped.
 * @param weaponHash
 * @param explode
 */
export function removeAllProjectilesOfType(weaponHash: number, explode: boolean): void { 
	return _in(0xfc52e0f3, 0x7e446528, _ch(weaponHash), explode); 
}

export function removeAllShockingEvents(p0: boolean): void { 
	return _in(0xeaabe8fd, 0xfa21274c, p0); 
}

/**
 * entity must be a valid entity; ped can be NULL
 * @param entity
 * @param ped
 */
export function removeAllStickyBombsFromEntity(entity: number, ped: number): void { 
	return _in(0x715135f4, 0xb82ac90d, entity, ped); 
}

/**
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param animDict
 */
export function removeAnimDict(animDict: string): void { 
	return _in(0xf66a602f, 0x829e2a06, _ts(animDict)); 
}

/**
 * Unloads the specified animation set. An animation set provides movement animations for a ped. See SET_PED_MOVEMENT_CLIPSET.
 * 
 * Animation set and clip set are synonymous.
 * 
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * 
 * Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
 * @param animSet
 */
export function removeAnimSet(animSet: string): void { 
	return _in(0x16350528, 0xf93024b3, _ts(animSet)); 
}

/**
 * In the C++ SDK, this seems not to work-- the blip isn't removed immediately. I use it for saving cars.
 * 
 * E.g.:
 * 
 * Ped pped = PLAYER::PLAYER_PED_ID();
 * Vehicle v = PED::GET_VEHICLE_PED_IS_USING(pped);
 * Blip b = HUD::ADD_BLIP_FOR_ENTITY(v);
 * 
 * works fine.
 * But later attempting to delete it with:
 * 
 * Blip b = HUD::GET_BLIP_FROM_ENTITY(v);
 * if (HUD::DOES_BLIP_EXIST(b)) HUD::REMOVE_BLIP(&b);
 * 
 * doesn't work. And yes, doesn't work without the DOES_BLIP_EXIST check either. Also, if you attach multiple blips to the same thing (say, a vehicle), and that thing disappears, the blips randomly attach to other things (in my case, a vehicle).
 * 
 * Thus for me, HUD::REMOVE_BLIP(&b) only works if there's one blip, (in my case) the vehicle is marked as no longer needed, you drive away from it and it eventually despawns, AND there is only one blip attached to it. I never intentionally attach multiple blips but if the user saves the car, this adds a blip. Then if they delete it, it is supposed to remove the blip, but it doesn't. Then they can immediately save it again, causing another blip to re-appear.
 * -------------
 * 
 * Passing the address of the variable instead of the value works for me.
 * e.g.
 * int blip = HUD::ADD_BLIP_FOR_ENTITY(ped);
 * HUD::REMOVE_BLIP(&blip);
 * 
 * 
 * Remove blip will currently crash your game, just artificially remove the blip by setting the sprite to a id that is 'invisible'.
 * @param blip
 */
export function removeBlip(blip: number): number { 
	return _in(0x86a65257, 0x0e5f25dd, _ii(blip)); 
}

/**
 * Alias for REMOVE_ANIM_SET.
 * 
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * 
 * Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
 * @param clipSet
 */
export function removeClipSet(clipSet: string): void { 
	return _in(0x01f73a13, 0x1c18cd94, _ts(clipSet)); 
}

/**
 * Interesting fact: A hash collision for this is RESET_JETPACK_MODEL_SETTINGS
 * @param ped
 */
export function removeCopBlipFromPed(ped: number): void { 
	return _in(0xc594b315, 0xedf2d4af, ped); 
}

export function removeCoverBlockingAreasAtPosition(x: number, y: number, z: number): void { 
	return _in(0xfa83ca67, 0x76038f64, _fv(x), _fv(y), _fv(z)); 
}

export function removeCoverPoint(coverpoint: number): void { 
	return _in(0xae287c92, 0x3d891715, coverpoint); 
}

/**
 * Simply unloads the cutscene and doesn't do extra stuff that REMOVE_CUTSCENE does.
 * Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
 * @param cutsceneName
 */
export function removeCutFile(cutsceneName: string): void { 
	return _in(0xd00d76a7, 0xdfc9d852, _ts(cutsceneName)); 
}

export function removeCutscene(): void { 
	return _in(0x440af51a, 0x3462b86f); 
}

export function removeDecal(decal: number): void { 
	return _in(0xed3f3464, 0x29ccd659, decal); 
}

export function removeDecalsFromObject(obj: number): void { 
	return _in(0xccf71cbd, 0xdf5b6cb9, obj); 
}

export function removeDecalsFromObjectFacing(obj: number, x: number, y: number, z: number): void { 
	return _in(0xa6f6f70f, 0xdc6d144c, obj, _fv(x), _fv(y), _fv(z)); 
}

export function removeDecalsFromVehicle(vehicle: number): void { 
	return _in(0xe91f1b65, 0xf2b48d57, vehicle); 
}

/**
 * Removes all decals in range from a position, it includes the bullet holes, blood pools, petrol...
 * @param x
 * @param y
 * @param z
 * @param range
 */
export function removeDecalsInRange(x: number, y: number, z: number, range: number): void { 
	return _in(0x5d6b2d48, 0x30a67c62, _fv(x), _fv(y), _fv(z), _fv(range)); 
}

export function removeDispatchSpawnBlockingArea(p0: number): void { 
	return _in(0x264ac28b, 0x01b353a5, p0); 
}

/**
 * CDoor and CDoorSystemData still internally allocated (and their associations between doorHash, modelHash, and coordinates).
 * Only its NetObj removed and flag ``*(v2 + 192) |= 8u`` (1604 retail) toggled.
 * @param doorHash
 * @param p1
 */
export function removeDoorFromSystem(doorHash: number, p1: number): void { 
	return _in(0x464d8e14, 0x27156fe4, _ch(doorHash), p1); 
}

export function removeEntityFromAudioMixGroup(entity: number, p1: number): void { 
	return _in(0x18eb48cf, 0xc41f2ea0, entity, _fv(p1)); 
}

/**
 * p0 is the handle returned from ADD_EXTRA_CALMING_QUAD
 * @param calmingQuad
 */
export function removeExtraCalmingQuad(calmingQuad: number): void { 
	return _in(0xb1252e3e, 0x59a82aaf, calmingQuad); 
}

export function removeFakeConeData(blip: number): void { 
	return _in(0x35a3cd97, 0xb2c0a6d2, blip); 
}

export function removeForcedObject(x: number, y: number, z: number, p3: number, modelHash: number): void { 
	return _in(0x61b6775e, 0x83c0db6f, _fv(x), _fv(y), _fv(z), _fv(p3), _ch(modelHash)); 
}

export function removeFromItemset(item: number, itemset: number): void { 
	return _in(0x25e68244, 0xb0177686, item, itemset); 
}

/**
 * This native does absolutely nothing, just a nullsub
 * @param handle
 */
export function removeGrassCullSphere(handle: number): void { 
	return _in(0x61f95e5b, 0xb3e0a8c6, handle); 
}

export function removeGroup(groupId: number): void { 
	return _in(0x8eb2f690, 0x76af7053, groupId); 
}

/**
 * Removes an IPL from the map.
 * 
 * Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json
 * 
 * Example:
 * C#:
 * Function.Call(Hash.REMOVE_IPL, "trevorstrailertidy");
 * 
 * C++:
 * STREAMING::REMOVE_IPL("trevorstrailertidy");
 * 
 * iplName = Name of IPL you want to remove.
 * @param iplName
 */
export function removeIpl(iplName: string): void { 
	return _in(0xee6c5ad3, 0xece0a82d, _ts(iplName)); 
}

export function removeModelFromCreatorBudget(modelHash: number): void { 
	return _in(0xf086ad93, 0x54fac3a3, _ch(modelHash)); 
}

/**
 * This native makes entities visible that are hidden by the native CREATE_MODEL_HIDE.
 * p5 should be false, true does nothing
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param modelHash
 * @param p5
 */
export function removeModelHide(x: number, y: number, z: number, radius: number, modelHash: number, p5: boolean): void { 
	return _in(0xd9e3006f, 0xb3cbd765, _fv(x), _fv(y), _fv(z), _fv(radius), _ch(modelHash), p5); 
}

export function removeModelSwap(x: number, y: number, z: number, radius: number, originalModel: number, newModel: number, p6: boolean): void { 
	return _in(0x033c0f9a, 0x64e229ae, _fv(x), _fv(y), _fv(z), _fv(radius), _ch(originalModel), _ch(newModel), p6); 
}

export function removeMpGamerTag(gamerTagId: number): void { 
	return _in(0x31698aa8, 0x0e0223f8, gamerTagId); 
}

export function removeMultiplayerBankCash(): void { 
	return _in(0xc7c6789a, 0xa1cfedd0); 
}

/**
 * Removes multiplayer cash hud each frame
 */
export function removeMultiplayerHudCash(): void { 
	return _in(0x968f270e, 0x39141eca); 
}

export function removeMultiplayerWalletCash(): void { 
	return _in(0x95cf81bd, 0x06ee1887); 
}

export function removeNamedPtfxAsset(fxName: string): void { 
	return _in(0x5f61ebbe, 0x1a00f96d, _ts(fxName)); 
}

export function removeNavmeshBlockingObject(p0: number): void { 
	return _in(0x46399a78, 0x95957c0e, p0); 
}

export function removeNavmeshRequiredRegions(): void { 
	return _in(0x916f0a3c, 0xdec3445e); 
}

export function removeObjectHighDetailModel(object: number): void { 
	return _in(0x4a39db43, 0xe47cf3aa, object); 
}

export function removeParticleFx(ptfxHandle: number, p1: boolean): void { 
	return _in(0xc401503d, 0xfe8d53cf, ptfxHandle, p1); 
}

export function removeParticleFxFromEntity(entity: number): void { 
	return _in(0xb8feaeeb, 0xcc127425, entity); 
}

export function removeParticleFxInRange(X: number, Y: number, Z: number, radius: number): void { 
	return _in(0xdd19fa1c, 0x6d657305, _fv(X), _fv(Y), _fv(Z), _fv(radius)); 
}

/**
 * Ped will no longer get angry when you stay near him.
 * @param ped
 * @param toggle
 */
export function removePedDefensiveArea(ped: number, toggle: boolean): void { 
	return _in(0x74d4e028, 0x107450a9, ped, toggle); 
}

/**
 * Judging purely from a quick disassembly, if the ped is in a vehicle, the ped will be deleted immediately. If not, it'll be marked as no longer needed. - very elegant..
 * @param ped
 */
export function removePedElegantly(ped: number): number { 
	return _in(0xac6d445b, 0x994df95e, _ii(ped)); 
}

export function removePedFromGroup(ped: number): void { 
	return _in(0xed74007f, 0xfb146bc2, ped); 
}

export function removePedHelmet(ped: number, instantly: boolean): void { 
	return _in(0xa7b2458d, 0x0ad6ded8, ped, instantly); 
}

export function removePedPreferredCoverSet(ped: number): void { 
	return _in(0xfddb234c, 0xf74073d9, ped); 
}

/**
 * Retracts the hook on the cargobob.
 * 
 * Note: after you retract it the natives for dropping the hook no longer work
 * @param cargobob
 */
export function removePickUpRopeForCargobob(cargobob: number): void { 
	return _in(0x9768cf64, 0x8f54c804, cargobob); 
}

export function removePickup(pickup: number): void { 
	return _in(0x3288d8ac, 0xaecd2ab2, pickup); 
}

export function removePlayerHelmet(player: number, p2: boolean): void { 
	return _in(0xf3ac26d3, 0xcc576528, player, p2); 
}

export function removePlayerTargetableEntity(player: number, entity: number): void { 
	return _in(0x9f260bfb, 0x59adbca3, player, entity); 
}

export function removePopMultiplierArea(id: number, p1: boolean): void { 
	return _in(0xb129e447, 0xa2eda4bf, id, p1); 
}

/**
 * Removes population multiplier sphere
 * @param id
 * @param p1
 */
export function removePopMultiplierSphere(id: number, p1: boolean): void { 
	return _in(0xe6869bec, 0xdd8f2403, id, p1); 
}

/**
 * Found in the b617d scripts, duplicates removed:
 * 
 * AUDIO::REMOVE_PORTAL_SETTINGS_OVERRIDE("V_CARSHOWROOM_PS_WINDOW_UNBROKEN");
 * AUDIO::REMOVE_PORTAL_SETTINGS_OVERRIDE("V_CIA_PS_WINDOW_UNBROKEN");
 * AUDIO::REMOVE_PORTAL_SETTINGS_OVERRIDE("V_DLC_HEIST_APARTMENT_DOOR_CLOSED");
 * AUDIO::REMOVE_PORTAL_SETTINGS_OVERRIDE("V_FINALEBANK_PS_VAULT_INTACT");
 * AUDIO::REMOVE_PORTAL_SETTINGS_OVERRIDE("V_MICHAEL_PS_BATHROOM_WITH_WINDOW");
 * @param p0
 */
export function removePortalSettingsOverride(p0: string): void { 
	return _in(0xb4bbfd9c, 0xd8b3922b, _ts(p0)); 
}

export function removePtfxAsset(): void { 
	return _in(0x88c68140, 0x73dd4a73); 
}

export function removeRelationshipGroup(groupHash: number): void { 
	return _in(0xb6ba2444, 0xab393da2, _ch(groupHash)); 
}

export function removeRoadNodeSpeedZone(speedzone: number): boolean { 
	return _in(0x1033371f, 0xc8e842a7, speedzone, _r); 
}

export function removeScaleformScriptHudMovie(hudComponent: number): void { 
	return _in(0xf44a5456, 0xac3f4f97, hudComponent); 
}

export function removeScenarioBlockingArea(p0: number, p1: boolean): void { 
	return _in(0x31d16b74, 0xc6e29d66, p0, p1); 
}

export function removeScenarioBlockingAreas(): void { 
	return _in(0xd37401d7, 0x8a929a49); 
}

export function removeScriptFire(fireHandle: number): void { 
	return _in(0x7ff54838, 0x5680673f, fireHandle); 
}

/**
 * Resets values set by SET_SCRIPT_FIRE_POSITION
 */
export function removeScriptFirePosition(): void { 
	return _in(0x7148e0f4, 0x3d11f0d9); 
}

export function removeShockingEvent(event: number): boolean { 
	return _in(0x2cda538c, 0x44c6cce5, event, _r); 
}

export function removeShockingEventSpawnBlockingAreas(): void { 
	return _in(0x340f1415, 0xb68aeade); 
}

export function removeSpecificCoverBlockingAreas(startX: number, startY: number, startZ: number, endX: number, endY: number, endZ: number, blockObjects: boolean, blockVehicles: boolean, blockMap: boolean, blockPlayer: boolean): void { 
	return _in(0x1f351cf1, 0xc6475734, _fv(startX), _fv(startY), _fv(startZ), _fv(endX), _fv(endY), _fv(endZ), blockObjects, blockVehicles, blockMap, blockPlayer); 
}

export function removeStealthModeAsset(asset: string): void { 
	return _in(0x9219857d, 0x21f0e842, _ts(asset)); 
}

export function removeVehicleAsset(vehicleAsset: number): void { 
	return _in(0xace699c7, 0x1ab9deb5, vehicleAsset); 
}

export function removeVehicleCombatAvoidanceArea(p0: number): void { 
	return _in(0xe30524e1, 0x871f481d, p0); 
}

export function removeVehicleCrewEmblem(vehicle: number, p1: number): void { 
	return _in(0xd2300034, 0x310557e4, vehicle, p1); 
}

export function removeVehicleHighDetailModel(vehicle: number): void { 
	return _in(0x00689cde, 0x5f7c6787, vehicle); 
}

export function removeVehicleMod(vehicle: number, modType: number): void { 
	return _in(0x92d619e4, 0x20858204, vehicle, modType); 
}

/**
 * See REQUEST_VEHICLE_RECORDING
 * @param recording
 * @param script
 */
export function removeVehicleRecording(recording: number, script: string): void { 
	return _in(0xf1160acc, 0xf98a3fc8, recording, _ts(script)); 
}

export function removeVehicleStuckCheck(vehicle: number): void { 
	return _in(0x8386bfb6, 0x14d06749, vehicle); 
}

export function removeVehicleUpsidedownCheck(vehicle: number): void { 
	return _in(0xc53eb42a, 0x499a7e90, vehicle); 
}

/**
 * windowIndex:
 * 0 = Front Right Window
 * 1 = Front Left Window
 * 2 = Back Right Window
 * 3 = Back Left Window
 * 4 = Unknown
 * 5 = Unknown
 * 6 = Windscreen
 * 7 = Rear Windscreen
 * @param vehicle
 * @param windowIndex
 */
export function removeVehicleWindow(vehicle: number, windowIndex: number): void { 
	return _in(0xa711568e, 0xedb43069, vehicle, windowIndex); 
}

export function removeVehiclesFromGeneratorsInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, p6: number): void { 
	return _in(0x46a1e1a2, 0x99ec4bba, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), p6); 
}

export function removeWarningMessageOptionItems(): void { 
	return _in(0x6ef54ab7, 0x21dc6242); 
}

/**
 * Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
 * @param name
 */
export function removeWaypointRecording(name: string): void { 
	return _in(0xff1b8b4a, 0xa1c25dc8, _ts(name)); 
}

export function removeWeaponAsset(weaponHash: number): void { 
	return _in(0xaa08ef13, 0xf341c8fc, _ch(weaponHash)); 
}

/**
 * Full list of weapons & components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param componentHash
 */
export function removeWeaponComponentFromPed(ped: number, weaponHash: number, componentHash: number): void { 
	return _in(0x1e8be90c, 0x74fb4c09, ped, _ch(weaponHash), _ch(componentHash)); 
}

/**
 * see DOES_WEAPON_TAKE_WEAPON_COMPONENT for full list of weapons & components
 * @param object
 * @param componentHash
 */
export function removeWeaponComponentFromWeaponObject(object: number, componentHash: number): void { 
	return _in(0xf7d82b0d, 0x66777611, object, _ch(componentHash)); 
}

/**
 * This native removes a specified weapon from your selected ped.
 * 
 * Example:
 * C#:
 * Function.Call(Hash.REMOVE_WEAPON_FROM_PED, Game.Player.Character, 0x99B507EA);
 * 
 * C++:
 * WEAPON::REMOVE_WEAPON_FROM_PED(PLAYER::PLAYER_PED_ID(), 0x99B507EA);
 * 
 * The code above removes the knife from the player.
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 */
export function removeWeaponFromPed(ped: number, weaponHash: number): void { 
	return _in(0x4899cb08, 0x8edf59b8, ped, _ch(weaponHash)); 
}

/**
 * draws circular marker at pos
 * -1 = none
 * 0 = red
 * 1 = green
 * 2 = blue
 * 3 = green larger
 * 4 = nothing
 * 5 = green small
 * @param x
 * @param y
 * @param z
 * @param colorIndex
 */
export function renderFakePickupGlow(x: number, y: number, z: number, colorIndex: number): void { 
	return _in(0x3430676b, 0x11cdf21d, _fv(x), _fv(y), _fv(z), colorIndex); 
}

/**
 * ease - smooth transition between the camera's positions
 * easeTime - Time in milliseconds for the transition to happen
 * 
 * If you have created a script (rendering) camera, and want to go back to the
 * character (gameplay) camera, call this native with render set to 0.
 * Setting ease to 1 will smooth the transition.
 * @param render
 * @param ease
 * @param easeTime
 * @param p3
 * @param p4
 * @param p5
 */
export function renderScriptCams(render: boolean, ease: boolean, easeTime: number, p3: boolean, p4: boolean, p5: number): void { 
	return _in(0x07e5b515, 0xdb0636fc, render, ease, easeTime, p3, p4, p5); 
}

export function renderShadowedLightsWithNoShadows(p0: boolean): void { 
	return _in(0x03300b57, 0xfcac6ddb, p0); 
}

/**
 * makes hudColorIndex2 color into hudColorIndex color
 * @param hudColorIndex
 * @param hudColorIndex2
 */
export function replaceHudColour(hudColorIndex: number, hudColorIndex2: number): void { 
	return _in(0x1ccc708f, 0x0f850613, hudColorIndex, hudColorIndex2); 
}

export function replaceHudColourWithRgba(hudColorIndex: number, r: number, g: number, b: number, a: number): void { 
	return _in(0xf314cf4f, 0x0211894e, hudColorIndex, r, g, b, a); 
}

export function replayCancelEvent(): void { 
	return _in(0x13b350b8, 0xad0eee10); 
}

/**
 * -This function appears to be deprecated/ unused. Tracing the call internally leads to a _nullsub -
 * 
 * first one seems to be a string of a mission name, second one seems to be a bool/toggle
 * 
 * p1 was always 0.
 * 
 * @param missionNameLabel
 * @param p1
 */
export function replayCheckForEventThisFrame(missionNameLabel: string, p1: number): void { 
	return _in(0x20878409, 0x9002bc30, _ts(missionNameLabel), p1); 
}

/**
 * Sets (almost, not sure) all Rockstar Editor values (bIsRecording etc) to 0.
 */
export function replayControlShutdown(): void { 
	return _in(0x3353d13f, 0x09307691); 
}

/**
 * This will disable the ability to make camera changes in R* Editor.
 */
export function replayDisableCameraMovementThisFrame(): void { 
	return _in(0xaf66dcee, 0x6609b148); 
}

export function replayGetMaxDistanceAllowedFromPlayer(): number { 
	return _in(0x8bfceb5e, 0xa1b161b6, _r, _rf); 
}

/**
 * This disable the recording feature and has to be called every frame.
 */
export function replayPreventRecordingThisFrame(): void { 
	return _in(0xeb2d525b, 0x57f42b40); 
}

export function replayRecordBackForTime(p0: number, p1: number, p2: number): void { 
	return _in(0x293220da, 0x1b46cebc, _fv(p0), _fv(p1), p2); 
}

export function replayResetEventInfo(): void { 
	return _in(0xf854439e, 0xfbb3b583); 
}

export function replayStartEvent(p0: number): void { 
	return _in(0x48621c9f, 0xca3ebd28, p0); 
}

export function replayStopEvent(): void { 
	return _in(0x81cbae94, 0x390f9f89); 
}

/**
 * Returns a bool if interior rendering is disabled, if yes, all "normal" rendered interiors are invisible
 */
export function replaySystemHasRequestedAScriptCleanup(): boolean { 
	return _in(0x95ab8b5c, 0x992c7b58, _r); 
}

/**
 * PLAYER::REPORT_CRIME(PLAYER::PLAYER_ID(), 37, PLAYER::GET_WANTED_LEVEL_THRESHOLD(1));
 * 
 * From am_armybase.ysc.c4:
 * 
 * PLAYER::REPORT_CRIME(PLAYER::PLAYER_ID(4), 36, PLAYER::GET_WANTED_LEVEL_THRESHOLD(4));
 * 
 * -----
 * 
 * This was taken from the GTAV.exe v1.334. The function is called sub_140592CE8. For a full decompilation of the function, see here: https://pastebin.com/09qSMsN7
 * 
 * -----
 * crimeType:
 * 1: Firearms possession
 * 2: Person running a red light ("5-0-5")
 * 3: Reckless driver
 * 4: Speeding vehicle (a "5-10")
 * 5: Traffic violation (a "5-0-5")
 * 6: Motorcycle rider without a helmet
 * 7: Vehicle theft (a "5-0-3")
 * 8: Grand Theft Auto
 * 9: ???
 * 10: ???
 * 11: Assault on a civilian (a "2-40")
 * 12: Assault on an officer
 * 13: Assault with a deadly weapon (a "2-45")
 * 14: Officer shot (a "2-45")
 * 15: Pedestrian struck by a vehicle
 * 16: Officer struck by a vehicle
 * 17: Helicopter down (an "AC"?)
 * 18: Civilian on fire (a "2-40")
 * 19: Officer set on fire (a "10-99")
 * 20: Car on fire
 * 21: Air unit down (an "AC"?)
 * 22: An explosion (a "9-96")
 * 23: A stabbing (a "2-45") (also something else I couldn't understand)
 * 24: Officer stabbed (also something else I couldn't understand)
 * 25: Attack on a vehicle ("MDV"?)
 * 26: Damage to property
 * 27: Suspect threatening officer with a firearm
 * 28: Shots fired
 * 29: ???
 * 30: ???
 * 31: ???
 * 32: ???
 * 33: ???
 * 34: A "2-45"
 * 35: ???
 * 36: A "9-25"
 * 37: ???
 * 38: ???
 * 39: ???
 * 40: ???
 * 41: ???
 * 42: ???
 * 43: Possible disturbance
 * 44: Civilian in need of assistance
 * 45: ???
 * 46: ???
 * @param player
 * @param crimeType
 * @param wantedLvlThresh
 */
export function reportCrime(player: number, crimeType: number, wantedLvlThresh: number): void { 
	return _in(0xe9b09589, 0x827545e7, player, crimeType, wantedLvlThresh); 
}

export function reportPoliceSpottedPlayer(player: number): void { 
	return _in(0xdc64d2c5, 0x3493ed12, player); 
}

export function requestActionModeAsset(asset: string): void { 
	return _in(0x290e2780, 0xbb7aa598, _ts(asset)); 
}

/**
 * Alias of REQUEST_COLLISION_AT_COORD.
 * @param x
 * @param y
 * @param z
 */
export function requestAdditionalCollisionAtCoord(x: number, y: number, z: number): void { 
	return _in(0xc9156dc1, 0x1411a9ea, _fv(x), _fv(y), _fv(z)); 
}

/**
 * Request a gxt into the passed slot.
 * @param gxt
 * @param slot
 */
export function requestAdditionalText(gxt: string, slot: number): void { 
	return _in(0x71a78003, 0xc8e71424, _ts(gxt), slot); 
}

export function requestAdditionalTextForDlc(gxt: string, slot: number): void { 
	return _in(0x6009f9f1, 0xae90d8a6, _ts(gxt), slot); 
}

/**
 * All occurrences and usages found in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/XZ1tmGEz
 * Full list of ambient audio bank names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientAudioBankNames.json
 * p2 is always -1
 * @param audioBank
 * @param p1
 * @param p2
 */
export function requestAmbientAudioBank(audioBank: string, p1: boolean, p2: number): boolean { 
	return _in(0xfe02ffbe, 0xd8ca9d99, _ts(audioBank), p1, p2, _r); 
}

/**
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param animDict
 */
export function requestAnimDict(animDict: string): void { 
	return _in(0xd3bd4095, 0x1412fef6, _ts(animDict)); 
}

/**
 * Starts loading the specified animation set. An animation set provides movement animations for a ped. See SET_PED_MOVEMENT_CLIPSET.
 * 
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * 
 * Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
 * @param animSet
 */
export function requestAnimSet(animSet: string): void { 
	return _in(0x6ea47dae, 0x7fad0eed, _ts(animSet)); 
}

/**
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * 
 * Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
 * @param clipSet
 */
export function requestClipSet(clipSet: string): void { 
	return _in(0xd2a71e1a, 0x77418a49, _ts(clipSet)); 
}

export function requestCollisionAtCoord(x: number, y: number, z: number): void { 
	return _in(0x07503f79, 0x48f491a7, _fv(x), _fv(y), _fv(z)); 
}

export function requestCollisionForModel(model: number): void { 
	return _in(0x923cb32a, 0x3b874fcb, _ch(model)); 
}

export function requestCommerceItemImage(index: number): boolean { 
	return _in(0xa2f95210, 0x4fc6dd4b, index, _r); 
}

/**
 * Simply loads the cutscene and doesn't do extra stuff that REQUEST_CUTSCENE does.
 * Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
 * @param cutsceneName
 */
export function requestCutFile(cutsceneName: string): void { 
	return _in(0x06a35241, 0x61c502ba, _ts(cutsceneName)); 
}

/**
 * flags: Usually 8
 * Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
 * @param cutsceneName
 * @param flags
 */
export function requestCutscene(cutsceneName: string, flags: number): void { 
	return _in(0x7a86743f, 0x475d9e09, _ts(cutsceneName), flags); 
}

/**
 * flags: Usually 8
 * 
 * playbackFlags: Which scenes should be played.
 * Example: 0x105 (bit 0, 2 and 8 set) will enable scene 1, 3 and 9.
 * Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
 * @param cutsceneName
 * @param playbackFlags
 * @param flags
 */
export function requestCutsceneWithPlaybackList(cutsceneName: string, playbackFlags: number, flags: number): void { 
	return _in(0xc23de0e9, 0x1c30b58c, _ts(cutsceneName), playbackFlags, flags); 
}

export function requestEarlyLightCheck(): void { 
	return _in(0x98edf76a, 0x7271e4f2); 
}

/**
 * Exemple: REQUEST_IPL("TrevorsTrailerTrash");
 * 
 * Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json
 * @param iplName
 */
export function requestIpl(iplName: string): void { 
	return _in(0x41b48938, 0x43bbdb74, _ts(iplName)); 
}

export function requestMenuPedModel(model: number): void { 
	return _in(0xa0261aef, 0x7acfc51e, _ch(model)); 
}

/**
 * All occurrences and usages found in b617d: https://pastebin.com/NzZZ2Tmm
 * Full list of mission audio bank names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/missionAudioBankNames.json
 * p2 is always -1
 * @param audioBank
 * @param p1
 * @param p2
 */
export function requestMissionAudioBank(audioBank: string, p1: boolean, p2: number): boolean { 
	return _in(0x7345bdd9, 0x5e62e0f2, _ts(audioBank), p1, p2, _r); 
}

/**
 * Request a model to be loaded into memory.
 * 
 * @param model
 */
export function requestModel(model: number): void { 
	return _in(0x963d27a5, 0x8df860ac, _ch(model)); 
}

/**
 * STREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, "V_FIB01_cur_elev");
 * STREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, "limbo");
 * STREAMING::REQUEST_MODELS_IN_ROOM(l_13BB, "V_Office_gnd_lifts");
 * STREAMING::REQUEST_MODELS_IN_ROOM(l_13BB, "limbo");
 * STREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, "v_fib01_jan_elev");
 * STREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, "limbo");
 * @param interior
 * @param roomName
 */
export function requestModelsInRoom(interior: number, roomName: string): void { 
	return _in(0x8a7a4010, 0x0edfec58, interior, _ts(roomName)); 
}

/**
 * From the b678d decompiled scripts:
 * 
 * STREAMING::REQUEST_NAMED_PTFX_ASSET("core_snow");
 * STREAMING::REQUEST_NAMED_PTFX_ASSET("fm_mission_controler");
 * STREAMING::REQUEST_NAMED_PTFX_ASSET("proj_xmas_firework");
 * STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_apartment_mp");
 * STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_biolab_heist");
 * STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_indep_fireworks");
 * STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_indep_parachute");
 * STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_indep_wheelsmoke");
 * STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_mp_cig_plane");
 * STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_mp_creator");
 * STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_mp_tankbattle");
 * STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_ornate_heist");
 * STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_prison_break_heist_station");
 * @param fxName
 */
export function requestNamedPtfxAsset(fxName: string): void { 
	return _in(0xb80d8756, 0xb4668ab6, _ts(fxName)); 
}

/**
 * Used internally for long range tasks
 * @param x1
 * @param y1
 * @param x2
 * @param y2
 */
export function requestPathNodesInAreaThisFrame(x1: number, y1: number, x2: number, y2: number): boolean { 
	return _in(0x07fb139b, 0x592fa687, _fv(x1), _fv(y1), _fv(x2), _fv(y2), _r); 
}

export function requestPedRestrictedVehicleVisibilityTracking(ped: number, p1: boolean): void { 
	return _in(0xcd018c59, 0x1f94cb43, ped, p1); 
}

export function requestPedUseSmallBboxVisibilityTracking(ped: number, p1: boolean): void { 
	return _in(0x75ba1cb3, 0xb7d40caf, ped, p1); 
}

export function requestPedVehicleVisibilityTracking(ped: number, p1: boolean): void { 
	return _in(0x2bc338a7, 0xb21f4608, ped, p1); 
}

export function requestPedVisibilityTracking(ped: number): void { 
	return _in(0x7d7a2e43, 0xe74e2eb8, ped); 
}

export function requestPedheadshotImgUpload(id: number): boolean { 
	return _in(0xf0daef2f, 0x545bee25, id, _r); 
}

/**
 * maps script name (thread + 0xD0) by lookup via scriptfx.dat - does nothing when script name is empty
 */
export function requestPtfxAsset(): void { 
	return _in(0x944955fb, 0x2a3935c8); 
}

/**
 * This native does absolutely nothing, just a nullsub
 * @param p0
 * @param p1
 */
export function requestRagdollBoundsUpdate(p0: number, p1: number): void { 
	return _in(0x1216e0bf, 0xa72cc703, p0, p1); 
}

export function requestScaleformMovie(scaleformName: string): number { 
	return _in(0x11fe353c, 0xf9733e6f, _ts(scaleformName), _r, _ri); 
}

export function requestScaleformMovieInstance(scaleformName: string): number { 
	return _in(0xc514489c, 0xfb8af806, _ts(scaleformName), _r, _ri); 
}

/**
 * Similar to REQUEST_SCALEFORM_MOVIE, but seems to be some kind of "interactive" scaleform movie?
 * 
 * These seem to be the only scaleforms ever requested by this native:
 * "breaking_news"
 * "desktop_pc"
 * "ECG_MONITOR"
 * "Hacking_PC"
 * "TEETH_PULLING"
 * 
 * Note: Unless this hash is out-of-order, this native is next-gen only.
 * 
 * @param scaleformName
 */
export function requestScaleformMovieSkipRenderWhilePaused(scaleformName: string): number { 
	return _in(0xbd06c611, 0xbb9048c2, _ts(scaleformName), _r, _ri); 
}

/**
 * Another REQUEST_SCALEFORM_MOVIE equivalent.
 * @param scaleformName
 */
export function requestScaleformMovieWithIgnoreSuperWidescreen(scaleformName: string): number { 
	return _in(0x65e7e788, 0x42e74cdb, _ts(scaleformName), _r, _ri); 
}

export function requestScaleformScriptHudMovie(hudComponent: number): void { 
	return _in(0x9304881d, 0x6f6537ea, hudComponent); 
}

export function requestScript(scriptName: string): void { 
	return _in(0x6eb5f71a, 0xa68f2e8e, _ts(scriptName)); 
}

/**
 * All occurrences and usages found in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/AkmDAVn6
 * Full list of script audio bank names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scriptAudioBankNames.json
 * p2 is always -1
 * @param audioBank
 * @param p1
 * @param p2
 */
export function requestScriptAudioBank(audioBank: string, p1: boolean, p2: number): boolean { 
	return _in(0x2f844a8b, 0x08d76685, _ts(audioBank), p1, p2, _r); 
}

/**
 * formerly _REQUEST_STREAMED_SCRIPT
 * @param scriptHash
 */
export function requestScriptWithNameHash(scriptHash: number): void { 
	return _in(0xd62a67d2, 0x6d9653e6, _ch(scriptHash)); 
}

export function requestStealthModeAsset(asset: string): void { 
	return _in(0x2a0a62fc, 0xdee16d4f, _ts(asset)); 
}

/**
 * This function can requests texture dictonaries from following RPFs:
 * scaleform_generic.rpf
 * scaleform_minigames.rpf
 * scaleform_minimap.rpf
 * scaleform_web.rpf
 * 
 * last param isnt a toggle
 * @param textureDict
 * @param p1
 */
export function requestStreamedTextureDict(textureDict: string, p1: boolean): void { 
	return _in(0xdfa2ef8e, 0x04127dd5, _ts(textureDict), p1); 
}

export function requestTaskMoveNetworkStateTransition(ped: number, name: string): boolean { 
	return _in(0xd01015c7, 0x316ae176, ped, _ts(name), _r); 
}

export function requestTennisBanks(ped: number): void { 
	return _in(0x4ada3f19, 0xbe4a6047, ped); 
}

/**
 * REQUEST_VEHICLE_ASSET(GET_HASH_KEY(cargobob3), 3);
 * 
 * vehicle found that have asset's:
 * cargobob3
 * submersible
 * blazer
 * @param vehicleHash
 * @param vehicleAsset
 */
export function requestVehicleAsset(vehicleHash: number, vehicleAsset: number): void { 
	return _in(0x81a15811, 0x460fab3a, _ch(vehicleHash), vehicleAsset); 
}

export function requestVehicleDial(vehicle: number): void { 
	return _in(0xdba3c090, 0xe3d74690, vehicle); 
}

export function requestVehicleHighDetailModel(vehicle: number): void { 
	return _in(0xa6e9fdcb, 0x2c76785e, vehicle); 
}

/**
 * Request the vehicle recording defined by the lowercase format string "%s%03d.yvr". For example, REQUEST_VEHICLE_RECORDING(1, "FBIs1UBER") corresponds to fbis1uber001.yvr.
 * For all vehicle recording/playback natives, "script" is a common prefix that usually corresponds to the script/mission the recording is used in, "recording" is its int suffix, and "id" (e.g., in native GET_TOTAL_DURATION_OF_VEHICLE_RECORDING_ID) corresponds to a unique identifier within the recording streaming module.
 * Note that only 24 recordings (hardcoded in multiple places) can ever active at a given time before clobbering begins.
 * @param recording
 * @param script
 */
export function requestVehicleRecording(recording: number, script: string): void { 
	return _in(0xaf514cab, 0xe74cbf15, recording, _ts(script)); 
}

/**
 * Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
 * For a full list of the points, see here: goo.gl/wIH0vn
 * 
 * Max number of loaded recordings is 32.
 * @param name
 */
export function requestWaypointRecording(name: string): void { 
	return _in(0x9eefb62e, 0xb27b5792, _ts(name)); 
}

/**
 * Nearly every instance of p1 I found was 31. Nearly every instance of p2 I found was 0.
 * 
 * REQUEST_WEAPON_ASSET(iLocal_1888, 31, 26);
 * @param weaponHash
 * @param p1
 * @param p2
 */
export function requestWeaponAsset(weaponHash: number, p1: number, p2: number): void { 
	return _in(0x5443438f, 0x033e29c3, _ch(weaponHash), p1, p2); 
}

export function requestWeaponHighDetailModel(weaponObject: number): void { 
	return _in(0x48164dbb, 0x970ac3f0, weaponObject); 
}

export function reserveLocalNetworkMissionObjects(amount: number): void { 
	return _in(0x797f9c5e, 0x661d920e, amount); 
}

export function reserveLocalNetworkMissionPeds(amount: number): void { 
	return _in(0x2c8df5d1, 0x29595281, amount); 
}

export function reserveLocalNetworkMissionVehicles(amount: number): void { 
	return _in(0x42613035, 0x157e4208, amount); 
}

export function reserveNetworkMissionObjects(amount: number): void { 
	return _in(0x4e5c93bd, 0x0c32fbf8, amount); 
}

export function reserveNetworkMissionPeds(amount: number): void { 
	return _in(0xb60feba4, 0x5333d36f, amount); 
}

export function reserveNetworkMissionVehicles(amount: number): void { 
	return _in(0x76b02e21, 0xed27a469, amount); 
}

/**
 * Sets an value related to timecycles.
 * @param p0
 */
export function resetAdaptation(p0: number): void { 
	return _in(0xe3e2c1b4, 0xc59dbc77, p0); 
}

export function resetAiMeleeWeaponDamageModifier(): void { 
	return _in(0x46e56a7c, 0xd1d63c3f); 
}

export function resetAiWeaponDamageModifier(): void { 
	return _in(0xea16670e, 0x7ba4743c); 
}

/**
 * Sets the waves intensity back to original (1.0 in most cases).
 */
export function resetDeepOceanScaler(): void { 
	return _in(0x5e5e9928, 0x5ae812db); 
}

export function resetDisableBreaking(object: number): void { 
	return _in(0xcc6e9636, 0x82533882, object); 
}

export function resetDispatchIdealSpawnDistance(): void { 
	return _in(0x77a84429, 0xdd9f0a15); 
}

export function resetDispatchSpawnBlockingAreas(): void { 
	return _in(0xac7bfd5c, 0x1d83ea75); 
}

export function resetDispatchSpawnLocation(): void { 
	return _in(0x5896f2bd, 0x5683a4e1); 
}

export function resetDispatchTimeBetweenSpawnAttempts(p0: number): void { 
	return _in(0xeb2db0ca, 0xd13154b3, p0); 
}

export function resetEndUserBenchmark(): void { 
	return _in(0x437138b6, 0xa830166a); 
}

export function resetEntityAlpha(entity: number): void { 
	return _in(0x9b1e824f, 0xfbb7027a, entity); 
}

export function resetExclusiveScenarioGroup(): void { 
	return _in(0x4202bbcb, 0x8684563d); 
}

export function resetFacialIdleAnim(ped: number): void { 
	return _in(0x007fde5a, 0x7897e426, ped); 
}

/**
 * Resets the effect of SET_FORMATION_LEADER
 */
export function resetFormationLeader(): void { 
	return _in(0xe2f53f17, 0x2b45ede1); 
}

export function resetGameplayCamFullAttachParentTransformTimer(): void { 
	return _in(0x7295c203, 0xdd659dfe); 
}

/**
 * Resets the entity ghost alpha to the default value (128)
 */
export function resetGhostAlpha(): void { 
	return _in(0x17330ebf, 0x2f2124a8); 
}

export function resetGlobalActionscriptFlag(flagIndex: number): void { 
	return _in(0xb99c4e4d, 0x9499df29, flagIndex); 
}

export function resetGroupFormationDefaultSpacing(groupHandle: number): void { 
	return _in(0x63dab4cc, 0xb3273205, groupHandle); 
}

export function resetHudComponentValues(id: number): void { 
	return _in(0x450930e6, 0x16475d0d, id); 
}

/**
 * 2 matches in 1 script - am_hold_up
 * 
 * Used in multiplayer scripts?
 */
export function resetLawResponseDelayOverride(): void { 
	return _in(0x0032a6db, 0xa562c518); 
}

/**
 * Resets the effect of SET_PARTICLE_FX_OVERRIDE
 * 
 * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
 * @param name
 */
export function resetParticleFxOverride(name: string): void { 
	return _in(0x89c8553d, 0xd3274aae, _ts(name)); 
}

export function resetPausedRenderphases(): void { 
	return _in(0xe1c87094, 0x06f2c41c); 
}

export function resetPedAudioFlags(ped: number): void { 
	return _in(0xf54bb7b6, 0x1036f335, ped); 
}

export function resetPedInVehicleContext(ped: number): void { 
	return _in(0x22ef8ff8, 0x778030eb, ped); 
}

/**
 * Resets the value for the last vehicle driven by the Ped.
 * @param ped
 */
export function resetPedLastVehicle(ped: number): void { 
	return _in(0xbb8de8cf, 0x6a8dd8bb, ped); 
}

/**
 * If p1 is 0.0, I believe you are back to normal.
 * If p1 is 1.0, it looks like you can only rotate the ped, not walk.
 * 
 * Using the following code to reset back to normal
 * PED::RESET_PED_MOVEMENT_CLIPSET(PLAYER::PLAYER_PED_ID(), 0.0);
 * @param ped
 * @param p1
 */
export function resetPedMovementClipset(ped: number, p1: number): void { 
	return _in(0xaa74ec0c, 0xb0aaea2c, ped, _fv(p1)); 
}

export function resetPedRagdollTimer(ped: number): void { 
	return _in(0x9fa4664c, 0xf62e47e8, ped); 
}

export function resetPedStrafeClipset(ped: number): void { 
	return _in(0x20510814, 0x175ea477, ped); 
}

export function resetPedVisibleDamage(ped: number): void { 
	return _in(0x3ac1f7b8, 0x98f30c05, ped); 
}

export function resetPedWeaponMovementClipset(ped: number): void { 
	return _in(0x97b0db5b, 0x4aa74e77, ped); 
}

/**
 * Similar to RESET_ENTITY_ALPHA
 * @param entity
 */
export function resetPickupEntityGlow(entity: number): void { 
	return _in(0x490861b8, 0x8f4fd846, entity); 
}

export function resetPlayerArrestState(player: number): void { 
	return _in(0x2d03e13c, 0x460760d6, player); 
}

export function resetPlayerInputGait(player: number): void { 
	return _in(0x19531c47, 0xa2abd691, player); 
}

export function resetPlayerStamina(player: number): void { 
	return _in(0xa6f312fc, 0xce9c1dfe, player); 
}

export function resetReticuleValues(): void { 
	return _in(0x12782ce0, 0xa636e9f0); 
}

export function resetScenarioGroupsEnabled(): void { 
	return _in(0xdd902d03, 0x49afad3a); 
}

export function resetScenarioTypesEnabled(): void { 
	return _in(0x0d40ee2a, 0x7f2b2d6d); 
}

/**
 * This function resets the alignment set using SET_SCRIPT_GFX_ALIGN and SET_SCRIPT_GFX_ALIGN_PARAMS to the default values ('I', 'I'; 0, 0, 0, 0).
 * This should be used after having used the aforementioned functions in order to not affect any other scripts attempting to draw.
 */
export function resetScriptGfxAlign(): void { 
	return _in(0xe3a3db41, 0x4a373dab); 
}

export function resetStoreNetworkGameTracking(): void { 
	return _in(0x444c4525, 0xece0a4b9); 
}

export function resetTrevorRage(): void { 
	return _in(0xe78503b1, 0x0c4314e0); 
}

export function resetVehicleStartupRevSound(vehicle: number): void { 
	return _in(0xd2dccd8e, 0x16e20997, vehicle); 
}

/**
 * The inner function has a switch on the second parameter. It's the stuck timer index.
 * 
 * Here's some pseudo code I wrote for the inner function:
 * void __fastcall NATIVE_RESET_VEHICLE_STUCK_TIMER_INNER(CUnknown* unknownClassInVehicle, int timerIndex)
 * {
 * switch (timerIndex)
 * {
 * case 0:
 * unknownClassInVehicle->FirstStuckTimer = (WORD)0u;
 * case 1:
 * unknownClassInVehicle->SecondStuckTimer = (WORD)0u;
 * case 2:
 * unknownClassInVehicle->ThirdStuckTimer = (WORD)0u;
 * case 3:
 * unknownClassInVehicle->FourthStuckTimer = (WORD)0u;
 * case 4:
 * unknownClassInVehicle->FirstStuckTimer = (WORD)0u;
 * unknownClassInVehicle->SecondStuckTimer = (WORD)0u;
 * unknownClassInVehicle->ThirdStuckTimer = (WORD)0u;
 * unknownClassInVehicle->FourthStuckTimer = (WORD)0u;
 * break;
 * };
 * }
 * @param vehicle
 * @param nullAttributes
 */
export function resetVehicleStuckTimer(vehicle: number, nullAttributes: number): void { 
	return _in(0xd7591b00, 0x65afaa7a, vehicle, nullAttributes); 
}

export function resetVehicleWheels(vehicle: number, toggle: boolean): void { 
	return _in(0x21d2e566, 0x2c1f6fed, vehicle, toggle); 
}

export function resetWantedLevelDifficulty(player: number): void { 
	return _in(0xb9d0dd99, 0x0dc141dd, player); 
}

export function resetWantedLevelHiddenEscapeTime(player: number): void { 
	return _in(0x823ec8e8, 0x2ba45986, player); 
}

export function resetWantedResponseNumPedsToSpawn(): void { 
	return _in(0xd9f692d3, 0x49249528); 
}

export function resetWorldBoundaryForPlayer(): void { 
	return _in(0xda1df03d, 0x5a315f4e); 
}

/**
 * Before using this native click the native above and look at the decription.
 * 
 * Example:
 * int GetHash = Function.Call<int>(Hash.GET_HASH_KEY, "fe_menu_version_corona_lobby");
 * Function.Call(Hash.ACTIVATE_FRONTEND_MENU, GetHash, 0, -1);
 * Function.Call(Hash.RESTART_FRONTEND_MENU(GetHash, -1);
 * 
 * This native refreshes the frontend menu.
 * 
 * p1 = Hash of Menu
 * p2 = Unknown but always works with -1.
 * @param menuHash
 * @param p1
 */
export function restartFrontendMenu(menuHash: number, p1: number): void { 
	return _in(0x10706dc6, 0xad2d49c0, _ch(menuHash), p1); 
}

/**
 * In singleplayer it does exactly what the name implies. In FiveM / GTA:Online it shows `Disconnecting from GTA Online` HUD and then quits the game.
 */
export function restartGame(): void { 
	return _in(0xe574a662, 0xacaefbb1); 
}

export function restartScriptedConversation(): void { 
	return _in(0x9aeb285d, 0x1818c9ac); 
}

export function restorePlayerStamina(player: number, p1: number): void { 
	return _in(0xa352c1b8, 0x64cafd33, player, _fv(p1)); 
}

/**
 * This function will simply bring the dead person back to life.
 * 
 * Try not to use it alone, since using this function alone, will make peds fall through ground in hell(well for the most of the times).
 * 
 * Instead, before calling this function, you may want to declare the position, where your Resurrected ped to be spawn at.(For instance, Around 2 floats of Player's current position.)
 * 
 * Also, disabling any assigned task immediately helped in the number of scenarios, where If you want peds to perform certain decided tasks.
 * @param ped
 */
export function resurrectPed(ped: number): void { 
	return _in(0x71bc8e83, 0x8b9c6035, ped); 
}

export function retainEntityInInterior(entity: number, interior: number): void { 
	return _in(0x82ebb79e, 0x258fa2b7, entity, interior); 
}

/**
 * From fm_deathmatch_creator and fm_race_creator:
 * 
 * FILES::REVERT_CONTENT_CHANGESET_GROUP_FOR_ALL(joaat("GROUP_MAP_SP"));
 * FILES::EXECUTE_CONTENT_CHANGESET_GROUP_FOR_ALL(joaat("GROUP_MAP"));
 * @param hash
 */
export function revertContentChangesetGroupForAll(hash: number): void { 
	return _in(0x3c197828, 0x5b036b25, _ch(hash)); 
}

/**
 * It will revive/cure the injured ped. The condition is ped must not be dead.
 * 
 * Upon setting and converting the health int, found, if health falls below 5, the ped will lay on the ground in pain(Maximum default health is 100).
 * 
 * This function is well suited there.
 * @param ped
 */
export function reviveInjuredPed(ped: number): void { 
	return _in(0x8d8acd83, 0x88cd99ce, ped); 
}

/**
 * windowIndex:
 * 0 = Front Left Window
 * 1 = Front Right Window
 * 2 = Rear Left Window
 * 3 = Rear Right Window
 * 4 = Front Windscreen
 * 5 = Rear Windscreen
 * 6 = Mid Left
 * 7 = Mid Right
 * 8 = Invalid
 * @param vehicle
 * @param windowIndex
 */
export function rollDownWindow(vehicle: number, windowIndex: number): void { 
	return _in(0x7ad9e6ce, 0x657d69e3, vehicle, windowIndex); 
}

/**
 * Roll down all the windows of the vehicle passed through the first parameter.
 * @param vehicle
 */
export function rollDownWindows(vehicle: number): void { 
	return _in(0x85796b05, 0x49dde156, vehicle); 
}

/**
 * windowIndex:
 * 0 = Front Left Window
 * 1 = Front Right Window
 * 2 = Rear Left Window
 * 3 = Rear Right Window
 * 4 = Front Windscreen
 * 5 = Rear Windscreen
 * 6 = Mid Left
 * 7 = Mid Right
 * 8 = Invalid
 * @param vehicle
 * @param windowIndex
 */
export function rollUpWindow(vehicle: number, windowIndex: number): void { 
	return _in(0x602e548f, 0x46e24d59, vehicle, windowIndex); 
}

export function ropeAreTexturesLoaded(): boolean { 
	return _in(0xf2d0e6a7, 0x5cc05597, _r); 
}

export function ropeAttachVirtualBoundGeom(ropeId: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number, p10: number, p11: number, p12: number, p13: number): void { 
	return _in(0xbc0ce682, 0xd4d05650, ropeId, p1, _fv(p2), _fv(p3), _fv(p4), _fv(p5), _fv(p6), _fv(p7), _fv(p8), _fv(p9), _fv(p10), _fv(p11), _fv(p12), _fv(p13)); 
}

export function ropeChangeScriptOwner(p0: number, p1: boolean, p2: boolean): void { 
	return _in(0xb1b6216c, 0xa2e7b55e, p0, p1, p2); 
}

export function ropeConvertToSimple(ropeId: number): void { 
	return _in(0x5389d48e, 0xfa2f079a, ropeId); 
}

export function ropeDrawEnabled(p1: boolean): number { 
	return _in(0xa1ae7365, 0x41b0fca3, _i, p1); 
}

export function ropeDrawShadowEnabled(toggle: boolean): number { 
	return _in(0xf159a638, 0x06bb5ba8, _i, toggle); 
}

/**
 * Forces a rope to a certain length.
 * @param ropeId
 * @param length
 */
export function ropeForceLength(ropeId: number, length: number): void { 
	return _in(0xd009f759, 0xa723db1b, ropeId, _fv(length)); 
}

export function ropeGetDistanceBetweenEnds(ropeId: number): number { 
	return _in(0x73040398, 0xdff9a4a6, ropeId, _r, _rf); 
}

/**
 * Loads rope textures for all ropes in the current scene.
 */
export function ropeLoadTextures(): void { 
	return _in(0x9b9039db, 0xf2d258c1); 
}

/**
 * Reset a rope to a certain length.
 * @param ropeId
 * @param length
 */
export function ropeResetLength(ropeId: number, length: number): void { 
	return _in(0xc16de94d, 0x9bea14a0, ropeId, _fv(length)); 
}

export function ropeSetRefframevelocityColliderorder(ropeId: number, p1: number): void { 
	return _in(0xb743f735, 0xc03d7810, ropeId, p1); 
}

export function ropeSetSmoothReelin(ropeId: number, p1: boolean): void { 
	return _in(0x36ccb9be, 0x67b970fd, ropeId, p1); 
}

export function ropeSetUpdateOrder(ropeId: number, p1: number): void { 
	return _in(0xdc57a637, 0xa20006ed, ropeId, p1); 
}

export function ropeSetUpdatePinverts(ropeId: number): void { 
	return _in(0xc8d667ee, 0x52114aba, ropeId); 
}

/**
 * Unloads rope textures for all ropes in the current scene.
 */
export function ropeUnloadTextures(): void { 
	return _in(0x6ce36c35, 0xc1ac8163); 
}

export function rotateObject(object: number, p1: number, p2: number, p3: boolean): boolean { 
	return _in(0xafe24e4d, 0x29249e4a, object, _fv(p1), _fv(p2), p3, _r); 
}

export function round(value: number): number { 
	return _in(0xf2db717a, 0x73826179, _fv(value), _r, _ri); 
}

/**
 * Saves the benchmark recording to %USERPROFILE%\Documents\Rockstar Games\GTA V\Benchmarks and submits some metrics.
 */
export function saveEndUserBenchmark(): void { 
	return _in(0x37deb0aa, 0x183fb6d8); 
}

/**
 * 1 match in 1 script. cellphone_controller.
 * p0 is -1 in scripts.
 * @param unused
 */
export function saveHighQualityPhoto(unused: number): boolean { 
	return _in(0x3dec726c, 0x25a11bac, unused, _r); 
}

export function saveReplayRecording(): boolean { 
	return _in(0x644546ec, 0x5287471b, _r); 
}

export function savemigrationIsMpEnabled(): boolean { 
	return _in(0x84b418e9, 0x3894ac1c, _r); 
}

export function savemigrationMpGetAccount(p0: number, p1: number): [boolean, number] { 
	const [retval, p1_out] = _in(0xfce2747e, 0xef1d05fc, p0, _ii(p1), _r);
	return [retval as boolean, p1_out as number]; 
}

export function savemigrationMpGetAccountsStatus(): number { 
	return _in(0xc8cb5999, 0x919ea2ca, _r, _ri); 
}

export function savemigrationMpGetStatus(): number { 
	return _in(0x690b76bd, 0x2763e068, _r, _ri); 
}

export function savemigrationMpNumAccounts(): number { 
	return _in(0x77a16200, 0xe18e0c55, _r, _ri); 
}

export function savemigrationMpRequestAccounts(): boolean { 
	return _in(0x85f41f92, 0x25d08c72, _r); 
}

export function savemigrationMpRequestStatus(): boolean { 
	return _in(0xe5e9746a, 0x66359f9d, _r); 
}

/**
 * Returns the nickname of the logged-in Rockstar Social Club account.
 */
export function scAccountInfoGetNickname(): string { 
	return _in(0x198d161f, 0x458ecc7f, _r, _s); 
}

export function scAchievementInfoStatus(p0: number): [boolean, number] { 
	const [retval, p0_out] = _in(0x22579874, 0x3970412b, _ii(p0), _r);
	return [retval as boolean, p0_out as number]; 
}

export function scCacheNewRockstarMsgs(toggle: boolean): void { 
	return _in(0xbfa0a56a, 0x817c6c7d, toggle); 
}

export function scCommunityEventGetDisplayName(p0: string): boolean { 
	return _in(0xc2c97ea9, 0x7711d1ae, _ts(p0), _r); 
}

export function scCommunityEventGetDisplayNameById(p0: number, p1: string): boolean { 
	return _in(0x19853b5b, 0x17d77bca, p0, _ts(p1), _r); 
}

export function scCommunityEventGetDisplayNameForType(p0: string, p1: string): boolean { 
	return _in(0x33df47cc, 0x0642061b, _ts(p0), _ts(p1), _r); 
}

export function scCommunityEventGetEventId(): number { 
	return _in(0x4ed9c8d6, 0xda297639, _r, _ri); 
}

export function scCommunityEventGetEventIdForType(p0: string): number { 
	return _in(0x4a7d6e72, 0x7f941747, _ts(p0), _r, _ri); 
}

export function scCommunityEventGetExtraDataFloat(p0: string, p1: number): [boolean, number] { 
	const [retval, p1_out] = _in(0x50a8a362, 0x01dbf83e, _ts(p0), _fi(p1), _r);
	return [retval as boolean, p1_out as number]; 
}

export function scCommunityEventGetExtraDataFloatById(p0: number, p1: string, p2: number): [boolean, number] { 
	const [retval, p2_out] = _in(0xc5a35c73, 0xb68f3c49, p0, _ts(p1), _fi(p2), _r);
	return [retval as boolean, p2_out as number]; 
}

export function scCommunityEventGetExtraDataFloatForType(p0: string, p2: string): [boolean, number] { 
	const [retval, p1_out] = _in(0x2570e26b, 0xe63964e3, _ts(p0), _f, _ts(p2), _r);
	return [retval as boolean, p1_out as number]; 
}

export function scCommunityEventGetExtraDataInt(p0: string, p1: number): [boolean, number] { 
	const [retval, p1_out] = _in(0x710bcda8, 0x071eded1, _ts(p0), _ii(p1), _r);
	return [retval as boolean, p1_out as number]; 
}

export function scCommunityEventGetExtraDataIntById(p0: number, p1: string, p2: number): [boolean, number] { 
	const [retval, p2_out] = _in(0x8cc469ab, 0x4d349b7c, p0, _ts(p1), _ii(p2), _r);
	return [retval as boolean, p2_out as number]; 
}

export function scCommunityEventGetExtraDataIntForType(p0: string, p2: string): [boolean, number] { 
	const [retval, p1_out] = _in(0xe75a4a2e, 0x5e316d86, _ts(p0), _i, _ts(p2), _r);
	return [retval as boolean, p1_out as number]; 
}

export function scCommunityEventGetExtraDataString(p0: string, p1: string): boolean { 
	return _in(0x9de5d2f7, 0x23575ed0, _ts(p0), _ts(p1), _r); 
}

export function scCommunityEventGetExtraDataStringById(p0: number, p1: string, p2: string): boolean { 
	return _in(0x699e4a5c, 0x8c893a18, p0, _ts(p1), _ts(p2), _r); 
}

export function scCommunityEventGetExtraDataStringForType(p0: string, p1: string, p2: string): boolean { 
	return _in(0x1d12a56f, 0xc95be92e, _ts(p0), _ts(p1), _ts(p2), _r); 
}

export function scCommunityEventIsActive(): boolean { 
	return _in(0xff8f3a92, 0xb75ed67a, _r); 
}

export function scCommunityEventIsActiveById(p0: number): boolean { 
	return _in(0xa468e0be, 0x12b12c70, p0, _r); 
}

export function scCommunityEventIsActiveForType(p0: string): boolean { 
	return _in(0x450819d8, 0xcf90c416, _ts(p0), _r); 
}

export function scEmailDeleteEmails(p1: number): number { 
	return _in(0x44aca259, 0xd67651db, _i, p1); 
}

export function scEmailGetEmailAtIndex(p0: number, p1: number): [boolean, number] { 
	const [retval, p1_out] = _in(0x4737980e, 0x8a283806, p0, _ii(p1), _r);
	return [retval as boolean, p1_out as number]; 
}

export function scEmailGetNumRetrievedEmails(): number { 
	return _in(0x7db18ca8, 0xcad5b098, _r, _ri); 
}

export function scEmailGetRetrievalStatus(): number { 
	return _in(0x16da8172, 0x459434aa, _r, _ri); 
}

export function scEmailMarketingEmailOpened(index: number, type: number): void { 
	return _in(0x69aa35f3, 0xf391cdba, index, _ch(type)); 
}

export function scEmailMessageClearRecipList(): void { 
	return _in(0x55df6db4, 0x5179236e); 
}

export function scEmailMessagePushGamerToRecipList(gamerHandle: number): number { 
	return _in(0x2330c12a, 0x7a605d16, _ii(gamerHandle)); 
}

export function scEmailRetrieveEmails(offset: number, limit: number): void { 
	return _in(0x040addcb, 0xafa1018a, offset, limit); 
}

export function scEmailSendEmail(p0: string): void { 
	return _in(0x116fb94d, 0xc4b79f17, _ts(p0)); 
}

export function scEmailSetCurrentEmailTag(p0: number): boolean { 
	return _in(0x07dbd622, 0xd9533857, p0, _r); 
}

export function scGamerdataGetActiveXpBonus(value: number): [boolean, number] { 
	const [retval, value_out] = _in(0x2d874d4a, 0xe612a65f, _fi(value), _r);
	return [retval as boolean, value_out as number]; 
}

export function scGamerdataGetBool(name: string): boolean { 
	return _in(0x8416fe4e, 0x4629d7d7, _ts(name), _r); 
}

export function scGamerdataGetFloat(name: string, value: number): [boolean, number] { 
	const [retval, value_out] = _in(0xa770c8ee, 0xc6fb2ac5, _ts(name), _fi(value), _r);
	return [retval as boolean, value_out as number]; 
}

export function scGamerdataGetInt(name: string, value: number): [boolean, number] { 
	const [retval, value_out] = _in(0xc85a7127, 0xe7ad02aa, _ts(name), _ii(value), _r);
	return [retval as boolean, value_out as number]; 
}

export function scGamerdataGetString(name: string, value: string): boolean { 
	return _in(0x7ffcbfee, 0x44ecfabf, _ts(name), _ts(value), _r); 
}

export function scGetNewRockstarMsg(): string { 
	return _in(0xdf649c4e, 0x9afdd788, _r, _s); 
}

/**
 * Same as HAS_ACHIEVEMENT_BEEN_PASSED
 * @param achievementId
 */
export function scHasAchievementBeenPassed(achievementId: number): boolean { 
	return _in(0x418dc16f, 0xae452c1c, achievementId, _r); 
}

export function scHasNewRockstarMsg(): boolean { 
	return _in(0xbc1cc912, 0x05ec8d6e, _r); 
}

export function scInboxGetBountyDataAtIndex(index: number, outData: number): [boolean, number] { 
	const [retval, outData_out] = _in(0x87e0052f, 0x08bd64e6, index, _ii(outData), _r);
	return [retval as boolean, outData_out as number]; 
}

export function scInboxGetMessageIsReadAtIndex(msgIndex: number): boolean { 
	return _in(0x93028f1d, 0xb42bfd08, msgIndex, _r); 
}

export function scInboxGetMessageTypeAtIndex(msgIndex: number): number { 
	return _in(0xbb8ea16e, 0xcbc976c4, msgIndex, _r, _ri); 
}

export function scInboxGetTotalNumMessages(): number { 
	return _in(0x03a93ff1, 0xa2ca0864, _r, _ri); 
}

export function scInboxMessageDoApply(p0: number): boolean { 
	return _in(0x9a2c8064, 0xb6c1e41a, p0, _r); 
}

export function scInboxMessageGetDataBool(p0: number, p1: string): boolean { 
	return _in(0xffe5c16f, 0x402d851d, p0, _ts(p1), _r); 
}

export function scInboxMessageGetDataInt(p0: number, context: string, out: number): [boolean, number] { 
	const [retval, out_out] = _in(0xa00efe40, 0x82c4056e, p0, _ts(context), _ii(out), _r);
	return [retval as boolean, out_out as number]; 
}

export function scInboxMessageGetDataString(p0: number, context: string, out: string): boolean { 
	return _in(0x7572ef42, 0xfc6a9b6d, p0, _ts(context), _ts(out), _r); 
}

export function scInboxMessageGetRawTypeAtIndex(p0: number): string { 
	return _in(0xf3e31d16, 0xcbdcb304, p0, _r, _s); 
}

export function scInboxMessageGetUgcdata(p0: number, p1: number): [boolean, number] { 
	const [retval, p1_out] = _in(0x69d82604, 0xa1a5a254, p0, _ii(p1), _r);
	return [retval as boolean, p1_out as number]; 
}

export function scInboxMessagePushGamerT0RecipList(gamerHandle: number): number { 
	return _in(0xda024bdb, 0xd600f44a, _ii(gamerHandle)); 
}

export function scInboxSendUgcstatupdateToRecipList(data: number): number { 
	return _in(0xa68d3d22, 0x9f4f3b06, _ii(data)); 
}

export function scInboxSetMessageAsReadAtIndex(msgIndex: number): boolean { 
	return _in(0x2c015348, 0xcf19ca1d, msgIndex, _r); 
}

export function scLicenseplateAdd(plateText: string): [boolean, number, number] { 
	const [retval, plateData_out, token_out] = _in(0x1989c6e6, 0xf67e76a8, _ts(plateText), _i, _i, _r);
	return [retval as boolean, plateData_out as number, token_out as number]; 
}

export function scLicenseplateCheckString(p0: string, p1: number): [boolean, number] { 
	const [retval, p1_out] = _in(0xf6baaaf7, 0x62e1bf40, _ts(p0), _ii(p1), _r);
	return [retval as boolean, p1_out as number]; 
}

export function scLicenseplateGetAddIsPending(token: number): boolean { 
	return _in(0x07c61676, 0xe5bb52cd, token, _r); 
}

export function scLicenseplateGetAddStatus(token: number): number { 
	return _in(0x8147fff6, 0xa718e1ad, token, _r, _ri); 
}

export function scLicenseplateGetCheckIsPending(p0: number): boolean { 
	return _in(0x9237e334, 0xf6e43156, p0, _r); 
}

export function scLicenseplateGetCheckIsValid(p0: number): boolean { 
	return _in(0xf22ca0fd, 0x74b80e7a, p0, _r); 
}

export function scLicenseplateGetCount(token: number): number { 
	return _in(0x700569db, 0xa175a77c, token, _r, _ri); 
}

export function scLicenseplateGetIsvalidIsPending(token: number): boolean { 
	return _in(0xd302e99e, 0xdf0449cf, token, _r); 
}

export function scLicenseplateGetIsvalidStatus(token: number): number { 
	return _in(0x5c4ebffa, 0x98bdb41c, token, _r, _ri); 
}

export function scLicenseplateGetPlate(token: number, plateIndex: number): string { 
	return _in(0x1d4446a6, 0x2d35b0d0, token, plateIndex, _r, _s); 
}

export function scLicenseplateGetPlateData(token: number, plateIndex: number): string { 
	return _in(0x2e89990d, 0xdff670c3, token, plateIndex, _r, _s); 
}

export function scLicenseplateIsvalid(plateText: string, token: number): [boolean, number] { 
	const [retval, token_out] = _in(0x0f73393b, 0xac7e6730, _ts(plateText), _ii(token), _r);
	return [retval as boolean, token_out as number]; 
}

export function scLicenseplateSetPlateData(oldPlateText: string, newPlateText: string, plateData: number): [boolean, number] { 
	const [retval, plateData_out] = _in(0xd0ee05fe, 0x193646ea, _ts(oldPlateText), _ts(newPlateText), _ii(plateData), _r);
	return [retval as boolean, plateData_out as number]; 
}

/**
 * Fills some 0x30 sized struct
 * @param p0
 */
export function scPauseNewsGetPendingStory(p0: number): boolean { 
	return _in(0x8a4416c0, 0xdb05fa66, p0, _r); 
}

export function scPauseNewsInitStarterPack(p0: number): boolean { 
	return _in(0xe4f6e8d0, 0x7a2f0f51, p0, _r); 
}

export function scPauseNewsShutdown(): void { 
	return _in(0xea95c085, 0x3a27888e); 
}

export function scPresenceAttrSetFloat(attrHash: number, value: number): boolean { 
	return _in(0xc4c4575f, 0x62534a24, _ch(attrHash), _fv(value), _r); 
}

export function scPresenceAttrSetInt(attrHash: number, value: number): boolean { 
	return _in(0x1f1e9682, 0x483697c7, _ch(attrHash), value, _r); 
}

export function scPresenceAttrSetString(attrHash: number, value: string): boolean { 
	return _in(0x287f1f75, 0xd2803595, _ch(attrHash), _ts(value), _r); 
}

export function scPresenceSetActivityRating(p0: number, p1: number): boolean { 
	return _in(0x487912fd, 0x248efddf, p0, _fv(p1), _r); 
}

/**
 * Starts a task to check an entered string for profanity on the ROS/Social Club services.
 * 
 * See also: 1753344C770358AE, 82E4A58BABC15AE7.
 * @param string
 * @param token
 */
export function scProfanityCheckString(string: string, token: number): [boolean, number] { 
	const [retval, token_out] = _in(0x75632c5e, 0xcd7ed843, _ts(string), _ii(token), _r);
	return [retval as boolean, token_out as number]; 
}

export function scProfanityCheckStringUgc(string: string, token: number): [boolean, number] { 
	const [retval, token_out] = _in(0xeb2bf817, 0x463dfa28, _ts(string), _ii(token), _r);
	return [retval as boolean, token_out as number]; 
}

export function scProfanityGetCheckIsPending(token: number): boolean { 
	return _in(0x82e4a58b, 0xabc15ae7, token, _r); 
}

export function scProfanityGetCheckIsValid(token: number): boolean { 
	return _in(0x1753344c, 0x770358ae, token, _r); 
}

/**
 * Retrieves the profane part of the string with max size of 128.
 * Returns true if profane term was retrieved.
 * @param token
 * @param outProfaneWord
 */
export function scProfanityGetProfaneWord(token: number, outProfaneWord: string): boolean { 
	return _in(0x75cc8931, 0xa11128c9, token, _ts(outProfaneWord), _r); 
}

export function scProfanityGetStringPassed(token: number): boolean { 
	return _in(0x85535acf, 0x97fc0969, token, _r); 
}

export function scProfanityGetStringStatus(token: number): number { 
	return _in(0x930de22f, 0x07b1cce3, token, _r, _ri); 
}

export function scTransitionNewsEnd(): void { 
	return _in(0x675721c9, 0xf644d161); 
}

export function scTransitionNewsGetExtraDataIntTu(p0: string, p1: number): [boolean, number] { 
	const [retval, p1_out] = _in(0x92da6e70, 0xef249bd1, _ts(p0), _ii(p1), _r);
	return [retval as boolean, p1_out as number]; 
}

export function scTransitionNewsHasExtraDataTu(): boolean { 
	return _in(0x3001bef2, 0xfeca3680, _r); 
}

export function scTransitionNewsShow(p0: number): boolean { 
	return _in(0x6bfb12ce, 0x158e3dd4, p0, _r); 
}

export function scTransitionNewsShowNextItem(): boolean { 
	return _in(0xd8122c40, 0x7663b995, _r); 
}

export function scTransitionNewsShowTimed(p0: number, p1: number): boolean { 
	return _in(0xfe4c1d0d, 0x3b9cc17e, p0, p1, _r); 
}

/**
 * Pushes a boolean for the Scaleform function onto the stack.
 * @param value
 */
export function scaleformMovieMethodAddParamBool(value: boolean): void { 
	return _in(0xc58424ba, 0x936eb458, value); 
}

/**
 * Pushes a float for the Scaleform function onto the stack.
 * @param value
 */
export function scaleformMovieMethodAddParamFloat(value: number): void { 
	return _in(0xd69736aa, 0xe04db51a, _fv(value)); 
}

/**
 * Pushes an integer for the Scaleform function onto the stack.
 * @param value
 */
export function scaleformMovieMethodAddParamInt(value: number): void { 
	return _in(0xc3d0841a, 0x0cc546a6, value); 
}

export function scaleformMovieMethodAddParamLatestBriefString(value: number): void { 
	return _in(0xec52c631, 0xa1831c03, value); 
}

/**
 * Same as SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING
 * Both SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING / _SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING_2 works, but _SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING_2 is usually used for "name" (organisation, players..).
 * @param string
 */
export function scaleformMovieMethodAddParamLiteralString(string: string): void { 
	return _in(0x77fe3402, 0x004cd1b0, _ts(string)); 
}

export function scaleformMovieMethodAddParamPlayerNameString(string: string): void { 
	return _in(0xe83a3e35, 0x57a56640, _ts(string)); 
}

export function scaleformMovieMethodAddParamTextureNameString(string: string): void { 
	return _in(0xba714848, 0x4bd90365, _ts(string)); 
}

/**
 * If bool Toggle = true so the mobile is hide to screen.
 * If bool Toggle = false so the mobile is show to screen.
 * @param toggle
 */
export function scriptIsMovingMobilePhoneOffscreen(toggle: boolean): void { 
	return _in(0xf511f759, 0x238a5122, toggle); 
}

export function scriptOverridesWindElevation(p0: boolean, p1: number): void { 
	return _in(0x70b8ec8f, 0xc108a634, p0, p1); 
}

export function scriptRaceGetPlayerSplitTime(player: number): [boolean, number, number] { 
	const [retval, p1_out, p2_out] = _in(0x8ef5573a, 0x1f801a5c, player, _i, _i, _r);
	return [retval as boolean, p1_out as number, p2_out as number]; 
}

export function scriptRaceInit(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0x0a60017f, 0x841a54f2, p0, p1, p2, p3); 
}

export function scriptRacePlayerHitCheckpoint(player: number, p1: number, p2: number, p3: number): void { 
	return _in(0x1bb29930, 0x5c3e8c13, player, p1, p2, p3); 
}

export function scriptRaceShutdown(): void { 
	return _in(0x1ff6bf9a, 0x63e5757f); 
}

/**
 * If the function returns 0, the end of the iteration has been reached.
 */
export function scriptThreadIteratorGetNextThreadId(): number { 
	return _in(0x30b4fa1c, 0x82dd4b9f, _r, _ri); 
}

/**
 * Starts a new iteration of the current threads.
 * Call this first, then SCRIPT_THREAD_ITERATOR_GET_NEXT_THREAD_ID (0x30B4FA1C82DD4B9F)
 */
export function scriptThreadIteratorReset(): void { 
	return _in(0xdadfada5, 0xa20143a8); 
}

export function seethroughGetMaxThickness(): number { 
	return _in(0x43dbae39, 0x626ce83f, _r, _rf); 
}

export function seethroughReset(): void { 
	return _in(0x70a64c02, 0x34ef522c); 
}

export function seethroughSetColorNear(red: number, green: number, blue: number): void { 
	return _in(0x1086127b, 0x3a63505e, red, green, blue); 
}

export function seethroughSetFadeEnddistance(distance: number): void { 
	return _in(0x9d75795b, 0x9dc6ebbf, _fv(distance)); 
}

export function seethroughSetFadeStartdistance(distance: number): void { 
	return _in(0xa78de255, 0x77300ba1, _fv(distance)); 
}

/**
 * min: 0.0
 * max: 0.75
 * @param index
 * @param heatScale
 */
export function seethroughSetHeatscale(index: number, heatScale: number): void { 
	return _in(0xd7d0b001, 0x77485411, index, _fv(heatScale)); 
}

export function seethroughSetHighlightNoise(noise: number): void { 
	return _in(0x1636d7fc, 0x127b10d2, _fv(noise)); 
}

export function seethroughSetHilightIntensity(intensity: number): void { 
	return _in(0x19e50eb6, 0xe33e1d28, _fv(intensity)); 
}

/**
 * 0.0 = you will not be able to see people behind the walls. 50.0 and more = you will see everyone through the walls. More value is "better" view. See https://gfycat.com/FirmFlippantGourami
 * min: 1.0
 * max: 10000.0
 * @param thickness
 */
export function seethroughSetMaxThickness(thickness: number): void { 
	return _in(0x0c8fac83, 0x902a62df, _fv(thickness)); 
}

export function seethroughSetNoiseMax(amount: number): void { 
	return _in(0xfebfbfdf, 0xb66039de, _fv(amount)); 
}

export function seethroughSetNoiseMin(amount: number): void { 
	return _in(0xff5992e1, 0xc9e65d05, _fv(amount)); 
}

export function sendMetricGhostingToPlayer(p0: number): void { 
	return _in(0x7033eefd, 0x9b28088e, p0); 
}

export function sendMetricPunishBodyguard(p0: number): void { 
	return _in(0x015b03ee, 0x1c43e6ec, p0); 
}

export function sendMetricVipPoach(p0: number, p1: number, p2: number): void { 
	return _in(0xaa525dff, 0x66bb82f5, p0, p1, p2); 
}

/**
 * New variant of SEND_TU_SCRIPT_EVENT that automatically initializes the event data header.
 * See TRIGGER_SCRIPT_EVENT for more info.
 * @param eventGroup
 * @param eventData
 * @param eventDataSize
 * @param playerBits
 * @param eventType
 */
export function sendTuScriptEventNew(eventGroup: number, eventDataSize: number, playerBits: number, eventType: number): number { 
	return _in(0x71a6f836, 0x422fdd2b, eventGroup, _i, eventDataSize, playerBits, _ch(eventType)); 
}

export function setAbilityBarValue(p0: number, p1: number): void { 
	return _in(0x9969599c, 0xcff5d85e, _fv(p0), _fv(p1)); 
}

export function setAbilityBarVisibility(visible: boolean): void { 
	return _in(0x1dfedd15, 0x019315a9, visible); 
}

/**
 * For Steam.
 * Does nothing and always returns false in the retail version of the game.
 * @param achievementId
 * @param progress
 */
export function setAchievementProgress(achievementId: number, progress: number): boolean { 
	return _in(0xc2afffda, 0xbbdc2c5c, achievementId, progress, _r); 
}

export function setActivateObjectPhysicsAsSoonAsItIsUnfrozen(object: number, toggle: boolean): void { 
	return _in(0x406137f8, 0xef90eaf5, object, toggle); 
}

export function setAdditionalRotationForRecordedVehiclePlayback(vehicle: number, x: number, y: number, z: number, p4: number): void { 
	return _in(0x5845066d, 0x8a1ea7f7, vehicle, _fv(x), _fv(y), _fv(z), p4); 
}

/**
 * Makes pedestrians sound their horn longer, faster and more agressive when they use their horn.
 * @param toggle
 */
export function setAggressiveHorns(toggle: boolean): void { 
	return _in(0x395bf710, 0x85d1b1d9, toggle); 
}

export function setAiMeleeWeaponDamageModifier(modifier: number): void { 
	return _in(0x66460ded, 0xdd417254, _fv(modifier)); 
}

export function setAiWeaponDamageModifier(value: number): void { 
	return _in(0x1b1e2a40, 0xa65b8521, _fv(value)); 
}

/**
 * This can be between 1.0f - 14.9f
 * 
 * You can change the max in IDA from 15.0. I say 15.0 as the function blrs if what you input is greater than or equal to 15.0 hence why it's 14.9 max default.
 * 
 * 
 * @param player
 * @param multiplier
 */
export function setAirDragMultiplierForPlayersVehicle(player: number, multiplier: number): void { 
	return _in(0xca7dc832, 0x9f0a1e9e, player, _fv(multiplier)); 
}

export function setAircraftIgnoreHightmapOptimisation(vehicle: number, p1: number): void { 
	return _in(0xf8b49f5b, 0xa7f850e7, vehicle, p1); 
}

export function setAircraftPilotSkillNoiseScalar(vehicle: number, p1: number): void { 
	return _in(0xe5810ac7, 0x0602f2f5, vehicle, _fv(p1)); 
}

export function setAllLowPriorityVehicleGeneratorsActive(active: boolean): void { 
	return _in(0x608207e7, 0xa8fb787c, active); 
}

/**
 * This native does absolutely nothing, just a nullsub
 * @param p0
 */
export function setAllMapdataCulled(p0: number): void { 
	return _in(0x4e52e752, 0xc76e7e7a, p0); 
}

export function setAllMpGamerTagsVisibility(gamerTagId: number, toggle: boolean): void { 
	return _in(0xee76ff7e, 0x6a0166b0, gamerTagId, toggle); 
}

export function setAllNeutralRandomPedsFlee(player: number, toggle: boolean): void { 
	return _in(0xde45d1a1, 0xef45ee61, player, toggle); 
}

/**
 * - This is called after SET_ALL_RANDOM_PEDS_FLEE_THIS_FRAME
 * 
 * @param player
 */
export function setAllNeutralRandomPedsFleeThisFrame(player: number): void { 
	return _in(0xc3376f42, 0xb1faccc6, player); 
}

export function setAllRandomPedsFlee(player: number, toggle: boolean): void { 
	return _in(0x056e0fe8, 0x534c2949, player, toggle); 
}

export function setAllRandomPedsFleeThisFrame(player: number): void { 
	return _in(0x471d2ff4, 0x2a94b4f2, player); 
}

export function setAllVehicleGeneratorsActive(): void { 
	return _in(0x34ad8907, 0x8831a4bc); 
}

/**
 * When p6 is true, vehicle generators are active.
 * p7 seems to always be true in story mode scripts, but it's sometimes false in online scripts.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param toggle
 * @param p7
 */
export function setAllVehicleGeneratorsActiveInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, toggle: boolean, p7: boolean): void { 
	return _in(0xc1232182, 0x7687fe4d, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), toggle, p7); 
}

export function setAllowAbilityBar(toggle: boolean): void { 
	return _in(0x889329c8, 0x0fe5963c, toggle); 
}

/**
 * _SET_ALLOW_R* - _SET_ALLOW_V*
 * @param vehicle
 * @param toggle
 */
export function setAllowCollisionWhenInVehicle(vehicle: number, toggle: boolean): void { 
	return _in(0x27d27223, 0xe8ef22ed, vehicle, toggle); 
}

export function setAllowCommaOnTextInput(p0: number): void { 
	return _in(0x577599cc, 0xed639ca2, p0); 
}

export function setAllowCustomVehicleDriveByCamThisUpdate(p0: boolean): void { 
	return _in(0x4008edf7, 0xd6e48175, p0); 
}

export function setAllowLockonToPedIfFriendly(ped: number, toggle: boolean): void { 
	return _in(0x061cb768, 0x363d6424, ped, toggle); 
}

/**
 * p1 is always set to 1
 * @param entity
 * @param p1
 */
export function setAllowMigrateToSpectator(entity: number, p1: number): void { 
	return _in(0x36f32de8, 0x7082343e, entity, p1); 
}

export function setAllowRammingSoopOrRamp(p0: number, p1: number): void { 
	return _in(0x80e3357f, 0xdef45c21, p0, p1); 
}

/**
 * Activates Cayo Perico path nodes if passed `1`. GPS navigation will start working, maybe more stuff will change, not sure. It seems if you try to unload (pass `0`) when close to the island, your game might crash.
 * @param type
 */
export function setAllowStreamHeistIslandNodes(type: number): void { 
	return _in(0xf74b1ffa, 0x4a15fbea, type); 
}

export function setAllowStreamPrologueNodes(toggle: boolean): void { 
	return _in(0x228e5c6a, 0xd4d74bfd, toggle); 
}

export function setAllowStuntJumpCamera(ped: number, toggle: boolean): void { 
	return _in(0xfab944d4, 0xd481accb, ped, toggle); 
}

export function setAllowVehicleExplodesOnContact(vehicle: number, toggle: boolean): void { 
	return _in(0x3441cad2, 0xf2231923, vehicle, toggle); 
}

export function setAmbientLawPedAccuracyModifier(multiplier: number): void { 
	return _in(0x87ddeb61, 0x1b329a9c, _fv(multiplier)); 
}

export function setAmbientPedRangeMultiplierThisFrame(multiplier: number): void { 
	return _in(0x0b919e1f, 0xb47cc4e0, _fv(multiplier)); 
}

export function setAmbientPedsDropMoney(p0: boolean): void { 
	return _in(0x6b0e6172, 0xc9a4d902, p0); 
}

export function setAmbientVehicleNeonEnabled(p0: boolean): void { 
	return _in(0x35e0654f, 0x4bad7971, p0); 
}

export function setAmbientVehicleRangeMultiplierThisFrame(value: number): void { 
	return _in(0x90b6da73, 0x8a9a25da, _fv(value)); 
}

/**
 * Audio List
 * gtaforums.com/topic/795622-audio-for-mods/
 * 
 * All found occurrences in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/FTeAj4yZ
 * @param ped
 * @param name
 */
export function setAmbientVoiceName(ped: number, name: string): void { 
	return _in(0x6c8065a3, 0xb780185b, ped, _ts(name)); 
}

export function setAmbientVoiceNameHash(ped: number, hash: number): void { 
	return _in(0x9a53ded9, 0x921de990, ped, _ch(hash)); 
}

export function setAmbientZoneListState(ambientZone: string, p1: boolean, p2: boolean): void { 
	return _in(0x9748fa4d, 0xe50cce3e, _ts(ambientZone), p1, p2); 
}

/**
 * Full list of ambient zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientZones.json
 * @param ambientZone
 * @param p1
 * @param p2
 */
export function setAmbientZoneListStatePersistent(ambientZone: string, p1: boolean, p2: boolean): void { 
	return _in(0xf3638dae, 0x8c4045e1, _ts(ambientZone), p1, p2); 
}

/**
 * Full list of ambient zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientZones.json
 * @param zoneName
 * @param p1
 * @param p2
 */
export function setAmbientZoneState(zoneName: string, p1: boolean, p2: boolean): void { 
	return _in(0xbda07e59, 0x50085e46, _ts(zoneName), p1, p2); 
}

/**
 * Full list of ambient zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientZones.json
 * @param ambientZone
 * @param p1
 * @param p2
 */
export function setAmbientZoneStatePersistent(ambientZone: string, p1: boolean, p2: boolean): void { 
	return _in(0x1d665042, 0x0cec9d3b, _ts(ambientZone), p1, p2); 
}

/**
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param ammo
 */
export function setAmmoInClip(ped: number, weaponHash: number, ammo: number): boolean { 
	return _in(0xdcd2a934, 0xd65cb497, ped, _ch(weaponHash), ammo, _r); 
}

export function setAmmoInVehicleWeaponClip(vehicle: number, seat: number, ammo: number): boolean { 
	return _in(0x87390672, 0x0ee842c3, vehicle, seat, ammo, _r); 
}

export function setAnimLooped(entity: number, looped: boolean, priority: number, secondary: boolean): void { 
	return _in(0x70033c3c, 0xc29a1ff4, entity, looped, priority, secondary); 
}

export function setAnimPhase(entity: number, phase: number, priority: number, secondary: boolean): void { 
	return _in(0xddf3cb5a, 0x0a4c0b49, entity, _fv(phase), priority, secondary); 
}

export function setAnimRate(entity: number, rate: number, priority: number, secondary: boolean): void { 
	return _in(0x032d49c5, 0xe359c847, entity, _fv(rate), priority, secondary); 
}

export function setAnimWeight(entity: number, weight: number, priority: number, index: number, secondary: boolean): void { 
	return _in(0x207f1a47, 0xc0342f48, entity, _fv(weight), priority, index, secondary); 
}

/**
 * mood can be 0 or 1 (it's not a boolean value!). Effects audio of the animal.
 * @param animal
 * @param mood
 */
export function setAnimalMood(animal: number, mood: number): void { 
	return _in(0xcc97b292, 0x85b1dc3b, animal, mood); 
}

export function setApplyWaypointOfPlayer(player: number, hudColor: number): void { 
	return _in(0x2382ab11, 0x450ae7ba, player, hudColor); 
}

export function setArenaThemeAndVariationForTakenPhoto(p0: number, p1: number): void { 
	return _in(0xf3f776ad, 0xa161e47d, p0, p1); 
}

export function setArriveDistanceOverrideForVehiclePersuitAttack(vehicle: number, p1: number): void { 
	return _in(0x0205f536, 0x5292d2eb, vehicle, _fv(p1)); 
}

/**
 * Does not affect weapons, particles, fire/explosions, flashlights or the sun.
 * When set to true, all emissive textures (including ped components that have light effects), street lights, building lights, vehicle lights, etc will all be turned off.
 * 
 * Used in Humane Labs Heist for EMP.
 * 
 * state: True turns off all artificial light sources in the map: buildings, street lights, car lights, etc. False turns them back on.
 * @param state
 */
export function setArtificialLightsState(state: boolean): void { 
	return _in(0x1268615a, 0xce24d504, state); 
}

/**
 * If "blackout" is enabled, this native allows you to ignore "blackout" for vehicles.
 * @param toggle
 */
export function setArtificialVehicleLightsState(toggle: boolean): void { 
	return _in(0xe2b187c0, 0x939b3d32, toggle); 
}

export function setAttachedVehicleToTowTruckArm(towTruck: number, vehicle: number): void { 
	return _in(0x48bd57d0, 0xdd17786a, towTruck, vehicle); 
}

/**
 * Possible flag names:
 * "ActivateSwitchWheelAudio"
 * "AllowAmbientSpeechInSlowMo"
 * "AllowCutsceneOverScreenFade"
 * "AllowForceRadioAfterRetune"
 * "AllowPainAndAmbientSpeechToPlayDuringCutscene"
 * "AllowPlayerAIOnMission"
 * "AllowPoliceScannerWhenPlayerHasNoControl"
 * "AllowRadioDuringSwitch"
 * "AllowRadioOverScreenFade"
 * "AllowScoreAndRadio"
 * "AllowScriptedSpeechInSlowMo"
 * "AvoidMissionCompleteDelay"
 * "DisableAbortConversationForDeathAndInjury"
 * "DisableAbortConversationForRagdoll"
 * "DisableBarks"
 * "DisableFlightMusic"
 * "DisableReplayScriptStreamRecording"
 * "EnableHeadsetBeep"
 * "ForceConversationInterrupt"
 * "ForceSeamlessRadioSwitch"
 * "ForceSniperAudio"
 * "FrontendRadioDisabled"
 * "HoldMissionCompleteWhenPrepared"
 * "IsDirectorModeActive"
 * "IsPlayerOnMissionForSpeech"
 * "ListenerReverbDisabled"
 * "LoadMPData"
 * "MobileRadioInGame"
 * "OnlyAllowScriptTriggerPoliceScanner"
 * "PlayMenuMusic"
 * "PoliceScannerDisabled"
 * "ScriptedConvListenerMaySpeak"
 * "SpeechDucksScore"
 * "SuppressPlayerScubaBreathing"
 * "WantedMusicDisabled"
 * "WantedMusicOnMission"
 * 
 * -------------------------------
 * No added flag names between b393d and b573d, including b573d.
 * 
 * #######################################################################
 * 
 * "IsDirectorModeActive" is an audio flag which will allow you to play speech infinitely without any pauses like in Director Mode.
 * 
 * -----------------------------------------------------------------------
 * 
 * All flag IDs and hashes:
 * 
 * ID: 00 | Hash: 0x0FED7A7F
 * ID: 01 | Hash: 0x20A7858F
 * ID: 02 | Hash: 0xA11C2259
 * ID: 03 | Hash: 0x08DE4700
 * ID: 04 | Hash: 0x989F652F
 * ID: 05 | Hash: 0x3C9E76BA
 * ID: 06 | Hash: 0xA805FEB0
 * ID: 07 | Hash: 0x4B94EA26
 * ID: 08 | Hash: 0x803ACD34
 * ID: 09 | Hash: 0x7C741226
 * ID: 10 | Hash: 0x31DB9EBD
 * ID: 11 | Hash: 0xDF386F18
 * ID: 12 | Hash: 0x669CED42
 * ID: 13 | Hash: 0x51F22743
 * ID: 14 | Hash: 0x2052B35C
 * ID: 15 | Hash: 0x071472DC
 * ID: 16 | Hash: 0xF9928BCC
 * ID: 17 | Hash: 0x7ADBDD48
 * ID: 18 | Hash: 0xA959BA1A
 * ID: 19 | Hash: 0xBBE89B60
 * ID: 20 | Hash: 0x87A08871
 * ID: 21 | Hash: 0xED1057CE
 * ID: 22 | Hash: 0x1584AD7A
 * ID: 23 | Hash: 0x8582CFCB
 * ID: 24 | Hash: 0x7E5E2FB0
 * ID: 25 | Hash: 0xAE4F72DB
 * ID: 26 | Hash: 0x5D16D1FA
 * ID: 27 | Hash: 0x06B2F4B8
 * ID: 28 | Hash: 0x5D4CDC96
 * ID: 29 | Hash: 0x8B5A48BA
 * ID: 30 | Hash: 0x98FBD539
 * ID: 31 | Hash: 0xD8CB0473
 * ID: 32 | Hash: 0x5CBB4874
 * ID: 33 | Hash: 0x2E9F93A9
 * ID: 34 | Hash: 0xD93BEA86
 * ID: 35 | Hash: 0x92109B7D
 * ID: 36 | Hash: 0xB7EC9E4D
 * ID: 37 | Hash: 0xCABDBB1D
 * ID: 38 | Hash: 0xB3FD4A52
 * ID: 39 | Hash: 0x370D94E5
 * ID: 40 | Hash: 0xA0F7938F
 * ID: 41 | Hash: 0xCBE1CE81
 * ID: 42 | Hash: 0xC27F1271
 * ID: 43 | Hash: 0x9E3258EB
 * ID: 44 | Hash: 0x551CDA5B
 * ID: 45 | Hash: 0xCB6D663C
 * ID: 46 | Hash: 0x7DACE87F
 * ID: 47 | Hash: 0xF9DE416F
 * ID: 48 | Hash: 0x882E6E9E
 * ID: 49 | Hash: 0x16B447E7
 * ID: 50 | Hash: 0xBD867739
 * ID: 51 | Hash: 0xA3A58604
 * ID: 52 | Hash: 0x7E046BBC
 * ID: 53 | Hash: 0xD95FDB98
 * ID: 54 | Hash: 0x5842C0ED
 * ID: 55 | Hash: 0x285FECC6
 * ID: 56 | Hash: 0x9351AC43
 * ID: 57 | Hash: 0x50032E75
 * ID: 58 | Hash: 0xAE6D0D59
 * ID: 59 | Hash: 0xD6351785
 * ID: 60 | Hash: 0xD25D71BC
 * ID: 61 | Hash: 0x1F7F6423
 * ID: 62 | Hash: 0xE24C3AA6
 * ID: 63 | Hash: 0xBFFDD2B7
 * @param flagName
 * @param toggle
 */
export function setAudioFlag(flagName: string, toggle: boolean): void { 
	return _in(0xb9efd5c2, 0x5018725a, _ts(flagName), toggle); 
}

/**
 * Full list of audio scene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/audioSceneNames.json
 * @param scene
 * @param variable
 * @param value
 */
export function setAudioSceneVariable(scene: string, variable: string, value: number): void { 
	return _in(0xef21a9ef, 0x089a2668, _ts(scene), _ts(variable), _fv(value)); 
}

export function setAudioScriptCleanupTime(time: number): void { 
	return _in(0xa5f377b1, 0x75a699c5, time); 
}

/**
 * Needs to be called every frame.
 * Audio mode to apply this frame: https://alloc8or.re/gta5/doc/enums/audSpecialEffectMode.txt
 * @param mode
 */
export function setAudioSpecialEffectMode(mode: number): void { 
	return _in(0x12561fcb, 0xb62d5b9c, mode); 
}

export function setAudioVehiclePriority(vehicle: number, p1: number): void { 
	return _in(0xe5564483, 0xe407f914, vehicle, p1); 
}

export function setAutoGiveParachuteWhenEnterPlane(player: number, toggle: boolean): void { 
	return _in(0x9f343285, 0xa00b4bb6, player, toggle); 
}

export function setAutoGiveScubaGearWhenExitVehicle(player: number, toggle: boolean): void { 
	return _in(0xd2b315b6, 0x689d537d, player, toggle); 
}

export function setBackfaceculling(toggle: boolean): void { 
	return _in(0x23ba6b0c, 0x2ad7b0d3, toggle); 
}

export function setBeastJumpThisFrame(player: number): void { 
	return _in(0x438822c2, 0x79b73b93, player); 
}

/**
 * Toggles the big minimap state like in GTA:Online.
 * @param toggleBigMap
 * @param showFullMap
 */
export function setBigmapActive(toggleBigMap: boolean, showFullMap: boolean): void { 
	return _in(0x231c8f89, 0xd0539d8f, toggleBigMap, showFullMap); 
}

/**
 * When enabled, the player won't fall off the bike when landing from large heights.
 * @param vehicle
 * @param toggle
 */
export function setBikeEasyToLand(vehicle: number, toggle: boolean): void { 
	return _in(0x73561d44, 0x25a021a2, vehicle, toggle); 
}

/**
 * Only works on bikes, both X and Y work in the -1 - 1 range.
 * 
 * X forces the bike to turn left or right (-1, 1)
 * Y forces the bike to lean to the left or to the right (-1, 1)
 * 
 * Example with X -1/Y 1
 * http://i.imgur.com/TgIuAPJ.jpg
 * @param vehicle
 * @param x
 * @param y
 */
export function setBikeOnStand(vehicle: number, x: number, y: number): void { 
	return _in(0x9cfa4896, 0xc3a53cbb, vehicle, _fv(x), _fv(y)); 
}

export function setBinkMovie(name: string): number { 
	return _in(0x338d9f60, 0x9fd632db, _ts(name), _r, _ri); 
}

export function setBinkMovieAudioFrontend(binkMovie: number, p1: boolean): void { 
	return _in(0xf816f293, 0x3752322d, binkMovie, p1); 
}

/**
 * In percentage: 0.0 - 100.0
 * @param binkMovie
 * @param progress
 */
export function setBinkMovieTime(binkMovie: number, progress: number): void { 
	return _in(0x0cb6b344, 0x6855b57a, binkMovie, _fv(progress)); 
}

/**
 * binkMovie: Is return value from _SET_BINK_MOVIE. Has something to do with bink volume? (audRequestedSettings::SetVolumeCurveScale)
 * @param binkMovie
 * @param value
 */
export function setBinkMovieVolume(binkMovie: number, value: number): void { 
	return _in(0xaff33b11, 0x78172223, binkMovie, _fv(value)); 
}

export function setBinkShouldSkip(binkMovie: number, bShouldSkip: boolean): void { 
	return _in(0x6805d58c, 0xaa427b72, binkMovie, bShouldSkip); 
}

/**
 * This sets bit [offset] of [address] to on.
 * 
 * The offsets used are different bits to be toggled on and off, typically there is only one address used in a script.
 * 
 * Example:
 * MISC::SET_BIT(&bitAddress, 1);
 * 
 * To check if this bit has been enabled:
 * MISC::IS_BIT_SET(bitAddress, 1); // will return 1 afterwards
 * 
 * Please note, this method may assign a value to [address] when used.
 * @param address
 * @param offset
 */
export function setBit(offset: number): number { 
	return _in(0x933d6a9e, 0xec1bacd0, _i, offset); 
}

export function setBitsInRange(rangeStart: number, rangeEnd: number, p3: number): number { 
	return _in(0x8ef07e15, 0x701d61ed, _i, rangeStart, rangeEnd, p3); 
}

/**
 * Sets alpha-channel for blip color.
 * 
 * Example:
 * 
 * Blip blip = HUD::ADD_BLIP_FOR_ENTITY(entity);
 * HUD::SET_BLIP_COLOUR(blip , 3);
 * HUD::SET_BLIP_ALPHA(blip , 64);
 * 
 * @param blip
 * @param alpha
 */
export function setBlipAlpha(blip: number, alpha: number): void { 
	return _in(0x45ff974e, 0xee1c8734, blip, alpha); 
}

/**
 * false for enemy
 * true for friendly
 * @param blip
 * @param toggle
 */
export function setBlipAsFriendly(blip: number, toggle: boolean): void { 
	return _in(0x6f6f2901, 0x02c02ab4, blip, toggle); 
}

/**
 * Makes a blip go small when off the minimap.
 * @param blip
 * @param toggle
 */
export function setBlipAsMinimalOnEdge(blip: number, toggle: boolean): void { 
	return _in(0x2b6d467d, 0xab714e8d, blip, toggle); 
}

export function setBlipAsMissionCreatorBlip(blip: number, toggle: boolean): void { 
	return _in(0x24ac0137, 0x444f9fd5, blip, toggle); 
}

/**
 * Sets whether or not the specified blip should only be displayed when nearby, or on the minimap.
 * @param blip
 * @param toggle
 */
export function setBlipAsShortRange(blip: number, toggle: boolean): void { 
	return _in(0xbe8be4fe, 0x60e27b72, blip, toggle); 
}

export function setBlipBright(blip: number, toggle: boolean): void { 
	return _in(0xb2039137, 0x33f27884, blip, toggle); 
}

/**
 * Example: https://i.imgur.com/skY6vAJ.png
 * 
 * Index:
 * 1 = No distance shown in legend
 * 2 = Distance shown in legend
 * 7 = "Other Players" category, also shows distance in legend
 * 10 = "Property" category
 * 11 = "Owned Property" category
 * 
 * Any other value behaves like index = 1, index wraps around after 255
 * Blips with categories 7, 10 or 11 will all show under the specific categories listing in the map legend, regardless of sprite or name.
 * Legend entries:
 * 7 = Other Players (BLIP_OTHPLYR)
 * 10 = Property (BLIP_PROPCAT)
 * 11 = Owned Property (BLIP_APARTCAT)
 * 
 * Category needs to be `7` in order for blip names to show on the expanded minimap when using DISPLAY_PLAYER_NAME_TAGS_ON_BLIPS.
 * @param blip
 * @param index
 */
export function setBlipCategory(blip: number, index: number): void { 
	return _in(0x234cdd44, 0xd996fd9a, blip, index); 
}

/**
 * https://gtaforums.com/topic/864881-all-blip-color-ids-pictured/
 * @param blip
 * @param color
 */
export function setBlipColour(blip: number, color: number): void { 
	return _in(0x03d7fb09, 0xe75d6b7e, blip, color); 
}

export function setBlipCoords(blip: number, posX: number, posY: number, posZ: number): void { 
	return _in(0xae2af67e, 0x9d9af65d, blip, _fv(posX), _fv(posY), _fv(posZ)); 
}

/**
 * Display Id behaviours:
 * 0 = Doesn't show up, ever, anywhere.
 * 1 = Doesn't show up, ever, anywhere.
 * 2 = Shows on both main map and minimap. (Selectable on map)
 * 3 = Shows on main map only. (Selectable on map)
 * 4 = Shows on main map only. (Selectable on map)
 * 5 = Shows on minimap only.
 * 6 = Shows on both main map and minimap. (Selectable on map)
 * 7 = Doesn't show up, ever, anywhere.
 * 8 = Shows on both main map and minimap. (Not selectable on map)
 * 9 = Shows on minimap only.
 * 10 = Shows on both main map and minimap. (Not selectable on map)
 * 
 * Anything higher than 10 seems to be exactly the same as 10.
 * @param blip
 * @param displayId
 */
export function setBlipDisplay(blip: number, displayId: number): void { 
	return _in(0x9029b2f3, 0xda924928, blip, displayId); 
}

/**
 * Must be toggled before being queued for animation
 * @param blip
 * @param toggle
 */
export function setBlipExtendedHeightThreshold(blip: number, toggle: boolean): void { 
	return _in(0xc4278f70, 0x131baa6d, blip, toggle); 
}

export function setBlipFade(blip: number, opacity: number, duration: number): void { 
	return _in(0x2aee8f83, 0x90d2298c, blip, opacity, duration); 
}

export function setBlipFlashInterval(blip: number, p1: number): void { 
	return _in(0xaa51db31, 0x3c010a7e, blip, p1); 
}

/**
 * Adds up after viewing multiple R* scripts. I believe that the duration is in miliseconds.
 * @param blip
 * @param duration
 */
export function setBlipFlashTimer(blip: number, duration: number): void { 
	return _in(0xd3cd6fd2, 0x97ae87cc, blip, duration); 
}

export function setBlipFlashes(blip: number, toggle: boolean): void { 
	return _in(0xb1455238, 0x3d39ce3e, blip, toggle); 
}

export function setBlipFlashesAlternate(blip: number, toggle: boolean): void { 
	return _in(0x2e8d9498, 0xc56dd0d1, blip, toggle); 
}

/**
 * Applies to new eBlipParams _BLIP_CHANGE_46* and _BLIP_CHANGE_47*
 * @param blip
 * @param blipChangeParam46
 * @param blipChangeParam47
 */
export function setBlipGpsRouteDisplayDistance(blip: number, blipChangeParam46: number, blipChangeParam47: boolean): void { 
	return _in(0x25d984cf, 0xb64ed6de, blip, blipChangeParam46, blipChangeParam47); 
}

export function setBlipHiddenOnLegend(blip: number, toggle: boolean): void { 
	return _in(0x54318c91, 0x5d27e4ce, blip, toggle); 
}

export function setBlipHighDetail(blip: number, toggle: boolean): void { 
	return _in(0xe2590bc2, 0x9220cebb, blip, toggle); 
}

export function setBlipMarkerLongDistance(p0: number, p1: number): void { 
	return _in(0xb552929b, 0x85fc27ec, p0, p1); 
}

/**
 * Doesn't work if the label text of gxtEntry is >= 80.
 * @param blip
 * @param gxtEntry
 */
export function setBlipNameFromTextFile(blip: number, gxtEntry: string): void { 
	return _in(0xeaa0ffe1, 0x20d92784, blip, _ts(gxtEntry)); 
}

export function setBlipNameToPlayerName(blip: number, player: number): void { 
	return _in(0x127de7b2, 0x0c60a6a3, blip, player); 
}

/**
 * See this topic for more details : gtaforums.com/topic/717612-v-scriptnative-documentation-and-research/page-35?p=1069477935
 * @param blip
 * @param priority
 */
export function setBlipPriority(blip: number, priority: number): void { 
	return _in(0xae9fc9ef, 0x6a9fac79, blip, priority); 
}

/**
 * After some testing, looks like you need to use CEIL() on the rotation (vehicle/ped heading) before using it there.
 * @param blip
 * @param rotation
 */
export function setBlipRotation(blip: number, rotation: number): void { 
	return _in(0xf87683cd, 0xf73c3f6e, blip, rotation); 
}

/**
 * Does not require whole number/integer rotations.
 * @param blip
 * @param heading
 */
export function setBlipRotationWithFloat(blip: number, heading: number): void { 
	return _in(0xa8b6afda, 0xc320ac87, blip, _fv(heading)); 
}

/**
 * Enable / disable showing route for the Blip-object.
 * @param blip
 * @param enabled
 */
export function setBlipRoute(blip: number, enabled: boolean): void { 
	return _in(0x4f7d8a9b, 0xfb0b43e9, blip, enabled); 
}

export function setBlipRouteColour(blip: number, colour: number): void { 
	return _in(0x837155cd, 0x2f63da09, blip, colour); 
}

export function setBlipScale(blip: number, scale: number): void { 
	return _in(0xd3874416, 0x7b2fa257, blip, _fv(scale)); 
}

/**
 * See https://imgur.com/a/lLkEsMN
 * @param blip
 * @param xScale
 * @param yScale
 */
export function setBlipScale2d(blip: number, xScale: number, yScale: number): void { 
	return _in(0xcd652443, 0x9909c979, blip, _fv(xScale), _fv(yScale)); 
}

/**
 * Can be used to give blips any RGB colour with SET_BLIP_COLOUR(blip, 84).
 * @param blip
 * @param r
 * @param g
 * @param b
 */
export function setBlipSecondaryColour(blip: number, r: number, g: number, b: number): void { 
	return _in(0x14892474, 0x891e09eb, blip, r, g, b); 
}

export function setBlipShortHeightThreshold(p0: number, p1: number): void { 
	return _in(0x4b5b620c, 0x9b59ed34, p0, p1); 
}

/**
 * As of b2189, the third parameter sets the color of the cone (before b2189 it was ignored). Note that it uses HUD colors, not blip colors.
 * @param blip
 * @param toggle
 * @param hudColorIndex
 */
export function setBlipShowCone(blip: number, toggle: boolean, hudColorIndex: number): void { 
	return _in(0x13127ec3, 0x665e8ee1, blip, toggle, hudColorIndex); 
}

/**
 * Sets the displayed sprite for a specific blip..
 * 
 * You may have your own list, but since dev-c didn't show it I was bored and started looking through scripts and functions to get a presumable almost positive list of a majority of blip IDs
 * https://pastebin.com/Bpj9Sfft
 * 
 * Blips Images + IDs:
 * https://gtaxscripting.blogspot.com/2016/05/gta-v-blips-id-and-image.html
 * @param blip
 * @param spriteId
 */
export function setBlipSprite(blip: number, spriteId: number): void { 
	return _in(0xdf735600, 0xa4696daf, blip, spriteId); 
}

export function setBlipUseHeightIndicatorOnEdge(blip: number, p1: number): void { 
	return _in(0x2c9f3023, 0x98e13141, blip, p1); 
}

export function setBlockAmbientPedsFromDroppingWeaponsThisFrame(): void { 
	return _in(0xc73effc5, 0xe043a8ba); 
}

export function setBlockWantedFlash(disabled: boolean): void { 
	return _in(0xd1942374, 0x085c8469, disabled); 
}

/**
 * works with TASK::TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS to make a ped completely oblivious to all events going on around him
 * @param ped
 * @param toggle
 */
export function setBlockingOfNonTemporaryEvents(ped: number, toggle: boolean): void { 
	return _in(0x9f8aa94d, 0x6d97dbf4, ped, toggle); 
}

export function setBlockingOfNonTemporaryEventsForAmbientPedsThisFrame(p0: boolean): void { 
	return _in(0x9911f4a2, 0x4485f653, p0); 
}

export function setBoatAnchor(vehicle: number, toggle: boolean): void { 
	return _in(0x75dbec17, 0x4aeead10, vehicle, toggle); 
}

export function setBoatDisableAvoidance(vehicle: number, p1: boolean): void { 
	return _in(0x0a6a279f, 0x3aa4fd70, vehicle, p1); 
}

export function setBoatIgnoreLandProbes(p0: number, p1: number): void { 
	return _in(0xed5ede9e, 0x676643c9, p0, p1); 
}

export function setBoatLowLodAnchorDistance(vehicle: number, value: number): void { 
	return _in(0xe842a939, 0x8079bd82, vehicle, _fv(value)); 
}

export function setBoatRemainsAnchoredWhilePlayerIsDriver(vehicle: number, toggle: boolean): void { 
	return _in(0xe3ebaae4, 0x84798530, vehicle, toggle); 
}

export function setBoatSinksWhenWrecked(vehicle: number, toggle: boolean): void { 
	return _in(0x8f719973, 0xe1445ba2, vehicle, toggle); 
}

export function setBoatWrecked(vehicle: number): void { 
	return _in(0xbd32e46a, 0xa95c1dd2, vehicle); 
}

/**
 * Use the vehicle bounds (instead of viewport) when deciding if a vehicle is sufficiently above the water (waterheight.dat), bypassing wave simulation checks
 * @param vehicle
 * @param toggle
 */
export function setBoundsAffectWaterProbes(vehicle: number, toggle: boolean): void { 
	return _in(0x85fc953f, 0x6c6cbde1, vehicle, toggle); 
}

export function setCalmedWaveHeightScaler(height: number): void { 
	return _in(0x547237aa, 0x71ab44de, _fv(height)); 
}

/**
 * Set camera as active/inactive.
 * @param cam
 * @param active
 */
export function setCamActive(cam: number, active: boolean): void { 
	return _in(0x026fb97d, 0x0a425f84, cam, active); 
}

/**
 * Previous declaration void SET_CAM_ACTIVE_WITH_INTERP(Cam camTo, Cam camFrom, int duration, BOOL easeLocation, BOOL easeRotation) is completely wrong. The last two params are integers not BOOLs...
 * 
 * @param camTo
 * @param camFrom
 * @param duration
 * @param easeLocation
 * @param easeRotation
 */
export function setCamActiveWithInterp(camTo: number, camFrom: number, duration: number, easeLocation: number, easeRotation: number): void { 
	return _in(0x9fbda379, 0x383a52a4, camTo, camFrom, duration, easeLocation, easeRotation); 
}

/**
 * Allows you to aim and shoot at the direction the camera is facing.
 * @param cam
 * @param toggle
 */
export function setCamAffectsAiming(cam: number, toggle: boolean): void { 
	return _in(0x8c1dc777, 0x0c51dc8d, cam, toggle); 
}

export function setCamAnimCurrentPhase(cam: number, phase: number): void { 
	return _in(0x4145a4c4, 0x4ff3b5a6, cam, _fv(phase)); 
}

/**
 * Rotates the radar to match the camera's Z rotation
 * @param cam
 * @param toggle
 */
export function setCamControlsMiniMapHeading(cam: number, toggle: boolean): void { 
	return _in(0x661b5c86, 0x54add825, cam, toggle); 
}

/**
 * Sets the position of the cam.
 * @param cam
 * @param posX
 * @param posY
 * @param posZ
 */
export function setCamCoord(cam: number, posX: number, posY: number, posZ: number): void { 
	return _in(0x4d41783f, 0xb745e42e, cam, _fv(posX), _fv(posY), _fv(posZ)); 
}

/**
 * if p0 is 0, effect is cancelled
 * 
 * if p0 is 1, effect zooms in, gradually tilts cam clockwise apx 30 degrees, wobbles slowly. Motion blur is active until cancelled.
 * 
 * if p0 is 2, effect immediately tilts cam clockwise apx 30 degrees, begins to wobble slowly, then gradually tilts cam back to normal. The wobbling will continue until the effect is cancelled.
 * @param p0
 */
export function setCamDeathFailEffectState(p0: number): void { 
	return _in(0x80c8b184, 0x6639bb19, p0); 
}

/**
 * NOTE: Debugging functions are not present in the retail version of the game.
 * @param camera
 * @param name
 */
export function setCamDebugName(camera: number, name: string): void { 
	return _in(0x1b93e010, 0x7865dd40, camera, _ts(name)); 
}

/**
 * This native has its name defined inside its codE
 * 
 * @param camera
 * @param p1
 */
export function setCamDofFnumberOfLens(camera: number, p1: number): void { 
	return _in(0x7dd234d6, 0xf3914c5b, camera, _fv(p1)); 
}

/**
 * Native name labeled within its code
 * @param camera
 * @param multiplier
 */
export function setCamDofFocalLengthMultiplier(camera: number, multiplier: number): void { 
	return _in(0x47b595d6, 0x0664cffa, camera, _fv(multiplier)); 
}

/**
 * This native has a name defined inside its code
 * @param camera
 * @param p1
 */
export function setCamDofFocusDistanceBias(camera: number, p1: number): void { 
	return _in(0xc669eea5, 0xd031b7de, camera, _fv(p1)); 
}

/**
 * This native has a name defined inside its code
 * @param camera
 * @param p1
 */
export function setCamDofMaxNearInFocusDistance(camera: number, p1: number): void { 
	return _in(0xc3654a44, 0x1402562d, camera, _fv(p1)); 
}

/**
 * This native has a name defined inside its code
 * @param camera
 * @param p1
 */
export function setCamDofMaxNearInFocusDistanceBlendLevel(camera: number, p1: number): void { 
	return _in(0x2c654b49, 0x43bddf7c, camera, _fv(p1)); 
}

export function setCamDofOverriddenFocusDistance(camera: number, p1: number): void { 
	return _in(0xf55e4046, 0xf6f831dc, camera, _fv(p1)); 
}

export function setCamDofOverriddenFocusDistanceBlendLevel(p0: number, p1: number): void { 
	return _in(0xe111a7c0, 0xd200cbc5, p0, _fv(p1)); 
}

export function setCamDofPlanes(cam: number, p1: number, p2: number, p3: number, p4: number): void { 
	return _in(0x3cf48f6f, 0x96e749dc, cam, _fv(p1), _fv(p2), _fv(p3), _fv(p4)); 
}

/**
 * This native has a name defined inside its code
 * @param camera
 * @param state
 */
export function setCamDofShouldKeepLookAtTargetInFocus(camera: number, state: boolean): void { 
	return _in(0x7cf3af51, 0xdcfe4108, camera, state); 
}

export function setCamDofStrength(cam: number, dofStrength: number): void { 
	return _in(0x5ee29b4d, 0x7d5df897, cam, _fv(dofStrength)); 
}

export function setCamFarClip(cam: number, farClip: number): void { 
	return _in(0xae306f2a, 0x904bf86e, cam, _fv(farClip)); 
}

export function setCamFarDof(cam: number, farDOF: number): void { 
	return _in(0xedd91296, 0xcd01aee0, cam, _fv(farDOF)); 
}

/**
 * Sets the field of view of the cam.
 * ---------------------------------------------
 * Min: 1.0f
 * Max: 130.0f
 * @param cam
 * @param fieldOfView
 */
export function setCamFov(cam: number, fieldOfView: number): void { 
	return _in(0xb13c14f6, 0x6a00d047, cam, _fv(fieldOfView)); 
}

/**
 * The native seems to only be called once.
 * 
 * The native is used as so,
 * CAM::SET_CAM_INHERIT_ROLL_VEHICLE(l_544, getElem(2, &l_525, 4));
 * In the exile1 script.
 * @param cam
 * @param p1
 */
export function setCamInheritRollVehicle(cam: number, p1: boolean): void { 
	return _in(0x45f1de9c, 0x34b93ae6, cam, p1); 
}

/**
 * When set to true shadows appear more smooth but less detailed.
 * Set to false by default.
 * @param cam
 * @param toggle
 */
export function setCamIsInsideVehicle(cam: number, toggle: boolean): void { 
	return _in(0xa2767257, 0xa320fc82, cam, toggle); 
}

export function setCamMotionBlurStrength(cam: number, strength: number): void { 
	return _in(0x6f0f77fb, 0xa9a8f2e6, cam, _fv(strength)); 
}

export function setCamNearClip(cam: number, nearClip: number): void { 
	return _in(0xc7848efc, 0xcc545182, cam, _fv(nearClip)); 
}

export function setCamNearDof(cam: number, nearDOF: number): void { 
	return _in(0x3fa4bf0a, 0x7ab7de2c, cam, _fv(nearDOF)); 
}

export function setCamParams(cam: number, posX: number, posY: number, posZ: number, rotX: number, rotY: number, rotZ: number, fieldOfView: number, p8: number, p9: number, p10: number, p11: number): void { 
	return _in(0xbfd8727a, 0xea3cceba, cam, _fv(posX), _fv(posY), _fv(posZ), _fv(rotX), _fv(rotY), _fv(rotZ), _fv(fieldOfView), p8, p9, p10, p11); 
}

/**
 * Sets the rotation of the cam.
 * Last parameter unknown.
 * 
 * Last parameter seems to always be set to 2.
 * @param cam
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param rotationOrder
 */
export function setCamRot(cam: number, rotX: number, rotY: number, rotZ: number, rotationOrder: number): void { 
	return _in(0x85973643, 0x155d0b07, cam, _fv(rotX), _fv(rotY), _fv(rotZ), rotationOrder); 
}

export function setCamShakeAmplitude(cam: number, amplitude: number): void { 
	return _in(0xd93db43b, 0x82bc0d00, cam, _fv(amplitude)); 
}

/**
 * I named p1 as timeDuration as it is obvious. I'm assuming tho it is ran in ms(Milliseconds) as usual.
 * @param cam
 * @param timeDuration
 */
export function setCamSplineDuration(cam: number, timeDuration: number): void { 
	return _in(0x1381539f, 0xee034cda, cam, timeDuration); 
}

export function setCamSplineNodeEase(cam: number, easingFunction: number, p2: number, p3: number): void { 
	return _in(0x83b8201e, 0xd82a9a2d, cam, easingFunction, p2, _fv(p3)); 
}

export function setCamSplineNodeExtraFlags(cam: number, p1: number, flags: number): void { 
	return _in(0x7bf1a54a, 0xe67ac070, cam, p1, flags); 
}

export function setCamSplineNodeVelocityScale(cam: number, p1: number, scale: number): void { 
	return _in(0xa6385deb, 0x180f319f, cam, p1, _fv(scale)); 
}

export function setCamSplinePhase(cam: number, p1: number): void { 
	return _in(0x242b5874, 0xf0a4e052, cam, _fv(p1)); 
}

export function setCamSplineSmoothingStyle(cam: number, smoothingStyle: number): void { 
	return _in(0xd1b0f412, 0xf109ea5d, cam, smoothingStyle); 
}

export function setCamUseShallowDofMode(cam: number, toggle: boolean): void { 
	return _in(0x16a96863, 0xa17552bb, cam, toggle); 
}

/**
 * context: see _GET_CAM_ACTIVE_VIEW_MODE_CONTEXT, viewmode: see CAM.GET_FOLLOW_VEHICLE_CAM_VIEW_MODE
 * @param context
 * @param viewMode
 */
export function setCamViewModeForContext(context: number, viewMode: number): void { 
	return _in(0x2a2173e4, 0x6daecd12, context, viewMode); 
}

export function setCanAdjustGroundClearance(vehicle: number, p1: boolean): void { 
	return _in(0xa7dcdf4d, 0xed40a8f4, vehicle, p1); 
}

/**
 * Setting ped to true allows the ped to shoot "friendlies".
 * 
 * p2 set to true when toggle is also true seams to make peds permanently unable to aim at, even if you set p2 back to false.
 * 
 * p1 = false & p2 = false for unable to aim at.
 * p1 = true & p2 = false for able to aim at.
 * @param ped
 * @param toggle
 * @param p2
 */
export function setCanAttackFriendly(ped: number, toggle: boolean, p2: boolean): void { 
	return _in(0xb3b1cb34, 0x9ff9c75d, ped, toggle, p2); 
}

/**
 * p1 always false.
 * @param entity
 * @param toggle
 */
export function setCanAutoVaultOnEntity(entity: number, toggle: boolean): void { 
	return _in(0xe12abe5e, 0x3a389a6c, entity, toggle); 
}

/**
 * p1 always false.
 * @param entity
 * @param toggle
 */
export function setCanClimbOnEntity(entity: number, toggle: boolean): void { 
	return _in(0xa80ae305, 0xe0a3044f, entity, toggle); 
}

export function setCanDisplayMinimapDuringCutsceneThisUpdate(): void { 
	return _in(0x21310469, 0x57f31b04); 
}

/**
 * Disable all weapons. Does the same as 0xB4771B9AAF4E68E4 except for all weapons.
 * @param ped
 * @param toggle
 */
export function setCanPedSelectAllWeapons(ped: number, toggle: boolean): void { 
	return _in(0xeff29609, 0x7ff1e509, ped, toggle); 
}

/**
 * Disables selecting the given weapon. Ped isn't forced to put the gun away. However you can't reselect the weapon if you holster then unholster. Weapon is also grayed out on the weapon wheel.
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param toggle
 */
export function setCanPedSelectInventoryWeapon(ped: number, weaponHash: number, toggle: boolean): void { 
	return _in(0xb4771b9a, 0xaf4e68e4, ped, _ch(weaponHash), toggle); 
}

/**
 * Hardcoded to not work in multiplayer.
 * @param vehicle
 * @param state
 */
export function setCanResprayVehicle(vehicle: number, state: boolean): void { 
	return _in(0x52bba29d, 0x5ec69356, vehicle, state); 
}

export function setCanUseHydraulics(vehicle: number, toggle: boolean): void { 
	return _in(0x1201e8a3, 0x290a3b98, vehicle, toggle); 
}

/**
 * Initially used in Max Payne 3, that's why we know the name.
 * @param vehicle
 */
export function setCarBootOpen(vehicle: number): void { 
	return _in(0xfc40cbf7, 0xb90ca77c, vehicle); 
}

export function setCarGeneratorsCanUpdateDuringCutscene(p0: boolean): void { 
	return _in(0xe36a98d8, 0xab3d3c66, p0); 
}

export function setCarHighSpeedBumpSeverityMultiplier(multiplier: number): void { 
	return _in(0x84fd40f5, 0x6075e816, _fv(multiplier)); 
}

export function setCargobobExcludeFromPickupEntity(p0: number, p1: number): void { 
	return _in(0x1f34b062, 0x6c594380, p0, p1); 
}

export function setCargobobExtaPickupRange(p0: number, p1: number): void { 
	return _in(0x72beccf4, 0xb829522e, p0, p1); 
}

/**
 * Stops cargobob from being able to detach the attached vehicle.
 * @param cargobob
 * @param toggle
 */
export function setCargobobForceDontDetachVehicle(cargobob: number, toggle: boolean): void { 
	return _in(0x571feb38, 0x3f629926, cargobob, toggle); 
}

/**
 * Won't attract or magnetize to any helicopters or planes of course, but that's common sense.
 * @param cargobob
 * @param isActive
 */
export function setCargobobPickupMagnetActive(cargobob: number, isActive: boolean): void { 
	return _in(0x9a665550, 0xf8da349b, cargobob, isActive); 
}

export function setCargobobPickupMagnetEnsurePickupEntityUpright(vehicle: number, p1: boolean): void { 
	return _in(0x56eb5e94, 0x318d3fb6, vehicle, p1); 
}

export function setCargobobPickupMagnetFalloff(cargobob: number, p1: number): void { 
	return _in(0xa17bad15, 0x3b51547e, cargobob, _fv(p1)); 
}

export function setCargobobPickupMagnetPullRopeLength(vehicle: number, p1: number): void { 
	return _in(0x685d5561, 0x680d088b, vehicle, _fv(p1)); 
}

export function setCargobobPickupMagnetPullStrength(cargobob: number, p1: number): void { 
	return _in(0xed8286f7, 0x1a819baa, cargobob, _fv(p1)); 
}

export function setCargobobPickupMagnetReducedFalloff(cargobob: number, p1: number): void { 
	return _in(0x6d8eac07, 0x506291fb, cargobob, _fv(p1)); 
}

export function setCargobobPickupMagnetReducedStrength(cargobob: number, p1: number): void { 
	return _in(0x66979acf, 0x5102fd2f, cargobob, _fv(p1)); 
}

export function setCargobobPickupMagnetSetAmbientMode(vehicle: number, p1: boolean, p2: boolean): void { 
	return _in(0x9bddc73c, 0xc6a115d4, vehicle, p1, p2); 
}

export function setCargobobPickupMagnetSetTargetedMode(vehicle: number, cargobob: number): void { 
	return _in(0xe301bd63, 0xe9e13cf0, vehicle, cargobob); 
}

export function setCargobobPickupMagnetStrength(cargobob: number, strength: number): void { 
	return _in(0xbcbfcd9d, 0x1dac19e2, cargobob, _fv(strength)); 
}

export function setCargobobPickupRopeDampingMultiplier(p0: number, p1: number): void { 
	return _in(0xcf1182f6, 0x82f65307, p0, p1); 
}

export function setCargobobPickupRopeType(p0: number, p1: number): void { 
	return _in(0x0d5f65a8, 0xf4ebdab5, p0, p1); 
}

export function setCarjackMissionRemovalParameters(p0: number, p1: number): void { 
	return _in(0xb9562064, 0x627ff9db, p0, p1); 
}

export function setCgAtBoundcenter(entity: number): void { 
	return _in(0xbe520d97, 0x61ff811f, entity); 
}

export function setCgoffset(entity: number, x: number, y: number, z: number): void { 
	return _in(0xd8fa3908, 0xd7b86904, entity, _fv(x), _fv(y), _fv(z)); 
}

/**
 * Only used in R* Script fm_content_cargo
 * @param vehicle
 * @param p1
 */
export function setCheckForEnoughRoomForPed(vehicle: number, p1: boolean): void { 
	return _in(0xef9d388f, 0x8d377f44, vehicle, p1); 
}

/**
 * This does not move an existing checkpoint... so wtf.
 * @param checkpoint
 * @param posX
 * @param posY
 * @param posZ
 * @param unkX
 * @param unkY
 * @param unkZ
 */
export function setCheckpointClipplaneWithPosNorm(checkpoint: number, posX: number, posY: number, posZ: number, unkX: number, unkY: number, unkZ: number): void { 
	return _in(0xf51d3618, 0x5993515d, checkpoint, _fv(posX), _fv(posY), _fv(posZ), _fv(unkX), _fv(unkY), _fv(unkZ)); 
}

/**
 * Sets the cylinder height of the checkpoint.
 * 
 * Parameters:
 * * nearHeight - The height of the checkpoint when inside of the radius.
 * * farHeight - The height of the checkpoint when outside of the radius.
 * * radius - The radius of the checkpoint.
 * @param checkpoint
 * @param nearHeight
 * @param farHeight
 * @param radius
 */
export function setCheckpointCylinderHeight(checkpoint: number, nearHeight: number, farHeight: number, radius: number): void { 
	return _in(0x2707aae9, 0xd9297d89, checkpoint, _fv(nearHeight), _fv(farHeight), _fv(radius)); 
}

/**
 * Unknown. Called after creating a checkpoint (type: 51) in the creators.
 * @param checkpoint
 */
export function setCheckpointDecalRotAlignedToCameraRot(checkpoint: number): void { 
	return _in(0x615d3925, 0xe87a3b26, checkpoint); 
}

export function setCheckpointDirection(checkpoint: number, posX: number, posY: number, posZ: number): void { 
	return _in(0x3c788e7f, 0x6438754d, checkpoint, _fv(posX), _fv(posY), _fv(posZ)); 
}

export function setCheckpointForceDirection(checkpoint: number): void { 
	return _in(0xdb1ea941, 0x1c8911ec, checkpoint); 
}

export function setCheckpointForceOldArrowPointing(checkpoint: number): void { 
	return _in(0xfcf6788f, 0xc4860cd4, checkpoint); 
}

export function setCheckpointInsideCylinderHeightScale(checkpoint: number, scale: number): void { 
	return _in(0x4b5b4da5, 0xd79f1943, checkpoint, _fv(scale)); 
}

export function setCheckpointInsideCylinderScale(checkpoint: number, scale: number): void { 
	return _in(0x44621483, 0xff966526, checkpoint, _fv(scale)); 
}

/**
 * Sets the checkpoint color.
 * @param checkpoint
 * @param red
 * @param green
 * @param blue
 * @param alpha
 */
export function setCheckpointRgba(checkpoint: number, red: number, green: number, blue: number, alpha: number): void { 
	return _in(0x7167371e, 0x8ad747f7, checkpoint, red, green, blue, alpha); 
}

/**
 * Sets the checkpoint icon color.
 * @param checkpoint
 * @param red
 * @param green
 * @param blue
 * @param alpha
 */
export function setCheckpointRgba2(checkpoint: number, red: number, green: number, blue: number, alpha: number): void { 
	return _in(0xb9ea4090, 0x7c680580, checkpoint, red, green, blue, alpha); 
}

export function setCinematicButtonActive(p0: boolean): void { 
	return _in(0x51669f7d, 0x1fb53d9f, p0); 
}

export function setCinematicCamShakeAmplitude(p0: number): void { 
	return _in(0xc724c701, 0xc30b2fe7, _fv(p0)); 
}

/**
 * Toggles the vehicle cinematic cam; requires the player ped to be in a vehicle to work.
 * @param toggle
 */
export function setCinematicModeActive(toggle: boolean): void { 
	return _in(0xdcf0754a, 0xc3d6fd4e, toggle); 
}

export function setCinematicNewsChannelActiveThisUpdate(): void { 
	return _in(0xdc9da9e8, 0x789f5246); 
}

export function setClearFreezeWaitingOnCollisionOncePlayerEnters(vehicle: number, toggle: boolean): void { 
	return _in(0xb2e0c0d6, 0x922d31f2, vehicle, toggle); 
}

export function setClockDate(day: number, month: number, year: number): void { 
	return _in(0xb096419d, 0xf0d06ce7, day, month, year); 
}

/**
 * SET_CLOCK_TIME(12, 34, 56);
 * @param hour
 * @param minute
 * @param second
 */
export function setClockTime(hour: number, minute: number, second: number): void { 
	return _in(0x47c3b584, 0x8c3e45d8, hour, minute, second); 
}

export function setCloudSettingsOverride(p0: string): void { 
	return _in(0x02deaac8, 0xf8ea7fe7, _ts(p0)); 
}

export function setCloudsAlpha(opacity: number): void { 
	return _in(0xf3619922, 0x5d6d8c86, _fv(opacity)); 
}

export function setColourOfNextTextComponent(hudColor: number): void { 
	return _in(0x39bbf623, 0xfc803eac, hudColor); 
}

/**
 * combatType can be between 0-14. See GET_COMBAT_FLOAT below for a list of possible parameters.
 * @param ped
 * @param combatType
 * @param p2
 */
export function setCombatFloat(ped: number, combatType: number, p2: number): void { 
	return _in(0xff41b4b1, 0x41ed981c, ped, combatType, _fv(p2)); 
}

export function setContentIdIndex(contentId: number, index: number): void { 
	return _in(0x4b82fa6f, 0x2d624634, _ch(contentId), index); 
}

export function setContentPropType(model: number, type: number): void { 
	return _in(0xba4583af, 0x4c678a9b, _ch(model), type); 
}

/**
 * control: see IS_CONTROL_ENABLED
 * @param control
 * @param red
 * @param green
 * @param blue
 */
export function setControlLightEffectColor(control: number, red: number, green: number, blue: number): void { 
	return _in(0x8290252f, 0xff36acb5, control, red, green, blue); 
}

/**
 * control: see IS_CONTROL_ENABLED
 * duration in milliseconds
 * frequency should range from about 10 (slow vibration) to 255 (very fast)
 * 
 * example:
 * SET_CONTROL_SHAKE(PLAYER_CONTROL, 100, 200);
 * @param control
 * @param duration
 * @param frequency
 */
export function setControlShake(control: number, duration: number, frequency: number): void { 
	return _in(0x48b3886c, 0x1358d0d5, control, duration, frequency); 
}

/**
 * control: see IS_CONTROL_ENABLED
 * @param control
 * @param uniqueId
 */
export function setControlShakeSuppressedId(control: number, uniqueId: number): void { 
	return _in(0xf239400e, 0x16c23e08, control, uniqueId); 
}

/**
 * Does nothing (it's a nullsub).
 * @param control
 * @param leftDuration
 * @param leftFrequency
 * @param rightDuration
 * @param rightFrequency
 */
export function setControlTriggerShake(control: number, leftDuration: number, leftFrequency: number, rightDuration: number, rightFrequency: number): void { 
	return _in(0x14d29bb1, 0x2d47f68c, control, leftDuration, leftFrequency, rightDuration, rightFrequency); 
}

/**
 * This is for simulating player input.
 * value is a float value from 0 - 1
 * 
 * control: see IS_CONTROL_ENABLED
 * @param control
 * @param action
 * @param value
 */
export function setControlValueNextFrame(control: number, action: number, value: number): boolean { 
	return _in(0xe8a25867, 0xfba3b05e, control, action, _fv(value), _r); 
}

export function setConversationAudioControlledByAnim(p0: boolean): void { 
	return _in(0x0b568201, 0xdd99f0eb, p0); 
}

export function setConversationAudioPlaceholder(p0: boolean): void { 
	return _in(0x61631f5d, 0xf50d1c34, p0); 
}

export function setConvertibleRoof(vehicle: number, p1: boolean): void { 
	return _in(0xf39c4f53, 0x8b5124c2, vehicle, p1); 
}

export function setConvertibleRoofLatchState(vehicle: number, state: boolean): void { 
	return _in(0x1a78ad3d, 0x8240536f, vehicle, state); 
}

export function setCopBlipSprite(p0: number, p1: number): void { 
	return _in(0x9fcb3cbf, 0xb3ead69a, p0, _fv(p1)); 
}

export function setCopBlipSpriteAsStandard(): void { 
	return _in(0xb7b87352, 0x0c84c118); 
}

export function setCopPerceptionOverrides(seeingRange: number, seeingRangePeripheral: number, hearingRange: number, visualFieldMinAzimuthAngle: number, visualFieldMaxAzimuthAngle: number, fieldOfGazeMaxAngle: number, p6: number): void { 
	return _in(0x2f074c90, 0x4d85129e, _fv(seeingRange), _fv(seeingRangePeripheral), _fv(hearingRange), _fv(visualFieldMinAzimuthAngle), _fv(visualFieldMaxAzimuthAngle), _fv(fieldOfGazeMaxAngle), _fv(p6)); 
}

export function setCorpseRagdollFriction(ped: number, p1: number): void { 
	return _in(0x2735233a, 0x786b1bef, ped, _fv(p1)); 
}

export function setCreateRandomCops(toggle: boolean): void { 
	return _in(0x102e68b2, 0x024d536d, toggle); 
}

export function setCreateRandomCopsNotOnScenarios(toggle: boolean): void { 
	return _in(0x8a498685, 0x1c4ef6e7, toggle); 
}

export function setCreateRandomCopsOnScenarios(toggle: boolean): void { 
	return _in(0x444cb7d7, 0xdbe6973d, toggle); 
}

export function setCreditsActive(toggle: boolean): void { 
	return _in(0xb938b7e6, 0xd3c0620c, toggle); 
}

export function setCreditsFadeOutWithScreen(toggle: boolean): void { 
	return _in(0xb51b9ab9, 0xef81868c, toggle); 
}

/**
 * Mixes two weather types. If percentWeather2 is set to 0.0f, then the weather will be entirely of weatherType1, if it is set to 1.0f it will be entirely of weatherType2. If it's set somewhere in between, there will be a mixture of weather behaviors. To test, try this in the RPH console, and change the float to different values between 0 and 1:
 * 
 * execute "NativeFunction.Natives.x578C752848ECFA0C(Game.GetHashKey(""RAIN""), Game.GetHashKey(""SMOG""), 0.50f);
 * 
 * Note that unlike most of the other weather natives, this native takes the hash of the weather name, not the plain string. These are the weather names and their hashes:
 * 
 * CLEAR  0x36A83D84
 * EXTRASUNNY  0x97AA0A79
 * CLOUDS  0x30FDAF5C
 * OVERCAST    0xBB898D2D
 * RAIN    0x54A69840
 * CLEARING    0x6DB1A50D
 * THUNDER 0xB677829F
 * SMOG    0x10DCF4B5
 * FOGGY   0xAE737644
 * XMAS    0xAAC9C895
 * SNOWLIGHT   0x23FB812B
 * BLIZZARD    0x27EA2814
 * 
 * 
 * 
 * 
 * 
 *  -- [[ OLD INVALID INFO BELOW ]] 
 * Not tested. Based purely on disassembly. Instantly sets the weather to sourceWeather, then transitions to targetWeather over the specified transitionTime in seconds.
 * 
 * If an invalid hash is specified for sourceWeather, the current weather type will be used.
 * If an invalid hash is specified for targetWeather, the next weather type will be used.
 * If an invalid hash is specified for both sourceWeather and targetWeather, the function just changes the transition time of the current transition.
 * @param weatherType1
 * @param weatherType2
 * @param percentWeather2
 */
export function setCurrWeatherState(weatherType1: number, weatherType2: number, percentWeather2: number): void { 
	return _in(0x578c7528, 0x48ecfa0c, _ch(weatherType1), _ch(weatherType2), _fv(percentWeather2)); 
}

/**
 * Full list of weapons by DurtyFree (Search for VEHICLE_*): https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 */
export function setCurrentPedVehicleWeapon(ped: number, weaponHash: number): boolean { 
	return _in(0x75c55983, 0xc2c39daa, ped, _ch(weaponHash), _r); 
}

/**
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param bForceInHand
 */
export function setCurrentPedWeapon(ped: number, weaponHash: number, bForceInHand: boolean): void { 
	return _in(0xadf692b2, 0x54977c0c, ped, _ch(weaponHash), bForceInHand); 
}

export function setCurrentPlayerTcmodifier(modifierName: string): void { 
	return _in(0xbbf327de, 0xd94e4deb, _ts(modifierName)); 
}

export function setCursorPosition(x: number, y: number): boolean { 
	return _in(0xfc695459, 0xd4d0e219, _fv(x), _fv(y), _r); 
}

export function setCustomMpHudColor(hudColorId: number): void { 
	return _in(0x2accb195, 0xf3ccd9de, hudColorId); 
}

export function setCustomPickupWeaponHash(pickupHash: number, pickup: number): void { 
	return _in(0x826d1ee4, 0xd1cafc78, _ch(pickupHash), pickup); 
}

/**
 * Examples:
 * 
 * AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "END_CREDITS_KILL_MICHAEL", 1);
 * AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "END_CREDITS_KILL_MICHAEL", 1);
 * AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "END_CREDITS_KILL_TREVOR", 1);
 * AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "END_CREDITS_SAVE_MICHAEL_TREVOR", 1);
 * AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "OFF_ROAD_RADIO_ROCK_LIST", 1);
 * AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_06_COUNTRY", "MAGDEMO2_RADIO_DINGHY", 1);
 * AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_16_SILVERLAKE", "SEA_RACE_RADIO_PLAYLIST", 1);
 * AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "OFF_ROAD_RADIO_ROCK_LIST", 1);
 * @param radioStation
 * @param trackListName
 * @param p2
 */
export function setCustomRadioTrackList(radioStation: string, trackListName: string, p2: boolean): void { 
	return _in(0x4e404a93, 0x61f75bb2, _ts(radioStation), _ts(trackListName), p2); 
}

/**
 * All occurrences found in b617d, sorted alphabetically and identical lines removed:
 * 
 * AUDIO::SET_CUTSCENE_AUDIO_OVERRIDE("_AK");
 * AUDIO::SET_CUTSCENE_AUDIO_OVERRIDE("_CUSTOM");
 * AUDIO::SET_CUTSCENE_AUDIO_OVERRIDE("_TOOTHLESS");
 * Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
 * @param name
 */
export function setCutsceneAudioOverride(name: string): void { 
	return _in(0x3b4bf5f0, 0x859204d9, _ts(name)); 
}

/**
 * Hardcoded to only work in multiplayer.
 * @param p0
 */
export function setCutsceneCamFarClipThisUpdate(p0: number): void { 
	return _in(0x12ded8ca, 0x53d47ea5, _fv(p0)); 
}

export function setCutsceneCanBeSkipped(p0: boolean): void { 
	return _in(0x41faa8fb, 0x2ece8720, p0); 
}

export function setCutsceneEntityStreamingFlags(cutsceneEntName: string, p1: number, p2: number): void { 
	return _in(0x4c61c75b, 0xee8184c2, _ts(cutsceneEntName), p1, p2); 
}

export function setCutsceneFadeValues(p0: boolean, p1: boolean, p2: boolean, p3: boolean): void { 
	return _in(0x8093f23a, 0xbaccc7d4, p0, p1, p2, p3); 
}

export function setCutsceneMultiheadFade(p0: boolean, p1: boolean, p2: boolean, p3: boolean): void { 
	return _in(0x20746f7b, 0x1032a3c7, p0, p1, p2, p3); 
}

export function setCutsceneMultiheadFadeManual(p0: boolean): void { 
	return _in(0x06ee9048, 0xfd080382, p0); 
}

/**
 * p3 could be heading. Needs more research.
 * @param x
 * @param y
 * @param z
 * @param p3
 * @param p4
 */
export function setCutsceneOrigin(x: number, y: number, z: number, p3: number, p4: number): void { 
	return _in(0xb812b3fd, 0x1c01cf27, _fv(x), _fv(y), _fv(z), _fv(p3), p4); 
}

export function setCutsceneOriginAndOrientation(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, p6: number): void { 
	return _in(0x011883f4, 0x1211432a, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), p6); 
}

/**
 * Full list of ped components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedComponentVariations.json
 * @param cutsceneEntName
 * @param componentId
 * @param drawableId
 * @param textureId
 * @param modelHash
 */
export function setCutscenePedComponentVariation(cutsceneEntName: string, componentId: number, drawableId: number, textureId: number, modelHash: number): void { 
	return _in(0xba01e7b6, 0xdeefbbc9, _ts(cutsceneEntName), componentId, drawableId, textureId, _ch(modelHash)); 
}

export function setCutscenePedComponentVariationFromPed(cutsceneEntName: string, ped: number, modelHash: number): void { 
	return _in(0x2a56c06e, 0xbef2b0d9, _ts(cutsceneEntName), ped, _ch(modelHash)); 
}

/**
 * Thanks R*! ;)
 * 
 * if ((l_161 == 0) || (l_161 == 2)) {
 * sub_2ea27("Trying to set Jimmy prop variation");
 * CUTSCENE::SET_CUTSCENE_PED_PROP_VARIATION("Jimmy_Boston", 1, 0, 0, 0);
 * }
 * 
 * Full list of ped components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedComponentVariations.json
 * @param cutsceneEntName
 * @param componentId
 * @param drawableId
 * @param textureId
 * @param modelHash
 */
export function setCutscenePedPropVariation(cutsceneEntName: string, componentId: number, drawableId: number, textureId: number, modelHash: number): void { 
	return _in(0x0546524a, 0xde2e9723, _ts(cutsceneEntName), componentId, drawableId, textureId, _ch(modelHash)); 
}

/**
 * Only used twice in R* scripts
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 */
export function setCutsceneTriggerArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): void { 
	return _in(0x9896ce47, 0x21be84ba, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2)); 
}

/**
 * Requires a component_at_*_flsh to be attached to the weapon object
 * @param object
 * @param toggle
 */
export function setCutscenesWeaponFlashlightOnThisFrame(object: number, toggle: boolean): void { 
	return _in(0xbce59537, 0x1a5fbaaf, object, toggle); 
}

export function setDamping(entity: number, vertex: number, value: number): void { 
	return _in(0xeea3b200, 0xa6feb65b, entity, vertex, _fv(value)); 
}

/**
 * NOTE: Debugging functions are not present in the retail version of the game.
 * @param enabled
 */
export function setDebugLinesAndSpheresDrawingActive(enabled: boolean): void { 
	return _in(0x175b6bfc, 0x15cdd0c5, enabled); 
}

export function setDecalBulletImpactRangeScale(p0: number): void { 
	return _in(0x46d1a61a, 0x21f566fc, _fv(p0)); 
}

export function setDecisionMaker(ped: number, name: number): void { 
	return _in(0xb604a294, 0x2aded0ee, ped, _ch(name)); 
}

/**
 * Sets a value that determines how aggressive the ocean waves will be. Values of 2.0 or more make for very aggressive waves like you see during a thunderstorm.
 * 
 * Works only ~200 meters around the player.
 * @param intensity
 */
export function setDeepOceanScaler(intensity: number): void { 
	return _in(0xb96b00e9, 0x76be977f, _fv(intensity)); 
}

/**
 * Only used with the "akula" and "annihilator2" in the decompiled native scripts.
 * @param vehicle
 * @param deploy
 * @param p2
 */
export function setDeployFoldingWings(vehicle: number, deploy: boolean, p2: boolean): void { 
	return _in(0xb251e0b3, 0x3e58b424, vehicle, deploy, p2); 
}

export function setDeployMissileBays(vehicle: number, deploy: boolean): void { 
	return _in(0x0c024688, 0x29e4aa65, vehicle, deploy); 
}

export function setDepthwriting(toggle: boolean): void { 
	return _in(0xc5c8f970, 0xd4edff71, toggle); 
}

export function setDescriptionForUgcMissionEightStrings(p0: boolean, p1: string, p2: string, p3: string, p4: string, p5: string, p6: string, p7: string, p8: string): void { 
	return _in(0x817b8610, 0x8eb94e51, p0, _ts(p1), _ts(p2), _ts(p3), _ts(p4), _ts(p5), _ts(p6), _ts(p7), _ts(p8)); 
}

export function setDipStraightDownWhenCrashingPlane(vehicle: number, toggle: boolean): void { 
	return _in(0xaa653ae6, 0x1924b0a0, vehicle, toggle); 
}

export function setDirectorModeAvailable(toggle: boolean): void { 
	return _in(0x04655f9d, 0x075d0ae5, toggle); 
}

export function setDirectorModeLaunchedByScript(): void { 
	return _in(0x2632482f, 0xd6b9ab87); 
}

export function setDisableAmbientMeleeMove(player: number, toggle: boolean): void { 
	return _in(0x2e8aabfa, 0x40a84f8c, player, toggle); 
}

/**
 * Sets a flag on heli and another vehicle type.
 * @param vehicle
 * @param toggle
 */
export function setDisableAutomaticCrashTask(vehicle: number, toggle: boolean): void { 
	return _in(0x97841634, 0xef7df1d6, vehicle, toggle); 
}

export function setDisableBmxExtraTrickForces(p0: number): void { 
	return _in(0x26d99d5a, 0x82fd18e8, p0); 
}

export function setDisableBreaking(object: number, toggle: boolean): void { 
	return _in(0x5cec1a84, 0x620e7d5b, object, toggle); 
}

export function setDisableCollisionsBetweenCarsAndCarParachute(p0: number): void { 
	return _in(0x8caab2bd, 0x3ea58bd4, p0); 
}

export function setDisableDamageWithPickedUpEntity(p0: number, p1: number): boolean { 
	return _in(0xd4196117, 0xaf7bb974, p0, p1, _r); 
}

export function setDisableDecalRenderingThisFrame(): void { 
	return _in(0x4b5cfc83, 0x122df602); 
}

/**
 * Prevents the vehicle from exploding when taking body damage if it was caused by a collision. Only works for planes.
 * @param vehicle
 * @param disable
 */
export function setDisableExplodeFromBodyDamageOnCollision(vehicle: number, disable: boolean): void { 
	return _in(0x26e13d44, 0x0e7f6064, vehicle, disable); 
}

/**
 * Prevents the vehicle from exploding when taking body damage if the inflictor is an AI-controlled vehicle. Only works for planes.
 * @param vehicle
 * @param disable
 */
export function setDisableExplodeFromBodyDamageReceivedByAiVehicle(vehicle: number, disable: boolean): void { 
	return _in(0xb0b7df5c, 0xb876ff5e, vehicle, disable); 
}

export function setDisableFragDamage(object: number, toggle: boolean): void { 
	return _in(0x01ba3aed, 0x21c16cfb, object, toggle); 
}

/**
 * Prevents the vehicle from exploding when taking body damage. Only works for helis and planes.
 * @param vehicle
 * @param disable
 */
export function setDisableHeliExplodeFromBodyDamage(vehicle: number, disable: boolean): void { 
	return _in(0xedbc8405, 0xb3895cc9, vehicle, disable); 
}

export function setDisableHighFallDeath(ped: number, toggle: boolean): void { 
	return _in(0x71179445, 0x3cfd692b, ped, toggle); 
}

/**
 * Disables "wings" for some flying vehicles. Works only for oppressor _2_ and deluxo.
 * For deluxo it just immediately removes vehicle's "wings" and you will be not able to fly up.
 * For oppressor 2 it will remove wings right after you land. And you will not able to fly up anymore too.
 * But for opressor 2 you still can fly if you somehow get back in the air.
 * @param vehicle
 * @param toggle
 */
export function setDisableHoverModeFlight(vehicle: number, toggle: boolean): void { 
	return _in(0x2d55fe37, 0x4d5fdb91, vehicle, toggle); 
}

/**
 * Disables collision for this vehicle (maybe it also supports other entities, not sure).
 * Only world/building/fixed world objects will have their collisions disabled, props, peds, or any other entity still collides with the vehicle.
 * Example: https://streamable.com/6n45d5
 * Not sure if there is a native (and if so, which one) that resets the collisions.
 * @param vehicle
 */
export function setDisableMapCollision(vehicle: number): void { 
	return _in(0x75627043, 0xc6aa90ad, vehicle); 
}

export function setDisablePedMapCollision(ped: number): void { 
	return _in(0xdfe68c4b, 0x787e1bfb, ped); 
}

export function setDisablePedStandOnTop(vehicle: number, toggle: boolean): void { 
	return _in(0x8235f1be, 0xad557629, vehicle, toggle); 
}

export function setDisablePetrolDecalsIgnitingThisFrame(): void { 
	return _in(0xd9454b57, 0x52c857dc); 
}

export function setDisablePetrolDecalsRecyclingThisFrame(): void { 
	return _in(0x27cfb1b1, 0xe078cb2d); 
}

export function setDisablePretendOccupants(vehicle: number, toggle: boolean): void { 
	return _in(0x25367de4, 0x9d64cf16, vehicle, toggle); 
}

export function setDisableRandomTrainsThisFrame(toggle: boolean): void { 
	return _in(0xd4b8e3d1, 0x917bc86b, toggle); 
}

export function setDisableRetractingWeaponBlades(toggle: boolean): void { 
	return _in(0x8f0d5ba1, 0xc2cc91d7, toggle); 
}

export function setDisableSuperdummy(vehicle: number, p1: boolean): void { 
	return _in(0xb088e9a4, 0x7ae6edd5, vehicle, p1); 
}

/**
 * Disables turret movement when called in a loop. You can still fire and aim. You cannot shoot backwards though.
 * @param vehicle
 * @param turretId
 */
export function setDisableTurretMovement(vehicle: number, turretId: number): void { 
	return _in(0xe615bb7a, 0x7752c76a, vehicle, turretId); 
}

export function setDisableVehicleEngineFires(vehicle: number, toggle: boolean): void { 
	return _in(0x91a0bd63, 0x5321f145, vehicle, toggle); 
}

export function setDisableVehicleExplosionsDamage(toggle: boolean): void { 
	return _in(0x143921e4, 0x5ec44d62, toggle); 
}

export function setDisableVehiclePetrolTankDamage(vehicle: number, toggle: boolean): void { 
	return _in(0x37c8252a, 0x7c92d017, vehicle, toggle); 
}

export function setDisableVehiclePetrolTankFires(vehicle: number, toggle: boolean): void { 
	return _in(0x465bf26a, 0xb9684352, vehicle, toggle); 
}

/**
 * True stops vtols from switching modes. Doesn't stop the sound though.
 * @param vehicle
 * @param toggle
 */
export function setDisableVerticalFlightModeTransition(vehicle: number, toggle: boolean): void { 
	return _in(0xce2b4377, 0x0b655f8f, vehicle, toggle); 
}

export function setDisableWantedConesResponse(vehicle: number, toggle: boolean): void { 
	return _in(0x4ad280eb, 0x48b2d8e6, vehicle, toggle); 
}

/**
 * Sets some global vehicle related bool
 * @param toggle
 */
export function setDisableWeaponBladeForces(toggle: boolean): void { 
	return _in(0x211e95ce, 0x9903940c, toggle); 
}

export function setDispatchCopsForPlayer(player: number, toggle: boolean): void { 
	return _in(0xdb172424, 0x876553f4, player, toggle); 
}

export function setDispatchIdealSpawnDistance(distance: number): void { 
	return _in(0x6fe601a6, 0x4180d423, _fv(distance)); 
}

export function setDispatchSpawnLocation(x: number, y: number, z: number): void { 
	return _in(0xd10f4420, 0x36302d50, _fv(x), _fv(y), _fv(z)); 
}

export function setDispatchTimeBetweenSpawnAttempts(p0: number, p1: number): void { 
	return _in(0x44f7cbc1, 0xbeb3327d, p0, _fv(p1)); 
}

export function setDispatchTimeBetweenSpawnAttemptsMultiplier(p0: number, p1: number): void { 
	return _in(0x48838ed9, 0x937a15d1, p0, _fv(p1)); 
}

export function setDistanceBlurStrengthOverride(p0: number): void { 
	return _in(0xe2892e7e, 0x55d7073a, _fv(p0)); 
}

/**
 * Toggles to render distant vehicles. They may not be vehicles but images to look like vehicles.
 * @param toggle
 */
export function setDistantCarsEnabled(toggle: boolean): void { 
	return _in(0xf796359a, 0x959df65d, toggle); 
}

/**
 * This is a NOP function. It does nothing at all.
 * @param toggle
 */
export function setDitchPoliceModels(toggle: boolean): void { 
	return _in(0x42cbe544, 0x62d92634, toggle); 
}

export function setDontAllowPlayerToEnterVehicleIfLockedForPlayer(vehicle: number, p1: boolean): void { 
	return _in(0xdbc631f1, 0x09350b8c, vehicle, p1); 
}

/**
 * R* used it to "remove" vehicle windows when "nightshark" had some mod, which adding some kind of armored windows. When enabled, you can't break vehicles glass. All your bullets wiil shoot through glass. You also will not able to break the glass with any other way (hitting and etc)
 * @param vehicle
 * @param toggle
 */
export function setDontProcessVehicleGlass(vehicle: number, toggle: boolean): void { 
	return _in(0x1087bc8e, 0xc540daeb, vehicle, toggle); 
}

/**
 * doorId: see SET_VEHICLE_DOOR_SHUT
 * @param vehicle
 * @param doorId
 * @param isBreakable
 */
export function setDoorAllowedToBeBrokenOff(vehicle: number, doorId: number, isBreakable: boolean): void { 
	return _in(0x2fa133a4, 0xa9d37ed8, vehicle, doorId, isBreakable); 
}

/**
 * Sets the on-screen drawing origin for draw-functions (which is normally x=0,y=0 in the upper left corner of the screen) to a world coordinate.
 * From now on, the screen coordinate which displays the given world coordinate on the screen is seen as x=0,y=0.
 * 
 * Example in C#:
 * Vector3 boneCoord = somePed.GetBoneCoord(Bone.SKEL_Head);
 * Function.Call(Hash.SET_DRAW_ORIGIN, boneCoord.X, boneCoord.Y, boneCoord.Z, 0);
 * Function.Call(Hash.DRAW_SPRITE, "helicopterhud", "hud_corner", -0.01, -0.015, 0.013, 0.013, 0.0, 255, 0, 0, 200);
 * Function.Call(Hash.DRAW_SPRITE, "helicopterhud", "hud_corner", 0.01, -0.015, 0.013, 0.013, 90.0, 255, 0, 0, 200);
 * Function.Call(Hash.DRAW_SPRITE, "helicopterhud", "hud_corner", -0.01, 0.015, 0.013, 0.013, 270.0, 255, 0, 0, 200);
 * Function.Call(Hash.DRAW_SPRITE, "helicopterhud", "hud_corner", 0.01, 0.015, 0.013, 0.013, 180.0, 255, 0, 0, 200);
 * Function.Call(Hash.CLEAR_DRAW_ORIGIN);
 * 
 * Result: www11.pic-upload.de/19.06.15/bkqohvil2uao.jpg
 * If the pedestrian starts walking around now, the sprites are always around her head, no matter where the head is displayed on the screen.
 * 
 * This function also effects the drawing of texts and other UI-elements.
 * The effect can be reset by calling GRAPHICS::CLEAR_DRAW_ORIGIN().
 * @param x
 * @param y
 * @param z
 * @param p3
 */
export function setDrawOrigin(x: number, y: number, z: number, p3: boolean): void { 
	return _in(0xaa0008f3, 0xbbb8f416, _fv(x), _fv(y), _fv(z), p3); 
}

/**
 * First two floats relate to rumble, the last is a threshold
 * @param vehicle
 * @param durationScalar
 * @param amplitudeScalar
 * @param slipAngleLimit
 */
export function setDriftSlipAngleLimits(vehicle: number, durationScalar: number, amplitudeScalar: number, slipAngleLimit: number): void { 
	return _in(0xdaf4c98c, 0x18ac6f06, vehicle, _fv(durationScalar), _fv(amplitudeScalar), _fv(slipAngleLimit)); 
}

export function setDriftTyres(vehicle: number, toggle: boolean): void { 
	return _in(0x5ac79c98, 0xc5c17f05, vehicle, toggle); 
}

/**
 * Activate the physics to: "xs_prop_arena_{flipper,wall,bollard,turntable,pit}"
 * @param object
 * @param toggle
 * @param p2
 */
export function setDriveArticulatedJoint(object: number, toggle: boolean, p2: number): void { 
	return _in(0x91102444, 0x2f4898f0, object, toggle, p2); 
}

export function setDriveArticulatedJointWithInflictor(object: number, toggle: boolean, p2: number, ped: number): void { 
	return _in(0xb20834a7, 0xdd3d8896, object, toggle, p2, ped); 
}

export function setDriveTaskCruiseSpeed(driver: number, cruiseSpeed: number): void { 
	return _in(0x5c9b84bd, 0x7d31d908, driver, _fv(cruiseSpeed)); 
}

/**
 * This native is used to set the driving style for specific ped.
 * 
 * Driving styles id seems to be:
 * 786468
 * 262144
 * 786469
 * 
 * http://gtaforums.com/topic/822314-guide-driving-styles/
 * @param ped
 * @param drivingStyle
 */
export function setDriveTaskDrivingStyle(ped: number, drivingStyle: number): void { 
	return _in(0xdace1be3, 0x7d88af67, ped, drivingStyle); 
}

export function setDriveTaskMaxCruiseSpeed(ped: number, speed: number, updateBaseTask: boolean): void { 
	return _in(0x404a5aa9, 0xb9f0b746, ped, _fv(speed), updateBaseTask); 
}

/**
 * For p1 & p2 (Ped, Vehicle). I could be wrong, as the only time this native is called in scripts is once and both are 0, but I assume this native will work like SET_MOUNTED_WEAPON_TARGET in which has the same exact amount of parameters and the 1st and last 3 parameters are right and the same for both natives.
 * @param shootingPed
 * @param targetPed
 * @param targetVehicle
 * @param x
 * @param y
 * @param z
 */
export function setDrivebyTaskTarget(shootingPed: number, targetPed: number, targetVehicle: number, x: number, y: number, z: number): void { 
	return _in(0xe5b30211, 0x4d8162ee, shootingPed, targetPed, targetVehicle, _fv(x), _fv(y), _fv(z)); 
}

/**
 * The function specifically verifies the value is equal to, or less than 1.0f. If it is greater than 1.0f, the function does nothing at all.
 * @param driver
 * @param ability
 */
export function setDriverAbility(driver: number, ability: number): void { 
	return _in(0xb195ffa8, 0x042fc5c3, driver, _fv(ability)); 
}

/**
 * range 0.0f - 1.0f
 * @param driver
 * @param aggressiveness
 */
export function setDriverAggressiveness(driver: number, aggressiveness: number): void { 
	return _in(0xa731f608, 0xca104e3c, driver, _fv(aggressiveness)); 
}

/**
 * Scripts use 0.2, 0.5 and 1.0. Value must be >= 0.0 && <= 1.0
 * @param driver
 * @param modifier
 */
export function setDriverRacingModifier(driver: number, modifier: number): void { 
	return _in(0xded5af5a, 0x0ea4b297, driver, _fv(modifier)); 
}

/**
 * Full list of static emitters by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/staticEmitters.json
 * @param emitterName
 * @param radioStation
 * @param p2
 */
export function setEmitterRadioStation(emitterName: string, radioStation: string, p2: number): void { 
	return _in(0xacf57305, 0xb12af907, _ts(emitterName), _ts(radioStation), p2); 
}

/**
 * Used with SET_ENABLE_HANDCUFFS in decompiled scripts. From my observations, I have noticed that while being ragdolled you are not able to get up but you can still run. Your legs can also bend.
 * @param ped
 * @param toggle
 */
export function setEnableBoundAnkles(ped: number, toggle: boolean): void { 
	return _in(0xc52e0f85, 0x5c58fc2e, ped, toggle); 
}

/**
 * ped can not pull out a weapon when true
 * @param ped
 * @param toggle
 */
export function setEnableHandcuffs(ped: number, toggle: boolean): void { 
	return _in(0xdf1af8b5, 0xd56542fa, ped, toggle); 
}

export function setEnablePedEnveffScale(ped: number, toggle: boolean): void { 
	return _in(0xd2c5aa0c, 0x0e8d0f1e, ped, toggle); 
}

/**
 * Enables diving motion when underwater.
 * @param ped
 * @param toggle
 */
export function setEnableScuba(ped: number, toggle: boolean): void { 
	return _in(0xf99f6200, 0x4024d506, ped, toggle); 
}

/**
 * Enable/Disables global slipstream physics
 * @param toggle
 */
export function setEnableVehicleSlipstreaming(toggle: boolean): void { 
	return _in(0xe6c0c80b, 0x8c867537, toggle); 
}

/**
 * skin - everything alpha except skin
 * Set entity alpha level. Ranging from 0 to 255 but chnages occur after every 20 percent (after every 51).
 * @param entity
 * @param alphaLevel
 * @param skin
 */
export function setEntityAlpha(entity: number, alphaLevel: number, skin: boolean): void { 
	return _in(0x44a0870b, 0x7e92d7c0, entity, alphaLevel, skin); 
}

export function setEntityAlwaysPrerender(entity: number, toggle: boolean): void { 
	return _in(0xacad101e, 0x1fb66689, entity, toggle); 
}

export function setEntityAngularVelocity(entity: number, x: number, y: number, z: number): void { 
	return _in(0x83396434, 0x99d1222e, entity, _fv(x), _fv(y), _fv(z)); 
}

/**
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param entity
 * @param animDictionary
 * @param animName
 * @param time
 */
export function setEntityAnimCurrentTime(entity: number, animDictionary: string, animName: string, time: number): void { 
	return _in(0x4487c259, 0xf0f70977, entity, _ts(animDictionary), _ts(animName), _fv(time)); 
}

/**
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param entity
 * @param animDictionary
 * @param animName
 * @param speedMultiplier
 */
export function setEntityAnimSpeed(entity: number, animDictionary: string, animName: string, speedMultiplier: number): void { 
	return _in(0x28d1a165, 0x53c51776, entity, _ts(animDictionary), _ts(animName), _fv(speedMultiplier)); 
}

/**
 * Makes the specified entity (ped, vehicle or object) persistent. Persistent entities will not automatically be removed by the engine.
 * 
 * p1 has no effect when either its on or off
 * maybe a quick disassembly will tell us what it does
 * 
 * p2 has no effect when either its on or off
 * maybe a quick disassembly will tell us what it does
 * @param entity
 * @param p1
 * @param p2
 */
export function setEntityAsMissionEntity(entity: number, p1: boolean, p2: boolean): void { 
	return _in(0xad738c30, 0x85fe7e11, entity, p1, p2); 
}

/**
 * Marks the specified entity (ped, vehicle or object) as no longer needed if its population type is set to the mission type.
 * If the entity is ped, it will also clear their tasks immediately just like when CLEAR_PED_TASKS_IMMEDIATELY is called.
 * Entities marked as no longer needed, will be deleted as the engine sees fit.
 * Use this if you just want to just let the game delete the ped:
 * void MarkPedAsAmbientPed(Ped ped) {
 * auto addr = getScriptHandleBaseAddress(ped);
 * 
 * if (!addr) {
 * return;
 * }
 * 
 * //the game uses only lower 4 bits as entity population type
 * BYTE origValue = *(BYTE *)(addr + 0xDA);
 * *(BYTE *)(addr + 0xDA) = ((origValue & 0xF0) | ePopulationType::POPTYPE_RANDOM_AMBIENT);
 * }
 * @param entity
 */
export function setEntityAsNoLongerNeeded(entity: number): number { 
	return _in(0xb736a491, 0xe64a32cf, _ii(entity)); 
}

export function setEntityCanBeDamaged(entity: number, toggle: boolean): void { 
	return _in(0x1760ffa8, 0xab074d66, entity, toggle); 
}

export function setEntityCanBeDamagedByRelationshipGroup(entity: number, bCanBeDamaged: boolean, relGroup: number): void { 
	return _in(0xe22d8fde, 0x858b8119, entity, bCanBeDamaged, relGroup); 
}

/**
 * Sets whether the entity can be targeted without being in line-of-sight.
 * @param entity
 * @param toggle
 */
export function setEntityCanBeTargetedWithoutLos(entity: number, toggle: boolean): void { 
	return _in(0xd3997889, 0x736fd899, entity, toggle); 
}

export function setEntityCanOnlyBeDamagedByEntity(entity1: number, entity2: number): void { 
	return _in(0xb17bc645, 0x3f6cf5ac, entity1, entity2); 
}

export function setEntityCanOnlyBeDamagedByScriptParticipants(entity: number, toggle: boolean): void { 
	return _in(0x352e2b5c, 0xf420bf3b, entity, toggle); 
}

export function setEntityCantCauseCollisionDamagedEntity(entity1: number, entity2: number): void { 
	return _in(0x68b562e1, 0x24cc0aef, entity1, entity2); 
}

export function setEntityCollision(entity: number, toggle: boolean, keepPhysics: boolean): void { 
	return _in(0x1a9205c1, 0xb9ee827f, entity, toggle, keepPhysics); 
}

export function setEntityCompletelyDisableCollision(entity: number, toggle: boolean, keepPhysics: boolean): void { 
	return _in(0x9ebc85ed, 0x0fffe51c, entity, toggle, keepPhysics); 
}

/**
 * p7 is always 1 in the scripts. Set to 1, an area around the destination coords for the moved entity is cleared from other entities.
 * 
 * Often ends with 1, 0, 0, 1); in the scripts. It works.
 * 
 * Axis - Invert Axis Flags
 * @param entity
 * @param xPos
 * @param yPos
 * @param zPos
 * @param xAxis
 * @param yAxis
 * @param zAxis
 * @param clearArea
 */
export function setEntityCoords(entity: number, xPos: number, yPos: number, zPos: number, xAxis: boolean, yAxis: boolean, zAxis: boolean, clearArea: boolean): void { 
	return _in(0x06843da7, 0x060a026b, entity, _fv(xPos), _fv(yPos), _fv(zPos), xAxis, yAxis, zAxis, clearArea); 
}

/**
 * Axis - Invert Axis Flags
 * @param entity
 * @param xPos
 * @param yPos
 * @param zPos
 * @param xAxis
 * @param yAxis
 * @param zAxis
 */
export function setEntityCoordsNoOffset(entity: number, xPos: number, yPos: number, zPos: number, xAxis: boolean, yAxis: boolean, zAxis: boolean): void { 
	return _in(0x239a3351, 0xac1da385, entity, _fv(xPos), _fv(yPos), _fv(zPos), xAxis, yAxis, zAxis); 
}

export function setEntityCoordsWithoutPlantsReset(entity: number, xPos: number, yPos: number, zPos: number, alive: boolean, deadFlag: boolean, ragdollFlag: boolean, clearArea: boolean): void { 
	return _in(0x621873ec, 0xe1178967, entity, _fv(xPos), _fv(yPos), _fv(zPos), alive, deadFlag, ragdollFlag, clearArea); 
}

export function setEntityDynamic(entity: number, toggle: boolean): void { 
	return _in(0x1718de8e, 0x3f2823ca, entity, toggle); 
}

export function setEntityFlagRenderSmallShadow(object: number, toggle: boolean): void { 
	return _in(0xb2d0bde5, 0x4f0e8e5a, object, toggle); 
}

/**
 * Sets entity+38 to C (when false) or 0xFF3f (when true)
 * @param entity
 * @param toggle
 */
export function setEntityFlagSuppressShadow(entity: number, toggle: boolean): void { 
	return _in(0xd05a3241, 0xb9a86f19, entity, toggle); 
}

export function setEntityForNullConvPed(p0: number, entity: number): void { 
	return _in(0x892b6ab8, 0xf33606f5, p0, entity); 
}

export function setEntityGhostedForGhostPlayers(entity: number, toggle: boolean): void { 
	return _in(0x4ba16607, 0x9d658ed4, entity, toggle); 
}

export function setEntityHasGravity(entity: number, toggle: boolean): void { 
	return _in(0x4a472244, 0x8f18eef5, entity, toggle); 
}

/**
 * Set the heading of an entity in degrees also known as "Yaw".
 * @param entity
 * @param heading
 */
export function setEntityHeading(entity: number, heading: number): void { 
	return _in(0x8e2530aa, 0x8ada980e, entity, _fv(heading)); 
}

/**
 * health >= 0
 * male ped ~= 100 - 200
 * female ped ~= 0 - 100
 * @param entity
 * @param health
 * @param instigator
 * @param weaponType
 */
export function setEntityHealth(entity: number, health: number, instigator: number, weaponType: number): void { 
	return _in(0x6b76dc1f, 0x3ae6e6a3, entity, health, instigator, _ch(weaponType)); 
}

export function setEntityIconColor(entity: number, red: number, green: number, blue: number, alpha: number): void { 
	return _in(0x1d5f595c, 0xcae2e238, entity, red, green, blue, alpha); 
}

export function setEntityIconVisibility(entity: number, toggle: boolean): void { 
	return _in(0xe0e8beec, 0xca96ba31, entity, toggle); 
}

/**
 * Sets a ped or an object totally invincible. It doesn't take any kind of damage. Peds will not ragdoll on explosions and the tazer animation won't apply either.
 * 
 * If you use this for a ped and you want Ragdoll to stay enabled, then do:
 * *(DWORD *)(pedAddress + 0x188) |= (1 << 9);
 * 
 * Use this if you want to get the invincibility status:
 * bool IsPedInvincible(Ped ped)
 * {
 * auto addr = getScriptHandleBaseAddress(ped);
 * 
 * if (addr)
 * {
 * DWORD flag = *(DWORD *)(addr + 0x188);
 * return ((flag & (1 << 8)) != 0) || ((flag & (1 << 9)) != 0);
 * }
 * 
 * return false;
 * }
 * @param entity
 * @param toggle
 * @param dontResetOnCleanup
 */
export function setEntityInvincible(entity: number, toggle: boolean, dontResetOnCleanup: boolean): void { 
	return _in(0x3882114b, 0xde571ad4, entity, toggle, dontResetOnCleanup); 
}

export function setEntityIsInVehicle(entity: number): void { 
	return _in(0x78e8e3a6, 0x40178255, entity); 
}

export function setEntityIsTargetPriority(entity: number, p1: boolean, p2: number): void { 
	return _in(0xea02e132, 0xf5c68722, entity, p1, _fv(p2)); 
}

export function setEntityLights(entity: number, toggle: boolean): void { 
	return _in(0x7cfba6a8, 0x0bdf3874, entity, toggle); 
}

/**
 * Loads collision grid for an entity spawned outside of a player's loaded area. This allows peds to execute tasks rather than sit dormant because of a lack of a physics grid.
 * Certainly not the main usage of this native but when set to true for a Vehicle, it will prevent the vehicle to explode if it is spawned far away from the player.
 * @param entity
 * @param toggle
 * @param p2
 */
export function setEntityLoadCollisionFlag(entity: number, toggle: boolean, p2: number): void { 
	return _in(0x0dc7caba, 0xb1e9b67e, entity, toggle, p2); 
}

/**
 * Makes the provided entity visible for yourself for the current frame.
 * @param entity
 */
export function setEntityLocallyInvisible(entity: number): void { 
	return _in(0xe135a9ff, 0x3f5d05d8, entity); 
}

export function setEntityLocallyVisible(entity: number): void { 
	return _in(0x241e289b, 0x5c059edc, entity); 
}

/**
 * LOD distance can be 0 to 0xFFFF (higher values will result in 0xFFFF) as it is actually stored as a 16-bit value (aka uint16_t).
 * @param entity
 * @param value
 */
export function setEntityLodDist(entity: number, value: number): void { 
	return _in(0x5927f96a, 0x78577363, entity, value); 
}

/**
 * For instance: ENTITY::SET_ENTITY_MAX_HEALTH(PLAYER::PLAYER_PED_ID(), 200); // director_mode.c4: 67849
 * @param entity
 * @param value
 */
export function setEntityMaxHealth(entity: number, value: number): void { 
	return _in(0x166e7cf6, 0x8597d8b5, entity, value); 
}

export function setEntityMaxSpeed(entity: number, speed: number): void { 
	return _in(0x0e46a3fc, 0xbde2a1b1, entity, _fv(speed)); 
}

export function setEntityMirrorReflectionFlag(entity: number, p1: boolean): void { 
	return _in(0xe66377cd, 0xdada4810, entity, p1); 
}

export function setEntityMotionBlur(entity: number, toggle: boolean): void { 
	return _in(0x295d82a8, 0x559f9150, entity, toggle); 
}

/**
 * Calling this function disables collision between two entities.
 * The importance of the order for entity1 and entity2 is unclear.
 * The third parameter, `thisFrame`, decides whether the collision is to be disabled until it is turned back on, or if it's just this frame.
 * @param entity1
 * @param entity2
 * @param thisFrameOnly
 */
export function setEntityNoCollisionEntity(entity1: number, entity2: number, thisFrameOnly: boolean): void { 
	return _in(0xa53ed552, 0x0c07654a, entity1, entity2, thisFrameOnly); 
}

export function setEntityNoCollisionWithNetworkedEntity(entity1: number, entity2: number): void { 
	return _in(0x0a27a782, 0x7347b3b1, entity1, entity2); 
}

export function setEntityNoweapondecals(entity: number, p1: boolean): void { 
	return _in(0x2c2e3dc1, 0x28f44309, entity, p1); 
}

export function setEntityOnlyDamagedByPlayer(entity: number, toggle: boolean): void { 
	return _in(0x79f020ff, 0x9edc0748, entity, toggle); 
}

export function setEntityOnlyDamagedByRelationshipGroup(entity: number, p1: boolean, p2: number): void { 
	return _in(0x7022bd82, 0x8fa0b082, entity, p1, p2); 
}

/**
 * Enable / disable each type of damage.
 * 
 * waterProof is damage related to water not drowning
 * --------------
 * p7 is to to '1' in am_mp_property_ext/int: ENTITY::SET_ENTITY_PROOFS(uParam0->f_19, true, true, true, true, true, true, 1, true);
 * 
 * @param entity
 * @param bulletProof
 * @param fireProof
 * @param explosionProof
 * @param collisionProof
 * @param meleeProof
 * @param steamProof
 * @param dontResetOnCleanup
 * @param waterProof
 */
export function setEntityProofs(entity: number, bulletProof: boolean, fireProof: boolean, explosionProof: boolean, collisionProof: boolean, meleeProof: boolean, steamProof: boolean, dontResetOnCleanup: boolean, waterProof: boolean): void { 
	return _in(0xfaee099c, 0x6f890bb8, entity, bulletProof, fireProof, explosionProof, collisionProof, meleeProof, steamProof, dontResetOnCleanup, waterProof); 
}

/**
 * w is the correct parameter name!
 * @param entity
 * @param x
 * @param y
 * @param z
 * @param w
 */
export function setEntityQuaternion(entity: number, x: number, y: number, z: number, w: number): void { 
	return _in(0x77b21be7, 0xac540f07, entity, _fv(x), _fv(y), _fv(z), _fv(w)); 
}

export function setEntityRecordsCollisions(entity: number, toggle: boolean): void { 
	return _in(0x0a50a1ee, 0xdad01e65, entity, toggle); 
}

export function setEntityRenderScorched(entity: number, toggle: boolean): void { 
	return _in(0x730f5f8d, 0x3f0f2050, entity, toggle); 
}

export function setEntityRequiresMoreExpensiveRiverCheck(entity: number, toggle: boolean): void { 
	return _in(0x694e0013, 0x2f2823ed, entity, toggle); 
}

/**
 * rotationOrder refers to the order yaw pitch roll is applied
 * value ranges from 0 to 5. What you use for rotationOrder when setting must be the same as rotationOrder when getting the rotation.
 * Unsure what value corresponds to what rotation order, more testing will be needed for that.
 * For the most part R* uses 1 or 2 as the order.
 * p5 is usually set as true
 * 
 * @param entity
 * @param pitch
 * @param roll
 * @param yaw
 * @param rotationOrder
 * @param p5
 */
export function setEntityRotation(entity: number, pitch: number, roll: number, yaw: number, rotationOrder: number, p5: boolean): void { 
	return _in(0x8524a8b0, 0x171d5e07, entity, _fv(pitch), _fv(roll), _fv(yaw), rotationOrder, p5); 
}

/**
 * True means it can be deleted by the engine when switching lobbies/missions/etc, false means the script is expected to clean it up.
 * 
 * "Allow Freeze If No Collision"
 * @param entity
 * @param toggle
 */
export function setEntityShouldFreezeWaitingOnCollision(entity: number, toggle: boolean): void { 
	return _in(0x3910051c, 0xcecdb00c, entity, toggle); 
}

/**
 * Only called once in the scripts.
 * 
 * Related to weapon objects.
 * 
 * @param entity
 * @param p1
 */
export function setEntitySortBias(entity: number, p1: number): void { 
	return _in(0x5c3b791d, 0x580e0bc2, entity, _fv(p1)); 
}

/**
 * Example here: www.gtaforums.com/topic/830463-help-with-turning-lights-green-and-causing-peds-to-crash-into-each-other/#entry1068211340
 * 
 * 0 = green
 * 1 = red
 * 2 = yellow
 * 3 = reset changes
 * changing lights may not change the behavior of vehicles
 * @param entity
 * @param state
 */
export function setEntityTrafficlightOverride(entity: number, state: number): void { 
	return _in(0x57c5db65, 0x6185eac4, entity, state); 
}

export function setEntityUseMaxDistanceForWaterReflection(entity: number, p1: boolean): void { 
	return _in(0x1a092bb0, 0xc3808b96, entity, p1); 
}

/**
 * Note that the third parameter(denoted as z) is "up and down" with positive numbers encouraging upwards movement.
 * @param entity
 * @param x
 * @param y
 * @param z
 */
export function setEntityVelocity(entity: number, x: number, y: number, z: number): void { 
	return _in(0x1c99bb7b, 0x6e96d16f, entity, _fv(x), _fv(y), _fv(z)); 
}

/**
 * p2 is always 0.
 * @param entity
 * @param toggle
 * @param p2
 */
export function setEntityVisible(entity: number, toggle: boolean, p2: boolean): void { 
	return _in(0xea1c610a, 0x04db6bbb, entity, toggle, p2); 
}

export function setEntityVisibleInCutscene(p0: number, p1: boolean, p2: boolean): void { 
	return _in(0xe0031d3c, 0x8f36ab82, p0, p1, p2); 
}

export function setEntityWaterReflectionFlag(entity: number, toggle: boolean): void { 
	return _in(0xc34bc448, 0xda29f5e9, entity, toggle); 
}

export function setEqippedWeaponStartSpinningAtFullSpeed(ped: number): void { 
	return _in(0xe4dcec7f, 0xd5b739a5, ped); 
}

export function setEveryoneIgnorePlayer(player: number, toggle: boolean): void { 
	return _in(0x8eeda153, 0xad141ba4, player, toggle); 
}

/**
 * Full list of scenario groups used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenarioGroupNames.json
 * Groups found in the scripts used with this native:
 * 
 * "AMMUNATION",
 * "QUARRY",
 * "Triathlon_1",
 * "Triathlon_2",
 * "Triathlon_3"
 * @param scenarioGroup
 */
export function setExclusiveScenarioGroup(scenarioGroup: string): void { 
	return _in(0x535e97e1, 0xf7fc0c6a, _ts(scenarioGroup)); 
}

/**
 * Used only once in the scripts (fm_mission_controller) like so:
 * 
 * TASK::SET_EXPECTED_CLONE_NEXT_TASK_MOVE_NETWORK_STATE(iLocal_3160, "Cutting");
 * @param ped
 * @param state
 */
export function setExpectedCloneNextTaskMoveNetworkState(ped: number, state: string): boolean { 
	return _in(0xab13a556, 0x5480b6d9, ped, _ts(state), _r); 
}

export function setExplosiveAmmoThisFrame(player: number): void { 
	return _in(0xa66c71c9, 0x8d5f2cfb, player); 
}

export function setExplosiveMeleeThisFrame(player: number): void { 
	return _in(0xff1bed81, 0xbfdc0fe0, player); 
}

export function setExposuretweak(toggle: boolean): void { 
	return _in(0xef398bee, 0xe4ef45f9, toggle); 
}

/**
 * Full list of timecycle modifiers by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/timecycleModifiers.json
 * @param modifierName
 */
export function setExtraTcmodifier(modifierName: string): void { 
	return _in(0x5096fd9c, 0xcb49056d, _ts(modifierName)); 
}

/**
 * Clipsets:
 * facials@gen_female@base
 * facials@gen_male@base
 * facials@p_m_zero@base
 * 
 * Typically followed with SET_FACIAL_IDLE_ANIM_OVERRIDE:
 * mood_drunk_1
 * mood_stressed_1
 * mood_happy_1
 * mood_talking_1
 * 
 * @param ped
 * @param animDict
 */
export function setFacialClipset(ped: number, animDict: string): void { 
	return _in(0x5687c7f0, 0x5b39e401, ped, _ts(animDict)); 
}

/**
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param ped
 * @param animName
 * @param animDict
 */
export function setFacialIdleAnimOverride(ped: number, animName: string, animDict: string): void { 
	return _in(0xffc24b98, 0x8b938b38, ped, _ts(animName), _ts(animDict)); 
}

/**
 * Sets whether the game should fade in after the player dies or is arrested.
 * @param toggle
 */
export function setFadeInAfterDeathArrest(toggle: boolean): void { 
	return _in(0xda66d279, 0x6ba33f12, toggle); 
}

export function setFadeInAfterLoad(toggle: boolean): void { 
	return _in(0xf3d78f59, 0xdfe18d79, toggle); 
}

/**
 * Sets whether the game should fade out after the player is arrested.
 * @param toggle
 */
export function setFadeOutAfterArrest(toggle: boolean): void { 
	return _in(0x1e0b4dc0, 0xd990a4e7, toggle); 
}

/**
 * Sets whether the game should fade out after the player dies.
 * @param toggle
 */
export function setFadeOutAfterDeath(toggle: boolean): void { 
	return _in(0x4a18e01d, 0xf2c87b86, toggle); 
}

/**
 * p2 maybe z float?
 * @param x
 * @param y
 * @param p2
 */
export function setFakeGpsPlayerPositionThisFrame(x: number, y: number, p2: number): void { 
	return _in(0xa17784fc, 0xa9548d15, _fv(x), _fv(y), p2); 
}

/**
 * Argument must be 0.0f or above 38.0f, or it will be ignored.
 * @param altitude
 * @param p1
 * @param p2
 */
export function setFakeMinimapMaxAltimeterHeight(altitude: number, p1: boolean, p2: number): void { 
	return _in(0xd201f3ff, 0x917a506d, _fv(altitude), p1, p2); 
}

/**
 * Sets the position of the arrow icon representing the player on both the minimap and world map.
 * 
 * Too bad this wouldn't work over the network (obviously not). Could spoof where we would be.
 * @param x
 * @param y
 */
export function setFakePausemapPlayerPositionThisFrame(x: number, y: number): void { 
	return _in(0x77e2dd17, 0x7910e1cf, _fv(x), _fv(y)); 
}

/**
 * Setter for GET_FAKE_SPECTATOR_MODE
 * @param toggle
 */
export function setFakeSpectatorMode(toggle: boolean): void { 
	return _in(0xcd742336, 0x00c4ea6b, toggle); 
}

/**
 * Sets a visually fake wanted level on the user interface. Used by Rockstar's scripts to "override" regular wanted levels and make custom ones while the real wanted level and multipliers are still in effect.
 * 
 * Max is 6, anything above this makes it just 6. Also the mini-map gets the red & blue flashing effect.
 * @param fakeWantedLevel
 */
export function setFakeWantedLevel(fakeWantedLevel: number): void { 
	return _in(0x1454f244, 0x8de30163, fakeWantedLevel); 
}

export function setFarDrawVehicles(toggle: boolean): void { 
	return _in(0x26324f33, 0x423f3cc3, toggle); 
}

export function setFireAmmoThisFrame(player: number): void { 
	return _in(0x11879cdd, 0x803d30f4, player); 
}

export function setFirstPersonAimCamNearClipThisUpdate(p0: number): void { 
	return _in(0x0af7b437, 0x918103b3, _fv(p0)); 
}

export function setFirstPersonAimCamRelativeHeadingLimitsThisUpdate(p0: number, p1: number): void { 
	return _in(0x2f7f2b26, 0xdd3f18ee, _fv(p0), _fv(p1)); 
}

export function setFirstPersonAimCamRelativePitchLimitsThisUpdate(p0: number, p1: number): void { 
	return _in(0xbcfc632d, 0xb7673bf0, _fv(p0), _fv(p1)); 
}

export function setFirstPersonAimCamZoomFactor(zoomFactor: number): void { 
	return _in(0x70894bd0, 0x915c5bca, _fv(zoomFactor)); 
}

export function setFirstPersonAimCamZoomFactorLimitsThisUpdate(p0: number, p1: number): void { 
	return _in(0xced08cbe, 0x8ebb97c7, _fv(p0), _fv(p1)); 
}

export function setFirstPersonFlashEffectType(p0: number): void { 
	return _in(0x5c41e6ba, 0xbc9e2112, p0); 
}

export function setFirstPersonFlashEffectVehicleModelHash(vehicleModel: number): void { 
	return _in(0x11fa5d34, 0x79c7dd47, _ch(vehicleModel)); 
}

/**
 * From b617 scripts:
 * 
 * CAM::SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_NAME("DINGHY");
 * CAM::SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_NAME("ISSI2");
 * CAM::SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_NAME("SPEEDO");
 * @param vehicleName
 */
export function setFirstPersonFlashEffectVehicleModelName(vehicleName: string): void { 
	return _in(0x21e253a7, 0xf8da5dfb, _ts(vehicleName)); 
}

/**
 * Does nothing
 * @param yaw
 */
export function setFirstPersonShooterCameraHeading(yaw: number): void { 
	return _in(0x103991d4, 0xa307d472, _fv(yaw)); 
}

export function setFirstPersonShooterCameraPitch(pitch: number): void { 
	return _in(0x759e13eb, 0xc1c15c5a, _fv(pitch)); 
}

export function setFlammabilityMultiplier(p0: number): void { 
	return _in(0x8f390ac4, 0x155099ba, _fv(p0)); 
}

/**
 * Purpose of p0 and p1 unknown.
 * @param p0
 * @param p1
 * @param fadeIn
 * @param duration
 * @param fadeOut
 */
export function setFlash(p0: number, p1: number, fadeIn: number, duration: number, fadeOut: number): void { 
	return _in(0x0ab84296, 0xfed9cfc6, _fv(p0), _fv(p1), _fv(fadeIn), _fv(duration), _fv(fadeOut)); 
}

/**
 * Enables/disables flashlight on ped's weapon.
 * @param ped
 * @param toggle
 */
export function setFlashLightActiveHistory(ped: number, toggle: boolean): void { 
	return _in(0x988db6fe, 0x9b3ac000, ped, toggle); 
}

export function setFlashLightFadeDistance(distance: number): boolean { 
	return _in(0xcea66dad, 0x478cd39b, _fv(distance), _r); 
}

export function setFleeingVehiclesUseSwitchedOffNodes(p0: number): void { 
	return _in(0xa247f9ef, 0x01d8082e, p0); 
}

export function setFloatingHelpTextScreenPosition(hudIndex: number, x: number, y: number): void { 
	return _in(0x7679cc1b, 0xcebe3d4c, hudIndex, _fv(x), _fv(y)); 
}

export function setFloatingHelpTextStyle(hudIndex: number, p1: number, p2: number, p3: number, p4: number, p5: number): void { 
	return _in(0x788e7fd4, 0x31bd67f1, hudIndex, p1, p2, p3, p4, p5); 
}

export function setFloatingHelpTextToEntity(hudIndex: number, entity: number, offsetX: number, offsetY: number): void { 
	return _in(0xb094bc1d, 0xb4018240, hudIndex, entity, _fv(offsetX), _fv(offsetY)); 
}

export function setFloatingHelpTextWorldPosition(hudIndex: number, x: number, y: number, z: number): void { 
	return _in(0x784ba7e0, 0xeceb4178, hudIndex, _fv(x), _fv(y), _fv(z)); 
}

export function setFlyCamCoordAndConstrain(cam: number, x: number, y: number, z: number): void { 
	return _in(0xc91c6c55, 0x199308ca, cam, _fv(x), _fv(y), _fv(z)); 
}

export function setFlyCamHorizontalResponse(cam: number, p1: number, p2: number, p3: number): void { 
	return _in(0x503f5920, 0x162365b2, cam, _fv(p1), _fv(p2), _fv(p3)); 
}

export function setFlyCamMaxHeight(cam: number, height: number): void { 
	return _in(0xf9d02130, 0xecdd1d77, cam, _fv(height)); 
}

export function setFlyCamVerticalControlsThisUpdate(cam: number): void { 
	return _in(0xc8b5c4a7, 0x9cc18b94, cam); 
}

export function setFlyCamVerticalResponse(cam: number, p1: number, p2: number, p3: number): void { 
	return _in(0xe827b938, 0x2cfb41ba, cam, _fv(p1), _fv(p2), _fv(p3)); 
}

/**
 * It seems to make the entity's coords mark the point from which LOD-distances are measured. In my testing, setting a vehicle as the focus entity and moving that vehicle more than 300 distance units away from the player will make the level of detail around the player go down drastically (shadows disappear, textures go extremely low res, etc). The player seems to be the default focus entity.
 * @param entity
 */
export function setFocusEntity(entity: number): void { 
	return _in(0x198f7770, 0x5fa0931d, entity); 
}

/**
 * Override the area where the camera will render the terrain.
 * p3, p4 and p5 are usually set to 0.0
 * 
 * @param x
 * @param y
 * @param z
 * @param offsetX
 * @param offsetY
 * @param offsetZ
 */
export function setFocusPosAndVel(x: number, y: number, z: number, offsetX: number, offsetY: number, offsetZ: number): void { 
	return _in(0xbb7454ba, 0xff08fe25, _fv(x), _fv(y), _fv(z), _fv(offsetX), _fv(offsetY), _fv(offsetZ)); 
}

export function setFollowCamIgnoreAttachParentMovementThisUpdate(): void { 
	return _in(0xdd79df9f, 0x4d26e1c9); 
}

export function setFollowPedCamLadderAlignThisUpdate(): void { 
	return _in(0xc8391c30, 0x9684595a); 
}

/**
 * From the scripts:
 * 
 * CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_ATTACHED_TO_ROPE_CAMERA", 0);
 * CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_ON_EXILE1_LADDER_CAMERA", 1500);
 * CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_SKY_DIVING_CAMERA", 0);
 * CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_SKY_DIVING_CAMERA", 3000);
 * CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_SKY_DIVING_FAMILY5_CAMERA", 0);
 * CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_SKY_DIVING_CAMERA", 0);
 * @param camName
 * @param p1
 */
export function setFollowPedCamThisUpdate(camName: string, p1: number): boolean { 
	return _in(0x44a113dd, 0x6ffc48d1, _ts(camName), p1, _r); 
}

/**
 * Sets the type of Player camera:
 * 
 * 0 - Third Person Close
 * 1 - Third Person Mid
 * 2 - Third Person Far
 * 4 - First Person
 * @param viewMode
 */
export function setFollowPedCamViewMode(viewMode: number): void { 
	return _in(0x5a4f9edf, 0x1673f704, viewMode); 
}

export function setFollowVehicleCamHighAngleModeEveryUpdate(p0: boolean, p1: boolean): void { 
	return _in(0x9dfe13ec, 0xdc1ec196, p0, p1); 
}

export function setFollowVehicleCamHighAngleModeThisUpdate(p0: boolean): void { 
	return _in(0x91ef6ee6, 0x419e5b97, p0); 
}

export function setFollowVehicleCamSeatThisUpdate(seatIndex: number): void { 
	return _in(0x5c90cab0, 0x9951a12f, seatIndex); 
}

/**
 * Sets the type of Player camera in vehicles:
 * viewmode: see CAM.GET_FOLLOW_VEHICLE_CAM_VIEW_MODE
 * @param viewMode
 */
export function setFollowVehicleCamViewMode(viewMode: number): void { 
	return _in(0xac253d78, 0x42768f48, viewMode); 
}

export function setFollowVehicleCamZoomLevel(zoomLevel: number): void { 
	return _in(0x19464cb6, 0xe4078c8a, zoomLevel); 
}

export function setForceFixLinkMatrices(vehicle: number): void { 
	return _in(0x887fa387, 0x87de8c72, vehicle); 
}

export function setForceFootstepUpdate(ped: number, toggle: boolean): void { 
	return _in(0x129466ed, 0x55140f8d, ped, toggle); 
}

export function setForceHdVehicle(vehicle: number, toggle: boolean): void { 
	return _in(0x97ce68cb, 0x032583f0, vehicle, toggle); 
}

/**
 * No observed effect.
 * @param vehicle
 * @param p1
 */
export function setForceLowLodAnchorMode(vehicle: number, p1: boolean): void { 
	return _in(0xb28b1fe5, 0xbfadd7f5, vehicle, p1); 
}

export function setForceMotionblur(toggle: boolean): void { 
	return _in(0x6a51f787, 0x72175a51, toggle); 
}

export function setForceObjectThisFrame(x: number, y: number, z: number, p3: number): void { 
	return _in(0xf5380819, 0x86e49e9d, _fv(x), _fv(y), _fv(z), _fv(p3)); 
}

export function setForceShowGps(toggle: boolean): void { 
	return _in(0x2790f4b1, 0x7d098e26, toggle); 
}

export function setForceStepType(ped: number, p1: boolean, type: number, p3: number): void { 
	return _in(0xcb968b53, 0xfc7f916d, ped, p1, type, p3); 
}

export function setForceVehicleEngineDamageByBullet(p0: number, p1: boolean): void { 
	return _in(0x4d9d109f, 0x63fee1d4, p0, p1); 
}

export function setForcedJumpThisFrame(player: number): void { 
	return _in(0xa1183bcf, 0xee0f93d1, player); 
}

/**
 * 0.0 = Lowest 1.0 = Highest. This is best to be used if you wanna pick-up a car since un-realistically on GTA V forklifts can't pick up much of anything due to vehicle mass. If you put this under a car then set it above 0.0 to a 'lifted-value' it will raise the car with no issue lol
 * @param vehicle
 * @param height
 */
export function setForkliftForkHeight(vehicle: number, height: number): void { 
	return _in(0x37ebbf31, 0x17bd6a25, vehicle, _fv(height)); 
}

export function setFormationLeader(vehicle: number, x: number, y: number, z: number, p4: number): void { 
	return _in(0x428ad3e2, 0x6c8d9eb0, vehicle, _fv(x), _fv(y), _fv(z), _fv(p4)); 
}

export function setFreemodePrologueDone(p0: number, characterSlot: number): void { 
	return _in(0x0d01d206, 0x16fc73fb, p0, characterSlot); 
}

/**
 * reportData includes mc, ceo, yacht and licenceplate names
 * @param gamerHandle
 * @param reportData
 */
export function setFreemodeReportData(): [number, number] { 
	const [gamerHandle_out, reportData_out] = _in(0x52780328, 0x6a8b6c81, _i, _i);
	return [gamerHandle_out as number, reportData_out as number]; 
}

/**
 * Sets profile setting 940 and 941
 * @param profileSetting
 * @param settingValue
 */
export function setFreemodeStrandProgressionStatus(profileSetting: number, settingValue: number): void { 
	return _in(0x79d310a8, 0x61697cc9, profileSetting, settingValue); 
}

export function setFrontendActive(active: boolean): void { 
	return _in(0x745711a7, 0x5ab09277, active); 
}

export function setFrontendRadioActive(active: boolean): void { 
	return _in(0xf7f26c6e, 0x9cc9ebb8, active); 
}

/**
 * Make sure to call this from the correct thread if you're using multiple threads because all other threads except the one which is calling SET_GAME_PAUSED will be paused which means you will lose control and the game remains in paused mode until you exit GTA5.exe
 * @param toggle
 */
export function setGamePaused(toggle: boolean): void { 
	return _in(0x577d1284, 0xd6873711, toggle); 
}

export function setGamePausesForStreaming(toggle: boolean): void { 
	return _in(0x717cd6e6, 0xfaebbedc, toggle); 
}

export function setGameplayCamAltitudeFovScalingState(p0: boolean): void { 
	return _in(0xdb90c6cc, 0xa48940f1, p0); 
}

export function setGameplayCamEntityToLimitFocusOverBoundingSphereThisUpdate(entity: number): void { 
	return _in(0xfd3151cd, 0x37ea2245, entity); 
}

/**
 * Forces gameplay cam to specified ped as if you were the ped or spectating it
 * @param ped
 */
export function setGameplayCamFollowPedThisUpdate(ped: number): void { 
	return _in(0x8bbacbf5, 0x1da047a8, ped); 
}

export function setGameplayCamIgnoreEntityCollisionThisUpdate(entity: number): void { 
	return _in(0x2aed6301, 0xf67007d5, entity); 
}

/**
 * some camera effect that is (also) used in the drunk-cheat, and turned off (by setting it to 0.0) along with the shaking effects once the drunk cheat is disabled.
 * @param p0
 */
export function setGameplayCamMaxMotionBlurStrengthThisUpdate(p0: number): void { 
	return _in(0x02257788, 0x16fdc28c, _fv(p0)); 
}

/**
 * some camera effect that is used in the drunk-cheat, and turned off (by setting it to 0.0) along with the shaking effects once the drunk cheat is disabled.
 * @param p0
 */
export function setGameplayCamMotionBlurScalingThisUpdate(p0: number): void { 
	return _in(0x487a82c6, 0x50eb7799, _fv(p0)); 
}

/**
 * Sets the camera position relative to heading in float from -360 to +360.
 * 
 * Heading is alwyas 0 in aiming camera.
 * @param heading
 */
export function setGameplayCamRelativeHeading(heading: number): void { 
	return _in(0xb4ec2312, 0xf4e5b1f1, _fv(heading)); 
}

/**
 * This native sets the camera's pitch (rotation on the x-axis).
 * @param angle
 * @param scalingFactor
 */
export function setGameplayCamRelativePitch(angle: number, scalingFactor: number): void { 
	return _in(0x6d0858b8, 0xedfd2b7d, _fv(angle), _fv(scalingFactor)); 
}

/**
 * Sets the amplitude for the gameplay (i.e. 3rd or 1st) camera to shake. Used in script "drunk_controller.ysc.c4" to simulate making the player drunk.
 * @param amplitude
 */
export function setGameplayCamShakeAmplitude(amplitude: number): void { 
	return _in(0xa87e0093, 0x2db4d85d, _fv(amplitude)); 
}

export function setGameplayCoordHint(x: number, y: number, z: number, duration: number, blendOutDuration: number, blendInDuration: number, p6: number): void { 
	return _in(0xd51adcd2, 0xd8bc0fb3, _fv(x), _fv(y), _fv(z), duration, blendOutDuration, blendInDuration, p6); 
}

/**
 * p8 could be some sort of flag. Scripts use:
 * -244429742
 * 0
 * 1726668277
 * 1844968929
 * @param entity
 * @param xOffset
 * @param yOffset
 * @param zOffset
 * @param p4
 * @param time
 * @param easeInTime
 * @param easeOutTime
 * @param p8
 */
export function setGameplayEntityHint(entity: number, xOffset: number, yOffset: number, zOffset: number, p4: boolean, time: number, easeInTime: number, easeOutTime: number, p8: number): void { 
	return _in(0x189e955a, 0x8313e298, entity, _fv(xOffset), _fv(yOffset), _fv(zOffset), p4, time, easeInTime, easeOutTime, p8); 
}

export function setGameplayHintBaseOrbitPitchOffset(value: number): void { 
	return _in(0xd1f8363d, 0xfad03848, _fv(value)); 
}

export function setGameplayHintCameraBlendToFollowPedMediumViewMode(toggle: boolean): void { 
	return _in(0xe3433ead, 0xaaf7ee40, toggle); 
}

export function setGameplayHintCameraRelativeSideOffset(xOffset: number): void { 
	return _in(0x5d7b620d, 0xae436138, _fv(xOffset)); 
}

export function setGameplayHintCameraRelativeVerticalOffset(yOffset: number): void { 
	return _in(0xc92717ef, 0x615b6704, _fv(yOffset)); 
}

export function setGameplayHintFollowDistanceScalar(value: number): void { 
	return _in(0xf8bdbf3d, 0x573049a1, _fv(value)); 
}

export function setGameplayHintFov(FOV: number): void { 
	return _in(0x513403fb, 0x9c56211f, _fv(FOV)); 
}

export function setGameplayObjectHint(object: number, xOffset: number, yOffset: number, zOffset: number, p4: boolean, time: number, easeInTime: number, easeOutTime: number): void { 
	return _in(0x83e87508, 0xa2ca2ac6, object, _fv(xOffset), _fv(yOffset), _fv(zOffset), p4, time, easeInTime, easeOutTime); 
}

export function setGameplayPedHint(ped: number, x1: number, y1: number, z1: number, p4: boolean, duration: number, blendOutDuration: number, blendInDuration: number): void { 
	return _in(0x2b486269, 0xacd548d3, ped, _fv(x1), _fv(y1), _fv(z1), p4, duration, blendOutDuration, blendInDuration); 
}

/**
 * Focuses the camera on the specified vehicle.
 * @param vehicle
 * @param offsetX
 * @param offsetY
 * @param offsetZ
 * @param p4
 * @param time
 * @param easeInTime
 * @param easeOutTime
 */
export function setGameplayVehicleHint(vehicle: number, offsetX: number, offsetY: number, offsetZ: number, p4: boolean, time: number, easeInTime: number, easeOutTime: number): void { 
	return _in(0xa2297e18, 0xf3e71c2e, vehicle, _fv(offsetX), _fv(offsetY), _fv(offsetZ), p4, time, easeInTime, easeOutTime); 
}

export function setGarbageTrucks(toggle: boolean): void { 
	return _in(0x2afd795e, 0xeac8d30d, toggle); 
}

/**
 * Must be a value between 1 and 254
 * @param alpha
 */
export function setGhostAlpha(alpha: number): void { 
	return _in(0x658500ae, 0x6d723a7e, alpha); 
}

/**
 * Set state to true to extend the wings, false to retract them.
 * @param vehicle
 * @param state
 */
export function setGliderActive(vehicle: number, state: boolean): void { 
	return _in(0x544996c0, 0x081abdeb, vehicle, state); 
}

/**
 * Needs to be looped! And yes, it does work and is not a hash collision.
 * Birds will try to reach the given height.
 * @param height
 */
export function setGlobalMinBirdFlightHeight(height: number): void { 
	return _in(0x6c6b1485, 0x86f934f7, _fv(height)); 
}

export function setGlobalPositionOffsetForRecordedVehiclePlayback(vehicle: number, x: number, y: number, z: number): void { 
	return _in(0xfaf2a780, 0x61fd9ef4, vehicle, _fv(x), _fv(y), _fv(z)); 
}

export function setGlobalRadioSignalLevel(p0: number): void { 
	return _in(0x159b7318, 0x403a1cd8, p0); 
}

/**
 * Used for GTAO CEO/Associate spawned vehicles.
 * @param vehicle
 * @param toggle
 */
export function setGoonBossVehicle(vehicle: number, toggle: boolean): void { 
	return _in(0xab31ef4d, 0xe6800ce9, vehicle, toggle); 
}

export function setGpsActive(active: boolean): void { 
	return _in(0x3bd3f52b, 0xa9b1e4e8, active); 
}

/**
 * radarThickness: The width of the GPS route on the radar
 * mapThickness: The width of the GPS route on the map
 * @param toggle
 * @param radarThickness
 * @param mapThickness
 */
export function setGpsCustomRouteRender(toggle: boolean, radarThickness: number, mapThickness: number): void { 
	return _in(0x900086f3, 0x71220b6f, toggle, radarThickness, mapThickness); 
}

export function setGpsDisabledZone(x1: number, y1: number, z1: number, x2: number, y2: number, z3: number): void { 
	return _in(0xdc20483c, 0xd3dd5201, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z3)); 
}

/**
 * Disables the GPS route displayed on the minimap while within a certain zone (area). When in a disabled zone and creating a waypoint, the GPS route is not shown on the minimap until you are outside of the zone. When disabled, the direct distance is shown on minimap opposed to distance to travel. Seems to only work before setting a waypoint.
 * You can clear the disabled zone with CLEAR_GPS_DISABLED_ZONE_AT_INDEX.
 * 
 * **Setting a waypoint at the same coordinate:**
 * Disabled Zone: https://i.imgur.com/P9VUuxM.png
 * Enabled Zone (normal): https://i.imgur.com/BPi24aw.png
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param index
 */
export function setGpsDisabledZoneAtIndex(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, index: number): void { 
	return _in(0xd0bc1c6f, 0xb18ee154, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), index); 
}

/**
 * Only the script that originally called SET_GPS_FLAGS can set them again. Another script cannot set the flags, until the first script that called it has called CLEAR_GPS_FLAGS.
 * 
 * Doesn't seem like the flags are actually read by the game at all.
 * @param p0
 * @param p1
 */
export function setGpsFlags(p0: number, p1: number): void { 
	return _in(0x5b440763, 0xa4c8d15b, p0, _fv(p1)); 
}

export function setGpsFlashes(toggle: boolean): void { 
	return _in(0x320d0e0d, 0x936a0e9b, toggle); 
}

export function setGpsMultiRouteRender(toggle: boolean): void { 
	return _in(0x3dda3712, 0x8dd1aca8, toggle); 
}

/**
 * This function is hard-coded to always return 0.
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 */
export function setGrassCullSphere(p0: number, p1: number, p2: number, p3: number): number { 
	return _in(0xbe197eaa, 0x669238f4, _fv(p0), _fv(p1), _fv(p2), _fv(p3), _r, _ri); 
}

/**
 * level can be from 0 to 3
 * 0: 9.8 - normal
 * 1: 2.4 - low
 * 2: 0.1 - very low
 * 3: 0.0 - off
 * @param level
 */
export function setGravityLevel(level: number): void { 
	return _in(0x740e14fa, 0xd5842351, level); 
}

export function setGroundEffectReducesDrag(toggle: boolean): void { 
	return _in(0x430a7631, 0xa84c9be7, toggle); 
}

/**
 * 0: Default
 * 1: Circle Around Leader
 * 2: Alternative Circle Around Leader
 * 3: Line, with Leader at center
 * @param groupId
 * @param formationType
 */
export function setGroupFormation(groupId: number, formationType: number): void { 
	return _in(0xce2f5fc3, 0xaf7e8c1e, groupId, formationType); 
}

export function setGroupFormationSpacing(groupId: number, x: number, y: number, z: number): void { 
	return _in(0x1d9d4500, 0x4c28c916, groupId, _fv(x), _fv(y), _fv(z)); 
}

/**
 * Sets the range at which members will automatically leave the group.
 * @param groupHandle
 * @param separationRange
 */
export function setGroupSeparationRange(groupHandle: number, separationRange: number): void { 
	return _in(0x4102c785, 0x8cfee4e4, groupHandle, _fv(separationRange)); 
}

export function setHasPostedAllVehiclesDriven(): void { 
	return _in(0xc141b891, 0x7e0017ec); 
}

/**
 * Sets profile setting 866
 * @param value
 */
export function setHasSpecialeditionContent(value: number): void { 
	return _in(0xdac073c7, 0x901f9e15, value); 
}

export function setHdArea(x: number, y: number, z: number, radius: number): void { 
	return _in(0xb85f2661, 0x9073e775, _fv(x), _fv(y), _fv(z), _fv(radius)); 
}

/**
 * Used for freemode (online) characters.
 * 
 * For some reason, the scripts use a rounded float for the index.
 * Indexes:
 * 1. black
 * 2. very light blue/green
 * 3. dark blue
 * 4. brown
 * 5. darker brown
 * 6. light brown
 * 7. blue
 * 8. light blue
 * 9. pink
 * 10. yellow
 * 11. purple
 * 12. black
 * 13. dark green
 * 14. light brown
 * 15. yellow/black pattern
 * 16. light colored spiral pattern
 * 17. shiny red
 * 18. shiny half blue/half red
 * 19. half black/half light blue
 * 20. white/red perimter
 * 21. green snake
 * 22. red snake
 * 23. dark blue snake
 * 24. dark yellow
 * 25. bright yellow
 * 26. all black
 * 28. red small pupil
 * 29. devil blue/black
 * 30. white small pupil
 * 31. glossed over
 * @param ped
 * @param index
 */
export function setHeadBlendEyeColor(ped: number, index: number): void { 
	return _in(0x50b56988, 0xb170afdf, ped, index); 
}

/**
 * p4 seems to vary from 0 to 3.
 * Preview: https://gfycat.com/MaleRareAmazonparrot
 * @param ped
 * @param r
 * @param g
 * @param b
 * @param id
 */
export function setHeadBlendPaletteColor(ped: number, r: number, g: number, b: number, id: number): void { 
	return _in(0xcc9682b8, 0x951c5229, ped, r, g, b, id); 
}

export function setHealthHudDisplayValues(health: number, capacity: number, wasAdded: boolean): void { 
	return _in(0x3f5cc444, 0xdcaaa8f2, health, capacity, wasAdded); 
}

/**
 * Related to Peds dropping pickup_health_snack; p0 is a value between [0.0, 1.0] that corresponds to drop rate
 * @param p0
 * @param p1
 */
export function setHealthSnacksCarriedByAllNewPeds(p0: number, p1: number): void { 
	return _in(0xff4803bc, 0x019852d9, _fv(p0), p1); 
}

/**
 * Equivalent of SET_HELI_BLADES_SPEED(vehicleHandle, 1.0f);
 * 
 * this native works on planes to?
 * @param vehicle
 */
export function setHeliBladesFullSpeed(vehicle: number): void { 
	return _in(0xa178472e, 0xbb8ae60d, vehicle); 
}

/**
 * Sets the speed of the helicopter blades in percentage of the full speed.
 * 
 * vehicleHandle: The helicopter.
 * speed: The speed in percentage, 0.0f being 0% and 1.0f being 100%.
 * @param vehicle
 * @param speed
 */
export function setHeliBladesSpeed(vehicle: number, speed: number): void { 
	return _in(0xfd280b4d, 0x7f3abc4d, vehicle, _fv(speed)); 
}

/**
 * Stops the cargobob from being able to attach any vehicle
 * @param vehicle
 * @param toggle
 */
export function setHeliCanPickupEntityThatHasPickUpDisabled(vehicle: number, toggle: boolean): void { 
	return _in(0x94a68da4, 0x12c4007d, vehicle, toggle); 
}

export function setHeliCombatOffset(vehicle: number, x: number, y: number, z: number): void { 
	return _in(0x0a3f820a, 0x9a9a9ac5, vehicle, _fv(x), _fv(y), _fv(z)); 
}

/**
 * value between 0.0 and 1.0
 * @param helicopter
 * @param multiplier
 */
export function setHeliControlLaggingRateScalar(helicopter: number, multiplier: number): void { 
	return _in(0x6e0859b5, 0x30a365cc, helicopter, _fv(multiplier)); 
}

export function setHeliMainRotorHealth(vehicle: number, health: number): void { 
	return _in(0x4056ea11, 0x05f5abd7, vehicle, _fv(health)); 
}

export function setHeliResistToExplosion(vehicle: number, toggle: boolean): void { 
	return _in(0x8074cc18, 0x86802912, vehicle, toggle); 
}

export function setHeliTailBoomCanBreakOff(vehicle: number, toggle: boolean): boolean { 
	return _in(0x3ec8bf18, 0xaa453fe9, vehicle, toggle, _r); 
}

export function setHeliTailRotorHealth(vehicle: number, health: number): void { 
	return _in(0xfe205f38, 0xaaa58e5b, vehicle, _fv(health)); 
}

export function setHeliTurbulenceScalar(vehicle: number, p1: number): void { 
	return _in(0xe6f13851, 0x780394da, vehicle, _fv(p1)); 
}

export function setHelpMessageStyle(style: number, hudColor: number, alpha: number, p3: number, p4: number): void { 
	return _in(0xb9c362ba, 0xbecddc7a, style, hudColor, alpha, p3, p4); 
}

export function setHidofOverride(p0: boolean, p1: boolean, nearplaneOut: number, nearplaneIn: number, farplaneOut: number, farplaneIn: number): void { 
	return _in(0xba3d6590, 0x6822bed5, p0, p1, _fv(nearplaneOut), _fv(nearplaneIn), _fv(farplaneOut), _fv(farplaneIn)); 
}

/**
 * Makes the ped ragdoll like when falling from a great height
 * @param ped
 * @param minTime
 * @param maxTime
 * @param entryType
 */
export function setHighFallTask(ped: number, minTime: number, maxTime: number, entryType: number): void { 
	return _in(0x8c825bdc, 0x7741d37c, ped, minTime, maxTime, entryType); 
}

export function setHornEnabled(vehicle: number, toggle: boolean): void { 
	return _in(0x76d683c1, 0x08594d0e, vehicle, toggle); 
}

export function setHornPermanentlyOn(vehicle: number): void { 
	return _in(0x9c119080, 0x13ea4715, vehicle); 
}

export function setHornPermanentlyOnTime(vehicle: number, time: number): void { 
	return _in(0x9d3af56e, 0x94c9ae98, vehicle, _fv(time)); 
}

export function setHoverModeWingRatio(vehicle: number, ratio: number): void { 
	return _in(0x70a252f6, 0x0a3e036b, vehicle, _fv(ratio)); 
}

export function setHudComponentPosition(id: number, x: number, y: number): void { 
	return _in(0xaabb1f56, 0xe2a17ced, id, _fv(x), _fv(y)); 
}

/**
 * Works only on vehicles that support hydraulics.
 * @param vehicle
 * @param wheelId
 * @param value
 */
export function setHydraulicSuspensionRaiseFactor(vehicle: number, wheelId: number, value: number): void { 
	return _in(0x84ea99c6, 0x2cb3ef0c, vehicle, wheelId, _fv(value)); 
}

/**
 * States:
 * 4 = raise
 * 5 = lower
 * 6 = jump
 * @param vehicle
 * @param state
 */
export function setHydraulicVehicleState(vehicle: number, state: number): void { 
	return _in(0x8ea86df3, 0x56801c7d, vehicle, state); 
}

/**
 * Sets vehicle wheel hydraulic states transition. Known states:
 * 0 - reset
 * 1 - raise wheel (uses value arg, works just like _SET_VEHICLE_HYDRAULIC_WHEEL_VALUE)
 * 2 - jump using wheel
 * @param vehicle
 * @param wheelId
 * @param state
 * @param value
 * @param p4
 */
export function setHydraulicWheelState(vehicle: number, wheelId: number, state: number, value: number, p4: number): void { 
	return _in(0xc2407531, 0x0a8b9cd1, vehicle, wheelId, state, _fv(value), p4); 
}

/**
 * If false, lowers hydraulics (if raised) and disables hydraulics controls. If true, raises hydraulics and enables hydraulics controls.
 * 
 * Only used once in each carmod script, on a car that does not have hydraulics to begin with.
 * @param vehicle
 * @param toggle
 */
export function setHydraulicsControl(vehicle: number, toggle: boolean): void { 
	return _in(0x28b18377, 0xeb6e25f6, vehicle, toggle); 
}

export function setIdealSpawnDistanceForIncident(incidentId: number, p1: number): void { 
	return _in(0xd261ba3e, 0x7e998072, incidentId, _fv(p1)); 
}

export function setIgnoreLowPriorityShockingEvents(player: number, toggle: boolean): void { 
	return _in(0x596976b0, 0x2b6b5700, player, toggle); 
}

export function setIgnoreNoGpsFlag(toggle: boolean): void { 
	return _in(0x72751156, 0xe7678833, toggle); 
}

/**
 * See: SET_BLIP_ROUTE
 * @param toggle
 */
export function setIgnoreNoGpsFlagUntilFirstNormalNode(toggle: boolean): void { 
	return _in(0x1fc289a0, 0xc3ff470f, toggle); 
}

export function setIgnorePlanesSmallPitchChange(p0: number, p1: number): void { 
	return _in(0x8664170e, 0xf165c4a6, p0, p1); 
}

export function setIkTarget(ped: number, ikIndex: number, entityLookAt: number, boneLookAt: number, offsetX: number, offsetY: number, offsetZ: number, p7: number, blendInDuration: number, blendOutDuration: number): void { 
	return _in(0xc32779c1, 0x6fceecd9, ped, ikIndex, entityLookAt, boneLookAt, _fv(offsetX), _fv(offsetY), _fv(offsetZ), p7, blendInDuration, blendOutDuration); 
}

/**
 * Related to the lower-end of a vehicles fTractionCurve, e.g., from standing starts and acceleration from low/zero speeds.
 * @param toggle
 */
export function setInArenaMode(toggle: boolean): void { 
	return _in(0xaa6a6098, 0x851c396f, toggle); 
}

export function setInStuntMode(p0: boolean): void { 
	return _in(0x9ebd751e, 0x5787baf2, p0); 
}

/**
 * Forces gameplay cam to specified vehicle as if you were in it
 * @param p0
 * @param p1
 */
export function setInVehicleCamStateThisUpdate(p0: number, p1: number): void { 
	return _in(0xe9ea16d6, 0xe54cdca4, p0, p1); 
}

export function setIncidentRequestedUnits(incidentId: number, dispatchService: number, numUnits: number): void { 
	return _in(0xb08b85d8, 0x60e7ba3c, incidentId, dispatchService, numUnits); 
}

export function setIncreaseWheelCrushDamage(vehicle: number, toggle: boolean): void { 
	return _in(0x2970eaa1, 0x8fd5e42f, vehicle, toggle); 
}

export function setInitialPlayerStation(radioStation: string): void { 
	return _in(0x88795f13, 0xfacda88d, _ts(radioStation)); 
}

/**
 * control: see IS_CONTROL_ENABLED
 * @param control
 * @param action
 */
export function setInputExclusive(control: number, action: number): void { 
	return _in(0xede476e5, 0xee29edb1, control, action); 
}

export function setInsideVeryLargeInterior(toggle: boolean): void { 
	return _in(0x7ec8aba5, 0xe74b3d7a, toggle); 
}

export function setInsideVerySmallInterior(toggle: boolean): void { 
	return _in(0x504dfe62, 0xa1692296, toggle); 
}

/**
 * Sets an unknown flag used by CScene in determining which entities from CMapData scene nodes to draw, similar to SET_INSTANCE_PRIORITY_MODE.
 * @param flag
 */
export function setInstancePriorityHint(flag: number): void { 
	return _in(0xc5f0a8eb, 0xd3f361ce, flag); 
}

/**
 * Formerly known as _LOWER_MAP_PROP_DENSITY and wrongly due to idiots as _ENABLE_MP_DLC_MAPS.
 * Sets the maximum prop density and changes a loading screen flag from 'loading story mode' to 'loading GTA Online'. Does not touch DLC map data at all.
 * 
 * In fact, I doubt this changes the flag whatsoever, that's the OTHER native idiots use together with this that does so, this one only causes a loading screen to show as it reloads map data.
 * @param p0
 */
export function setInstancePriorityMode(p0: number): void { 
	return _in(0x9bae5ad2, 0x508df078, p0); 
}

export function setInteriorActive(interiorID: number, toggle: boolean): void { 
	return _in(0xe37b76c3, 0x87be28ed, interiorID, toggle); 
}

/**
 * Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json
 * @param interior
 * @param entitySetName
 * @param color
 */
export function setInteriorEntitySetTintIndex(interior: number, entitySetName: string, color: number): void { 
	return _in(0xc1f1920b, 0xaf281317, interior, _ts(entitySetName), color); 
}

/**
 * Only used once in the entire game scripts.
 * Does not actually return anything.
 * @param interior
 */
export function setInteriorInUse(interior: number): boolean { 
	return _in(0x4c2330e6, 0x1d3deb56, interior, _r); 
}

export function setInvertGhosting(p0: boolean): void { 
	return _in(0xd7b6c73c, 0xad419bcf, p0); 
}

/**
 * Inverts vehicle's controls. So INPUT_VEH_ACCELERATE will be INPUT_VEH_BRAKE and vise versa (same for A/D controls)
 * Doesn't work for planes/helis.
 * @param vehicle
 * @param state
 */
export function setInvertVehicleControls(vehicle: number, state: boolean): void { 
	return _in(0x5b91b229, 0x243351a8, vehicle, state); 
}

/**
 * Jenkins hash _might_ be 0xFC227584.
 * @param entity
 * @param toggle
 */
export function setIsExteriorOnly(entity: number, toggle: boolean): void { 
	return _in(0x7241ccb7, 0xd020db69, entity, toggle); 
}

export function setIsObjectArticulated(object: number, toggle: boolean): void { 
	return _in(0x1c57c94a, 0x6446492a, object, toggle); 
}

export function setIsObjectBall(object: number, toggle: boolean): void { 
	return _in(0xb5b77424, 0x24bd4445, object, toggle); 
}

/**
 * Enables the specified island. For more information, see islandhopper.meta
 * @param name
 * @param toggle
 */
export function setIslandEnabled(name: string, toggle: boolean): void { 
	return _in(0x9a9d1ba6, 0x39675cf1, _ts(name), toggle); 
}

export function setJobActivityIdStarted(p0: number, characterSlot: number): void { 
	return _in(0x723c1ce1, 0x3fbfdb67, p0, characterSlot); 
}

/**
 * Only appears in lamar1 script.
 * @param ped
 * @param p1
 */
export function setLadderClimbInputState(ped: number, p1: number): void { 
	return _in(0x1a330d29, 0x7aac6bc1, ped, p1); 
}

export function setLastDrivenVehicle(vehicle: number): void { 
	return _in(0xacfb2463, 0xcc22bed2, vehicle); 
}

export function setLastViewedShopItem(p0: number, p1: number, p2: number): void { 
	return _in(0xfae628f1, 0xe9adb239, _ch(p0), p1, _ch(p2)); 
}

export function setLawPedsCanAttackNonWantedPlayerThisFrame(player: number): void { 
	return _in(0xfac75988, 0xa7d078d3, player); 
}

/**
 * PLAYER::SET_LAW_RESPONSE_DELAY_OVERRIDE(rPtr((&l_122) + 71)); // Found in decompilation
 * 
 * ***
 * 
 * In "am_hold_up.ysc" used once:
 * 
 * l_8d._f47 = MISC::GET_RANDOM_FLOAT_IN_RANGE(18.0, 28.0);
 * PLAYER::SET_LAW_RESPONSE_DELAY_OVERRIDE((l_8d._f47));
 * @param p0
 */
export function setLawResponseDelayOverride(p0: number): void { 
	return _in(0xb45eff71, 0x9d8427a6, _fv(p0)); 
}

export function setLightOverrideMaxIntensityScale(p0: number): void { 
	return _in(0x9641588d, 0xab93b4b5, p0); 
}

export function setLightsCutoffDistanceTweak(distance: number): void { 
	return _in(0xbc3cca58, 0x44452b06, _fv(distance)); 
}

export function setLocalPlayerAsGhost(toggle: boolean, p1: boolean): void { 
	return _in(0x5ffe9b41, 0x44f9712f, toggle, p1); 
}

export function setLocalPlayerCanCollectPortablePickups(toggle: boolean): void { 
	return _in(0x78857fc6, 0x5cadb909, toggle); 
}

export function setLocalPlayerInvisibleLocally(bIncludePlayersVehicle: boolean): void { 
	return _in(0xe5f773c1, 0xa1d9d168, bIncludePlayersVehicle); 
}

/**
 * Maximum amount of pickup models that can be disallowed is 30.
 * @param modelHash
 * @param toggle
 */
export function setLocalPlayerPermittedToCollectPickupsWithModel(modelHash: number, toggle: boolean): void { 
	return _in(0x88eaec61, 0x7cd26926, _ch(modelHash), toggle); 
}

export function setLocalPlayerVisibleInCutscene(p0: boolean, p1: boolean): void { 
	return _in(0xd1065d68, 0x947e7b6e, p0, p1); 
}

export function setLocalPlayerVisibleLocally(bIncludePlayersVehicle: boolean): void { 
	return _in(0x7619364c, 0x82d3bf14, bIncludePlayersVehicle); 
}

export function setLockAdaptiveDofDistance(p0: boolean): void { 
	return _in(0xb569f41f, 0x3e7e83a4, p0); 
}

/**
 * Hardcoded not to work in multiplayer environments.
 * When you set locked to 0 the door open and to 1 the door close
 * OBJECT::SET_LOCKED_UNSTREAMED_IN_DOOR_OF_TYPE(${prop_gate_prison_01}, 1845.0, 2605.0, 45.0, 0, 0.0, 50.0, 0);  //door open
 * 
 * OBJECT::SET_LOCKED_UNSTREAMED_IN_DOOR_OF_TYPE(${prop_gate_prison_01}, 1845.0, 2605.0, 45.0, 1, 0.0, 50.0, 0);  //door close
 * @param modelHash
 * @param x
 * @param y
 * @param z
 * @param locked
 * @param xRotMult
 * @param yRotMult
 * @param zRotMult
 */
export function setLockedUnstreamedInDoorOfType(modelHash: number, x: number, y: number, z: number, locked: boolean, xRotMult: number, yRotMult: number, zRotMult: number): void { 
	return _in(0x9b12f9a2, 0x4fabedb0, _ch(modelHash), _fv(x), _fv(y), _fv(z), locked, _fv(xRotMult), _fv(yRotMult), _fv(zRotMult)); 
}

/**
 * Possible p0 values:
 * 
 * "prologue"
 * "Prologue_Main"
 * @param name
 * @param toggle
 */
export function setMapdatacullboxEnabled(name: string, toggle: boolean): void { 
	return _in(0xaf12610c, 0x644a35c9, _ts(name), toggle); 
}

export function setMaxArmourHudDisplay(maximumValue: number): void { 
	return _in(0x06a32053, 0x5f5f0248, maximumValue); 
}

export function setMaxHealthHudDisplay(maximumValue: number): void { 
	return _in(0x975d66a0, 0xbc17064c, maximumValue); 
}

export function setMaxNumPortablePickupsCarriedByPlayer(modelHash: number, number: number): void { 
	return _in(0x0bf3b3bd, 0x47d79c08, _ch(modelHash), number); 
}

export function setMaxWantedLevel(maxWantedLevel: number): void { 
	return _in(0xaa5f02db, 0x48d704b9, maxWantedLevel); 
}

/**
 * This native controls where the game plays audio from. By default the microphone is positioned on the player.
 * When p0 is true the game will play audio from the 3 positions inputted.
 * It is recommended to set all 3 positions to the same value as mixing different positions doesn't seem to work well.
 * The scripts mostly use it with only one position such as in fbi3.c:
 * AUDIO::SET_MICROPHONE_POSITION(true, ENTITY::GET_ENTITY_COORDS(iLocal_3091, true), ENTITY::GET_ENTITY_COORDS(iLocal_3091, true), ENTITY::GET_ENTITY_COORDS(iLocal_3091, true));
 * @param toggle
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param x3
 * @param y3
 * @param z3
 */
export function setMicrophonePosition(toggle: boolean, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, x3: number, y3: number, z3: number): void { 
	return _in(0xb6ae90ed, 0xde95c762, toggle, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(x3), _fv(y3), _fv(z3)); 
}

export function setMinigameInProgress(toggle: boolean): void { 
	return _in(0x19e00d73, 0x22c6f85b, toggle); 
}

/**
 * This native does absolutely nothing on PC master builds, just a nullsub.
 * @param toggle
 */
export function setMinimapBackgroundHidden(toggle: boolean): void { 
	return _in(0xb09d4255, 0x7c45eba1, toggle); 
}

export function setMinimapBlockWaypoint(toggle: boolean): void { 
	return _in(0x58fadded, 0x207897dc, toggle); 
}

/**
 * This native is used to colorize certain map components like the army base at the top of the map.
 * p2 appears to be always -1. If p2 is -1 then native wouldn't change the color. See https://gfycat.com/SkinnyPinkChupacabra
 * @param componentId
 * @param toggle
 * @param overrideColor
 */
export function setMinimapComponent(componentId: number, toggle: boolean, overrideColor: number): boolean { 
	return _in(0x75a9a109, 0x48d1dea6, componentId, toggle, overrideColor, _r); 
}

export function setMinimapFowDoNotUpdate(p0: boolean): void { 
	return _in(0x62e849b7, 0xeb28e770, p0); 
}

/**
 * Up to eight coordinates may be revealed per frame
 * @param x
 * @param y
 * @param z
 */
export function setMinimapFowRevealCoordinate(x: number, y: number, z: number): void { 
	return _in(0x0923dbf8, 0x7dff735e, _fv(x), _fv(y), _fv(z)); 
}

/**
 * Not much is known so far on what it does _exactly_.
 * All I know for sure is that it draws the specified hole ID on the pause menu map as well as on the mini-map/radar. This native also seems to change some other things related to the pause menu map's behaviour, for example: you can no longer set waypoints, the pause menu map starts up in a 'zoomed in' state. This native does not need to be executed every tick.
 * You need to center the minimap manually as well as change/lock it's zoom and angle in order for it to appear correctly on the minimap.
 * You'll also need to use the `GOLF` scaleform in order to get the correct minmap border to show up.
 * Use `0x35edd5b2e3ff01c0` to reset the map when you no longer want to display any golf holes (you still need to unlock zoom, position and angle of the radar manually after calling this).
 * @param hole
 */
export function setMinimapGolfCourse(hole: number): void { 
	return _in(0x71bdb63d, 0xbaf8da59, hole); 
}

export function setMinimapGolfCourseOff(): void { 
	return _in(0x35edd5b2, 0xe3ff01c0); 
}

/**
 * If true, the entire map will be revealed.
 * 
 * FOW = Fog of War
 * @param toggle
 */
export function setMinimapHideFow(toggle: boolean): void { 
	return _in(0xf8dee0a5, 0x600cbb93, toggle); 
}

/**
 * Toggles the North Yankton map
 * @param toggle
 */
export function setMinimapInPrologue(toggle: boolean): void { 
	return _in(0x9133955f, 0x1a2da957, toggle); 
}

export function setMinimapInSpectatorMode(toggle: boolean, ped: number): void { 
	return _in(0x1a5cd775, 0x2dd28cd3, toggle, ped); 
}

export function setMinimapSonarSweep(toggle: boolean): void { 
	return _in(0x6b50fc87, 0x49632ec1, toggle); 
}

export function setMinimumTimeBetweenGearShifts(vehicle: number, time: number): void { 
	return _in(0x16cfbc5e, 0x7eb32861, vehicle, time); 
}

/**
 * If true, the player can't save the game.
 * 
 * 
 * If the parameter is true, sets the mission flag to true, if the parameter is false, the function does nothing at all.
 * 
 * ^ also, if the mission flag is already set, the function does nothing at all
 * @param toggle
 */
export function setMissionFlag(toggle: boolean): void { 
	return _in(0xc4301e51, 0x21a0ed73, toggle); 
}

export function setMissionName(p0: boolean, name: string): void { 
	return _in(0x5f28ecf5, 0xfc84772f, p0, _ts(name)); 
}

export function setMissionNameForUgcMission(p0: boolean, name: string): void { 
	return _in(0xe45087d8, 0x5f468bc2, p0, _ts(name)); 
}

/**
 * p1 is always 0
 * @param train
 * @param p1
 */
export function setMissionTrainAsNoLongerNeeded(p1: boolean): number { 
	return _in(0xbbe76483, 0x49b49be8, _i, p1); 
}

export function setMissionTrainCoords(train: number, x: number, y: number, z: number): void { 
	return _in(0x591ca673, 0xaa6ab736, train, _fv(x), _fv(y), _fv(z)); 
}

export function setMobilePhoneDofState(toggle: boolean): void { 
	return _in(0x375a706a, 0x5c2fd084, toggle); 
}

export function setMobilePhonePosition(posX: number, posY: number, posZ: number): void { 
	return _in(0x693a5c6d, 0x6734085b, _fv(posX), _fv(posY), _fv(posZ)); 
}

export function setMobilePhoneRadioState(state: boolean): void { 
	return _in(0xbf286c55, 0x4784f3df, state); 
}

/**
 * Last parameter is unknown and always zero.
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param p3
 */
export function setMobilePhoneRotation(rotX: number, rotY: number, rotZ: number, p3: number): void { 
	return _in(0xbb779c0c, 0xa917e865, _fv(rotX), _fv(rotY), _fv(rotZ), p3); 
}

/**
 * The minimum/default is 500.0f. If you plan to make it bigger set it's position as well. Also this seems to need to be called in a loop as when you close the phone the scale is reset. If not in a loop you'd need to call it everytime before you re-open the phone.
 * @param scale
 */
export function setMobilePhoneScale(scale: number): void { 
	return _in(0xcbdd322a, 0x73d6d932, _fv(scale)); 
}

export function setMobileRadioEnabledDuringGameplay(toggle: boolean): void { 
	return _in(0x1098355a, 0x16064bb3, toggle); 
}

/**
 * Unloads model from memory
 * @param model
 */
export function setModelAsNoLongerNeeded(model: number): void { 
	return _in(0xe532f5d7, 0x8798daab, _ch(model)); 
}

/**
 * Setter for GET_MOTIONBLUR_MAX_VEL_SCALER
 * @param p0
 */
export function setMotionblurMaxVelScaler(p0: number): void { 
	return _in(0xb3c641f3, 0x630bf6da, _fv(p0)); 
}

/**
 * Note: Look in decompiled scripts and the times that p1 and p2 aren't 0. They are filled with vars. If you look through out that script what other natives those vars are used in, you can tell p1 is a ped and p2 is a vehicle. Which most likely means if you want the mounted weapon to target a ped set targetVehicle to 0 or vice-versa.
 * @param shootingPed
 * @param targetPed
 * @param targetVehicle
 * @param x
 * @param y
 * @param z
 * @param taskMode
 * @param ignoreTargetVehDeadCheck
 */
export function setMountedWeaponTarget(shootingPed: number, targetPed: number, targetVehicle: number, x: number, y: number, z: number, taskMode: number, ignoreTargetVehDeadCheck: boolean): void { 
	return _in(0xccd89219, 0x2c6d2bb9, shootingPed, targetPed, targetVehicle, _fv(x), _fv(y), _fv(z), taskMode, ignoreTargetVehDeadCheck); 
}

/**
 * Changes the mouse cursor's sprite.
 * 1 = Normal
 * 6 = Left Arrow
 * 7 = Right Arrow
 * @param spriteId
 */
export function setMouseCursorStyle(spriteId: number): void { 
	return _in(0x8db8cffd, 0x58b62552, spriteId); 
}

/**
 * Shows the cursor on screen for one frame.
 */
export function setMouseCursorThisFrame(): void { 
	return _in(0xaae7ce1d, 0x63167423); 
}

/**
 * Shows/hides the frontend cursor on the pause menu or similar menus.
 * Clicking off and then on the game window will show it again.
 * @param toggle
 */
export function setMouseCursorVisible(toggle: boolean): void { 
	return _in(0x98215325, 0xa695e78a, toggle); 
}

/**
 * name: "MP_FEMALE_ACTION" found multiple times in the b617d scripts.
 * @param ped
 * @param name
 */
export function setMovementModeOverride(ped: number, name: string): void { 
	return _in(0x781de8fa, 0x214e87d2, ped, _ts(name)); 
}

/**
 * Sets flag's sprite transparency. 0-255.
 * @param gamerTagId
 * @param component
 * @param alpha
 */
export function setMpGamerTagAlpha(gamerTagId: number, component: number, alpha: number): void { 
	return _in(0xd48fe545, 0xcd46f857, gamerTagId, component, alpha); 
}

export function setMpGamerTagBigText(gamerTagId: number, string: string): void { 
	return _in(0x7b772374, 0x7ccb55b6, gamerTagId, _ts(string)); 
}

/**
 * Sets a gamer tag's component colour
 * 
 * gamerTagId is obtained using for example CREATE_FAKE_MP_GAMER_TAG
 * Ranges from 0 to 255. 0 is grey health bar, ~50 yellow, 200 purple.
 * @param gamerTagId
 * @param component
 * @param hudColorIndex
 */
export function setMpGamerTagColour(gamerTagId: number, component: number, hudColorIndex: number): void { 
	return _in(0x613ed644, 0x950626ae, gamerTagId, component, hudColorIndex); 
}

/**
 * Ranges from 0 to 255. 0 is grey health bar, ~50 yellow, 200 purple.
 * Should be enabled as flag (2). Has 0 opacity by default.
 * 
 * - This was _SET_MP_GAMER_TAG_HEALTH_BAR_COLOR,
 * -> Rockstar use the EU spelling of 'color' so I hashed the same name with COLOUR and it came back as the correct hash, so it has been corrected above.
 * @param gamerTagId
 * @param hudColorIndex
 */
export function setMpGamerTagHealthBarColour(gamerTagId: number, hudColorIndex: number): void { 
	return _in(0x3158c77a, 0x7e888ab4, gamerTagId, hudColorIndex); 
}

export function setMpGamerTagName(gamerTagId: number, string: string): void { 
	return _in(0xdea2b828, 0x3baa3944, gamerTagId, _ts(string)); 
}

export function setMpGamerTagNumPackages(gamerTagId: number, p1: number): void { 
	return _in(0x9c16459b, 0x2324b2cf, gamerTagId, p1); 
}

/**
 * enum eMpGamerTagComponent
 * {
 * MP_TAG_GAMER_NAME,
 * MP_TAG_CREW_TAG,
 * MP_TAG_HEALTH_ARMOUR,
 * MP_TAG_BIG_TEXT,
 * MP_TAG_AUDIO_ICON,
 * MP_TAG_USING_MENU,
 * MP_TAG_PASSIVE_MODE,
 * MP_TAG_WANTED_STARS,
 * MP_TAG_DRIVER,
 * MP_TAG_CO_DRIVER,
 * MP_TAG_TAGGED,
 * MP_TAG_GAMER_NAME_NEARBY,
 * MP_TAG_ARROW,
 * MP_TAG_PACKAGES,
 * MP_TAG_INV_IF_PED_FOLLOWING,
 * MP_TAG_RANK_TEXT,
 * MP_TAG_TYPING,
 * MP_TAG_BAG_LARGE,
 * MP_TAG_ARROW,
 * MP_TAG_GANG_CEO,
 * MP_TAG_GANG_BIKER,
 * MP_TAG_BIKER_ARROW,
 * MP_TAG_MC_ROLE_PRESIDENT,
 * MP_TAG_MC_ROLE_VICE_PRESIDENT,
 * MP_TAG_MC_ROLE_ROAD_CAPTAIN,
 * MP_TAG_MC_ROLE_SARGEANT,
 * MP_TAG_MC_ROLE_ENFORCER,
 * MP_TAG_MC_ROLE_PROSPECT,
 * MP_TAG_TRANSMITTER,
 * MP_TAG_BOMB
 * };
 * @param gamerTagId
 * @param component
 * @param toggle
 * @param p3
 */
export function setMpGamerTagVisibility(gamerTagId: number, component: number, toggle: boolean, p3: number): void { 
	return _in(0x63bb75ab, 0xedc1f6a0, gamerTagId, component, toggle, p3); 
}

/**
 * displays wanted star above head
 * @param gamerTagId
 * @param wantedlvl
 */
export function setMpGamerTagWantedLevel(gamerTagId: number, wantedlvl: number): void { 
	return _in(0xcf228e2a, 0xa03099c3, gamerTagId, wantedlvl); 
}

export function setMpGamerTagsPointHealth(gamerTagId: number, value: number, maximumValue: number): void { 
	return _in(0x1563fe35, 0xe9928e67, gamerTagId, value, maximumValue); 
}

export function setMpGamerTagsShouldUsePointsHealth(gamerTagId: number, toggle: boolean): void { 
	return _in(0xd29ec58c, 0x2f6b5014, gamerTagId, toggle); 
}

/**
 * Displays a bunch of icons above the players name, and level, and their name twice
 * @param gamerTagId
 * @param toggle
 */
export function setMpGamerTagsShouldUseVehicleHealth(gamerTagId: number, toggle: boolean): void { 
	return _in(0xa67f9c46, 0xd612b6f1, gamerTagId, toggle); 
}

export function setMultiplayerBankCash(): void { 
	return _in(0xdd21b55d, 0xf695cd0a); 
}

/**
 * This native does absolutely nothing, just a nullsub
 * @param p0
 * @param p1
 */
export function setMultiplayerHudCash(p0: number, p1: boolean): void { 
	return _in(0xfd1d2203, 0x94bcb824, p0, p1); 
}

export function setMultiplayerWalletCash(): void { 
	return _in(0xc2d15bef, 0x167e27bc); 
}

export function setNetworkCutsceneEntities(toggle: boolean): void { 
	return _in(0xaaa553e7, 0xdd28a457, toggle); 
}

/**
 * Enables a periodic ShapeTest within the NetBlender and invokes rage::netBlenderLinInterp::GoStraightToTarget (or some functional wrapper).
 * @param vehicle
 * @param toggle
 */
export function setNetworkEnableHighSpeedEdgeFallDetection(vehicle: number, toggle: boolean): void { 
	return _in(0x838da093, 0x6a24ed4d, vehicle, toggle); 
}

export function setNetworkIdAlwaysExistsForPlayer(netId: number, player: number, toggle: boolean): void { 
	return _in(0xa8a02458, 0x7329f36a, netId, player, toggle); 
}

/**
 * "No Reassign" in CPhysicalScriptGameStateDataNode
 * @param netId
 * @param toggle
 */
export function setNetworkIdCanBeReassigned(netId: number, toggle: boolean): void { 
	return _in(0x9d724b40, 0x0a7e8ffc, netId, toggle); 
}

/**
 * Whether or not another player is allowed to take control of the entity
 * @param netId
 * @param toggle
 */
export function setNetworkIdCanMigrate(netId: number, toggle: boolean): void { 
	return _in(0x299eeb23, 0x175895fc, netId, toggle); 
}

export function setNetworkIdExistsOnAllMachines(netId: number, toggle: boolean): void { 
	return _in(0xe05e81a8, 0x88fa63c8, netId, toggle); 
}

export function setNetworkIdPassControlInTutorial(netId: number, state: boolean): void { 
	return _in(0x3fa36981, 0x311fa4ff, netId, state); 
}

export function setNetworkIdVisibleInCutscene(netId: number, p1: boolean, p2: boolean): void { 
	return _in(0xa6928482, 0x543022b4, netId, p1, p2); 
}

export function setNetworkIdVisibleInCutsceneHack(netId: number, p1: boolean, p2: boolean): void { 
	return _in(0x32ebd154, 0xcb6b8b99, netId, p1, p2); 
}

export function setNetworkIdVisibleInCutsceneRemainHack(p0: number, p1: number, p2: number): void { 
	return _in(0x76b3f29d, 0x3f967692, p0, p1, p2); 
}

export function setNetworkVehicleAsGhost(vehicle: number, toggle: boolean): void { 
	return _in(0x6274c471, 0x2850841e, vehicle, toggle); 
}

/**
 * rage::netBlenderLinInterp::GetPositionMaxForUpdateLevel
 * @param vehicle
 * @param multiplier
 */
export function setNetworkVehicleMaxPositionDeltaMultiplier(vehicle: number, multiplier: number): void { 
	return _in(0xa2a70797, 0x9fe754dc, vehicle, _fv(multiplier)); 
}

export function setNetworkVehicleRespotTimer(netId: number, time: number, p2: number, p3: number): void { 
	return _in(0xec51713a, 0xb6ec36e8, netId, time, p2, p3); 
}

export function setNewWaypoint(x: number, y: number): void { 
	return _in(0xfe43368d, 0x2aa4f2fc, _fv(x), _fv(y)); 
}

/**
 * This native does absolutely nothing, just a nullsub
 * 
 * R* Comment:
 * SET_NEXT_DESIRED_MOVE_STATE - Function is deprecated - do not use anymore
 * @param nextMoveState
 */
export function setNextDesiredMoveState(nextMoveState: number): void { 
	return _in(0xf1b9f16e, 0x89e2c93a, _fv(nextMoveState)); 
}

export function setNextPlayerTcmodifier(modifierName: string): void { 
	return _in(0xbf59707b, 0x3e5ed531, _ts(modifierName)); 
}

export function setNextRadioTrack(radioName: string, radioTrack: string, p2: string, p3: string): void { 
	return _in(0x55ecf4d1, 0x3d9903b0, _ts(radioName), _ts(radioTrack), _ts(p2), _ts(p3)); 
}

/**
 * Enables Night Vision.
 * 
 * Example:
 * C#: Function.Call(Hash.SET_NIGHTVISION, true);
 * C++: GRAPHICS::SET_NIGHTVISION(true);
 * 
 * BOOL toggle:
 * true = turns night vision on for your player.
 * false = turns night vision off for your player.
 * @param toggle
 */
export function setNightvision(toggle: boolean): void { 
	return _in(0x18f621f7, 0xa5b1f85d, toggle); 
}

export function setNitrousIsActive(vehicle: number, toggle: boolean): void { 
	return _in(0x9e566ea5, 0x51f4f1a6, vehicle, toggle); 
}

export function setNitrousIsVisible(vehicle: number, enabled: boolean): void { 
	return _in(0x465eea70, 0xaf251045, vehicle, enabled); 
}

export function setNoDuckingForConversation(p0: boolean): void { 
	return _in(0xb542de8c, 0x3d1cb210, p0); 
}

export function setNoLoadingScreen(toggle: boolean): void { 
	return _in(0x5262cc19, 0x95d07e09, toggle); 
}

export function setNoiseoveride(toggle: boolean): void { 
	return _in(0xe787bf1c, 0x5cf823c9, toggle); 
}

export function setNoisinessoveride(value: number): void { 
	return _in(0xcb6a7c3b, 0xb17a0c67, _fv(value)); 
}

export function setNonParticipantsOfThisScriptAsGhosts(p0: boolean): void { 
	return _in(0x13f1fcb1, 0x11b820b0, p0); 
}

export function setNumberOfParkedVehicles(value: number): void { 
	return _in(0xcaa15f13, 0xebd417ff, value); 
}

/**
 * Overrides the climbing/blocking flags of the object, used in the native scripts mostly for "prop_dock_bouy_*"
 * @param object
 * @param toggle
 */
export function setObjectAllowLowLodBuoyancy(object: number, toggle: boolean): void { 
	return _in(0x4d89d607, 0xcb3dd1d2, object, toggle); 
}

/**
 * This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.
 * @param object
 */
export function setObjectAsNoLongerNeeded(object: number): number { 
	return _in(0x3ae22deb, 0x5ba5a3e6, _ii(object)); 
}

/**
 * Overrides a flag on the object which determines if the object should be avoided by a vehicle in task CTaskVehicleGoToPointWithAvoidanceAutomobile.
 * @param object
 * @param toggle
 */
export function setObjectForceVehiclesToAvoid(object: number, toggle: boolean): void { 
	return _in(0x77f33f2c, 0xcf64b3aa, object, toggle); 
}

export function setObjectGlowInSameTeam(pickup: number): void { 
	return _in(0x62454a64, 0x1b41f3c5, pickup); 
}

export function setObjectIsAPressurePlate(object: number, toggle: boolean): void { 
	return _in(0x734e1714, 0xd077da9a, object, toggle); 
}

export function setObjectIsSpecialGolfball(object: number, toggle: boolean): void { 
	return _in(0xc6033d32, 0x241f6fb5, object, toggle); 
}

export function setObjectIsVisibleInMirrors(object: number, toggle: boolean): void { 
	return _in(0x3b2fd68d, 0xb5f8331c, object, toggle); 
}

/**
 * Adjust the physics parameters of a prop, or otherwise known as "object". This is useful for simulated gravity.
 * 
 * Other parameters seem to be unknown.
 * 
 * p2: seems to be weight and gravity related. Higher value makes the obj fall faster. Very sensitive?
 * p3: seems similar to p2
 * p4: makes obj fall slower the higher the value
 * p5: similar to p4
 * @param object
 * @param weight
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param gravity
 * @param p7
 * @param p8
 * @param p9
 * @param p10
 * @param buoyancy
 */
export function setObjectPhysicsParams(object: number, weight: number, p2: number, p3: number, p4: number, p5: number, gravity: number, p7: number, p8: number, p9: number, p10: number, buoyancy: number): void { 
	return _in(0xf6df6e90, 0xde7df90f, object, _fv(weight), _fv(p2), _fv(p3), _fv(p4), _fv(p5), _fv(gravity), _fv(p7), _fv(p8), _fv(p9), _fv(p10), _fv(buoyancy)); 
}

export function setObjectSpeedBoostAmount(object: number, p1: number): void { 
	return _in(0x96ee0eba, 0x0163df80, object, p1); 
}

export function setObjectSpeedBoostDuration(object: number, duration: number): void { 
	return _in(0xdf6ca033, 0x0f2e737b, object, _fv(duration)); 
}

export function setObjectTakesDamageFromCollidingWithBuildings(p0: number, p1: boolean): void { 
	return _in(0xeb6f1a9b, 0x5510a5d2, p0, p1); 
}

export function setObjectTargettable(object: number, targettable: boolean, p2: number): void { 
	return _in(0x8a739169, 0x0f5afd81, object, targettable, p2); 
}

/**
 * Sets the 34th and 35th object flags related to player peds.
 * @param object
 * @param setFlag34
 * @param setFlag35
 */
export function setObjectTargettableByPlayer(object: number, setFlag34: boolean, setFlag35: boolean): void { 
	return _in(0xb39f0336, 0x8db0caa2, object, setFlag34, setFlag35); 
}

/**
 * enum ObjectPaintVariants
 * {
 * Pacific = 0,
 * Azure = 1,
 * Nautical = 2,
 * Continental = 3,
 * Battleship = 4,
 * Intrepid = 5,
 * Uniform = 6,
 * Classico = 7,
 * Mediterranean = 8,
 * Command = 9,
 * Mariner = 10,
 * Ruby = 11,
 * Vintage = 12,
 * Pristine = 13,
 * Merchant = 14,
 * Voyager = 15
 * };
 * @param object
 * @param textureVariation
 */
export function setObjectTintIndex(object: number, textureVariation: number): void { 
	return _in(0x971da005, 0x5324d033, object, textureVariation); 
}

export function setOnIslandXForTakenPhoto(p0: number): void { 
	return _in(0xadd6627c, 0x4d325458, p0); 
}

export function setOnlyAllowAmmoCollectionWhenLow(p0: boolean): void { 
	return _in(0x31f924b5, 0x3eaddf65, p0); 
}

export function setOpenRearDoorsOnExplosion(vehicle: number, toggle: boolean): void { 
	return _in(0x1b212b26, 0xdd3c04df, vehicle, toggle); 
}

export function setOverrideNitrousLevel(vehicle: number, toggle: boolean, level: number, power: number, rechargeTime: number, disableSound: boolean): void { 
	return _in(0xc8e9b6b7, 0x1b8e660d, vehicle, toggle, _fv(level), _fv(power), _fv(rechargeTime), disableSound); 
}

export function setOverrideTractionLossMultiplier(vehicle: number, modifier: number): void { 
	return _in(0xafd262ac, 0xca64479a, vehicle, _fv(modifier)); 
}

export function setOverrideVehicleDoorTorque(p0: number, p1: number, p2: number): void { 
	return _in(0x66e3aafa, 0xce2d1eb8, p0, p1, p2); 
}

/**
 * Appears to have an optional bool parameter that is unused in the scripts.
 * 
 * If you pass true, something will be set to zero.
 * @param weatherType
 */
export function setOverrideWeather(weatherType: string): void { 
	return _in(0xa43d5c6f, 0xe51adbef, _ts(weatherType)); 
}

/**
 * Identical to SET_OVERRIDE_WEATHER but has an additional BOOL param that sets some weather var to 0 if true
 * @param weatherType
 * @param p1
 */
export function setOverrideWeatherex(weatherType: string, p1: boolean): void { 
	return _in(0x1178e104, 0x409fe58c, _ts(weatherType), p1); 
}

export function setPackedStatBoolCode(index: number, value: boolean, characterSlot: number): void { 
	return _in(0xdb8a58ae, 0xaa67cd07, index, value, characterSlot); 
}

export function setPackedStatIntCode(index: number, value: number, characterSlot: number): void { 
	return _in(0x1581503a, 0xe529cd2e, index, value, characterSlot); 
}

/**
 * Toggles a value (bool) for cutscenes.
 * @param toggle
 */
export function setPadCanShakeDuringCutscene(toggle: boolean): void { 
	return _in(0xc61b86c9, 0xf61eb404, toggle); 
}

export function setParachuteTaskTarget(ped: number, x: number, y: number, z: number): void { 
	return _in(0xc313379a, 0xf0fceda7, ped, _fv(x), _fv(y), _fv(z)); 
}

export function setParachuteTaskThrust(ped: number, thrust: number): void { 
	return _in(0x0729bac1, 0xb8c64317, ped, _fv(thrust)); 
}

export function setParkedVehicleDensityMultiplierThisFrame(multiplier: number): void { 
	return _in(0xeae6dcc7, 0xeee3db1d, _fv(multiplier)); 
}

export function setParticleFxBangScrapeLodrangeScale(p0: number): void { 
	return _in(0x54e22ea2, 0xc1956a8d, _fv(p0)); 
}

export function setParticleFxBloodScale(p0: number): void { 
	return _in(0x90831126, 0x5d42a820, p0); 
}

export function setParticleFxBulletImpactLodrangeScale(p0: number): void { 
	return _in(0xbb90e12c, 0xac1dab25, _fv(p0)); 
}

export function setParticleFxBulletImpactScale(scale: number): void { 
	return _in(0x27e32866, 0xe9a5c416, _fv(scale)); 
}

export function setParticleFxBulletTraceNoAngleReject(p0: boolean): void { 
	return _in(0xca4ae345, 0xa153d573, p0); 
}

export function setParticleFxCamInsideNonplayerVehicle(vehicle: number, p1: boolean): void { 
	return _in(0xacee6f36, 0x0fc1f6b6, vehicle, p1); 
}

export function setParticleFxCamInsideVehicle(p0: boolean): void { 
	return _in(0xeec40470, 0x28426510, p0); 
}

export function setParticleFxFootLodrangeScale(p0: number): void { 
	return _in(0x949f397a, 0x288b28b3, _fv(p0)); 
}

/**
 * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
 * @param p0
 */
export function setParticleFxFootOverrideName(p0: string): void { 
	return _in(0xba3d1940, 0x57c79a7b, _ts(p0)); 
}

/**
 * Used only once in the scripts (taxi_clowncar)
 * @param toggle
 */
export function setParticleFxForceVehicleInterior(toggle: boolean): void { 
	return _in(0x8cde909a, 0x0370bb3a, toggle); 
}

export function setParticleFxLoopedAlpha(ptfxHandle: number, alpha: number): void { 
	return _in(0x72684513, 0x2380142e, ptfxHandle, _fv(alpha)); 
}

export function setParticleFxLoopedCameraBias(ptfxHandle: number, p1: number): void { 
	return _in(0x4100bf03, 0x46a8d2c3, ptfxHandle, _fv(p1)); 
}

/**
 * only works on some fx's
 * 
 * p4 = 0
 * @param ptfxHandle
 * @param r
 * @param g
 * @param b
 * @param p4
 */
export function setParticleFxLoopedColour(ptfxHandle: number, r: number, g: number, b: number, p4: boolean): void { 
	return _in(0x7f8f6587, 0x7f88783b, ptfxHandle, _fv(r), _fv(g), _fv(b), p4); 
}

export function setParticleFxLoopedEvolution(ptfxHandle: number, propertyName: string, amount: number, noNetwork: boolean): void { 
	return _in(0x5f0c4b5b, 0x1c393be2, ptfxHandle, _ts(propertyName), _fv(amount), noNetwork); 
}

export function setParticleFxLoopedFarClipDist(ptfxHandle: number, range: number): void { 
	return _in(0xdcb194b8, 0x5ef7b541, ptfxHandle, _fv(range)); 
}

export function setParticleFxLoopedOffsets(ptfxHandle: number, x: number, y: number, z: number, rotX: number, rotY: number, rotZ: number): void { 
	return _in(0xf7ddebec, 0x43483c43, ptfxHandle, _fv(x), _fv(y), _fv(z), _fv(rotX), _fv(rotY), _fv(rotZ)); 
}

export function setParticleFxLoopedScale(ptfxHandle: number, scale: number): void { 
	return _in(0xb44250aa, 0xa456492d, ptfxHandle, _fv(scale)); 
}

/**
 * Usage example for C#:
 * 
 * Function.Call(Hash.SET_PARTICLE_FX_NON_LOOPED_ALPHA, new InputArgument[] { 0.1f });
 * 
 * Note: the argument alpha ranges from 0.0f-1.0f !
 * @param alpha
 */
export function setParticleFxNonLoopedAlpha(alpha: number): void { 
	return _in(0x77168d72, 0x2c58b2fc, _fv(alpha)); 
}

/**
 * only works on some fx's, not networked
 * @param r
 * @param g
 * @param b
 */
export function setParticleFxNonLoopedColour(r: number, g: number, b: number): void { 
	return _in(0x26143a59, 0xef48b262, _fv(r), _fv(g), _fv(b)); 
}

export function setParticleFxNonLoopedEmitterSize(p0: number, p1: number, scale: number): void { 
	return _in(0x1e2e01c0, 0x0837d26e, _fv(p0), _fv(p1), _fv(scale)); 
}

export function setParticleFxNonLoopedScale(scale: number): void { 
	return _in(0xb7ef5850, 0xc39fabca, _fv(scale)); 
}

/**
 * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
 * @param oldAsset
 * @param newAsset
 */
export function setParticleFxOverride(oldAsset: string, newAsset: string): void { 
	return _in(0xea1e2d93, 0xf6f75ed9, _ts(oldAsset), _ts(newAsset)); 
}

export function setParticleFxShootoutBoat(p0: number): void { 
	return _in(0x96ef97da, 0xeb89bef5, p0); 
}

export function setParticleFxSlipstreamLodrangeScale(scale: number): void { 
	return _in(0x2b40a976, 0x46381508, _fv(scale)); 
}

export function setPauseExteriorRenderingWhileInInterior(): void { 
	return _in(0x35cce12e, 0xaecb4a51); 
}

export function setPauseMenuActive(toggle: boolean): void { 
	return _in(0xdf47fc56, 0xc71569cf, toggle); 
}

/**
 * Toggles the light state for the pause menu ped in frontend menus.
 * 
 * This is used by R* in combination with `SET_PAUSE_MENU_PED_SLEEP_STATE` to toggle the "offline" or "online" state in the "friends" tab of the pause menu in GTA Online.
 * 
 * 
 * Example:
 * Lights On: https://vespura.com/hi/i/2019-04-01_16-09_540ee_1015.png
 * Lights Off: https://vespura.com/hi/i/2019-04-01_16-10_8b5e7_1016.png
 * @param state
 */
export function setPauseMenuPedLighting(state: boolean): void { 
	return _in(0x3ca60506, 0x92bc61b0, state); 
}

/**
 * Toggles the pause menu ped sleep state for frontend menus.
 * 
 * Example: https://vespura.com/hi/i/2019-04-01_15-51_8ed38_1014.gif
 * 
 * `state` 0 will make the ped slowly fall asleep, 1 will slowly wake the ped up.
 * @param state
 */
export function setPauseMenuPedSleepState(state: boolean): void { 
	return _in(0xecf12834, 0x4e9ff9f1, state); 
}

/**
 * accuracy = 0-100, 100 being perfectly accurate
 * @param ped
 * @param accuracy
 */
export function setPedAccuracy(ped: number, accuracy: number): void { 
	return _in(0x7aefb85c, 0x1d49deb6, ped, accuracy); 
}

export function setPedAiBlipForcedOn(ped: number, toggle: boolean): void { 
	return _in(0x0c4bbf62, 0x5ca98c4e, ped, toggle); 
}

export function setPedAiBlipGangId(ped: number, gangId: number): void { 
	return _in(0xe52b8e7f, 0x85d39a08, ped, gangId); 
}

export function setPedAiBlipHasCone(ped: number, toggle: boolean): void { 
	return _in(0x3eed80df, 0xf7325caa, ped, toggle); 
}

export function setPedAiBlipNoticeRange(ped: number, range: number): void { 
	return _in(0x97c65887, 0xd4b37fa9, ped, _fv(range)); 
}

export function setPedAiBlipSprite(ped: number, spriteId: number): void { 
	return _in(0xfcfacd0d, 0xb9d7a57d, ped, spriteId); 
}

/**
 * value ranges from 0 to 3.
 * @param ped
 * @param value
 */
export function setPedAlertness(ped: number, value: number): void { 
	return _in(0xdba71115, 0xed9941a6, ped, value); 
}

/**
 * ntoggle was always false except in one instance (b678).
 * 
 * The one time this is set to true seems to do with when you fail the mission.
 * @param toggle
 */
export function setPedAllowHurtCombatForAllMissionPeds(toggle: boolean): void { 
	return _in(0xf2bebcdf, 0xafdaa19e, toggle); 
}

export function setPedAllowMinorReactionsAsMissionPed(ped: number, toggle: boolean): void { 
	return _in(0x49e50bdb, 0x8ba4dab2, ped, toggle); 
}

export function setPedAllowVehiclesOverride(ped: number, toggle: boolean): void { 
	return _in(0x3c028c63, 0x6a414ed9, ped, toggle); 
}

export function setPedAllowedToDuck(ped: number, toggle: boolean): void { 
	return _in(0xda1f1b7b, 0xe1a8766f, ped, toggle); 
}

/**
 * stance:
 * 0 = idle
 * 1 = walk
 * 2 = running
 * 
 * p5 = usually set to true
 * 
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * 
 * Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
 * @param ped
 * @param stance
 * @param animDictionary
 * @param animationName
 * @param p4
 * @param p5
 */
export function setPedAlternateMovementAnim(ped: number, stance: number, animDictionary: string, animationName: string, p4: number, p5: boolean): void { 
	return _in(0x90a43cc2, 0x81ffab46, ped, stance, _ts(animDictionary), _ts(animationName), _fv(p4), p5); 
}

/**
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * 
 * Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
 * @param ped
 * @param animDict
 * @param animName
 * @param p3
 * @param p4
 */
export function setPedAlternateWalkAnim(ped: number, animDict: string, animName: string, p3: number, p4: boolean): void { 
	return _in(0x6c60394c, 0xb4f75e9a, ped, _ts(animDict), _ts(animName), _fv(p3), p4); 
}

/**
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param ammo
 * @param p3
 */
export function setPedAmmo(ped: number, weaponHash: number, ammo: number, p3: boolean): void { 
	return _in(0x14e56bc5, 0xb5db6a19, ped, _ch(weaponHash), ammo, p3); 
}

/**
 * Ammo types: https://gist.github.com/root-cause/faf41f59f7a6d818b7db0b839bd147c1
 * @param ped
 * @param ammoTypeHash
 * @param ammo
 */
export function setPedAmmoByType(ped: number, ammoTypeHash: number, ammo: number): void { 
	return _in(0x5fd1e1f0, 0x11e76d7e, ped, _ch(ammoTypeHash), ammo); 
}

export function setPedAmmoToDrop(ped: number, p1: number): void { 
	return _in(0xa4efef94, 0x40a5b0ef, ped, p1); 
}

export function setPedAngledDefensiveArea(ped: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: boolean, p9: boolean): void { 
	return _in(0xc7f76df2, 0x7a5045a1, ped, _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), _fv(p6), _fv(p7), p8, p9); 
}

/**
 * Enable/disable ped shadow (ambient occlusion). https://gfycat.com/thankfulesteemedgecko
 * @param ped
 * @param toggle
 */
export function setPedAoBlobRendering(ped: number, toggle: boolean): void { 
	return _in(0x2b5aa717, 0xa181fb4c, ped, toggle); 
}

/**
 * Sets the armor of the specified ped.
 * 
 * ped: The Ped to set the armor of.
 * amount: A value between 0 and 100 indicating the value to set the Ped's armor to.
 * @param ped
 * @param amount
 */
export function setPedArmour(ped: number, amount: number): void { 
	return _in(0xcea04d83, 0x135264cc, ped, amount); 
}

/**
 * Turns the desired ped into a cop. If you use this on the player ped, you will become almost invisible to cops dispatched for you. You will also report your own crimes, get a generic cop voice, get a cop-vision-cone on the radar, and you will be unable to shoot at other cops. SWAT and Army will still shoot at you. Toggling ped as "false" has no effect; you must change p0's ped model to disable the effect.
 * @param ped
 * @param toggle
 */
export function setPedAsCop(ped: number, toggle: boolean): void { 
	return _in(0xbb03c38d, 0xd3fb7ffd, ped, toggle); 
}

export function setPedAsEnemy(ped: number, toggle: boolean): void { 
	return _in(0x02a0c972, 0x0b854bfa, ped, toggle); 
}

export function setPedAsGroupLeader(ped: number, groupId: number): void { 
	return _in(0x2a781960, 0x5465fbce, ped, groupId); 
}

export function setPedAsGroupMember(ped: number, groupId: number): void { 
	return _in(0x9f3480fe, 0x65db31b5, ped, groupId); 
}

/**
 * This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.
 * @param ped
 */
export function setPedAsNoLongerNeeded(ped: number): number { 
	return _in(0x2595dd42, 0x36549ce3, _ii(ped)); 
}

export function setPedBlendFromParents(ped: number, p1: number, p2: number, p3: number, p4: number): void { 
	return _in(0x137bbd05, 0x230db22d, ped, p1, p2, _fv(p3), _fv(p4)); 
}

export function setPedBlocksPathingWhenDead(ped: number, toggle: boolean): void { 
	return _in(0x576594e8, 0xd64375e2, ped, toggle); 
}

export function setPedBoundsOrientation(ped: number, p1: number, p2: number, x: number, y: number, z: number): void { 
	return _in(0x4f5f651a, 0xccc9c4cf, ped, _fv(p1), _fv(p2), _fv(x), _fv(y), _fv(z)); 
}

export function setPedCanArmIk(ped: number, toggle: boolean): void { 
	return _in(0x6c3b4d6d, 0x13b4c841, ped, toggle); 
}

export function setPedCanBeDraggedOut(ped: number, toggle: boolean): void { 
	return _in(0xc1670e95, 0x8eee24e5, ped, toggle); 
}

/**
 * This native does absolutely nothing, just a nullsub
 * @param p0
 * @param p1
 */
export function setPedCanBeKnockedOffBike(p0: number, p1: number): void { 
	return _in(0xb282749d, 0x5e028163, p0, p1); 
}

/**
 * state: https://alloc8or.re/gta5/doc/enums/eKnockOffVehicle.txt
 * @param ped
 * @param state
 */
export function setPedCanBeKnockedOffVehicle(ped: number, state: number): void { 
	return _in(0x7a653569, 0x1b477c48, ped, state); 
}

export function setPedCanBeShotInVehicle(ped: number, toggle: boolean): void { 
	return _in(0xc7ef1ba8, 0x3230ba07, ped, toggle); 
}

export function setPedCanBeTargetedWhenInjured(ped: number, toggle: boolean): void { 
	return _in(0x638c03b0, 0xf9878f57, ped, toggle); 
}

export function setPedCanBeTargetedWithoutLos(ped: number, toggle: boolean): void { 
	return _in(0x4328652a, 0xe5769c71, ped, toggle); 
}

export function setPedCanBeTargetted(ped: number, toggle: boolean): void { 
	return _in(0x63f58f7c, 0x80513aad, ped, toggle); 
}

export function setPedCanBeTargettedByPlayer(ped: number, player: number, toggle: boolean): void { 
	return _in(0x66b57b72, 0xe0836a76, ped, player, toggle); 
}

export function setPedCanBeTargettedByTeam(ped: number, team: number, toggle: boolean): void { 
	return _in(0xbf1ca778, 0x33e58f2c, ped, team, toggle); 
}

/**
 * It simply makes the said ped to cower behind cover object(wall, desk, car)
 * 
 * Peds flee attributes must be set to not to flee, first. Else, most of the peds, will just flee from gunshot sounds or any other panic situations.
 * @param ped
 * @param toggle
 */
export function setPedCanCowerInCover(ped: number, toggle: boolean): void { 
	return _in(0xcb7553cd, 0xcef4a735, ped, toggle); 
}

export function setPedCanEvasiveDive(ped: number, toggle: boolean): void { 
	return _in(0x6b7a646c, 0x242a7059, ped, toggle); 
}

export function setPedCanHeadIk(ped: number, toggle: boolean): void { 
	return _in(0xc11c1809, 0x2c5530dc, ped, toggle); 
}

export function setPedCanLegIk(ped: number, toggle: boolean): void { 
	return _in(0x73518ece, 0x2485412b, ped, toggle); 
}

export function setPedCanLosePropsOnDamage(ped: number, toggle: boolean, p2: number): void { 
	return _in(0xe861d0b0, 0x5c7662b8, ped, toggle, p2); 
}

export function setPedCanPeekInCover(ped: number, toggle: boolean): void { 
	return _in(0xc514825c, 0x507e3736, ped, toggle); 
}

export function setPedCanPlayAmbientAnims(ped: number, toggle: boolean): void { 
	return _in(0x6373d134, 0x9925a70e, ped, toggle); 
}

export function setPedCanPlayAmbientBaseAnims(ped: number, toggle: boolean): void { 
	return _in(0x0eb0585d, 0x15254740, ped, toggle); 
}

/**
 * Appears only in fm_mission_controller and used only 3 times.
 * 
 * ped was always PLAYER_PED_ID()
 * p1 was always true
 * p2 was always true
 * @param ped
 * @param blockIdleClips
 * @param removeIdleClipIfPlaying
 */
export function setPedCanPlayAmbientIdles(ped: number, blockIdleClips: boolean, removeIdleClipIfPlaying: boolean): void { 
	return _in(0x8fd89a62, 0x40813fd0, ped, blockIdleClips, removeIdleClipIfPlaying); 
}

export function setPedCanPlayGestureAnims(ped: number, toggle: boolean): void { 
	return _in(0xbaf20c54, 0x32058024, ped, toggle); 
}

/**
 * Toggles config flag CPED_CONFIG_FLAG_CanPlayInCarIdles.
 * @param ped
 * @param toggle
 */
export function setPedCanPlayInCarIdles(ped: number, toggle: boolean): void { 
	return _in(0x820e9892, 0xa77e97cd, ped, toggle); 
}

/**
 * p2 usually 0
 * @param ped
 * @param toggle
 * @param p2
 */
export function setPedCanPlayVisemeAnims(ped: number, toggle: boolean, p2: boolean): void { 
	return _in(0xf833ddba, 0x3b104d43, ped, toggle, p2); 
}

export function setPedCanRagdoll(ped: number, toggle: boolean): void { 
	return _in(0xb1283770, 0x56a54e2a, ped, toggle); 
}

export function setPedCanRagdollFromPlayerImpact(ped: number, toggle: boolean): void { 
	return _in(0xdf993ee5, 0xe90aba25, ped, toggle); 
}

export function setPedCanSmashGlass(ped: number, p1: boolean, p2: boolean): void { 
	return _in(0x1cce1414, 0x67ff42a2, ped, p1, p2); 
}

export function setPedCanSwitchWeapon(ped: number, toggle: boolean): void { 
	return _in(0xed7f7efe, 0x9fabf340, ped, toggle); 
}

/**
 * This only will teleport the ped to the group leader if the group leader teleports (sets coords).
 * 
 * Only works in singleplayer
 * @param pedHandle
 * @param groupHandle
 * @param toggle
 */
export function setPedCanTeleportToGroupLeader(pedHandle: number, groupHandle: number, toggle: boolean): void { 
	return _in(0x2e2f4240, 0xb3f24647, pedHandle, groupHandle, toggle); 
}

export function setPedCanTorsoIk(ped: number, toggle: boolean): void { 
	return _in(0xf2b7106d, 0x37947ce0, ped, toggle); 
}

export function setPedCanTorsoReactIk(ped: number, p1: boolean): void { 
	return _in(0xf5846edb, 0x26a98a24, ped, p1); 
}

export function setPedCanTorsoVehicleIk(ped: number, p1: boolean): void { 
	return _in(0x6647c5f6, 0xf5792496, ped, p1); 
}

export function setPedCanUseAutoConversationLookat(ped: number, toggle: boolean): void { 
	return _in(0xec4686ec, 0x06434678, ped, toggle); 
}

/**
 * Overrides the ped's collision capsule radius for the current tick.
 * Must be called every tick to be effective.
 * 
 * Setting this to 0.001 will allow warping through some objects.
 * @param ped
 * @param value
 */
export function setPedCapsule(ped: number, value: number): void { 
	return _in(0x364df566, 0xec833de2, ped, _fv(value)); 
}

export function setPedChanceOfFiringBlanks(ped: number, xBias: number, yBias: number): void { 
	return _in(0x83786272, 0x01d5497d, ped, _fv(xBias), _fv(yBias)); 
}

/**
 * Enables/disables ped's "quiet" footstep sound.
 * @param ped
 * @param toggle
 */
export function setPedClothEventsEnabled(ped: number, toggle: boolean): void { 
	return _in(0x29da3ca8, 0xd8b2692d, ped, toggle); 
}

export function setPedClothPackageIndex(p0: number, p1: number): void { 
	return _in(0x82a3d6d9, 0xcc2cb8e3, p0, p1); 
}

export function setPedClothPinFrames(p0: number, p1: number): void { 
	return _in(0x78c4e996, 0x1db3eb5b, p0, p1); 
}

export function setPedClothProne(p0: number, p1: boolean): void { 
	return _in(0xa660faf5, 0x50eb37e5, p0, p1); 
}

/**
 * enum eCombatAbility // 0xE793438C
 * {
 * CA_Poor,
 * CA_Average,
 * CA_Professional,
 * CA_NumTypes
 * };
 * @param ped
 * @param abilityLevel
 */
export function setPedCombatAbility(ped: number, abilityLevel: number): void { 
	return _in(0xc7622c0d, 0x36b2fda8, ped, abilityLevel); 
}

/**
 * enum eCombatAttributes // 0x0E8E7201
 * {
 * BF_CanUseCover = 0,
 * BF_CanUseVehicles = 1,
 * BF_CanDoDrivebys = 2,
 * BF_CanLeaveVehicle = 3,
 * BF_CanUseDynamicStrafeDecisions = 4,
 * BF_AlwaysFight = 5,
 * BF_0x66BB9FCC = 6,
 * BF_0x6837DA41 = 7,
 * BF_0xB4A13A5A = 8,
 * BF_0xEE326AAD = 9,
 * BF_0x7DF2CCFA = 10,
 * BF_0x0036D422 = 11,
 * BF_BlindFireWhenInCover = 12,
 * BF_Aggressive = 13,
 * BF_CanInvestigate = 14,
 * BF_HasRadio = 15,
 * BF_0x6BDE28D1 = 16,
 * BF_AlwaysFlee = 17,
 * BF_0x7852797D = 18,
 * BF_0x33497B95 = 19,
 * BF_CanTauntInVehicle = 20,
 * BF_CanChaseTargetOnFoot = 21,
 * BF_WillDragInjuredPedsToSafety = 22,
 * BF_0xCD7168B8 = 23,
 * BF_UseProximityFiringRate = 24,
 * BF_0x48F914F8 = 25,
 * BF_0x2EA543D0 = 26,
 * BF_PerfectAccuracy = 27,
 * BF_CanUseFrustratedAdvance = 28,
 * BF_0x3D131AC1 = 29,
 * BF_0x3AD95F27 = 30,
 * BF_MaintainMinDistanceToTarget = 31,
 * BF_0xEAD68AD2 = 32,
 * BF_0xA206C2E0 = 33,
 * BF_CanUsePeekingVariations = 34,
 * BF_0xA5715184 = 35,
 * BF_0xD5265533 = 36,
 * BF_0x2B84C2BF = 37,
 * BF_DisableBulletReactions = 38,
 * BF_CanBust = 39,
 * BF_0xAA525726 = 40,
 * BF_CanCommandeerVehicles = 41,
 * BF_CanFlank = 42,
 * BF_SwitchToAdvanceIfCantFindCover = 43,
 * BF_SwitchToDefensiveIfInCover = 44,
 * BF_0xEB4786A0 = 45,
 * BF_CanFightArmedPedsWhenNotArmed = 46,
 * BF_0xA08E9402 = 47,
 * BF_0x952EAD7D = 48,
 * BF_UseEnemyAccuracyScaling = 49,
 * BF_CanCharge = 50,
 * BF_0xDA8C2BD3 = 51,
 * BF_0x6562F017 = 52,
 * BF_0xA2C3D53B = 53,
 * BF_AlwaysEquipBestWeapon = 54,
 * BF_CanSeeUnderwaterPeds = 55,
 * BF_0xF619486B = 56,
 * BF_0x61EB63A3 = 57,
 * BF_DisableFleeFromCombat = 58,
 * BF_0x8976D12B = 59,
 * BF_CanThrowSmokeGrenade = 60,
 * BF_NonMissionPedsFleeFromThisPedUnlessArmed = 61,
 * BF_0x5452A10C = 62,
 * BF_FleesFromInvincibleOpponents = 63,
 * BF_DisableBlockFromPursueDuringVehicleChase = 64,
 * BF_DisableSpinOutDuringVehicleChase = 65,
 * BF_DisableCruiseInFrontDuringBlockDuringVehicleChase = 66,
 * BF_0x0B404731 = 67,
 * BF_DisableReactToBuddyShot = 68,
 * BF_0x7FFD6AEB = 69,
 * BF_0x51F4AEF8 = 70,
 * BF_PermitChargeBeyondDefensiveArea = 71,
 * BF_0x63E0A8E2 = 72,
 * BF_0xDF974436 = 73,
 * BF_0x556C080B = 74,
 * BF_0xA4D50035 = 75,
 * BF_SetDisableShoutTargetPositionOnCombatStart = 76,
 * BF_DisableRespondedToThreatBroadcast = 77,
 * BF_0xCBB01765 = 78,
 * BF_0x4F862ED4 = 79,
 * BF_0xEF9C7C40 = 80,
 * BF_0xE51B494F = 81,
 * BF_0x054D0199 = 82,
 * BF_0xD36BCE94 = 83,
 * BF_0xFB11F690 = 84,
 * BF_0xD208A9AD = 85,
 * BF_AllowDogFighting = 86,
 * BF_0x07A6E531 = 87,
 * BF_0x34F9317B = 88,
 * BF_0x4240F5A9 = 89,
 * BF_0xEE129DBD = 90,
 * BF_0x053AEAD9 = 91
 * };
 * @param ped
 * @param attributeId
 * @param enabled
 */
export function setPedCombatAttributes(ped: number, attributeId: number, enabled: boolean): void { 
	return _in(0x9f779473, 0x0795e019, ped, attributeId, enabled); 
}

/**
 * enum eCombatMovement // 0x4F456B61
 * {
 * CM_Stationary,
 * CM_Defensive,
 * CM_WillAdvance,
 * CM_WillRetreat
 * };
 * @param ped
 * @param combatMovement
 */
export function setPedCombatMovement(ped: number, combatMovement: number): void { 
	return _in(0x4d9ca100, 0x9afbd057, ped, combatMovement); 
}

/**
 * enum eCombatRange // 0xB69160F5
 * {
 * CR_Near,
 * CR_Medium,
 * CR_Far,
 * CR_VeryFar,
 * CR_NumRanges
 * };
 * @param ped
 * @param combatRange
 */
export function setPedCombatRange(ped: number, combatRange: number): void { 
	return _in(0x3c606747, 0xb23e497b, ped, combatRange); 
}

/**
 * paletteId: 0 to 3.
 * 
 * componentId:
 * enum ePedVarComp
 * {
 * PV_COMP_INVALID = -1,
 * PV_COMP_HEAD,
 * PV_COMP_BERD,
 * PV_COMP_HAIR,
 * PV_COMP_UPPR,
 * PV_COMP_LOWR,
 * PV_COMP_HAND,
 * PV_COMP_FEET,
 * PV_COMP_TEEF,
 * PV_COMP_ACCS,
 * PV_COMP_TASK,
 * PV_COMP_DECL,
 * PV_COMP_JBIB,
 * PV_COMP_MAX
 * };
 * 
 * Examples: https://gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
 * 
 * Full list of ped components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedComponentVariations.json
 * @param ped
 * @param componentId
 * @param drawableId
 * @param textureId
 * @param paletteId
 */
export function setPedComponentVariation(ped: number, componentId: number, drawableId: number, textureId: number, paletteId: number): void { 
	return _in(0x262b14f4, 0x8d29de80, ped, componentId, drawableId, textureId, paletteId); 
}

/**
 * enum ePedConfigFlags
 * {
 * _CPED_CONFIG_FLAG_0xC63DE95E = 1,
 * CPED_CONFIG_FLAG_NoCriticalHits = 2,
 * CPED_CONFIG_FLAG_DrownsInWater = 3,
 * CPED_CONFIG_FLAG_DisableReticuleFixedLockon = 4,
 * _CPED_CONFIG_FLAG_0x37D196F4 = 5,
 * _CPED_CONFIG_FLAG_0xE2462399 = 6,
 * CPED_CONFIG_FLAG_UpperBodyDamageAnimsOnly = 7,
 * _CPED_CONFIG_FLAG_0xEDDEB838 = 8,
 * _CPED_CONFIG_FLAG_0xB398B6FD = 9,
 * _CPED_CONFIG_FLAG_0xF6664E68 = 10,
 * _CPED_CONFIG_FLAG_0xA05E7CA3 = 11,
 * _CPED_CONFIG_FLAG_0xCE394045 = 12,
 * CPED_CONFIG_FLAG_NeverLeavesGroup = 13,
 * _CPED_CONFIG_FLAG_0xCD8D1411 = 14,
 * _CPED_CONFIG_FLAG_0xB031F1A9 = 15,
 * _CPED_CONFIG_FLAG_0xFE65BEE3 = 16,
 * CPED_CONFIG_FLAG_BlockNonTemporaryEvents = 17,
 * _CPED_CONFIG_FLAG_0x380165BD = 18,
 * _CPED_CONFIG_FLAG_0x07C045C7 = 19,
 * _CPED_CONFIG_FLAG_0x583B5E2D = 20,
 * _CPED_CONFIG_FLAG_0x475EDA58 = 21,
 * _CPED_CONFIG_FLAG_0x8629D05B = 22,
 * _CPED_CONFIG_FLAG_0x1522968B = 23,
 * CPED_CONFIG_FLAG_IgnoreSeenMelee = 24,
 * _CPED_CONFIG_FLAG_0x4CC09C4B = 25,
 * _CPED_CONFIG_FLAG_0x034F3053 = 26,
 * _CPED_CONFIG_FLAG_0xD91BA7CC = 27,
 * _CPED_CONFIG_FLAG_0x5C8DC66E = 28,
 * CPED_CONFIG_FLAG_GetOutUndriveableVehicle = 29,
 * _CPED_CONFIG_FLAG_0x6580B9D2 = 30,
 * _CPED_CONFIG_FLAG_0x0EF7A297 = 31,
 * CPED_CONFIG_FLAG_WillFlyThruWindscreen = 32,
 * CPED_CONFIG_FLAG_DieWhenRagdoll = 33,
 * CPED_CONFIG_FLAG_HasHelmet = 34,
 * CPED_CONFIG_FLAG_UseHelmet = 35,
 * CPED_CONFIG_FLAG_DontTakeOffHelmet = 36,
 * _CPED_CONFIG_FLAG_0xB130D17B = 37,
 * _CPED_CONFIG_FLAG_0x5F071200 = 38,
 * CPED_CONFIG_FLAG_DisableEvasiveDives = 39,
 * _CPED_CONFIG_FLAG_0xC287AAFF = 40,
 * _CPED_CONFIG_FLAG_0x203328CC = 41,
 * CPED_CONFIG_FLAG_DontInfluenceWantedLevel = 42,
 * CPED_CONFIG_FLAG_DisablePlayerLockon = 43,
 * CPED_CONFIG_FLAG_DisableLockonToRandomPeds = 44,
 * CPED_CONFIG_FLAG_AllowLockonToFriendlyPlayers = 45,
 * _CPED_CONFIG_FLAG_0xDB115BFA = 46,
 * CPED_CONFIG_FLAG_PedBeingDeleted = 47,
 * CPED_CONFIG_FLAG_BlockWeaponSwitching = 48,
 * _CPED_CONFIG_FLAG_0xF8E99565 = 49,
 * _CPED_CONFIG_FLAG_0xDD17FEE6 = 50,
 * _CPED_CONFIG_FLAG_0x7ED9B2C9 = 51,
 * _CPED_CONFIG_FLAG_NoCollison = 52,
 * _CPED_CONFIG_FLAG_0x5A6C1F6E = 53,
 * _CPED_CONFIG_FLAG_0xD749FC41 = 54,
 * _CPED_CONFIG_FLAG_0x357F63F3 = 55,
 * _CPED_CONFIG_FLAG_0xC5E60961 = 56,
 * _CPED_CONFIG_FLAG_0x29275C3E = 57,
 * CPED_CONFIG_FLAG_IsFiring = 58,
 * CPED_CONFIG_FLAG_WasFiring = 59,
 * CPED_CONFIG_FLAG_IsStanding = 60,
 * CPED_CONFIG_FLAG_WasStanding = 61,
 * CPED_CONFIG_FLAG_InVehicle = 62,
 * CPED_CONFIG_FLAG_OnMount = 63,
 * CPED_CONFIG_FLAG_AttachedToVehicle = 64,
 * CPED_CONFIG_FLAG_IsSwimming = 65,
 * CPED_CONFIG_FLAG_WasSwimming = 66,
 * CPED_CONFIG_FLAG_IsSkiing = 67,
 * CPED_CONFIG_FLAG_IsSitting = 68,
 * CPED_CONFIG_FLAG_KilledByStealth = 69,
 * CPED_CONFIG_FLAG_KilledByTakedown = 70,
 * CPED_CONFIG_FLAG_Knockedout = 71,
 * _CPED_CONFIG_FLAG_0x3E3C4560 = 72,
 * _CPED_CONFIG_FLAG_0x2994C7B7 = 73,
 * _CPED_CONFIG_FLAG_0x6D59D275 = 74,
 * CPED_CONFIG_FLAG_UsingCoverPoint = 75,
 * CPED_CONFIG_FLAG_IsInTheAir = 76,
 * _CPED_CONFIG_FLAG_0x2D493FB7 = 77,
 * CPED_CONFIG_FLAG_IsAimingGun = 78,
 * _CPED_CONFIG_FLAG_0x14D69875 = 79,
 * _CPED_CONFIG_FLAG_0x40B05311 = 80,
 * _CPED_CONFIG_FLAG_0x8B230BC5 = 81,
 * _CPED_CONFIG_FLAG_0xC74E5842 = 82,
 * _CPED_CONFIG_FLAG_0x9EA86147 = 83,
 * _CPED_CONFIG_FLAG_0x674C746C = 84,
 * _CPED_CONFIG_FLAG_0x3E56A8C2 = 85,
 * _CPED_CONFIG_FLAG_0xC144A1EF = 86,
 * _CPED_CONFIG_FLAG_0x0548512D = 87,
 * _CPED_CONFIG_FLAG_0x31C93909 = 88,
 * _CPED_CONFIG_FLAG_0xA0269315 = 89,
 * _CPED_CONFIG_FLAG_0xD4D59D4D = 90,
 * _CPED_CONFIG_FLAG_0x411D4420 = 91,
 * _CPED_CONFIG_FLAG_0xDF4AEF0D = 92,
 * CPED_CONFIG_FLAG_ForcePedLoadCover = 93,
 * _CPED_CONFIG_FLAG_0x300E4CD3 = 94,
 * _CPED_CONFIG_FLAG_0xF1C5BF04 = 95,
 * _CPED_CONFIG_FLAG_0x89C2EF13 = 96,
 * CPED_CONFIG_FLAG_VaultFromCover = 97,
 * _CPED_CONFIG_FLAG_0x02A852C8 = 98,
 * _CPED_CONFIG_FLAG_0x3D9407F1 = 99,
 * _CPED_CONFIG_FLAG_IsDrunk = 100, // 0x319B4558
 * CPED_CONFIG_FLAG_ForcedAim = 101,
 * _CPED_CONFIG_FLAG_0xB942D71A = 102,
 * _CPED_CONFIG_FLAG_0xD26C55A8 = 103,
 * CPED_CONFIG_FLAG_OpenDoorArmIK = 104,
 * CPED_CONFIG_FLAG_ForceReload = 105,
 * CPED_CONFIG_FLAG_DontActivateRagdollFromVehicleImpact = 106,
 * CPED_CONFIG_FLAG_DontActivateRagdollFromBulletImpact = 107,
 * CPED_CONFIG_FLAG_DontActivateRagdollFromExplosions = 108,
 * CPED_CONFIG_FLAG_DontActivateRagdollFromFire = 109,
 * CPED_CONFIG_FLAG_DontActivateRagdollFromElectrocution = 110,
 * _CPED_CONFIG_FLAG_0x83C0A4BF = 111,
 * _CPED_CONFIG_FLAG_0x0E0FAF8C = 112,
 * CPED_CONFIG_FLAG_KeepWeaponHolsteredUnlessFired = 113,
 * _CPED_CONFIG_FLAG_0x43B80B79 = 114,
 * _CPED_CONFIG_FLAG_0x0D2A9309 = 115,
 * CPED_CONFIG_FLAG_GetOutBurningVehicle = 116,
 * CPED_CONFIG_FLAG_BumpedByPlayer = 117,
 * CPED_CONFIG_FLAG_RunFromFiresAndExplosions = 118,
 * CPED_CONFIG_FLAG_TreatAsPlayerDuringTargeting = 119,
 * CPED_CONFIG_FLAG_IsHandCuffed = 120,
 * CPED_CONFIG_FLAG_IsAnkleCuffed = 121,
 * CPED_CONFIG_FLAG_DisableMelee = 122,
 * CPED_CONFIG_FLAG_DisableUnarmedDrivebys = 123,
 * CPED_CONFIG_FLAG_JustGetsPulledOutWhenElectrocuted = 124,
 * _CPED_CONFIG_FLAG_0x5FED6BFD = 125,
 * CPED_CONFIG_FLAG_WillNotHotwireLawEnforcementVehicle = 126,
 * CPED_CONFIG_FLAG_WillCommandeerRatherThanJack = 127,
 * CPED_CONFIG_FLAG_CanBeAgitated = 128,
 * CPED_CONFIG_FLAG_ForcePedToFaceLeftInCover = 129,
 * CPED_CONFIG_FLAG_ForcePedToFaceRightInCover = 130,
 * CPED_CONFIG_FLAG_BlockPedFromTurningInCover = 131,
 * CPED_CONFIG_FLAG_KeepRelationshipGroupAfterCleanUp = 132,
 * CPED_CONFIG_FLAG_ForcePedToBeDragged = 133,
 * CPED_CONFIG_FLAG_PreventPedFromReactingToBeingJacked = 134,
 * CPED_CONFIG_FLAG_IsScuba = 135,
 * CPED_CONFIG_FLAG_WillArrestRatherThanJack = 136,
 * CPED_CONFIG_FLAG_RemoveDeadExtraFarAway = 137,
 * CPED_CONFIG_FLAG_RidingTrain = 138,
 * CPED_CONFIG_FLAG_ArrestResult = 139,
 * CPED_CONFIG_FLAG_CanAttackFriendly = 140,
 * CPED_CONFIG_FLAG_WillJackAnyPlayer = 141,
 * _CPED_CONFIG_FLAG_0x6901E731 = 142,
 * _CPED_CONFIG_FLAG_0x9EC9BF6C = 143,
 * CPED_CONFIG_FLAG_WillJackWantedPlayersRatherThanStealCar = 144,
 * CPED_CONFIG_FLAG_ShootingAnimFlag = 145,
 * CPED_CONFIG_FLAG_DisableLadderClimbing = 146,
 * CPED_CONFIG_FLAG_StairsDetected = 147,
 * CPED_CONFIG_FLAG_SlopeDetected = 148,
 * _CPED_CONFIG_FLAG_0x1A15670B = 149,
 * CPED_CONFIG_FLAG_CowerInsteadOfFlee = 150,
 * CPED_CONFIG_FLAG_CanActivateRagdollWhenVehicleUpsideDown = 151,
 * CPED_CONFIG_FLAG_AlwaysRespondToCriesForHelp = 152,
 * CPED_CONFIG_FLAG_DisableBloodPoolCreation = 153,
 * CPED_CONFIG_FLAG_ShouldFixIfNoCollision = 154,
 * CPED_CONFIG_FLAG_CanPerformArrest = 155,
 * CPED_CONFIG_FLAG_CanPerformUncuff = 156,
 * CPED_CONFIG_FLAG_CanBeArrested = 157,
 * _CPED_CONFIG_FLAG_0xF7960FF5 = 158,
 * CPED_CONFIG_FLAG_PlayerPreferFrontSeatMP = 159,
 * _CPED_CONFIG_FLAG_0x0C6C3099 = 160,
 * _CPED_CONFIG_FLAG_0x645F927A = 161,
 * _CPED_CONFIG_FLAG_0xA86549B9 = 162,
 * _CPED_CONFIG_FLAG_0x8AAF337A = 163,
 * _CPED_CONFIG_FLAG_0x13BAA6E7 = 164,
 * _CPED_CONFIG_FLAG_0x5FB9D1F5 = 165,
 * CPED_CONFIG_FLAG_IsInjured = 166,
 * CPED_CONFIG_FLAG_DontEnterVehiclesInPlayersGroup = 167,
 * _CPED_CONFIG_FLAG_0xD8072639 = 168,
 * CPED_CONFIG_FLAG_PreventAllMeleeTaunts = 169,
 * CPED_CONFIG_FLAG_ForceDirectEntry = 170,
 * CPED_CONFIG_FLAG_AlwaysSeeApproachingVehicles = 171,
 * CPED_CONFIG_FLAG_CanDiveAwayFromApproachingVehicles = 172,
 * CPED_CONFIG_FLAG_AllowPlayerToInterruptVehicleEntryExit = 173,
 * CPED_CONFIG_FLAG_OnlyAttackLawIfPlayerIsWanted = 174,
 * _CPED_CONFIG_FLAG_0x90008BFA = 175,
 * _CPED_CONFIG_FLAG_0x07C7A910 = 176,
 * CPED_CONFIG_FLAG_PedsJackingMeDontGetIn = 177,
 * _CPED_CONFIG_FLAG_0xCE4E8BE2 = 178,
 * CPED_CONFIG_FLAG_PedIgnoresAnimInterruptEvents = 179,
 * CPED_CONFIG_FLAG_IsInCustody = 180,
 * CPED_CONFIG_FLAG_ForceStandardBumpReactionThresholds = 181,
 * CPED_CONFIG_FLAG_LawWillOnlyAttackIfPlayerIsWanted = 182,
 * CPED_CONFIG_FLAG_IsAgitated = 183,
 * CPED_CONFIG_FLAG_PreventAutoShuffleToDriversSeat = 184,
 * CPED_CONFIG_FLAG_UseKinematicModeWhenStationary = 185,
 * CPED_CONFIG_FLAG_EnableWeaponBlocking = 186,
 * CPED_CONFIG_FLAG_HasHurtStarted = 187,
 * CPED_CONFIG_FLAG_DisableHurt = 188,
 * CPED_CONFIG_FLAG_PlayerIsWeird = 189,
 * _CPED_CONFIG_FLAG_0x32FC208B = 190,
 * _CPED_CONFIG_FLAG_0x0C296E5A = 191,
 * _CPED_CONFIG_FLAG_0xE63B73EC = 192,
 * CPED_CONFIG_FLAG_DoNothingWhenOnFootByDefault = 193,
 * CPED_CONFIG_FLAG_UsingScenario = 194,
 * CPED_CONFIG_FLAG_VisibleOnScreen = 195,
 * _CPED_CONFIG_FLAG_0xD88C58A1 = 196,
 * _CPED_CONFIG_FLAG_0x5A3DCF43 = 197,
 * _CPED_CONFIG_FLAG_0xEA02B420 = 198,
 * CPED_CONFIG_FLAG_DontActivateRagdollOnVehicleCollisionWhenDead = 199,
 * CPED_CONFIG_FLAG_HasBeenInArmedCombat = 200,
 * _CPED_CONFIG_FLAG_0x5E6466F6 = 201,
 * CPED_CONFIG_FLAG_Avoidance_Ignore_All = 202,
 * CPED_CONFIG_FLAG_Avoidance_Ignored_by_All = 203,
 * CPED_CONFIG_FLAG_Avoidance_Ignore_Group1 = 204,
 * CPED_CONFIG_FLAG_Avoidance_Member_of_Group1 = 205,
 * CPED_CONFIG_FLAG_ForcedToUseSpecificGroupSeatIndex = 206,
 * _CPED_CONFIG_FLAG_0x415B26B9 = 207,
 * CPED_CONFIG_FLAG_DisableExplosionReactions = 208,
 * CPED_CONFIG_FLAG_DodgedPlayer = 209,
 * CPED_CONFIG_FLAG_WaitingForPlayerControlInterrupt = 210,
 * CPED_CONFIG_FLAG_ForcedToStayInCover = 211,
 * CPED_CONFIG_FLAG_GeneratesSoundEvents = 212,
 * CPED_CONFIG_FLAG_ListensToSoundEvents = 213,
 * CPED_CONFIG_FLAG_AllowToBeTargetedInAVehicle = 214,
 * CPED_CONFIG_FLAG_WaitForDirectEntryPointToBeFreeWhenExiting = 215,
 * CPED_CONFIG_FLAG_OnlyRequireOnePressToExitVehicle = 216,
 * CPED_CONFIG_FLAG_ForceExitToSkyDive = 217,
 * _CPED_CONFIG_FLAG_0x3C7DF9DF = 218,
 * _CPED_CONFIG_FLAG_0x848FFEF2 = 219,
 * CPED_CONFIG_FLAG_DontEnterLeadersVehicle = 220,
 * CPED_CONFIG_FLAG_DisableExitToSkyDive = 221,
 * _CPED_CONFIG_FLAG_0x84F722FA = 222,
 * _CPED_CONFIG_FLAG_Shrink = 223, // 0xD1B87B1F
 * _CPED_CONFIG_FLAG_0x728AA918 = 224,
 * CPED_CONFIG_FLAG_DisablePotentialToBeWalkedIntoResponse = 225,
 * CPED_CONFIG_FLAG_DisablePedAvoidance = 226,
 * CPED_CONFIG_FLAG_ForceRagdollUponDeath = 227,
 * _CPED_CONFIG_FLAG_0x1EA7225F = 228,
 * CPED_CONFIG_FLAG_DisablePanicInVehicle = 229,
 * CPED_CONFIG_FLAG_AllowedToDetachTrailer = 230,
 * _CPED_CONFIG_FLAG_0xFC3E572D = 231,
 * _CPED_CONFIG_FLAG_0x08E9F9CF = 232,
 * _CPED_CONFIG_FLAG_0x2D3BA52D = 233,
 * _CPED_CONFIG_FLAG_0xFD2F53EA = 234,
 * _CPED_CONFIG_FLAG_0x31A1B03B = 235,
 * CPED_CONFIG_FLAG_IsHoldingProp = 236,
 * CPED_CONFIG_FLAG_BlocksPathingWhenDead = 237,
 * _CPED_CONFIG_FLAG_0xCE57C9A3 = 238,
 * _CPED_CONFIG_FLAG_0x26149198 = 239,
 * CPED_CONFIG_FLAG_ForceSkinCharacterCloth = 240,
 * CPED_CONFIG_FLAG_LeaveEngineOnWhenExitingVehicles = 241,
 * CPED_CONFIG_FLAG_PhoneDisableTextingAnimations = 242,
 * CPED_CONFIG_FLAG_PhoneDisableTalkingAnimations = 243,
 * CPED_CONFIG_FLAG_PhoneDisableCameraAnimations = 244,
 * CPED_CONFIG_FLAG_DisableBlindFiringInShotReactions = 245,
 * CPED_CONFIG_FLAG_AllowNearbyCoverUsage = 246,
 * _CPED_CONFIG_FLAG_0x0C754ACA = 247,
 * CPED_CONFIG_FLAG_CanPlayInCarIdles = 248,
 * CPED_CONFIG_FLAG_CanAttackNonWantedPlayerAsLaw = 249,
 * CPED_CONFIG_FLAG_WillTakeDamageWhenVehicleCrashes = 250,
 * CPED_CONFIG_FLAG_AICanDrivePlayerAsRearPassenger = 251,
 * CPED_CONFIG_FLAG_PlayerCanJackFriendlyPlayers = 252,
 * CPED_CONFIG_FLAG_OnStairs = 253,
 * _CPED_CONFIG_FLAG_0xE1A2F73F = 254,
 * CPED_CONFIG_FLAG_AIDriverAllowFriendlyPassengerSeatEntry = 255,
 * _CPED_CONFIG_FLAG_0xF1EB20A9 = 256,
 * CPED_CONFIG_FLAG_AllowMissionPedToUseInjuredMovement = 257,
 * _CPED_CONFIG_FLAG_0x329DCF1A = 258,
 * _CPED_CONFIG_FLAG_0x8D90DD1B = 259,
 * _CPED_CONFIG_FLAG_0xB8A292B7 = 260,
 * CPED_CONFIG_FLAG_PreventUsingLowerPrioritySeats = 261,
 * _CPED_CONFIG_FLAG_0x2AF558F0 = 262,
 * _CPED_CONFIG_FLAG_0x82251455 = 263,
 * _CPED_CONFIG_FLAG_0x30CF498B = 264,
 * _CPED_CONFIG_FLAG_0xE1CD50AF = 265,
 * _CPED_CONFIG_FLAG_0x72E4AE48 = 266,
 * _CPED_CONFIG_FLAG_0xC2657EA1 = 267,
 * CPED_CONFIG_FLAG_TeleportToLeaderVehicle = 268,
 * CPED_CONFIG_FLAG_Avoidance_Ignore_WeirdPedBuffer = 269,
 * CPED_CONFIG_FLAG_OnStairSlope = 270,
 * _CPED_CONFIG_FLAG_0xA0897933 = 271,
 * CPED_CONFIG_FLAG_DontBlipCop = 272,
 * CPED_CONFIG_FLAG_ClimbedShiftedFence = 273,
 * _CPED_CONFIG_FLAG_0xF7823618 = 274,
 * CPED_CONFIG_FLAG_KillWhenTrapped = 275,
 * CPED_CONFIG_FLAG_EdgeDetected = 276,
 * _CPED_CONFIG_FLAG_0x92B67896 = 277,
 * _CPED_CONFIG_FLAG_0xCAD677C9 = 278,
 * CPED_CONFIG_FLAG_AvoidTearGas = 279,
 * _CPED_CONFIG_FLAG_0x5276AC7B = 280,
 * CPED_CONFIG_FLAG_DisableGoToWritheWhenInjured = 281,
 * CPED_CONFIG_FLAG_OnlyUseForcedSeatWhenEnteringHeliInGroup = 282,
 * _CPED_CONFIG_FLAG_0x9139724D = 283,
 * _CPED_CONFIG_FLAG_0xA1457461 = 284,
 * CPED_CONFIG_FLAG_DisableWeirdPedEvents = 285,
 * CPED_CONFIG_FLAG_ShouldChargeNow = 286,
 * CPED_CONFIG_FLAG_RagdollingOnBoat = 287,
 * CPED_CONFIG_FLAG_HasBrandishedWeapon = 288,
 * _CPED_CONFIG_FLAG_0x1B9EE8A1 = 289,
 * _CPED_CONFIG_FLAG_0xF3F5758C = 290,
 * _CPED_CONFIG_FLAG_0x2A9307F1 = 291,
 * _CPED_CONFIG_FLAG_FreezePosition = 292, // 0x7403D216
 * _CPED_CONFIG_FLAG_0xA06A3C6C = 293,
 * CPED_CONFIG_FLAG_DisableShockingEvents = 294,
 * _CPED_CONFIG_FLAG_0xF8DA25A5 = 295,
 * CPED_CONFIG_FLAG_NeverReactToPedOnRoof = 296,
 * _CPED_CONFIG_FLAG_0xB31F1187 = 297,
 * _CPED_CONFIG_FLAG_0x84315402 = 298,
 * CPED_CONFIG_FLAG_DisableShockingDrivingOnPavementEvents = 299,
 * _CPED_CONFIG_FLAG_0xC7829B67 = 300,
 * CPED_CONFIG_FLAG_DisablePedConstraints = 301,
 * CPED_CONFIG_FLAG_ForceInitialPeekInCover = 302,
 * _CPED_CONFIG_FLAG_0x2ADA871B = 303,
 * _CPED_CONFIG_FLAG_0x47BC8A58 = 304,
 * CPED_CONFIG_FLAG_DisableJumpingFromVehiclesAfterLeader = 305,
 * _CPED_CONFIG_FLAG_0x4A133C50 = 306,
 * _CPED_CONFIG_FLAG_0xC58099C3 = 307,
 * _CPED_CONFIG_FLAG_0xF3D76D41 = 308,
 * _CPED_CONFIG_FLAG_0xB0EEE9F2 = 309,
 * CPED_CONFIG_FLAG_IsInCluster = 310,
 * CPED_CONFIG_FLAG_ShoutToGroupOnPlayerMelee = 311,
 * CPED_CONFIG_FLAG_IgnoredByAutoOpenDoors = 312,
 * _CPED_CONFIG_FLAG_0xD4136C22 = 313,
 * CPED_CONFIG_FLAG_ForceIgnoreMeleeActiveCombatant = 314,
 * CPED_CONFIG_FLAG_CheckLoSForSoundEvents = 315,
 * _CPED_CONFIG_FLAG_0xD5C98277 = 316,
 * CPED_CONFIG_FLAG_CanSayFollowedByPlayerAudio = 317,
 * CPED_CONFIG_FLAG_ActivateRagdollFromMinorPlayerContact = 318,
 * _CPED_CONFIG_FLAG_0xD8BE1D54 = 319,
 * CPED_CONFIG_FLAG_ForcePoseCharacterCloth = 320,
 * CPED_CONFIG_FLAG_HasClothCollisionBounds = 321,
 * CPED_CONFIG_FLAG_HasHighHeels = 322,
 * _CPED_CONFIG_FLAG_0x86B01E54 = 323,
 * CPED_CONFIG_FLAG_DontBehaveLikeLaw = 324,
 * _CPED_CONFIG_FLAG_0xC03B736C = 325, // SpawnedAtScenario?
 * CPED_CONFIG_FLAG_DisablePoliceInvestigatingBody = 326,
 * CPED_CONFIG_FLAG_DisableWritheShootFromGround = 327,
 * CPED_CONFIG_FLAG_LowerPriorityOfWarpSeats = 328,
 * CPED_CONFIG_FLAG_DisableTalkTo = 329,
 * CPED_CONFIG_FLAG_DontBlip = 330,
 * CPED_CONFIG_FLAG_IsSwitchingWeapon = 331,
 * CPED_CONFIG_FLAG_IgnoreLegIkRestrictions = 332,
 * _CPED_CONFIG_FLAG_0x150468FD = 333,
 * _CPED_CONFIG_FLAG_0x914EBD6B = 334,
 * _CPED_CONFIG_FLAG_0x79AF3B6D = 335,
 * _CPED_CONFIG_FLAG_0x75C7A632 = 336,
 * _CPED_CONFIG_FLAG_0x52D530E2 = 337,
 * _CPED_CONFIG_FLAG_0xDB2A90E0 = 338,
 * CPED_CONFIG_FLAG_AllowTaskDoNothingTimeslicing = 339,
 * _CPED_CONFIG_FLAG_0x12ADB567 = 340,
 * _CPED_CONFIG_FLAG_0x105C8518 = 341,
 * CPED_CONFIG_FLAG_NotAllowedToJackAnyPlayers = 342,
 * _CPED_CONFIG_FLAG_0xED152C3E = 343,
 * _CPED_CONFIG_FLAG_0xA0EFE6A8 = 344,
 * CPED_CONFIG_FLAG_AlwaysLeaveTrainUponArrival = 345,
 * _CPED_CONFIG_FLAG_0xCDDFE830 = 346,
 * CPED_CONFIG_FLAG_OnlyWritheFromWeaponDamage = 347,
 * CPED_CONFIG_FLAG_UseSloMoBloodVfx = 348,
 * CPED_CONFIG_FLAG_EquipJetpack = 349,
 * CPED_CONFIG_FLAG_PreventDraggedOutOfCarThreatResponse = 350,
 * _CPED_CONFIG_FLAG_0xE13D1F7C = 351,
 * _CPED_CONFIG_FLAG_0x40E25FB9 = 352,
 * _CPED_CONFIG_FLAG_0x930629D9 = 353,
 * _CPED_CONFIG_FLAG_0xECCF0C7F = 354,
 * _CPED_CONFIG_FLAG_0xB6E9613B = 355,
 * CPED_CONFIG_FLAG_ForceDeepSurfaceCheck = 356,
 * CPED_CONFIG_FLAG_DisableDeepSurfaceAnims = 357,
 * CPED_CONFIG_FLAG_DontBlipNotSynced = 358,
 * CPED_CONFIG_FLAG_IsDuckingInVehicle = 359,
 * CPED_CONFIG_FLAG_PreventAutoShuffleToTurretSeat = 360,
 * CPED_CONFIG_FLAG_DisableEventInteriorStatusCheck = 361,
 * CPED_CONFIG_FLAG_HasReserveParachute = 362,
 * CPED_CONFIG_FLAG_UseReserveParachute = 363,
 * CPED_CONFIG_FLAG_TreatDislikeAsHateWhenInCombat = 364,
 * CPED_CONFIG_FLAG_OnlyUpdateTargetWantedIfSeen = 365,
 * CPED_CONFIG_FLAG_AllowAutoShuffleToDriversSeat = 366,
 * _CPED_CONFIG_FLAG_0xD7E07D37 = 367,
 * _CPED_CONFIG_FLAG_0x03C4FD24 = 368,
 * _CPED_CONFIG_FLAG_0x7675789A = 369,
 * _CPED_CONFIG_FLAG_0xB7288A88 = 370,
 * _CPED_CONFIG_FLAG_0xC06B6291 = 371,
 * CPED_CONFIG_FLAG_PreventReactingToSilencedCloneBullets = 372,
 * CPED_CONFIG_FLAG_DisableInjuredCryForHelpEvents = 373,
 * CPED_CONFIG_FLAG_NeverLeaveTrain = 374,
 * CPED_CONFIG_FLAG_DontDropJetpackOnDeath = 375,
 * _CPED_CONFIG_FLAG_0x147F1FFB = 376,
 * _CPED_CONFIG_FLAG_0x4376DD79 = 377,
 * _CPED_CONFIG_FLAG_0xCD3DB518 = 378,
 * _CPED_CONFIG_FLAG_0xFE4BA4B6 = 379,
 * CPED_CONFIG_FLAG_DisableAutoEquipHelmetsInBikes = 380,
 * _CPED_CONFIG_FLAG_0xBCD816CD = 381,
 * _CPED_CONFIG_FLAG_0xCF02DD69 = 382,
 * _CPED_CONFIG_FLAG_0xF73AFA2E = 383,
 * _CPED_CONFIG_FLAG_0x80B9A9D0 = 384,
 * _CPED_CONFIG_FLAG_0xF601F7EE = 385,
 * _CPED_CONFIG_FLAG_0xA91350FC = 386,
 * _CPED_CONFIG_FLAG_0x3AB23B96 = 387,
 * CPED_CONFIG_FLAG_IsClimbingLadder = 388,
 * CPED_CONFIG_FLAG_HasBareFeet = 389,
 * CPED_CONFIG_FLAG_UNUSED_REPLACE_ME_2 = 390,
 * CPED_CONFIG_FLAG_GoOnWithoutVehicleIfItIsUnableToGetBackToRoad = 391,
 * CPED_CONFIG_FLAG_BlockDroppingHealthSnacksOnDeath = 392,
 * _CPED_CONFIG_FLAG_0xC11D3E8F = 393,
 * CPED_CONFIG_FLAG_ForceThreatResponseToNonFriendToFriendMeleeActions = 394,
 * CPED_CONFIG_FLAG_DontRespondToRandomPedsDamage = 395,
 * CPED_CONFIG_FLAG_AllowContinuousThreatResponseWantedLevelUpdates = 396,
 * CPED_CONFIG_FLAG_KeepTargetLossResponseOnCleanup = 397,
 * CPED_CONFIG_FLAG_PlayersDontDragMeOutOfCar = 398,
 * CPED_CONFIG_FLAG_BroadcastRepondedToThreatWhenGoingToPointShooting = 399,
 * CPED_CONFIG_FLAG_IgnorePedTypeForIsFriendlyWith = 400,
 * CPED_CONFIG_FLAG_TreatNonFriendlyAsHateWhenInCombat = 401,
 * CPED_CONFIG_FLAG_DontLeaveVehicleIfLeaderNotInVehicle = 402,
 * _CPED_CONFIG_FLAG_0x5E5B9591 = 403,
 * CPED_CONFIG_FLAG_AllowMeleeReactionIfMeleeProofIsOn = 404,
 * _CPED_CONFIG_FLAG_0x77840177 = 405,
 * _CPED_CONFIG_FLAG_0x1C7ACAC4 = 406,
 * CPED_CONFIG_FLAG_UseNormalExplosionDamageWhenBlownUpInVehicle = 407,
 * CPED_CONFIG_FLAG_DisableHomingMissileLockForVehiclePedInside = 408,
 * CPED_CONFIG_FLAG_DisableTakeOffScubaGear = 409,
 * CPED_CONFIG_FLAG_IgnoreMeleeFistWeaponDamageMult = 410,
 * CPED_CONFIG_FLAG_LawPedsCanFleeFromNonWantedPlayer = 411,
 * CPED_CONFIG_FLAG_ForceBlipSecurityPedsIfPlayerIsWanted = 412,
 * CPED_CONFIG_FLAG_IsHolsteringWeapon = 413,
 * CPED_CONFIG_FLAG_UseGoToPointForScenarioNavigation = 414,
 * CPED_CONFIG_FLAG_DontClearLocalPassengersWantedLevel = 415,
 * CPED_CONFIG_FLAG_BlockAutoSwapOnWeaponPickups = 416,
 * CPED_CONFIG_FLAG_ThisPedIsATargetPriorityForAI = 417,
 * CPED_CONFIG_FLAG_IsSwitchingHelmetVisor = 418,
 * CPED_CONFIG_FLAG_ForceHelmetVisorSwitch = 419,
 * _CPED_CONFIG_FLAG_0xCFF5F6DE = 420,
 * CPED_CONFIG_FLAG_UseOverrideFootstepPtFx = 421,
 * CPED_CONFIG_FLAG_DisableVehicleCombat = 422,
 * _CPED_CONFIG_FLAG_0xFE401D26 = 423,
 * CPED_CONFIG_FLAG_FallsLikeAircraft = 424,
 * _CPED_CONFIG_FLAG_0x2B42AE82 = 425,
 * CPED_CONFIG_FLAG_UseLockpickVehicleEntryAnimations = 426,
 * CPED_CONFIG_FLAG_IgnoreInteriorCheckForSprinting = 427,
 * CPED_CONFIG_FLAG_SwatHeliSpawnWithinLastSpottedLocation = 428,
 * CPED_CONFIG_FLAG_DisableStartEngine = 429,
 * CPED_CONFIG_FLAG_IgnoreBeingOnFire = 430,
 * CPED_CONFIG_FLAG_DisableTurretOrRearSeatPreference = 431,
 * CPED_CONFIG_FLAG_DisableWantedHelicopterSpawning = 432,
 * CPED_CONFIG_FLAG_UseTargetPerceptionForCreatingAimedAtEvents = 433,
 * CPED_CONFIG_FLAG_DisableHomingMissileLockon = 434,
 * CPED_CONFIG_FLAG_ForceIgnoreMaxMeleeActiveSupportCombatants = 435,
 * CPED_CONFIG_FLAG_StayInDefensiveAreaWhenInVehicle = 436,
 * CPED_CONFIG_FLAG_DontShoutTargetPosition = 437,
 * CPED_CONFIG_FLAG_DisableHelmetArmor = 438,
 * _CPED_CONFIG_FLAG_0xCB7F3A1E = 439,
 * _CPED_CONFIG_FLAG_0x50178878 = 440,
 * CPED_CONFIG_FLAG_PreventVehExitDueToInvalidWeapon = 441,
 * CPED_CONFIG_FLAG_IgnoreNetSessionFriendlyFireCheckForAllowDamage = 442,
 * CPED_CONFIG_FLAG_DontLeaveCombatIfTargetPlayerIsAttackedByPolice = 443,
 * CPED_CONFIG_FLAG_CheckLockedBeforeWarp = 444,
 * CPED_CONFIG_FLAG_DontShuffleInVehicleToMakeRoom = 445,
 * CPED_CONFIG_FLAG_GiveWeaponOnGetup = 446,
 * CPED_CONFIG_FLAG_DontHitVehicleWithProjectiles = 447,
 * CPED_CONFIG_FLAG_DisableForcedEntryForOpenVehiclesFromTryLockedDoor = 448,
 * CPED_CONFIG_FLAG_FiresDummyRockets = 449,
 * CPED_CONFIG_FLAG_PedIsArresting = 450,
 * CPED_CONFIG_FLAG_IsDecoyPed = 451,
 * CPED_CONFIG_FLAG_HasEstablishedDecoy = 452,
 * CPED_CONFIG_FLAG_BlockDispatchedHelicoptersFromLanding = 453,
 * CPED_CONFIG_FLAG_DontCryForHelpOnStun = 454,
 * _CPED_CONFIG_FLAG_0xB68D3EAB = 455,
 * CPED_CONFIG_FLAG_CanBeIncapacitated = 456,
 * _CPED_CONFIG_FLAG_0x4BD5EBAD = 457,
 * CPED_CONFIG_FLAG_DontChangeTargetFromMelee = 458,
 * };
 * @param ped
 * @param flagId
 * @param value
 */
export function setPedConfigFlag(ped: number, flagId: number, value: boolean): void { 
	return _in(0x1913fe4c, 0xbf41c463, ped, flagId, value); 
}

/**
 * teleports ped to coords along with the vehicle ped is in
 * @param ped
 * @param posX
 * @param posY
 * @param posZ
 */
export function setPedCoordsKeepVehicle(ped: number, posX: number, posY: number, posZ: number): void { 
	return _in(0x9afeff48, 0x1a85ab2e, ped, _fv(posX), _fv(posY), _fv(posZ)); 
}

export function setPedCoordsNoGang(ped: number, posX: number, posY: number, posZ: number): void { 
	return _in(0x87052fe4, 0x46e07247, ped, _fv(posX), _fv(posY), _fv(posZ)); 
}

/**
 * p1: Only "CODE_HUMAN_STAND_COWER" found in the b617d scripts.
 * @param ped
 * @param p1
 */
export function setPedCowerHash(ped: number, p1: string): void { 
	return _in(0xa5491311, 0x66868ed3, ped, _ts(p1)); 
}

/**
 * Has 5 parameters since latest patches.
 * @param ped
 * @param visible
 * @param deselectWeapon
 * @param p3
 * @param p4
 */
export function setPedCurrentWeaponVisible(ped: number, visible: boolean, deselectWeapon: boolean, p3: boolean, p4: boolean): void { 
	return _in(0x0725a4cc, 0xfded9a70, ped, visible, deselectWeapon, p3, p4); 
}

export function setPedCycleVehicleWeaponsOnly(ped: number): void { 
	return _in(0x50276ef8, 0x172f5f12, ped); 
}

/**
 * Sets Ped Default Clothes
 * @param ped
 */
export function setPedDefaultComponentVariation(ped: number): void { 
	return _in(0x45eee615, 0x80806d63, ped); 
}

export function setPedDefensiveAreaAttachedToPed(ped: number, attachPed: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: boolean, p10: boolean): void { 
	return _in(0x4ef47fe2, 0x1698a8b6, ped, attachPed, _fv(p2), _fv(p3), _fv(p4), _fv(p5), _fv(p6), _fv(p7), _fv(p8), p9, p10); 
}

export function setPedDefensiveAreaDirection(ped: number, p1: number, p2: number, p3: number, p4: boolean): void { 
	return _in(0x413c6c76, 0x3a4affad, ped, _fv(p1), _fv(p2), _fv(p3), p4); 
}

export function setPedDefensiveSphereAttachedToPed(ped: number, target: number, xOffset: number, yOffset: number, zOffset: number, radius: number, p6: boolean): void { 
	return _in(0xf9b8f91a, 0xad3b953e, ped, target, _fv(xOffset), _fv(yOffset), _fv(zOffset), _fv(radius), p6); 
}

export function setPedDefensiveSphereAttachedToVehicle(ped: number, target: number, xOffset: number, yOffset: number, zOffset: number, radius: number, p6: boolean): void { 
	return _in(0xe4723db6, 0xe736ccff, ped, target, _fv(xOffset), _fv(yOffset), _fv(zOffset), _fv(radius), p6); 
}

export function setPedDensityMultiplierThisFrame(multiplier: number): void { 
	return _in(0x95e3d625, 0x7b166cf2, _fv(multiplier)); 
}

export function setPedDesiredHeading(ped: number, heading: number): void { 
	return _in(0xaa5a7ece, 0x2aa8fe70, ped, _fv(heading)); 
}

export function setPedDesiredMoveBlendRatio(ped: number, newMoveBlendRatio: number): void { 
	return _in(0x1e982ac8, 0x716912c5, ped, _fv(newMoveBlendRatio)); 
}

export function setPedDiesInSinkingVehicle(ped: number, toggle: boolean): void { 
	return _in(0xd718a229, 0x95e2b4bc, ped, toggle); 
}

export function setPedDiesInVehicle(ped: number, toggle: boolean): void { 
	return _in(0x2a30922c, 0x90c9b42c, ped, toggle); 
}

export function setPedDiesInWater(ped: number, toggle: boolean): void { 
	return _in(0x56cef0ac, 0x79073bde, ped, toggle); 
}

export function setPedDiesInstantlyInWater(ped: number, toggle: boolean): void { 
	return _in(0xeeb64139, 0xba29a7cf, ped, toggle); 
}

export function setPedDiesWhenInjured(ped: number, toggle: boolean): void { 
	return _in(0x5ba7919b, 0xed300023, ped, toggle); 
}

export function setPedDriveByClipsetOverride(ped: number, clipset: string): void { 
	return _in(0xed34ab6c, 0x5cb36520, ped, _ts(clipset)); 
}

/**
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param xOffset
 * @param yOffset
 * @param zOffset
 * @param ammoCount
 */
export function setPedDropsInventoryWeapon(ped: number, weaponHash: number, xOffset: number, yOffset: number, zOffset: number, ammoCount: number): void { 
	return _in(0x208a1888, 0x007fc0e6, ped, _ch(weaponHash), _fv(xOffset), _fv(yOffset), _fv(zOffset), ammoCount); 
}

export function setPedDropsWeapon(ped: number): void { 
	return _in(0x6b7513d9, 0x966fbec0, ped); 
}

export function setPedDropsWeaponsWhenDead(ped: number, toggle: boolean): void { 
	return _in(0x476ae72c, 0x1d19d1a8, ped, toggle); 
}

/**
 * This is the SET_CHAR_DUCKING from GTA IV, that makes Peds duck. This function does nothing in GTA V. It cannot set the ped as ducking in vehicles, and IS_PED_DUCKING will always return false.
 * @param ped
 * @param toggle
 */
export function setPedDucking(ped: number, toggle: boolean): void { 
	return _in(0x030983ca, 0x930b692d, ped, toggle); 
}

/**
 * intensity: 0.0f - 1.0f
 * 
 * This native sets the emissive intensity for the given ped. It is used for different 'glow' levels on illuminated clothing.
 * @param ped
 * @param intensity
 */
export function setPedEmissiveScale(ped: number, intensity: number): void { 
	return _in(0x4e90d746, 0x056e273d, ped, _fv(intensity)); 
}

export function setPedEnableCrewEmblem(ped: number, toggle: boolean): void { 
	return _in(0xe906ec93, 0x0f5fe7c8, ped, toggle); 
}

export function setPedEnableWeaponBlocking(ped: number, toggle: boolean): void { 
	return _in(0x97a79031, 0x5d3831fd, ped, toggle); 
}

/**
 * Something related to the environmental effects natives.
 * In the "agency_heist3b" script, p1 - p3 are always under 100 - usually they are {87, 81, 68}. If SET_PED_ENVEFF_SCALE is set to 0.65 (instead of the usual 1.0), they use {74, 69, 60}
 * @param ped
 * @param p1
 * @param p2
 * @param p3
 */
export function setPedEnveffColorModulator(ped: number, p1: number, p2: number, p3: number): void { 
	return _in(0xd69411aa, 0x0cebf9e9, ped, p1, p2, p3); 
}

/**
 * In agency_heist3b.c4, its like this 90% of the time:
 * 
 * PED::SET_PED_ENVEFF_CPV_ADD(ped, 0.099);
 * PED::SET_PED_ENVEFF_SCALE(ped, 1.0);
 * PED::SET_PED_ENVEFF_CPV_ADD(ped, 87, 81, 68);
 * PED::SET_ENABLE_PED_ENVEFF_SCALE(ped, 1);
 * 
 * and its like this 10% of the time:
 * 
 * PED::SET_PED_ENVEFF_CPV_ADD(ped, 0.2);
 * PED::SET_PED_ENVEFF_SCALE(ped, 0.65);
 * PED::SET_PED_ENVEFF_COLOR_MODULATOR(ped, 74, 69, 60);
 * PED::SET_ENABLE_PED_ENVEFF_SCALE(ped, 1);
 * @param ped
 * @param p1
 */
export function setPedEnveffCpvAdd(ped: number, p1: number): void { 
	return _in(0x110f526a, 0xb784111f, ped, _fv(p1)); 
}

/**
 * Values look to be between 0.0 and 1.0
 * From decompiled scripts: 0.0, 0.6, 0.65, 0.8, 1.0
 * 
 * You are correct, just looked in IDA it breaks from the function if it's less than 0.0f or greater than 1.0f.
 * @param ped
 * @param value
 */
export function setPedEnveffScale(ped: number, value: number): void { 
	return _in(0xbf295168, 0x33893561, ped, _fv(value)); 
}

/**
 * FIRING_PATTERN_BURST_FIRE = 0xD6FF6D61 ( 1073727030 )
 * FIRING_PATTERN_BURST_FIRE_IN_COVER = 0x026321F1 ( 40051185 )
 * FIRING_PATTERN_BURST_FIRE_DRIVEBY = 0xD31265F2 ( -753768974 )
 * FIRING_PATTERN_FROM_GROUND = 0x2264E5D6 ( 577037782 )
 * FIRING_PATTERN_DELAY_FIRE_BY_ONE_SEC = 0x7A845691 ( 2055493265 )
 * FIRING_PATTERN_FULL_AUTO = 0xC6EE6B4C ( -957453492 )
 * FIRING_PATTERN_SINGLE_SHOT = 0x5D60E4E0 ( 1566631136 )
 * FIRING_PATTERN_BURST_FIRE_PISTOL = 0xA018DB8A ( -1608983670 )
 * FIRING_PATTERN_BURST_FIRE_SMG = 0xD10DADEE ( 1863348768 )
 * FIRING_PATTERN_BURST_FIRE_RIFLE = 0x9C74B406 ( -1670073338 )
 * FIRING_PATTERN_BURST_FIRE_MG = 0xB573C5B4 ( -1250703948 )
 * FIRING_PATTERN_BURST_FIRE_PUMPSHOTGUN = 0x00BAC39B ( 12239771 )
 * FIRING_PATTERN_BURST_FIRE_HELI = 0x914E786F ( -1857128337 )
 * FIRING_PATTERN_BURST_FIRE_MICRO = 0x42EF03FD ( 1122960381 )
 * FIRING_PATTERN_SHORT_BURSTS = 0x1A92D7DF ( 445831135 )
 * FIRING_PATTERN_SLOW_FIRE_TANK = 0xE2CA3A71 ( -490063247 )
 * 
 * Firing pattern info: https://pastebin.com/Px036isB
 * @param ped
 * @param patternHash
 */
export function setPedFiringPattern(ped: number, patternHash: number): void { 
	return _in(0x9ac577f5, 0xa12ad8a9, ped, _ch(patternHash)); 
}

/**
 * bit 1 (0x2) = use vehicle
 * bit 15 (0x8000) = force cower
 * @param ped
 * @param attributeFlags
 * @param enable
 */
export function setPedFleeAttributes(ped: number, attributeFlags: number, enable: boolean): void { 
	return _in(0x70a2d113, 0x7c8ed7c9, ped, attributeFlags, enable); 
}

/**
 * Enables/disables ped's "loud" footstep sound.
 * @param ped
 * @param toggle
 */
export function setPedFootstepsEventsEnabled(ped: number, toggle: boolean): void { 
	return _in(0x0653b735, 0xbfbdfe87, ped, toggle); 
}

/**
 * p1/gadgetHash was always 0xFBAB5776 ("GADGET_PARACHUTE").
 * p2 is always true.
 * @param ped
 * @param gadgetHash
 * @param p2
 */
export function setPedGadget(ped: number, gadgetHash: number, p2: boolean): void { 
	return _in(0xd0d7b1e6, 0x80ed4a1a, ped, _ch(gadgetHash), p2); 
}

/**
 * BOOL p1: 0 = Female; 1 = Male
 * @param ped
 * @param p1
 */
export function setPedGender(ped: number, p1: boolean): void { 
	return _in(0xa5342d39, 0x0cda41d6, ped, p1); 
}

export function setPedGeneratesDeadBodyEvents(ped: number, toggle: boolean): void { 
	return _in(0x7fb17ba2, 0xe7deca5b, ped, toggle); 
}

/**
 * From the scripts:
 * PED::SET_PED_GESTURE_GROUP(PLAYER::PLAYER_PED_ID(),
 * "ANIM_GROUP_GESTURE_MISS_FRA0");
 * PED::SET_PED_GESTURE_GROUP(PLAYER::PLAYER_PED_ID(),
 * "ANIM_GROUP_GESTURE_MISS_DocksSetup1");
 * @param ped
 * @param animGroupGesture
 */
export function setPedGestureGroup(ped: number, animGroupGesture: string): void { 
	return _in(0xddf80337, 0x7f94aaa8, ped, _ts(animGroupGesture)); 
}

export function setPedGetOutUpsideDownVehicle(ped: number, toggle: boolean): void { 
	return _in(0xbc0ed941, 0x65a48bc2, ped, toggle); 
}

/**
 * enable or disable the gravity of a ped
 * 
 * Examples:
 * PED::SET_PED_GRAVITY(PLAYER::PLAYER_PED_ID(), 0x00000001);
 * PED::SET_PED_GRAVITY(Local_289[iVar0  -- [[20]] ], 0x00000001);
 * @param ped
 * @param toggle
 */
export function setPedGravity(ped: number, toggle: boolean): void { 
	return _in(0x9ff447b6, 0xb6ad960a, ped, toggle); 
}

export function setPedGroupMemberPassengerIndex(ped: number, index: number): void { 
	return _in(0x0bddb8d9, 0xec6bcf3c, ped, index); 
}

export function setPedHairTint(ped: number, colorID: number, highlightColorID: number): void { 
	return _in(0x4cffc654, 0x54c93a49, ped, colorID, highlightColorID); 
}

/**
 * This native turns on the AI blip on the specified ped. It also disappears automatically when the ped is too far or if the ped is dead. You don't need to control it with other natives.
 * 
 * See gtaforums.com/topic/884370-native-research-ai-blips for further information.
 * @param ped
 * @param hasCone
 */
export function setPedHasAiBlip(ped: number, hasCone: boolean): void { 
	return _in(0xd30c50df, 0x888d58b5, ped, hasCone); 
}

/**
 * color: see SET_BLIP_COLOUR
 * @param ped
 * @param hasCone
 * @param color
 */
export function setPedHasAiBlipWithColour(ped: number, hasCone: boolean, color: number): void { 
	return _in(0xb13dcb4c, 0x6faad238, ped, hasCone, color); 
}

/**
 * The "shape" parameters control the shape of the ped's face. The "skin" parameters control the skin tone. ShapeMix and skinMix control how much the first and second IDs contribute,(typically mother and father.) ThirdMix overrides the others in favor of the third IDs. IsParent is set for "children" of the player character's grandparents during old-gen character creation. It has unknown effect otherwise.
 * 
 * The IDs start at zero and go Male Non-DLC, Female Non-DLC, Male DLC, and Female DLC.
 * 
 * !!!Can someone add working example for this???
 * 
 * try this:
 * headBlendData headData;
 * GET_PED_HEAD_BLEND_DATA(PLAYER_PED_ID(), &headData);
 * 
 * SET_PED_HEAD_BLEND_DATA(PLAYER_PED_ID(), headData.shapeFirst, headData.shapeSecond, headData.shapeThird, headData.skinFirst, headData.skinSecond
 * , headData.skinThird, headData.shapeMix, headData.skinMix, headData.skinThird, 0);
 * 
 * 
 * For more info please refer to this topic.
 * gtaforums.com/topic/858970-all-gtao-face-ids-pedset-ped-head-blend-data-explained
 * @param ped
 * @param shapeFirstID
 * @param shapeSecondID
 * @param shapeThirdID
 * @param skinFirstID
 * @param skinSecondID
 * @param skinThirdID
 * @param shapeMix
 * @param skinMix
 * @param thirdMix
 * @param isParent
 */
export function setPedHeadBlendData(ped: number, shapeFirstID: number, shapeSecondID: number, shapeThirdID: number, skinFirstID: number, skinSecondID: number, skinThirdID: number, shapeMix: number, skinMix: number, thirdMix: number, isParent: boolean): void { 
	return _in(0x9414e18b, 0x9434c2fe, ped, shapeFirstID, shapeSecondID, shapeThirdID, skinFirstID, skinSecondID, skinThirdID, _fv(shapeMix), _fv(skinMix), _fv(thirdMix), isParent); 
}

/**
 * OverlayID ranges from 0 to 12, index from 0 to _GET_NUM_OVERLAY_VALUES(overlayID)-1, and opacity from 0.0 to 1.0.
 * 
 * overlayID       Part                  Index, to disable
 * 0               Blemishes             0 - 23, 255
 * 1               Facial Hair           0 - 28, 255
 * 2               Eyebrows              0 - 33, 255
 * 3               Ageing                0 - 14, 255
 * 4               Makeup                0 - 74, 255
 * 5               Blush                 0 - 6, 255
 * 6               Complexion            0 - 11, 255
 * 7               Sun Damage            0 - 10, 255
 * 8               Lipstick              0 - 9, 255
 * 9               Moles/Freckles        0 - 17, 255
 * 10              Chest Hair            0 - 16, 255
 * 11              Body Blemishes        0 - 11, 255
 * 12              Add Body Blemishes    0 - 1, 255
 * @param ped
 * @param overlayID
 * @param index
 * @param opacity
 */
export function setPedHeadOverlay(ped: number, overlayID: number, index: number, opacity: number): void { 
	return _in(0x48f44967, 0xfa05cc1e, ped, overlayID, index, _fv(opacity)); 
}

/**
 * 
 * 
 * ColorType is 1 for eyebrows, beards, and chest hair; 2 for blush and lipstick; and 0 otherwise, though not called in those cases.
 * 
 * Called after SET_PED_HEAD_OVERLAY().
 * @param ped
 * @param overlayID
 * @param colorType
 * @param colorID
 * @param secondColorID
 */
export function setPedHeadOverlayTint(ped: number, overlayID: number, colorType: number, colorID: number, secondColorID: number): void { 
	return _in(0x497bf74a, 0x7b9cb952, ped, overlayID, colorType, colorID, secondColorID); 
}

export function setPedHealthPendingLastDamageEventOverrideFlag(toggle: boolean): void { 
	return _in(0xb3352e01, 0x8d6f89df, toggle); 
}

export function setPedHearingRange(ped: number, value: number): void { 
	return _in(0x33a8f7f7, 0xd5f7f33c, ped, _fv(value)); 
}

export function setPedHeatscaleOverride(ped: number, heatScale: number): void { 
	return _in(0xc1f6ebf9, 0xa3d55538, ped, _fv(heatScale)); 
}

export function setPedHelmet(ped: number, canWearHelmet: boolean): void { 
	return _in(0x560a4313, 0x6eb58105, ped, canWearHelmet); 
}

export function setPedHelmetFlag(ped: number, helmetFlag: number): void { 
	return _in(0xc0e78d5c, 0x2ce3eb25, ped, helmetFlag); 
}

/**
 * List of component/props ID
 * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
 * @param ped
 * @param propIndex
 * @param p2
 */
export function setPedHelmetPropIndex(ped: number, propIndex: number, p2: boolean): void { 
	return _in(0x26d83693, 0xed99291c, ped, propIndex, p2); 
}

export function setPedHelmetTextureIndex(ped: number, textureIndex: number): void { 
	return _in(0xf1550c4b, 0xd22582e2, ped, textureIndex); 
}

export function setPedHelmetVisorPropIndices(ped: number, p1: boolean, p2: number, p3: number): void { 
	return _in(0x3f732557, 0x4e41b44d, ped, p1, p2, p3); 
}

export function setPedHighlyPerceptive(ped: number, toggle: boolean): void { 
	return _in(0x52d59ab6, 0x1ddc05dd, ped, toggle); 
}

export function setPedIdRange(ped: number, value: number): void { 
	return _in(0xf107e836, 0xa70dce05, ped, _fv(value)); 
}

/**
 * PED::SET_PED_IN_VEHICLE_CONTEXT(l_128, MISC::GET_HASH_KEY("MINI_PROSTITUTE_LOW_PASSENGER"));
 * PED::SET_PED_IN_VEHICLE_CONTEXT(l_128, MISC::GET_HASH_KEY("MINI_PROSTITUTE_LOW_RESTRICTED_PASSENGER"));
 * PED::SET_PED_IN_VEHICLE_CONTEXT(l_3212, MISC::GET_HASH_KEY("MISS_FAMILY1_JIMMY_SIT"));
 * PED::SET_PED_IN_VEHICLE_CONTEXT(l_3212, MISC::GET_HASH_KEY("MISS_FAMILY1_JIMMY_SIT_REAR"));
 * PED::SET_PED_IN_VEHICLE_CONTEXT(l_95, MISC::GET_HASH_KEY("MISS_FAMILY2_JIMMY_BICYCLE"));
 * PED::SET_PED_IN_VEHICLE_CONTEXT(num3, MISC::GET_HASH_KEY("MISSFBI2_MICHAEL_DRIVEBY"));
 * PED::SET_PED_IN_VEHICLE_CONTEXT(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("MISS_ARMENIAN3_FRANKLIN_TENSE"));
 * PED::SET_PED_IN_VEHICLE_CONTEXT(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("MISSFBI5_TREVOR_DRIVING"));
 * @param ped
 * @param context
 */
export function setPedInVehicleContext(ped: number, context: number): void { 
	return _in(0x53007129, 0x5899a8c6, ped, _ch(context)); 
}

export function setPedIncreasedAvoidanceRadius(ped: number): void { 
	return _in(0x570389d1, 0xc3de3c6b, ped); 
}

/**
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param toggle
 * @param weaponHash
 */
export function setPedInfiniteAmmo(ped: number, toggle: boolean, weaponHash: number): void { 
	return _in(0x3edcb050, 0x5123623b, ped, toggle, _ch(weaponHash)); 
}

export function setPedInfiniteAmmoClip(ped: number, toggle: boolean): void { 
	return _in(0x183dadc6, 0xaa953186, ped, toggle); 
}

export function setPedInjuredOnGroundBehaviour(ped: number, p1: number): void { 
	return _in(0xec4b4b3b, 0x9908052a, ped, _fv(p1)); 
}

export function setPedInteriorWallaDensity(p0: number, p1: number): void { 
	return _in(0x8bf90783, 0x3be275de, _fv(p0), _fv(p1)); 
}

/**
 * Ped: The ped to warp.
 * vehicle: The vehicle to warp the ped into.
 * Seat_Index: [-1 is driver seat, -2 first free passenger seat]
 * 
 * Moreinfo of Seat Index
 * DriverSeat = -1
 * Passenger = 0
 * Left Rear = 1
 * RightRear = 2
 * @param ped
 * @param vehicle
 * @param seatIndex
 */
export function setPedIntoVehicle(ped: number, vehicle: number, seatIndex: number): void { 
	return _in(0xf75b0d62, 0x9e1c063d, ped, vehicle, seatIndex); 
}

export function setPedIsAvoidedByOthers(p0: number, p1: boolean): void { 
	return _in(0xa9b61a32, 0x9bfdcbea, p0, p1); 
}

/**
 * Sets the ped drunk sounds.  Only works with PLAYER_PED_ID
 * 
 * ====================================================
 * 
 * As mentioned above, this only sets the drunk sound to ped/player.
 * 
 * To give the Ped a drunk effect with drunk walking animation try using SET_PED_MOVEMENT_CLIPSET
 * 
 * Below is an example
 * 
 * if (!Function.Call<bool>(Hash.HAS_ANIM_SET_LOADED, "move_m@drunk@verydrunk"))
 * {
 * Function.Call(Hash.REQUEST_ANIM_SET, "move_m@drunk@verydrunk");
 * }
 * Function.Call(Hash.SET_PED_MOVEMENT_CLIPSET, Ped.Handle, "move_m@drunk@verydrunk", 0x3E800000);
 * 
 * 
 * 
 * And to stop the effect use
 * RESET_PED_MOVEMENT_CLIPSET
 * @param ped
 * @param toggle
 */
export function setPedIsDrunk(ped: number, toggle: boolean): void { 
	return _in(0x95d2d383, 0xd5396b8a, ped, toggle); 
}

export function setPedIsIgnoredByAutoOpenDoors(ped: number, p1: boolean): void { 
	return _in(0x33a60d8b, 0xdd6e508c, ped, p1); 
}

export function setPedKeepTask(ped: number, toggle: boolean): void { 
	return _in(0x971d3876, 0x0fbc02ef, ped, toggle); 
}

/**
 * "IK" stands for "Inverse kinematics." I assume this has something to do with how the ped uses his legs to balance. In the scripts, the second parameter is always an int with a value of 2, 0, or sometimes 1
 * @param ped
 * @param mode
 */
export function setPedLegIkMode(ped: number, mode: number): void { 
	return _in(0xc396f5b8, 0x6ff9febd, ped, mode); 
}

export function setPedLodMultiplier(ped: number, multiplier: number): void { 
	return _in(0xdc2c5c24, 0x2aac342b, ped, _fv(multiplier)); 
}

/**
 * Sets the maximum health of a ped.
 * @param ped
 * @param value
 */
export function setPedMaxHealth(ped: number, value: number): void { 
	return _in(0xf5f6378c, 0x4f3419d3, ped, value); 
}

export function setPedMaxMoveBlendRatio(ped: number, value: number): void { 
	return _in(0x43308375, 0x0c5e064a, ped, _fv(value)); 
}

export function setPedMaxTimeInWater(ped: number, value: number): void { 
	return _in(0x43c85169, 0x0662113d, ped, _fv(value)); 
}

export function setPedMaxTimeUnderwater(ped: number, value: number): void { 
	return _in(0x6ba428c5, 0x28d9e522, ped, _fv(value)); 
}

/**
 * Sets the various freemode face features, e.g. nose length, chin shape. Scale ranges from -1.0 to 1.0.
 * 
 * 
 * 
 * 0 - Nose Width (Thin/Wide)
 * 
 * 1 - Nose Peak (Up/Down)
 * 
 * 2 - Nose Length (Long/Short)
 * 
 * 3 - Nose Bone Curveness (Crooked/Curved)
 * 
 * 4 - Nose Tip (Up/Down)
 * 
 * 5 - Nose Bone Twist (Left/Right)
 * 
 * 6 - Eyebrow (Up/Down)
 * 
 * 7 - Eyebrow (In/Out)
 * 
 * 8 - Cheek Bones (Up/Down)
 * 
 * 9 - Cheek Sideways Bone Size (In/Out)
 * 
 * 10 - Cheek Bones Width (Puffed/Gaunt)
 * 
 * 11 - Eye Opening (Both) (Wide/Squinted)
 * 
 * 12 - Lip Thickness (Both) (Fat/Thin)
 * 
 * 13 - Jaw Bone Width (Narrow/Wide)
 * 
 * 14 - Jaw Bone Shape (Round/Square)
 * 
 * 15 - Chin Bone (Up/Down)
 * 
 * 16 - Chin Bone Length (In/Out or Backward/Forward)
 * 
 * 17 - Chin Bone Shape (Pointed/Square)
 * 
 * 18 - Chin Hole (Chin Bum)
 * 
 * 19 - Neck Thickness (Thin/Thick)
 * @param ped
 * @param index
 * @param scale
 */
export function setPedMicroMorph(ped: number, index: number, scale: number): void { 
	return _in(0x71a5c1db, 0xa060049e, ped, index, _fv(scale)); 
}

/**
 * Ped will stay on the ground after being stunned for at lest ms time. (in milliseconds)
 * @param ped
 * @param ms
 */
export function setPedMinGroundTimeForStungun(ped: number, ms: number): void { 
	return _in(0xfa0675ab, 0x151073fa, ped, ms); 
}

export function setPedMinMoveBlendRatio(ped: number, value: number): void { 
	return _in(0x01a898d2, 0x6e2333dd, ped, _fv(value)); 
}

/**
 * Full list of peds by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/peds.json
 * @param modelHash
 * @param toggle
 */
export function setPedModelIsSuppressed(modelHash: number, toggle: boolean): void { 
	return _in(0xe163a4bc, 0xe4de6f11, _ch(modelHash), toggle); 
}

/**
 * Maximum possible amount of money on MP is 2000. ~JX
 * 
 * -----------------------------------------------------------------------------
 * 
 * Maximum amount that a ped can theoretically have is 65535 (0xFFFF) since the amount is stored as an unsigned short (uint16_t) value.
 * @param ped
 * @param amount
 */
export function setPedMoney(ped: number, amount: number): void { 
	return _in(0xa9c8960e, 0x8684c1b5, ped, amount); 
}

export function setPedMotionBlur(ped: number, toggle: boolean): void { 
	return _in(0x0a986918, 0xb102b448, ped, toggle); 
}

/**
 * Found in the b617d scripts:
 * PED::SET_PED_MOTION_IN_COVER_CLIPSET_OVERRIDE(v_7, "trevor_heist_cover_2h");
 * @param ped
 * @param p1
 */
export function setPedMotionInCoverClipsetOverride(ped: number, p1: string): void { 
	return _in(0x9dba107b, 0x4937f809, ped, _ts(p1)); 
}

export function setPedMoveAnimsBlendOut(ped: number): void { 
	return _in(0x9e8c908f, 0x41584ecd, ped); 
}

export function setPedMoveRateInWaterOverride(ped: number, p1: number): void { 
	return _in(0x0b3e35ac, 0x043707d9, ped, _fv(p1)); 
}

/**
 * Min: 0.00
 * Max: 10.00
 * 
 * Can be used in combo with fast run cheat.
 * 
 * When value is set to 10.00:
 * Sprinting without fast run cheat: 66 m/s
 * Sprinting with fast run cheat: 77 m/s
 * 
 * Needs to be looped!
 * 
 * Note: According to IDA for the Xbox360 xex, when they check bgt they seem to have the min to 0.0f, but the max set to 1.15f not 10.0f.
 * @param ped
 * @param value
 */
export function setPedMoveRateOverride(ped: number, value: number): void { 
	return _in(0x085bf80f, 0xa50a39d1, ped, _fv(value)); 
}

/**
 * transitionSpeed is the time in seconds it takes to transition from one movement clipset to another.	ransitionSpeed is usually 1.0f
 * 
 * List of movement clipsets:
 * Thanks to elsewhat for list.
 * 
 * "ANIM_GROUP_MOVE_BALLISTIC"
 * "ANIM_GROUP_MOVE_LEMAR_ALLEY"
 * "clipset@move@trash_fast_turn"
 * "FEMALE_FAST_RUNNER"
 * "missfbi4prepp1_garbageman"
 * "move_characters@franklin@fire"
 * "move_characters@Jimmy@slow@"
 * "move_characters@michael@fire"
 * "move_f@flee@a"
 * "move_f@scared"
 * "move_f@sexy@a"
 * "move_heist_lester"
 * "move_injured_generic"
 * "move_lester_CaneUp"
 * "move_m@bag"
 * "MOVE_M@BAIL_BOND_NOT_TAZERED"
 * "MOVE_M@BAIL_BOND_TAZERED"
 * "move_m@brave"
 * "move_m@casual@d"
 * "move_m@drunk@moderatedrunk"
 * "MOVE_M@DRUNK@MODERATEDRUNK"
 * "MOVE_M@DRUNK@MODERATEDRUNK_HEAD_UP"
 * "MOVE_M@DRUNK@SLIGHTLYDRUNK"
 * "MOVE_M@DRUNK@VERYDRUNK"
 * "move_m@fire"
 * "move_m@gangster@var_e"
 * "move_m@gangster@var_f"
 * "move_m@gangster@var_i"
 * "move_m@JOG@"
 * "MOVE_M@PRISON_GAURD"
 * "MOVE_P_M_ONE"
 * "MOVE_P_M_ONE_BRIEFCASE"
 * "move_p_m_zero_janitor"
 * "move_p_m_zero_slow"
 * "move_ped_bucket"
 * "move_ped_crouched"
 * "move_ped_mop"
 * "MOVE_M@FEMME@"
 * "MOVE_F@FEMME@"
 * "MOVE_M@GANGSTER@NG"
 * "MOVE_F@GANGSTER@NG"
 * "MOVE_M@POSH@"
 * "MOVE_F@POSH@"
 * "MOVE_M@TOUGH_GUY@"
 * "MOVE_F@TOUGH_GUY@"
 * 
 * ~ NotCrunchyTaco
 * 
 * Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
 * @param ped
 * @param clipSet
 * @param transitionSpeed
 */
export function setPedMovementClipset(ped: number, clipSet: string, transitionSpeed: number): void { 
	return _in(0xaf8a94ed, 0xe7712bef, ped, _ts(clipSet), _fv(transitionSpeed)); 
}

/**
 * NOTE: Debugging functions are not present in the retail version of the game.
 * 
 * *untested but char *name could also be a hash for a localized string
 * @param ped
 * @param name
 */
export function setPedNameDebug(ped: number, name: string): void { 
	return _in(0x98efa132, 0xa4117be1, ped, _ts(name)); 
}

export function setPedNeverLeavesGroup(ped: number, toggle: boolean): void { 
	return _in(0x3dbfc55d, 0x5c9bb447, ped, toggle); 
}

export function setPedNoTimeDelayBeforeShot(p0: number): void { 
	return _in(0xa52d5247, 0xa4227e14, p0); 
}

/**
 * The distance between these points, is the diagonal of a box (remember it's 3D).
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 */
export function setPedNonCreationArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): void { 
	return _in(0xee01041d, 0x559983ea, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2)); 
}

export function setPedPanicExitScenario(p0: number, p1: number, p2: number, p3: number): boolean { 
	return _in(0xfe07ff64, 0x95d52e2a, p0, p1, p2, p3, _r); 
}

export function setPedParachuteTintIndex(ped: number, tintIndex: number): void { 
	return _in(0x333fc8db, 0x079b7186, ped, tintIndex); 
}

export function setPedPathAvoidFire(ped: number, avoidFire: boolean): void { 
	return _in(0x4455517b, 0x28441e60, ped, avoidFire); 
}

export function setPedPathCanDropFromHeight(ped: number, Toggle: boolean): void { 
	return _in(0xe361c5c7, 0x1c431a4f, ped, Toggle); 
}

export function setPedPathCanUseClimbovers(ped: number, Toggle: boolean): void { 
	return _in(0x8e06a6fe, 0x76c9eff4, ped, Toggle); 
}

export function setPedPathCanUseLadders(ped: number, Toggle: boolean): void { 
	return _in(0x77a5b103, 0xc87f476e, ped, Toggle); 
}

/**
 * Default modifier is 1.0, minimum is 0.0 and maximum is 10.0.
 * @param ped
 * @param modifier
 */
export function setPedPathClimbCostModifier(ped: number, modifier: number): void { 
	return _in(0x88e32db8, 0xc1a4aa4b, ped, _fv(modifier)); 
}

export function setPedPathMayEnterWater(ped: number, mayEnterWater: boolean): void { 
	return _in(0xf35425a4, 0x204367ec, ped, mayEnterWater); 
}

export function setPedPathPreferToAvoidWater(ped: number, avoidWater: boolean): void { 
	return _in(0x38fe1ec7, 0x3743793c, ped, avoidWater); 
}

/**
 * p6 is always 0
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param p6
 */
export function setPedPathsBackToOriginal(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, p6: number): void { 
	return _in(0xe04b48f2, 0xcc926253, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), p6); 
}

export function setPedPathsInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, p6: boolean, p7: number): void { 
	return _in(0x34f060f4, 0xbf92e018, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), p6, p7); 
}

export function setPedPhonePaletteIdx(p0: number, p1: number): void { 
	return _in(0x83a169ea, 0xbcdb10a2, p0, p1); 
}

/**
 * i could be time. Only example in the decompiled scripts uses it as -1.
 * @param ped
 * @param pinned
 * @param i
 */
export function setPedPinnedDown(ped: number, pinned: boolean, i: number): boolean { 
	return _in(0xaad6d1ac, 0xf08f4612, ped, pinned, i, _r); 
}

/**
 * This native does absolutely nothing, just a nullsub
 * @param ped
 * @param toggle
 */
export function setPedPlaysHeadOnHornAnimWhenDiesInVehicle(ped: number, toggle: boolean): void { 
	return _in(0x94d94bf1, 0xa75aed3d, ped, toggle); 
}

/**
 * Control how many new (ambient?) peds will spawn in the game world.
 * Range for p0 seems to be 0-3, where 0 is none and 3 is the normal level.
 * @param p0
 */
export function setPedPopulationBudget(p0: number): void { 
	return _in(0x8c95333c, 0xfc3340f3, p0); 
}

export function setPedPreferredCoverSet(ped: number, itemSet: number): void { 
	return _in(0x8421eb4d, 0xa7e391b9, ped, itemSet); 
}

/**
 * List of component/props ID
 * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
 * @param ped
 * @param componentId
 * @param drawableId
 * @param TextureId
 */
export function setPedPreloadPropData(ped: number, componentId: number, drawableId: number, TextureId: number): number { 
	return _in(0x2b16a3bf, 0xf1fbce49, ped, componentId, drawableId, TextureId, _r, _ri); 
}

/**
 * from extreme3.c4
 * PED::SET_PED_PRELOAD_VARIATION_DATA(PLAYER::PLAYER_PED_ID(), 8, PED::GET_PED_DRAWABLE_VARIATION(PLAYER::PLAYER_PED_ID(), 8), PED::GET_PED_TEXTURE_VARIATION(PLAYER::PLAYER_PED_ID(), 8));
 * 
 * p1 is probably componentId
 * @param ped
 * @param slot
 * @param drawableId
 * @param textureId
 */
export function setPedPreloadVariationData(ped: number, slot: number, drawableId: number, textureId: number): number { 
	return _in(0x39d55a62, 0x0fcb6a3a, ped, slot, drawableId, textureId, _r, _ri); 
}

/**
 * This is only called once in the scripts.
 * 
 * sub_1CD9(&l_49, 0, getElem(3, &l_34, 4), "MICHAEL", 0, 1);
 * sub_1CA8("WORLD_HUMAN_SMOKING", 2);
 * PED::SET_PED_PRIMARY_LOOKAT(getElem(3, &l_34, 4), PLAYER::PLAYER_PED_ID());
 * @param ped
 * @param lookAt
 */
export function setPedPrimaryLookat(ped: number, lookAt: number): void { 
	return _in(0xcd17b554, 0x996a8d9e, ped, lookAt); 
}

/**
 * ComponentId can be set to various things based on what category you're wanting to set
 * enum PedPropsData
 * {
 * PED_PROP_HATS = 0,
 * PED_PROP_GLASSES = 1,
 * PED_PROP_EARS = 2,
 * PED_PROP_WATCHES = 3,
 * };
 * Usage: SET_PED_PROP_INDEX(playerPed, PED_PROP_HATS, GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS(playerPed, PED_PROP_HATS), GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS(playerPed, PED_PROP_HATS, 0), TRUE);
 * 
 * List of component/props ID
 * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
 * @param ped
 * @param componentId
 * @param drawableId
 * @param TextureId
 * @param attach
 * @param p5
 */
export function setPedPropIndex(ped: number, componentId: number, drawableId: number, TextureId: number, attach: boolean, p5: number): void { 
	return _in(0x93376b65, 0xa266eb5f, ped, componentId, drawableId, TextureId, attach, p5); 
}

export function setPedRaceAndVoiceGroup(ped: number, p1: number, voiceGroup: number): void { 
	return _in(0x1b7abe26, 0xcbcbf8c7, ped, p1, _ch(voiceGroup)); 
}

export function setPedRagdollForceFall(ped: number): void { 
	return _in(0x01f6594b, 0x923b9251, ped); 
}

/**
 * Causes Ped to ragdoll on collision with any object (e.g Running into trashcan). If applied to player you will sometimes trip on the sidewalk.
 * @param ped
 * @param toggle
 */
export function setPedRagdollOnCollision(ped: number, toggle: boolean): void { 
	return _in(0xf0a4f1bb, 0xf4fa7497, ped, toggle); 
}

/**
 * p1 is always 0 in R* scripts.
 * 
 * List of component/props ID
 * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
 * @param ped
 * @param p1
 */
export function setPedRandomComponentVariation(ped: number, p1: number): void { 
	return _in(0xc8a9481a, 0x01e63c28, ped, p1); 
}

/**
 * List of component/props ID
 * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
 * @param ped
 */
export function setPedRandomProps(ped: number): void { 
	return _in(0xc44aa053, 0x45c992c6, ped); 
}

export function setPedRelationshipGroupDefaultHash(ped: number, hash: number): void { 
	return _in(0xadb3f206, 0x518799e8, ped, _ch(hash)); 
}

export function setPedRelationshipGroupHash(ped: number, hash: number): void { 
	return _in(0xc80a74ac, 0x829ddd92, ped, _ch(hash)); 
}

export function setPedReserveParachuteTintIndex(ped: number, p1: number): void { 
	return _in(0xe88da075, 0x1c22a2ad, ped, p1); 
}

/**
 * PED::SET_PED_RESET_FLAG(PLAYER::PLAYER_PED_ID(), 240, 1);
 * Known values:
 * PRF_PreventGoingIntoStillInVehicleState = 236 *(fanatic2.c)*
 * @param ped
 * @param flagId
 * @param doReset
 */
export function setPedResetFlag(ped: number, flagId: number, doReset: boolean): void { 
	return _in(0xc1e8a365, 0xbf3b29f2, ped, flagId, doReset); 
}

/**
 * This native sets a scuba mask for freemode models and an oxygen bottle for player_* models. It works on freemode and player_* models.
 * @param ped
 */
export function setPedScubaGearVariation(ped: number): void { 
	return _in(0x36c6984c, 0x3ed0c911, ped); 
}

export function setPedSeeingRange(ped: number, value: number): void { 
	return _in(0xf29cf591, 0xc4bf6cee, ped, _fv(value)); 
}

/**
 * Returns handle of the projectile.
 * @param ped
 * @param p1
 */
export function setPedShootOrdnanceWeapon(ped: number, p1: number): number { 
	return _in(0xb4c8d77c, 0x80c0421e, ped, _fv(p1), _r, _ri); 
}

/**
 * shootRate 0-1000
 * @param ped
 * @param shootRate
 */
export function setPedShootRate(ped: number, shootRate: number): void { 
	return _in(0x614da022, 0x990752dc, ped, shootRate); 
}

export function setPedShootsAtCoord(ped: number, x: number, y: number, z: number, toggle: boolean): void { 
	return _in(0x96a05e4f, 0xb321b1ba, ped, _fv(x), _fv(y), _fv(z), toggle); 
}

export function setPedShouldIgnoreScenarioExitCollisionChecks(ped: number, p1: boolean): void { 
	return _in(0x425aecf1, 0x67663f48, ped, p1); 
}

export function setPedShouldIgnoreScenarioNavChecks(p0: number, p1: boolean): void { 
	return _in(0x5b6010b3, 0xcbc29095, p0, p1); 
}

export function setPedShouldPlayDirectedNormalScenarioExit(p0: number, p1: number, p2: number, p3: number): boolean { 
	return _in(0xec6935eb, 0xe0847b90, p0, p1, p2, p3, _r); 
}

export function setPedShouldPlayFleeScenarioExit(ped: number, p1: number, p2: number, p3: number): boolean { 
	return _in(0xeeed8faf, 0xec331a70, ped, p1, p2, p3, _r); 
}

export function setPedShouldPlayImmediateScenarioExit(ped: number): void { 
	return _in(0xf1c03a53, 0x52243a30, ped); 
}

export function setPedShouldPlayNormalScenarioExit(ped: number): void { 
	return _in(0xa3a9299c, 0x4f2adb98, ped); 
}

export function setPedShouldProbeForScenarioExitsInOneFrame(p0: number, p1: boolean): void { 
	return _in(0xceda60a7, 0x4219d064, p0, p1); 
}

export function setPedSphereDefensiveArea(ped: number, x: number, y: number, z: number, radius: number, p5: boolean, p6: boolean): void { 
	return _in(0x9d3151a3, 0x73974804, ped, _fv(x), _fv(y), _fv(z), _fv(radius), p5, p6); 
}

export function setPedStayInVehicleWhenJacked(ped: number, toggle: boolean): void { 
	return _in(0xedf4079f, 0x9d54c9a1, ped, toggle); 
}

/**
 * p1 is usually 0 in the scripts. action is either 0 or a pointer to "DEFAULT_ACTION".
 * @param ped
 * @param p1
 * @param action
 */
export function setPedStealthMovement(ped: number, p1: boolean, action: string): void { 
	return _in(0x88cbb5ce, 0xb96b7bd2, ped, p1, _ts(action)); 
}

export function setPedSteerBias(ped: number, value: number): void { 
	return _in(0x288df530, 0xc92dad6f, ped, _fv(value)); 
}

export function setPedSteersAroundDeadBodies(ped: number, toggle: boolean): void { 
	return _in(0x2016c603, 0xd6b8987c, ped, toggle); 
}

export function setPedSteersAroundObjects(ped: number, toggle: boolean): void { 
	return _in(0x1509c089, 0xadc208bf, ped, toggle); 
}

export function setPedSteersAroundPeds(ped: number, toggle: boolean): void { 
	return _in(0x46f2193b, 0x3ad1d891, ped, toggle); 
}

export function setPedSteersAroundVehicles(ped: number, toggle: boolean): void { 
	return _in(0xeb6fb9d4, 0x8dde23ec, ped, toggle); 
}

/**
 * Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
 * @param ped
 * @param clipSet
 */
export function setPedStrafeClipset(ped: number, clipSet: string): void { 
	return _in(0x29a28f3f, 0x8cf6d854, ped, _ts(clipSet)); 
}

export function setPedStunGunFiniteAmmo(p0: number, p1: number): void { 
	return _in(0x24c024ba, 0x8379a70a, p0, p1); 
}

/**
 * Ped no longer takes critical damage modifiers if set to FALSE.
 * Example: Headshotting a player no longer one shots them. Instead they will take the same damage as a torso shot.
 * @param ped
 * @param toggle
 */
export function setPedSuffersCriticalHits(ped: number, toggle: boolean): void { 
	return _in(0xebd76f23, 0x59f190ac, ped, toggle); 
}

export function setPedSurvivesBeingOutOfWater(ped: number, toggle: boolean): boolean { 
	return _in(0x100cd221, 0xf572f6e1, ped, toggle, _r); 
}

/**
 * Sweat is set to 100.0 or 0.0 in the decompiled scripts.
 * @param ped
 * @param sweat
 */
export function setPedSweat(ped: number, sweat: number): void { 
	return _in(0x27b0405f, 0x59637d1f, ped, _fv(sweat)); 
}

/**
 * enum eTargetLossResponseType
 * {
 * TLR_ExitTask,
 * TLR_NeverLoseTarget,
 * TLR_SearchForTarget
 * };
 * @param ped
 * @param responseType
 */
export function setPedTargetLossResponse(ped: number, responseType: number): void { 
	return _in(0x0703b907, 0x9823da4a, ped, responseType); 
}

export function setPedToInformRespectedFriends(ped: number, radius: number, maxFriends: number): void { 
	return _in(0x112942c6, 0xe708f70b, ped, _fv(radius), maxFriends); 
}

export function setPedToLoadCover(ped: number, toggle: boolean): void { 
	return _in(0x332b562e, 0xeda62399, ped, toggle); 
}

/**
 * p4/p5: Unused in TU27
 * Ragdoll Types:
 * **0**: CTaskNMRelax
 * **1**: CTaskNMScriptControl: Hardcoded not to work in networked environments.
 * **Else**: CTaskNMBalance
 * time1- Time(ms) Ped is in ragdoll mode; only applies to ragdoll types 0 and not 1.
 * 
 * time2- Unknown time, in milliseconds
 * 
 * ragdollType-
 * 0 : Normal ragdoll
 * 1 : Falls with stiff legs/body
 * 2 : Narrow leg stumble(may not fall)
 * 3 : Wide leg stumble(may not fall)
 * 
 * p4, p5, p6- No idea. In R*'s scripts they are usually either "true, true, false" or "false, false, false".
 * 
 * 
 * 
 * 
 * EDIT 3/11/16: unclear what 'mircoseconds' mean-- a microsecond is 1000x a ms, so time2 must be 1000x time1?  more testing needed.  -sob
 * 
 * Edit Mar 21, 2017: removed part about time2 being the microseconds version of time1. this just isn't correct. time2 is in milliseconds, and time1 and time2 don't seem to be connected in any way.
 * @param ped
 * @param time1
 * @param time2
 * @param ragdollType
 * @param p4
 * @param p5
 * @param p6
 */
export function setPedToRagdoll(ped: number, time1: number, time2: number, ragdollType: number, p4: boolean, p5: boolean, p6: boolean): boolean { 
	return _in(0xae99fb95, 0x5581844a, ped, time1, time2, ragdollType, p4, p5, p6, _r); 
}

/**
 * Return variable is never used in R*'s scripts.
 * 
 * Not sure what p2 does. It seems like it would be a time judging by it's usage in R*'s scripts, but didn't seem to affect anything in my testings.
 * 
 * enum eRagdollType
 * {
 * RD_MALE=0,
 * RD_FEMALE = 1,
 * RD_MALE_LARGE = 2,
 * RD_CUSTOM = 3,
 * }
 * 
 * x, y, and z are coordinates, most likely to where the ped will fall.
 * 
 * p8 to p13 are always 0f in R*'s scripts.
 * 
 * (Simplified) Example of the usage of the function from R*'s scripts:
 * ped::set_ped_to_ragdoll_with_fall(ped, 1500, 2000, 1, -entity::get_entity_forward_vector(ped), 1f, 0f, 0f, 0f, 0f, 0f, 0f);
 * 
 * @param ped
 * @param time
 * @param p2
 * @param ragdollType
 * @param x
 * @param y
 * @param z
 * @param velocity
 * @param p8
 * @param p9
 * @param p10
 * @param p11
 * @param p12
 * @param p13
 */
export function setPedToRagdollWithFall(ped: number, time: number, p2: number, ragdollType: number, x: number, y: number, z: number, velocity: number, p8: number, p9: number, p10: number, p11: number, p12: number, p13: number): boolean { 
	return _in(0xd76632d9, 0x9e4966c8, ped, time, p2, ragdollType, _fv(x), _fv(y), _fv(z), _fv(velocity), _fv(p8), _fv(p9), _fv(p10), _fv(p11), _fv(p12), _fv(p13), _r); 
}

export function setPedTreatedAsFriendly(p0: number, p1: number, p2: number): void { 
	return _in(0x0f626193, 0x93661d6e, p0, p1, p2); 
}

export function setPedUpperBodyDamageOnly(ped: number, toggle: boolean): void { 
	return _in(0xafc976fd, 0x0580c7b3, ped, toggle); 
}

/**
 * p2 is usually -1 in the scripts. action is either 0 or "DEFAULT_ACTION".
 * @param ped
 * @param p1
 * @param p2
 * @param action
 */
export function setPedUsingActionMode(ped: number, p1: boolean, p2: number, action: string): void { 
	return _in(0xd75accf5, 0xe0fb5367, ped, p1, p2, _ts(action)); 
}

/**
 * seatIndex must be <= 2
 * @param ped
 * @param vehicle
 * @param seatIndex
 * @param flags
 * @param p4
 */
export function setPedVehicleForcedSeatUsage(ped: number, vehicle: number, seatIndex: number, flags: number, p4: number): void { 
	return _in(0x952f06be, 0xecd775cc, ped, vehicle, seatIndex, flags, p4); 
}

export function setPedVisualFieldCenterAngle(ped: number, angle: number): void { 
	return _in(0x3b6405e8, 0xab34a907, ped, _fv(angle)); 
}

export function setPedVisualFieldMaxAngle(ped: number, value: number): void { 
	return _in(0x70793bdc, 0xa1e854d4, ped, _fv(value)); 
}

/**
 * This native refers to the field of vision the ped has above them, starting at 0 degrees. 90f would let the ped see enemies directly above of them.
 * @param ped
 * @param angle
 */
export function setPedVisualFieldMaxElevationAngle(ped: number, angle: number): void { 
	return _in(0x78d0b676, 0x29d75856, ped, _fv(angle)); 
}

export function setPedVisualFieldMinAngle(ped: number, value: number): void { 
	return _in(0x2db49222, 0x2fb21e26, ped, _fv(value)); 
}

/**
 * This native refers to the field of vision the ped has below them, starting at 0 degrees. The angle value should be negative.
 * -90f should let the ped see 90 degrees below them, for example.
 * @param ped
 * @param angle
 */
export function setPedVisualFieldMinElevationAngle(ped: number, angle: number): void { 
	return _in(0x7a276eb2, 0xc224d70f, ped, _fv(angle)); 
}

export function setPedVisualFieldPeripheralRange(ped: number, range: number): void { 
	return _in(0x9c74b0bc, 0x831b753a, ped, _fv(range)); 
}

/**
 * Assigns some ambient voice to the ped.
 * @param ped
 */
export function setPedVoiceFull(ped: number): void { 
	return _in(0x40cf0d12, 0xd142a9e8, ped); 
}

/**
 * From the scripts:
 * 
 * AUDIO::SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("PAIGE_PVG"));
 * AUDIO::SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("TALINA_PVG"));
 * AUDIO::SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("FEMALE_LOST_BLACK_PVG"));
 * AUDIO::SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("FEMALE_LOST_WHITE_PVG"));
 * @param ped
 * @param voiceGroupHash
 */
export function setPedVoiceGroup(ped: number, voiceGroupHash: number): void { 
	return _in(0x7cdc8c3b, 0x89f661b3, ped, _ch(voiceGroupHash)); 
}

/**
 * Dat151RelType == 29
 * @param ped
 * @param voiceGroupHash
 */
export function setPedVoiceGroupFromRaceToPvg(ped: number, voiceGroupHash: number): void { 
	return _in(0x0babc134, 0x5abbfb16, ped, _ch(voiceGroupHash)); 
}

export function setPedWallaDensity(p0: number, p1: number): void { 
	return _in(0x149aee66, 0xf0cb3a99, _fv(p0), _fv(p1)); 
}

export function setPedWaypointRouteOffset(ped: number, x: number, y: number, z: number): boolean { 
	return _in(0xed98e10b, 0x0afce4b4, ped, _fv(x), _fv(y), _fv(z), _r); 
}

/**
 * Colors:
 * 0 = Gray
 * 1 = Dark Gray
 * 2 = Black
 * 3 = White
 * 4 = Blue
 * 5 = Cyan
 * 6 = Aqua
 * 7 = Cool Blue
 * 8 = Dark Blue
 * 9 = Royal Blue
 * 10 = Plum
 * 11 = Dark Purple
 * 12 = Purple
 * 13 = Red
 * 14 = Wine Red
 * 15 = Magenta
 * 16 = Pink
 * 17 = Salmon
 * 18 = Hot Pink
 * 19 = Rust Orange
 * 20 = Brown
 * 21 = Earth
 * 22 = Orange
 * 23 = Light Orange
 * 24 = Dark Yellow
 * 25 = Yellow
 * 26 = Light Brown
 * 27 = Lime Green
 * 28 = Olive
 * 29 = Moss
 * 30 = Turquoise
 * 31 = Dark Green
 * Full list of weapons, components, tint indexes & weapon liveries by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param camoComponentHash
 * @param colorIndex
 */
export function setPedWeaponComponentTintIndex(ped: number, weaponHash: number, camoComponentHash: number, colorIndex: number): void { 
	return _in(0x9fe56338, 0x80ecd8ed, ped, _ch(weaponHash), _ch(camoComponentHash), colorIndex); 
}

export function setPedWeaponMovementClipset(ped: number, clipSet: string): void { 
	return _in(0x2622e35b, 0x77d3aca2, ped, _ts(clipSet)); 
}

/**
 * tintIndex can be the following:
 * 
 * 0 - Normal
 * 1 - Green
 * 2 - Gold
 * 3 - Pink
 * 4 - Army
 * 5 - LSPD
 * 6 - Orange
 * 7 - Platinum
 * Full list of weapons, components & tint indexes by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param ped
 * @param weaponHash
 * @param tintIndex
 */
export function setPedWeaponTintIndex(ped: number, weaponHash: number, tintIndex: number): void { 
	return _in(0x50969b9b, 0x89ed5738, ped, _ch(weaponHash), tintIndex); 
}

export function setPedWetness(ped: number, wetLevel: number): void { 
	return _in(0xac0bb4d8, 0x7777cae2, ped, _fv(wetLevel)); 
}

/**
 * combined with PED::SET_PED_WETNESS_HEIGHT(), this native makes the ped drenched in water up to the height specified in the other function
 * @param ped
 */
export function setPedWetnessEnabledThisFrame(ped: number): void { 
	return _in(0xb5485e49, 0x07b53019, ped); 
}

/**
 * It adds the wetness level to the player clothing/outfit. As if player just got out from water surface.
 * 
 * 
 * @param ped
 * @param height
 */
export function setPedWetnessHeight(ped: number, height: number): void { 
	return _in(0x44cb6447, 0xd2571aa0, ped, _fv(height)); 
}

export function setPedWillOnlyAttackWantedPlayer(p0: number, p1: number): void { 
	return _in(0x3e9679c1, 0xdfcf422c, p0, p1); 
}

/**
 * Sets some bit and float of vehicle. float is >= 0
 * @param vehicle
 * @param toggle
 * @param p2
 */
export function setPedsCanFallOffThisVehicleFromLargeFallDamage(vehicle: number, toggle: boolean, p2: number): void { 
	return _in(0x59c3757b, 0x3b7408e8, vehicle, toggle, _fv(p2)); 
}

export function setPickUpByCargobobDisabled(entity: number, toggle: boolean): void { 
	return _in(0xd7b80e7c, 0x3befc396, entity, toggle); 
}

export function setPickupAmmoAmountScaler(p0: number): void { 
	return _in(0xe620fd35, 0x12a04f18, _fv(p0)); 
}

export function setPickupCollidesWithProjectiles(p0: number, p1: number): void { 
	return _in(0xcea7c8e1, 0xb48ff68c, p0, p1); 
}

export function setPickupGenerationRangeMultiplier(multiplier: number): void { 
	return _in(0x318516e0, 0x2de3ece2, _fv(multiplier)); 
}

export function setPickupGlowDisabled(pickup: number, toggle: boolean): void { 
	return _in(0x08bd8ba5, 0xbde2c2fa, pickup, toggle); 
}

/**
 * p1 is always 0.51. This native is called before SET_PICKUP_REGENERATION_TIME in all occurances.
 * @param pickup
 * @param p1
 */
export function setPickupGlowOffset(pickup: number, p1: number): void { 
	return _in(0x0596843b, 0x34b95ce5, pickup, _fv(p1)); 
}

export function setPickupHiddenWhenUncollectable(pickup: number, toggle: boolean): void { 
	return _in(0x3ed2b83a, 0xb2e82799, pickup, toggle); 
}

/**
 * p0 is either 0 or 50 in scripts.
 * @param p0
 */
export function setPickupObjectAlphaWhenTransparent(p0: number): void { 
	return _in(0x8cff648f, 0xbd7330f1, p0); 
}

export function setPickupObjectArrowMarker(pickup: number, toggle: boolean): void { 
	return _in(0x39a5fb7e, 0xaf150840, pickup, toggle); 
}

export function setPickupObjectCollectableInVehicle(pickup: number): void { 
	return _in(0x7813e8b8, 0xc4ae4799, pickup); 
}

/**
 * p1 is always -0.2 in scripts and p2 is always true in scripts.
 * @param pickup
 * @param p1
 * @param p2
 */
export function setPickupObjectGlowOffset(pickup: number, p1: number, p2: boolean): void { 
	return _in(0xa08fe5e4, 0x9bdc39dd, pickup, _fv(p1), p2); 
}

export function setPickupObjectGlowWhenUncollectable(pickup: number, toggle: boolean): void { 
	return _in(0x27f248c3, 0xfebfaad3, pickup, toggle); 
}

export function setPickupObjectTransparentWhenUncollectable(pickup: number, toggle: boolean): void { 
	return _in(0x8881c98a, 0x31117998, pickup, toggle); 
}

export function setPickupRegenerationTime(pickup: number, duration: number): void { 
	return _in(0x78015c9b, 0x4b3ecc9d, pickup, duration); 
}

/**
 * min: 1.9f, max: 100.0f
 * @param cargobob
 * @param length1
 * @param length2
 * @param p3
 */
export function setPickupRopeLengthForCargobob(cargobob: number, length1: number, length2: number, p3: boolean): void { 
	return _in(0x877c1eae, 0xac531023, cargobob, _fv(length1), _fv(length2), p3); 
}

export function setPickupRopeLengthWithoutCreatingRopeForCargobob(p0: number, p1: number, p2: number): void { 
	return _in(0xc0ed6438, 0xe6d39ba8, p0, p1, p2); 
}

export function setPickupTrackDamageEvents(pickup: number, toggle: boolean): void { 
	return _in(0xbffe53ae, 0x7e67fcdc, pickup, toggle); 
}

export function setPickupTransparentWhenUncollectable(pickup: number, toggle: boolean): void { 
	return _in(0x858ec9fd, 0x25de04aa, pickup, toggle); 
}

export function setPickupUncollectable(pickup: number, toggle: boolean): void { 
	return _in(0x1c1b69fa, 0xe509ba97, pickup, toggle); 
}

export function setPlaneAvoidsOthers(vehicle: number, toggle: boolean): void { 
	return _in(0xbafb99b3, 0x04bc52a7, vehicle, toggle); 
}

export function setPlaneControlSectionsShouldBreakOffFromExplosions(vehicle: number, toggle: boolean): void { 
	return _in(0xdd8a2d33, 0x37f04196, vehicle, toggle); 
}

/**
 * Works just like SET_VEHICLE_ENGINE_HEALTH, but only for planes.
 * @param vehicle
 * @param health
 */
export function setPlaneEngineHealth(vehicle: number, health: number): void { 
	return _in(0x2a86a047, 0x5b6a1434, vehicle, _fv(health)); 
}

export function setPlanePropellerHealth(plane: number, health: number): boolean { 
	return _in(0x4c815eb1, 0x75086f84, plane, _fv(health), _r); 
}

export function setPlaneResistToExplosion(vehicle: number, toggle: boolean): void { 
	return _in(0xe16142b9, 0x4664defd, vehicle, toggle); 
}

export function setPlaneSectionDamageScale(vehicle: number, p1: number, p2: number): void { 
	return _in(0x0bbb9a7a, 0x8ffe931b, vehicle, p1, p2); 
}

/**
 * This native sets the turbulence multiplier. It only works for planes.
 * 0.0 = no turbulence at all.
 * 1.0 = heavy turbulence.
 * Works by just calling it once, does not need to be called every tick.
 * @param vehicle
 * @param multiplier
 */
export function setPlaneTurbulenceMultiplier(vehicle: number, multiplier: number): void { 
	return _in(0xad2d28a1, 0xafdff131, vehicle, _fv(multiplier)); 
}

export function setPlaybackSpeed(vehicle: number, speed: number): void { 
	return _in(0x6683ab88, 0x0e427778, vehicle, _fv(speed)); 
}

/**
 * Identical to SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER with 0 as arguments for p1 and p3.
 * @param vehicle
 * @param drivingStyle
 */
export function setPlaybackToUseAi(vehicle: number, drivingStyle: number): void { 
	return _in(0xa549c3b3, 0x7ea28131, vehicle, drivingStyle); 
}

/**
 * Time is number of milliseconds before reverting, zero for indefinitely.
 * @param vehicle
 * @param time
 * @param drivingStyle
 * @param p3
 */
export function setPlaybackToUseAiTryToRevertBackLater(vehicle: number, time: number, drivingStyle: number, p3: boolean): void { 
	return _in(0x6e63860b, 0xbb190730, vehicle, time, drivingStyle, p3); 
}

export function setPlayerAngry(ped: number, toggle: boolean): void { 
	return _in(0xea241bb0, 0x4110f091, ped, toggle); 
}

export function setPlayerBluetoothState(player: number, state: boolean): void { 
	return _in(0x5dc40a88, 0x69c22141, player, state); 
}

/**
 * Sets whether this player can be hassled by gangs.
 * @param player
 * @param toggle
 */
export function setPlayerCanBeHassledByGangs(player: number, toggle: boolean): void { 
	return _in(0xd5e460ad, 0x7020a246, player, toggle); 
}

export function setPlayerCanCollectDroppedMoney(player: number, p1: boolean): void { 
	return _in(0xcac57395, 0xb151135f, player, p1); 
}

export function setPlayerCanDamagePlayer(player1: number, player2: number, toggle: boolean): void { 
	return _in(0x55fcc0c3, 0x90620314, player1, player2, toggle); 
}

/**
 * Set whether this player should be able to do drive-bys.
 * 
 * "A drive-by is when a ped is aiming/shooting from vehicle. This includes middle finger taunts. By setting this value to false I confirm the player is unable to do all that. Tested on tick."
 * 
 * @param player
 * @param toggle
 */
export function setPlayerCanDoDriveBy(player: number, toggle: boolean): void { 
	return _in(0x6e8834b5, 0x2ec20c77, player, toggle); 
}

export function setPlayerCanLeaveParachuteSmokeTrail(player: number, enabled: boolean): void { 
	return _in(0xf401b182, 0xdba8af53, player, enabled); 
}

/**
 * Sets whether this player can take cover.
 * @param player
 * @param toggle
 */
export function setPlayerCanUseCover(player: number, toggle: boolean): void { 
	return _in(0xd465a859, 0x9dff6814, player, toggle); 
}

/**
 * 6 matches across 4 scripts. 5 occurrences were 240. The other was 255.
 * @param value
 */
export function setPlayerClothLockCounter(value: number): void { 
	return _in(0x14d913b7, 0x77dff5da, value); 
}

/**
 * Every occurrence was either 0 or 2.
 * @param index
 */
export function setPlayerClothPackageIndex(index: number): void { 
	return _in(0x9f7bba2e, 0xa6372500, index); 
}

export function setPlayerClothPinFrames(player: number, p1: number): void { 
	return _in(0x749faddf, 0x97dfe930, player, p1); 
}

/**
 * Flags:
 * SPC_AMBIENT_SCRIPT = (1 << 1),
 * SPC_CLEAR_TASKS = (1 << 2),
 * SPC_REMOVE_FIRES = (1 << 3),
 * SPC_REMOVE_EXPLOSIONS = (1 << 4),
 * SPC_REMOVE_PROJECTILES = (1 << 5),
 * SPC_DEACTIVATE_GADGETS = (1 << 6),
 * SPC_REENABLE_CONTROL_ON_DEATH = (1 << 7),
 * SPC_LEAVE_CAMERA_CONTROL_ON = (1 << 8),
 * SPC_ALLOW_PLAYER_DAMAGE = (1 << 9),
 * SPC_DONT_STOP_OTHER_CARS_AROUND_PLAYER = (1 << 10),
 * SPC_PREVENT_EVERYBODY_BACKOFF = (1 << 11),
 * SPC_ALLOW_PAD_SHAKE = (1 << 12)
 * 
 * See: https://alloc8or.re/gta5/doc/enums/eSetPlayerControlFlag.txt
 * @param player
 * @param bHasControl
 * @param flags
 */
export function setPlayerControl(player: number, bHasControl: boolean, flags: number): void { 
	return _in(0x8d32347d, 0x6d4c40a2, player, bHasControl, flags); 
}

export function setPlayerExplosiveDamageModifier(player: number, p1: number): void { 
	return _in(0xd821056b, 0x9acf8052, player, p1); 
}

export function setPlayerFallDistanceToTriggerRagdollOverride(player: number, p1: number): void { 
	return _in(0xefd79fa8, 0x1dfba9cb, player, _fv(p1)); 
}

export function setPlayerForceSkipAimIntro(player: number, toggle: boolean): void { 
	return _in(0x7651bc64, 0xae59e128, player, toggle); 
}

export function setPlayerForcedAim(player: number, toggle: boolean): void { 
	return _in(0x0fee4f80, 0xac44a726, player, toggle); 
}

export function setPlayerForcedZoom(player: number, toggle: boolean): void { 
	return _in(0x75e7d505, 0xf2b15902, player, toggle); 
}

export function setPlayerHasReserveParachute(player: number): void { 
	return _in(0x7ddab28d, 0x31fac363, player); 
}

export function setPlayerHealthRechargeMaxPercent(player: number, limit: number): void { 
	return _in(0xc388a0f0, 0x65f5bc34, player, _fv(limit)); 
}

/**
 * `regenRate`: The recharge multiplier, a value between 0.0 and 1.0.
 * Use 1.0 to reset it back to normal
 * @param player
 * @param regenRate
 */
export function setPlayerHealthRechargeMultiplier(player: number, regenRate: number): void { 
	return _in(0x5db660b3, 0x8dd98a31, player, _fv(regenRate)); 
}

export function setPlayerHomingDisabledForAllVehicleWeapons(p0: number, p1: number): void { 
	return _in(0xee4ebdd2, 0x593ba844, p0, p1); 
}

export function setPlayerIconColour(color: number): void { 
	return _in(0x7b21e0bb, 0x01e8224a, color); 
}

/**
 * Simply sets you as invincible (Health will not deplete).
 * 
 * Use 0x733A643B5B0C53C1 instead if you want Ragdoll enabled, which is equal to:
 * *(DWORD *)(playerPedAddress + 0x188) |= (1 << 9);
 * @param player
 * @param toggle
 */
export function setPlayerInvincible(player: number, toggle: boolean): void { 
	return _in(0x239528ea, 0xcdc3e7de, player, toggle); 
}

export function setPlayerInvincibleButHasReactions(player: number, toggle: boolean): void { 
	return _in(0x6bc97f4f, 0x4bb3c04b, player, toggle); 
}

export function setPlayerInvisibleLocally(player: number, bIncludePlayersVehicle: boolean): void { 
	return _in(0x12b37d54, 0x667db0b8, player, bIncludePlayersVehicle); 
}

/**
 * If toggle is true, the ped's head is shown in the pause menu
 * If toggle is false, the ped's head is not shown in the pause menu
 * @param toggle
 */
export function setPlayerIsInAnimalForm(toggle: boolean): void { 
	return _in(0x4ebb7e87, 0xaa0dbed4, toggle); 
}

/**
 * If toggle is true, hides special ability bar / character name in the pause menu
 * If toggle is false, shows special ability bar / character name in the pause menu
 * @param toggle
 */
export function setPlayerIsInDirectorMode(toggle: boolean): void { 
	return _in(0x80851937, 0x3fd336a3, toggle); 
}

export function setPlayerIsRepeatingAMission(toggle: boolean): void { 
	return _in(0x9d8d44ad, 0xbba61ef2, toggle); 
}

export function setPlayerLeavePedBehind(player: number, toggle: boolean): void { 
	return _in(0xff300c76, 0x49724a0b, player, toggle); 
}

/**
 * Example from fm_mission_controler.ysc.c4:
 * 
 * PLAYER::SET_PLAYER_LOCKON(PLAYER::PLAYER_ID(), 1);
 * 
 * All other decompiled scripts using this seem to be using the player id as the first parameter, so I feel the need to confirm it as so.
 * 
 * No need to confirm it says PLAYER_ID() so it uses PLAYER_ID() lol.
 * @param player
 * @param toggle
 */
export function setPlayerLockon(player: number, toggle: boolean): void { 
	return _in(0x5c8b2f45, 0x0ee4328e, player, toggle); 
}

/**
 * Affects the range of auto aim target.
 * @param player
 * @param range
 */
export function setPlayerLockonRangeOverride(player: number, range: number): void { 
	return _in(0x29961d49, 0x0e5814fd, player, _fv(range)); 
}

/**
 * Default is 100. Use player id and not ped id. For instance: PLAYER::SET_PLAYER_MAX_ARMOUR(PLAYER::PLAYER_ID(), 100); // main_persistent.ct4
 * @param player
 * @param value
 */
export function setPlayerMaxArmour(player: number, value: number): void { 
	return _in(0x77dfccf5, 0x948b8c71, player, value); 
}

export function setPlayerMaxExplosiveDamage(player: number, p1: number): void { 
	return _in(0x8d768602, 0xadef2245, player, _fv(p1)); 
}

export function setPlayerMayNotEnterAnyVehicle(player: number): void { 
	return _in(0x1de37bbf, 0x9e9cc14a, player); 
}

export function setPlayerMayOnlyEnterThisVehicle(player: number, vehicle: number): void { 
	return _in(0x8026ff78, 0xf208978a, player, vehicle); 
}

/**
 * modifier's min value is 0.1
 * @param player
 * @param modifier
 * @param p2
 */
export function setPlayerMeleeWeaponDamageModifier(player: number, modifier: number, p2: boolean): void { 
	return _in(0x4a3dc7ec, 0xcc321032, player, _fv(modifier), p2); 
}

/**
 * modifier's min value is 0.1
 * @param player
 * @param modifier
 */
export function setPlayerMeleeWeaponDefenseModifier(player: number, modifier: number): void { 
	return _in(0xae540335, 0xb4abc4e2, player, _fv(modifier)); 
}

/**
 * Set the model for a specific Player. Be aware that this will destroy the current Ped for the Player and create a new one, any reference to the old ped should be reset
 * Make sure to request the model first and wait until it has loaded.
 * @param player
 * @param model
 */
export function setPlayerModel(player: number, model: number): void { 
	return _in(0x00a1cadd, 0x00108836, player, _ch(model)); 
}

export function setPlayerNoiseMultiplier(player: number, multiplier: number): void { 
	return _in(0xdb89ef50, 0xff25fce9, player, _fv(multiplier)); 
}

export function setPlayerParachuteModelOverride(player: number, model: number): void { 
	return _in(0x977db464, 0x1f6fc3db, player, _ch(model)); 
}

export function setPlayerParachutePackModelOverride(player: number, model: number): void { 
	return _in(0xdc80a4c2, 0xf18a2b64, player, _ch(model)); 
}

/**
 * tints 0- 13
 * 0 - unkown
 * 1 - unkown
 * 2 - unkown
 * 3 - unkown
 * 4 - unkown
 * @param player
 * @param tintIndex
 */
export function setPlayerParachutePackTintIndex(player: number, tintIndex: number): void { 
	return _in(0x93b0fb27, 0xc9a04060, player, tintIndex); 
}

export function setPlayerParachuteSmokeTrailColor(player: number, r: number, g: number, b: number): void { 
	return _in(0x8217fd37, 0x1a4625cf, player, r, g, b); 
}

/**
 * Tints:
 * None = -1,
 * Rainbow = 0,
 * Red = 1,
 * SeasideStripes = 2,
 * WidowMaker = 3,
 * Patriot = 4,
 * Blue = 5,
 * Black = 6,
 * Hornet = 7,
 * AirFocce = 8,
 * Desert = 9,
 * Shadow = 10,
 * HighAltitude = 11,
 * Airbone = 12,
 * Sunrise = 13,
 * 
 * @param player
 * @param tintIndex
 */
export function setPlayerParachuteTintIndex(player: number, tintIndex: number): void { 
	return _in(0xa3d0e545, 0x41d9a5e5, player, tintIndex); 
}

/**
 * p1 was always 5.
 * p4 was always false.
 * @param player
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 */
export function setPlayerParachuteVariationOverride(player: number, p1: number, p2: number, p3: number, p4: boolean): void { 
	return _in(0xd9284a8c, 0x0d48352c, player, p1, p2, p3, p4); 
}

/**
 * Disabling/enabling a player from getting pickups. From the scripts:
 * 
 * OBJECT::SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 0);
 * OBJECT::SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 0);
 * OBJECT::SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 1);
 * OBJECT::SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 0);
 * OBJECT::SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(PLAYER::PLAYER_ID(), ${pickup_armour_standard}, 0);
 * OBJECT::SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(PLAYER::PLAYER_ID(), ${pickup_armour_standard}, 1);
 * 
 * Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
 * @param player
 * @param pickupHash
 * @param toggle
 */
export function setPlayerPermittedToCollectPickupsOfType(player: number, pickupHash: number, toggle: boolean): void { 
	return _in(0x616093ec, 0x6b139dd9, player, _ch(pickupHash), toggle); 
}

/**
 * example:
 * 
 * flags: 0-6
 * 
 * PLAYER::SET_PLAYER_RESET_FLAG_PREFER_REAR_SEATS(PLAYER::PLAYER_ID(), 6);
 * 
 * wouldnt the flag be the seatIndex?
 * @param player
 * @param flags
 */
export function setPlayerPhonePaletteIdx(player: number, flags: number): void { 
	return _in(0x11d5f725, 0xf0e780e0, player, flags); 
}

export function setPlayerPreviousVariationData(player: number, p1: number, p2: number, p3: number, p4: number, p5: number): void { 
	return _in(0x7bae6877, 0x5557ae0b, player, p1, p2, p3, p4, p5); 
}

export function setPlayerReserveParachuteModelOverride(player: number, model: number): void { 
	return _in(0x0764486a, 0xede748db, player, _ch(model)); 
}

/**
 * Tints:
 * None = -1,
 * Rainbow = 0,
 * Red = 1,
 * SeasideStripes = 2,
 * WidowMaker = 3,
 * Patriot = 4,
 * Blue = 5,
 * Black = 6,
 * Hornet = 7,
 * AirFocce = 8,
 * Desert = 9,
 * Shadow = 10,
 * HighAltitude = 11,
 * Airbone = 12,
 * Sunrise = 13,
 * @param player
 * @param index
 */
export function setPlayerReserveParachuteTintIndex(player: number, index: number): void { 
	return _in(0xaf04c87f, 0x5dc1df38, player, index); 
}

export function setPlayerShortSwitchStyle(p0: number): void { 
	return _in(0x5f2013f8, 0xbc24ee69, p0); 
}

export function setPlayerSimulateAiming(player: number, toggle: boolean): void { 
	return _in(0xc54c95da, 0x968ec5b5, player, toggle); 
}

/**
 * Values around 1.0f to 2.0f used in game scripts.
 * @param player
 * @param multiplier
 */
export function setPlayerSneakingNoiseMultiplier(player: number, multiplier: number): void { 
	return _in(0xb2c1a295, 0x88a9f47c, player, _fv(multiplier)); 
}

export function setPlayerSpectatedVehicleRadioOverride(p0: boolean): void { 
	return _in(0x2f7ceb65, 0x20288061, p0); 
}

export function setPlayerSprint(player: number, toggle: boolean): void { 
	return _in(0xa01b8075, 0xd8b92df4, player, toggle); 
}

export function setPlayerStealthPerceptionModifier(player: number, value: number): void { 
	return _in(0x4e9021c1, 0xfcdd507a, player, _fv(value)); 
}

/**
 * All names can be found in playerswitchestablishingshots.meta
 * @param name
 */
export function setPlayerSwitchEstablishingShot(name: string): void { 
	return _in(0x0fde9dbf, 0xc0a6bc65, _ts(name)); 
}

export function setPlayerSwitchOutro(cameraCoordX: number, cameraCoordY: number, cameraCoordZ: number, camRotationX: number, camRotationY: number, camRotationZ: number, camFov: number, camFarClip: number, rotationOrder: number): void { 
	return _in(0xc208b673, 0xce446b61, _fv(cameraCoordX), _fv(cameraCoordY), _fv(cameraCoordZ), _fv(camRotationX), _fv(camRotationY), _fv(camRotationZ), _fv(camFov), _fv(camFarClip), rotationOrder); 
}

export function setPlayerTargetLevel(targetLevel: number): void { 
	return _in(0x5702b917, 0xb99db1cd, targetLevel); 
}

/**
 * Sets your targeting mode.
 * 0 = Assisted Aim - Full
 * 1 = Assisted Aim - Partial
 * 2 = Free Aim - Assisted
 * 3 = Free Aim
 * @param targetMode
 */
export function setPlayerTargetingMode(targetMode: number): void { 
	return _in(0xb1906895, 0x227793f3, targetMode); 
}

export function setPlayerTargettableForAirDefenceSphere(player: number, zoneId: number, enable: boolean): void { 
	return _in(0xecdc202b, 0x25e5cf48, player, zoneId, enable); 
}

export function setPlayerTcmodifierTransition(value: number): void { 
	return _in(0xbdeb86f4, 0xd5809204, _fv(value)); 
}

/**
 * Set player team on deathmatch and last team standing..
 * @param player
 * @param team
 */
export function setPlayerTeam(player: number, team: number): void { 
	return _in(0x0299fa38, 0x396a4940, player, team); 
}

export function setPlayerUnderwaterBreathPercentRemaining(player: number, time: number): number { 
	return _in(0xa0d3e4f7, 0xaafb7e78, player, _fv(time), _r, _rf); 
}

export function setPlayerVehicleAlarmAudioActive(vehicle: number, toggle: boolean): void { 
	return _in(0x6fddad85, 0x6e36988a, vehicle, toggle); 
}

/**
 * modifier's min value is 0.1
 * @param player
 * @param modifier
 */
export function setPlayerVehicleDamageModifier(player: number, modifier: number): void { 
	return _in(0xa50e117c, 0xddf82f0c, player, _fv(modifier)); 
}

/**
 * modifier's min value is 0.1
 * @param player
 * @param modifier
 */
export function setPlayerVehicleDefenseModifier(player: number, modifier: number): void { 
	return _in(0x4c60e6ef, 0xdaff2462, player, _fv(modifier)); 
}

/**
 * Unsets playerPed+330 if the current weapon has certain flags.
 * @param p0
 */
export function setPlayerVehicleWeaponToNonHoming(p0: number): void { 
	return _in(0x237440e4, 0x6d918649, p0); 
}

export function setPlayerVisibleLocally(player: number, bIncludePlayersVehicle: boolean): void { 
	return _in(0xfaa10f1f, 0xafb11af2, player, bIncludePlayersVehicle); 
}

/**
 * # Predominant call signatures
 * PLAYER::SET_PLAYER_WANTED_CENTRE_POSITION(PLAYER::PLAYER_ID(), ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1));
 * 
 * # Parameter value ranges
 * P0: PLAYER::PLAYER_ID()
 * P1: ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1)
 * P2: Not set by any call
 * @param player
 * @param position
 * @param p2
 * @param p3
 */
export function setPlayerWantedCentrePosition(player: number, p2: boolean, p3: boolean): Vector3 { 
	return _in(0x520e541a, 0x97a13354, player, _v, p2, p3); 
}

/**
 * Call SET_PLAYER_WANTED_LEVEL_NOW for immediate effect
 * 
 * wantedLevel is an integer value representing 0 to 5 stars even though the game supports the 6th wanted level but no police will appear since no definitions are present for it in the game files
 * 
 * disableNoMission-  Disables When Off Mission- appears to always be false
 * 
 * @param player
 * @param wantedLevel
 * @param disableNoMission
 */
export function setPlayerWantedLevel(player: number, wantedLevel: number, disableNoMission: boolean): void { 
	return _in(0x39ff19c6, 0x4ef7da5b, player, wantedLevel, disableNoMission); 
}

/**
 * p2 is always false in R* scripts
 * @param player
 * @param wantedLevel
 * @param p2
 */
export function setPlayerWantedLevelNoDrop(player: number, wantedLevel: number, p2: boolean): void { 
	return _in(0x340e61de, 0x7f471565, player, wantedLevel, p2); 
}

/**
 * Forces any pending wanted level to be applied to the specified player immediately.
 * 
 * Call SET_PLAYER_WANTED_LEVEL with the desired wanted level, followed by SET_PLAYER_WANTED_LEVEL_NOW.
 * 
 * Second parameter is unknown (always false).
 * @param player
 * @param p1
 */
export function setPlayerWantedLevelNow(player: number, p1: boolean): void { 
	return _in(0xe0a7d1e4, 0x97ffcd6f, player, p1); 
}

/**
 * This modifies the damage value of your weapon. Whether it is a multiplier or base damage is unknown.
 * 
 * Based on tests, it is unlikely to be a multiplier.
 * 
 * modifier's min value is 0.1
 * @param player
 * @param modifier
 */
export function setPlayerWeaponDamageModifier(player: number, modifier: number): void { 
	return _in(0xce07b9f7, 0x817aada3, player, _fv(modifier)); 
}

/**
 * modifier's min value is 0.1
 * @param player
 * @param modifier
 */
export function setPlayerWeaponDefenseModifier(player: number, modifier: number): void { 
	return _in(0x2d83bc01, 0x1ca14a3c, player, _fv(modifier)); 
}

/**
 * modifier's min value is 0.1
 * @param player
 * @param modifier
 */
export function setPlayerWeaponMinigunDefenseModifier(player: number, modifier: number): void { 
	return _in(0xbcfde9ed, 0xe4cf27dc, player, _fv(modifier)); 
}

export function setPlayerWeaponTakedownDefenseModifier(player: number, p1: number): void { 
	return _in(0x31e90b88, 0x73a4cd3b, player, _fv(p1)); 
}

export function setPlayerpadShakesWhenControllerDisabled(toggle: boolean): void { 
	return _in(0x798fdeb5, 0xb1575088, toggle); 
}

export function setPlayersLastVehicle(vehicle: number): void { 
	return _in(0xbcdf8baf, 0x56c87b6a, vehicle); 
}

export function setPmWarningscreenActive(p0: boolean): void { 
	return _in(0x41350b4f, 0xc28e3941, p0); 
}

export function setPoliceFocusWillTrackVehicle(vehicle: number, toggle: boolean): void { 
	return _in(0x4e74e62e, 0x0a97e901, vehicle, toggle); 
}

/**
 * The player will be ignored by the police if toggle is set to true
 * @param player
 * @param toggle
 */
export function setPoliceIgnorePlayer(player: number, toggle: boolean): void { 
	return _in(0x32c62aa9, 0x29c2da6a, player, toggle); 
}

/**
 * If toggle is set to false:
 * The police won't be shown on the (mini)map
 * 
 * If toggle is set to true:
 * The police will be shown on the (mini)map
 * @param toggle
 */
export function setPoliceRadarBlips(toggle: boolean): void { 
	return _in(0x43286d56, 0x1b72b8bf, toggle); 
}

/**
 * Min and max are usually 100.0 and 200.0
 * @param x
 * @param y
 * @param z
 * @param min
 * @param max
 */
export function setPopControlSphereThisFrame(x: number, y: number, z: number, min: number, max: number): void { 
	return _in(0xd8c3be3e, 0xe94caf2d, _fv(x), _fv(y), _fv(z), _fv(min), _fv(max)); 
}

export function setPortablePickupPersist(pickup: number, toggle: boolean): void { 
	return _in(0x46f3add1, 0xe2d5baf2, pickup, toggle); 
}

/**
 * Found in the b617d scripts, duplicates removed:
 * 
 * AUDIO::SET_PORTAL_SETTINGS_OVERRIDE("V_CARSHOWROOM_PS_WINDOW_UNBROKEN", "V_CARSHOWROOM_PS_WINDOW_BROKEN");
 * 
 * AUDIO::SET_PORTAL_SETTINGS_OVERRIDE("V_CIA_PS_WINDOW_UNBROKEN", "V_CIA_PS_WINDOW_BROKEN");
 * 
 * AUDIO::SET_PORTAL_SETTINGS_OVERRIDE("V_DLC_HEIST_APARTMENT_DOOR_CLOSED", "V_DLC_HEIST_APARTMENT_DOOR_OPEN");
 * 
 * AUDIO::SET_PORTAL_SETTINGS_OVERRIDE("V_FINALEBANK_PS_VAULT_INTACT", "V_FINALEBANK_PS_VAULT_BLOWN");
 * 
 * AUDIO::SET_PORTAL_SETTINGS_OVERRIDE("V_MICHAEL_PS_BATHROOM_WITH_WINDOW", "V_MICHAEL_PS_BATHROOM_WITHOUT_WINDOW");
 * @param p0
 * @param p1
 */
export function setPortalSettingsOverride(p0: string, p1: string): void { 
	return _in(0x044dbad7, 0xa7fa2be5, _ts(p0), _ts(p1)); 
}

export function setPositionForNullConvPed(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0x33e3c6c6, 0xf2f0b506, p0, _fv(p1), _fv(p2), _fv(p3)); 
}

export function setPositionOffsetForRecordedVehiclePlayback(vehicle: number, x: number, y: number, z: number): void { 
	return _in(0x796a877e, 0x459b99ea, vehicle, _fv(x), _fv(y), _fv(z)); 
}

export function setPositionedPlayerVehicleRadioEmitterEnabled(p0: number): void { 
	return _in(0xda07819e, 0x452ffe8f, p0); 
}

/**
 * Sets profile setting 935
 * @param value
 */
export function setProfileSettingCreatorCtfDone(value: number): void { 
	return _in(0x55384438, 0xfc55ad8e, value); 
}

/**
 * Sets profile setting 934
 * @param value
 */
export function setProfileSettingCreatorDmDone(value: number): void { 
	return _in(0x38baaa5d, 0xd4c9d19f, value); 
}

/**
 * Sets profile setting 933
 * @param value
 */
export function setProfileSettingCreatorRacesDone(value: number): void { 
	return _in(0xf1a1803d, 0x3476f215, value); 
}

export function setProfileSettingPrologueComplete(): void { 
	return _in(0xb475f27c, 0x6a994d65); 
}

/**
 * Sets profile setting 939
 */
export function setProfileSettingSpChopMissionComplete(): void { 
	return _in(0xc67e2da1, 0xcbe759e2); 
}

export function setProjectilesShouldExplodeOnContact(entity: number, p1: number): void { 
	return _in(0x63ecf581, 0xbc70e363, entity, p1); 
}

export function setPropLightColor(object: number, p1: boolean, r: number, g: number, b: number): boolean { 
	return _in(0x5f048334, 0xb4a4e774, object, p1, r, g, b, _r); 
}

export function setPropTintIndex(p0: number, p1: number): void { 
	return _in(0x31574b1b, 0x41268673, p0, p1); 
}

export function setPtfxForceVehicleInteriorFlag(p0: number): void { 
	return _in(0xc6730e0d, 0x14e50703, p0); 
}

export function setRaceTrackRender(toggle: boolean): void { 
	return _in(0x1eac5f91, 0xbcbc5073, toggle); 
}

export function setRadarAsExteriorThisFrame(): void { 
	return _in(0xe81b7d2a, 0x3dab2d81); 
}

/**
 * List of interior hashes: https://pastebin.com/1FUyXNqY
 * Not for every interior zoom > 0 available.
 * @param interior
 * @param x
 * @param y
 * @param z
 * @param zoom
 */
export function setRadarAsInteriorThisFrame(interior: number, x: number, y: number, z: number, zoom: number): void { 
	return _in(0x59e727a1, 0xc9d3e31a, _ch(interior), _fv(x), _fv(y), z, zoom); 
}

/**
 * zoomLevel ranges from 0 to 1400 in R* Scripts
 * @param zoomLevel
 */
export function setRadarZoom(zoomLevel: number): void { 
	return _in(0x096ef57a, 0x0c999bba, zoomLevel); 
}

/**
 * zoom ranges from 0 to 90f in R* Scripts
 * @param zoom
 */
export function setRadarZoomPrecise(zoom: number): void { 
	return _in(0xbd12c5ee, 0xe184c337, _fv(zoom)); 
}

export function setRadarZoomToBlip(blip: number, zoom: number): void { 
	return _in(0xf98e4b3e, 0x56afc7b1, blip, _fv(zoom)); 
}

export function setRadarZoomToDistance(zoom: number): void { 
	return _in(0xcb7cc0d5, 0x8405ad41, _fv(zoom)); 
}

export function setRadioAutoUnfreeze(toggle: boolean): void { 
	return _in(0xc1aa9f53, 0xce982990, toggle); 
}

export function setRadioFrontendFadeTime(fadeTime: number): void { 
	return _in(0x2c96cdb0, 0x4fca358e, _fv(fadeTime)); 
}

/**
 * Does nothing (it's a nullsub).
 * @param p0
 */
export function setRadioPositionAudioMute(p0: boolean): void { 
	return _in(0x02e93c79, 0x6abd3a97, p0); 
}

/**
 * Tune Backwards...
 */
export function setRadioRetuneDown(): void { 
	return _in(0xdd6bcf9e, 0x94425df9); 
}

/**
 * Tune Forward...
 */
export function setRadioRetuneUp(): void { 
	return _in(0xff266d1d, 0x0eb1195d); 
}

/**
 * Doesn't have an effect in Story Mode.
 * @param radioStation
 * @param toggle
 */
export function setRadioStationAsFavourite(radioStation: string, toggle: boolean): void { 
	return _in(0x4cafebfa, 0x21ec188d, _ts(radioStation), toggle); 
}

/**
 * 6 calls in the b617d scripts, removed identical lines:
 * 
 * AUDIO::SET_RADIO_STATION_MUSIC_ONLY("RADIO_01_CLASS_ROCK", 1);
 * AUDIO::SET_RADIO_STATION_MUSIC_ONLY(AUDIO::GET_RADIO_STATION_NAME(10), 0);
 * AUDIO::SET_RADIO_STATION_MUSIC_ONLY(AUDIO::GET_RADIO_STATION_NAME(10), 1);
 * @param radioStation
 * @param toggle
 */
export function setRadioStationMusicOnly(radioStation: string, toggle: boolean): void { 
	return _in(0x774bd811, 0xf656a122, _ts(radioStation), toggle); 
}

/**
 * Sets radio station by index.
 * @param radioStation
 */
export function setRadioToStationIndex(radioStation: number): void { 
	return _in(0xa619b168, 0xb8a8570f, radioStation); 
}

/**
 * List of radio stations that are in the wheel, in clockwise order, as of LS Tuners DLC: https://git.io/J8a3k
 * An older list including hidden radio stations: https://pastebin.com/Kj9t38KF
 * @param stationName
 */
export function setRadioToStationName(stationName: string): void { 
	return _in(0xc69eda28, 0x699d5107, _ts(stationName)); 
}

/**
 * Only found this one in the decompiled scripts:
 * 
 * AUDIO::SET_RADIO_TRACK("RADIO_03_HIPHOP_NEW", "ARM1_RADIO_STARTS");
 * 
 * @param radioStation
 * @param radioTrack
 */
export function setRadioTrack(radioStation: string, radioTrack: string): void { 
	return _in(0xb39786f2, 0x01fee30b, _ts(radioStation), _ts(radioTrack)); 
}

export function setRadioTrackWithStartOffset(radioStationName: string, mixName: string, p2: number): void { 
	return _in(0x2cb00751, 0x10be1e56, _ts(radioStationName), _ts(mixName), p2); 
}

/**
 * Enabling this on a radius blip will make it outline only. See https://cdn.discordapp.com/attachments/553235301632573459/575132227935928330/unknown.png
 * @param blip
 * @param toggle
 */
export function setRadiusBlipEdge(blip: number, toggle: boolean): void { 
	return _in(0x25615540, 0xd894b814, blip, toggle); 
}

/**
 * Works for both player and peds,
 * 
 * enum eRagdollBlockingFlags
 * {
 * RBF_BULLET_IMPACT = 0,
 * RBF_VEHICLE_IMPACT = 1,
 * RBF_FIRE = 2,
 * RBF_ELECTROCUTION = 3,
 * RBF_PLAYER_IMPACT = 4,
 * RBF_EXPLOSION = 5,0
 * RBF_IMPACT_OBJECT = 6,
 * RBF_MELEE = 7,
 * RBF_RUBBER_BULLET = 8,
 * RBF_FALLING = 9,
 * RBF_WATER_JET = 10,
 * RBF_DROWNING = 11,
 * _0x9F52E2C4 = 12,
 * RBF_PLAYER_BUMP = 13,
 * RBF_PLAYER_RAGDOLL_BUMP = 14,
 * RBF_PED_RAGDOLL_BUMP = 15,
 * RBF_VEHICLE_GRAB = 16,
 * RBF_SMOKE_GRENADE = 17,
 * };
 * 
 * 
 * @param ped
 * @param blockingFlag
 */
export function setRagdollBlockingFlags(ped: number, blockingFlag: number): void { 
	return _in(0x26695ec7, 0x67728d84, ped, blockingFlag); 
}

/**
 * With an `intensity` higher than `0.5f`, only the creation of puddles gets faster, rain and rain sound won't increase after that.
 * With an `intensity` of `0.0f` rain and rain sounds are disabled and there won't be any new puddles.
 * To use the rain intensity of the current weather, call this native with `-1f` as `intensity`.
 * @param intensity
 */
export function setRain(intensity: number): void { 
	return _in(0x643e26ea, 0x6e024d92, _fv(intensity)); 
}

export function setRandomBoats(toggle: boolean): void { 
	return _in(0x84436ec2, 0x93b1415f, toggle); 
}

export function setRandomBoatsMp(toggle: boolean): void { 
	return _in(0xda5e12f7, 0x28db30ca, toggle); 
}

/**
 * If the parameter is true, sets the random event flag to true, if the parameter is false, the function does nothing at all.
 * Does nothing if the mission flag is set.
 * @param toggle
 */
export function setRandomEventFlag(toggle: boolean): void { 
	return _in(0x97192708, 0x6cfd2158, toggle); 
}

export function setRandomSeed(seed: number): void { 
	return _in(0x444d98f9, 0x8c11f3ec, seed); 
}

export function setRandomTrains(toggle: boolean): void { 
	return _in(0x80d9f741, 0x97ea47d9, toggle); 
}

export function setRandomVehicleDensityMultiplierThisFrame(multiplier: number): void { 
	return _in(0xb3b33593, 0x79fe77d3, _fv(multiplier)); 
}

export function setRandomWeatherType(): void { 
	return _in(0x8b05f884, 0xcf7e8020); 
}

export function setReducePedModelBudget(toggle: boolean): void { 
	return _in(0x77b5f9a3, 0x6bf96710, toggle); 
}

export function setReduceVehicleModelBudget(toggle: boolean): void { 
	return _in(0x80c52789, 0x3080ccf3, toggle); 
}

/**
 * Lowers the vehicle's stance. Only works for vehicles that have strAdvancedFlags 0x8000 and 0x4000000 set.
 * @param vehicle
 * @param enable
 */
export function setReducedSuspensionForce(vehicle: number, enable: boolean): void { 
	return _in(0x3a375167, 0xf5782a65, vehicle, enable); 
}

/**
 * Sets the relationship between two groups. This should be called twice (once for each group).
 * 
 * Relationship types:
 * 0 = Companion
 * 1 = Respect
 * 2 = Like
 * 3 = Neutral
 * 4 = Dislike
 * 5 = Hate
 * 255 = Pedestrians
 * 
 * Example:
 * PED::SET_RELATIONSHIP_BETWEEN_GROUPS(2, l_1017, 0xA49E591C);
 * PED::SET_RELATIONSHIP_BETWEEN_GROUPS(2, 0xA49E591C, l_1017);
 * @param relationship
 * @param group1
 * @param group2
 */
export function setRelationshipBetweenGroups(relationship: number, group1: number, group2: number): void { 
	return _in(0xbf25eb89, 0x375a37ad, relationship, _ch(group1), _ch(group2)); 
}

export function setRelationshipGroupAffectsWantedLevel(group: number, p1: boolean): void { 
	return _in(0x5615e0c5, 0xeb2bc6e2, _ch(group), p1); 
}

export function setRemainingNitrousDuration(vehicle: number, duration: number): void { 
	return _in(0x1ad0f63a, 0x94e10eff, vehicle, _fv(duration)); 
}

/**
 * Enables ghosting between specific players
 * @param player
 * @param p1
 */
export function setRemotePlayerAsGhost(player: number, p1: boolean): void { 
	return _in(0xa7c511fa, 0x1c5bda38, player, p1); 
}

export function setRemotePlayerVisibleInCutscene(player: number, locallyVisible: boolean): void { 
	return _in(0x96320e65, 0x49dae7b4, player, locallyVisible); 
}

export function setRenderHdOnly(toggle: boolean): void { 
	return _in(0x40aefd1a, 0x244741f2, toggle); 
}

/**
 * Makes the train all jumbled up and derailed as it moves on the tracks (though that wont stop it from its normal operations)
 * @param train
 * @param toggle
 */
export function setRenderTrainAsDerailed(train: number, toggle: boolean): void { 
	return _in(0x317b11a3, 0x12df5534, train, toggle); 
}

export function setReplaySystemPausedForSave(p0: boolean): void { 
	return _in(0xe058175f, 0x8eafe79a, p0); 
}

export function setRestartCoordOverride(x: number, y: number, z: number, heading: number): void { 
	return _in(0x706b5edc, 0xaa7fa663, _fv(x), _fv(y), _fv(z), _fv(heading)); 
}

export function setRestoreFocusEntity(p0: number): void { 
	return _in(0x0811381e, 0xf5062fec, p0); 
}

/**
 * Activates (usused?) riot mode. All NPCs are being hostile to each other (including player). Also the game will give weapons (pistols, smgs) to random NPCs.
 * @param toggle
 */
export function setRiotModeEnabled(toggle: boolean): void { 
	return _in(0x2587a48b, 0xc88dfadf, toggle); 
}

export function setRoadsBackToOriginal(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): void { 
	return _in(0x1ee7063b, 0x80ffc77c, _fv(p0), _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), p6); 
}

/**
 * See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
 * bool p7 - always 1
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param width
 * @param p7
 */
export function setRoadsBackToOriginalInAngledArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number, p7: number): void { 
	return _in(0x0027501b, 0x9f3b407e, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(width), p7); 
}

/**
 * unknown3 is related to `SEND_SCRIPT_WORLD_STATE_EVENT > CNetworkRoadNodeWorldStateData` in networked environments.
 * See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param width
 * @param unknown1
 * @param unknown2
 * @param unknown3
 */
export function setRoadsInAngledArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number, unknown1: boolean, unknown2: boolean, unknown3: boolean): void { 
	return _in(0x1a5aa120, 0x8af5db59, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(width), unknown1, unknown2, unknown3); 
}

/**
 * When nodeEnabled is set to false, all nodes in the area get disabled.
 * `GET_VEHICLE_NODE_IS_SWITCHED_OFF` returns true afterwards.
 * If it's true, `GET_VEHICLE_NODE_IS_SWITCHED_OFF` returns false.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param nodeEnabled
 * @param unknown2
 */
export function setRoadsInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, nodeEnabled: boolean, unknown2: boolean): void { 
	return _in(0xbf1a602b, 0x5ba52fee, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), nodeEnabled, unknown2); 
}

export function setRocketBoostActive(vehicle: number, active: boolean): void { 
	return _in(0x81e1552e, 0x35dc3839, vehicle, active); 
}

export function setRocketBoostFill(vehicle: number, percentage: number): void { 
	return _in(0xfeb2dded, 0x3509562e, vehicle, _fv(percentage)); 
}

/**
 * Usage: INTERIOR::SET_ROOM_FOR_GAME_VIEWPORT_BY_KEY(INTERIOR::GET_KEY_FOR_ENTITY_IN_ROOM(PLAYER::PLAYER_PED_ID()));
 * @param roomHashKey
 */
export function setRoomForGameViewportByKey(roomHashKey: number): void { 
	return _in(0x405dc2ae, 0xf6af95b9, _ch(roomHashKey)); 
}

/**
 * Example of use (carmod_shop)
 * INTERIOR::SET_ROOM_FOR_GAME_VIEWPORT_BY_NAME("V_CarModRoom");
 * @param roomName
 */
export function setRoomForGameViewportByName(roomName: string): void { 
	return _in(0xaf348afc, 0xb575a441, _ts(roomName)); 
}

/**
 * Multiplier goes up to 1.49 any value above will be completely overruled by the game and the multiplier will not take effect, this can be edited in memory however.
 * 
 * Just call it one time, it is not required to be called once every tick.
 * 
 * Note: At least the IDA method if you change the max float multiplier from 1.5 it will change it for both this and SWIM above. I say 1.5 as the function blrs if what you input is greater than or equal to 1.5 hence why it's 1.49 max default.
 * @param player
 * @param multiplier
 */
export function setRunSprintMultiplierForPlayer(player: number, multiplier: number): void { 
	return _in(0x6db47aa7, 0x7fd94e09, player, _fv(multiplier)); 
}

export function setSaveHouse(savehouseHandle: number, p1: boolean, p2: boolean): void { 
	return _in(0x4f548cab, 0xeae553bc, savehouseHandle, p1, p2); 
}

/**
 * ignoreVehicle - bypasses vehicle check of the local player (it will not open if you are in a vehicle and this is set to false)
 * @param ignoreVehicle
 */
export function setSaveMenuActive(ignoreVehicle: boolean): void { 
	return _in(0xc9bf75d2, 0x8165ff77, ignoreVehicle); 
}

/**
 * Sets profile setting 501
 * @param transactionId
 */
export function setSaveMigrationTransactionIdWarning(transactionId: number): void { 
	return _in(0xf6792800, 0xac95350d, transactionId); 
}

export function setSavegameListUniqueId(p0: number): void { 
	return _in(0x0cf54f20, 0xde43879c, p0); 
}

export function setScaleformMovieAsNoLongerNeeded(scaleformHandle: number): number { 
	return _in(0x1d132d61, 0x4dd86811, _ii(scaleformHandle)); 
}

export function setScaleformMovieNamedAsNoLongerNeeded(scaleformHandle: number, scaleformName: string): void { 
	return _in(0x2fdfb1b0, 0x4c76e9c3, scaleformHandle, _ts(scaleformName)); 
}

export function setScaleformMovieToUseLargeRt(scaleformHandle: number, toggle: boolean): void { 
	return _in(0x32f34ff7, 0xf617643b, scaleformHandle, toggle); 
}

/**
 * This native is used in some casino scripts to fit the scaleform in the rendertarget.
 * @param scaleformHandle
 * @param toggle
 */
export function setScaleformMovieToUseSuperLargeRt(scaleformHandle: number, toggle: boolean): void { 
	return _in(0xe6a9f00d, 0x4240b519, scaleformHandle, toggle); 
}

export function setScaleformMovieToUseSystemTime(scaleform: number, toggle: boolean): void { 
	return _in(0x6d8eb211, 0x944dce08, scaleform, toggle); 
}

/**
 * Full list of scenario groups used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenarioGroupNames.json
 * Occurrences in the b617d scripts: https://pastebin.com/Tvg2PRHU
 * @param scenarioGroup
 * @param enabled
 */
export function setScenarioGroupEnabled(scenarioGroup: string, enabled: boolean): void { 
	return _in(0x02c8e5b4, 0x9848664e, _ts(scenarioGroup), enabled); 
}

export function setScenarioPedDensityMultiplierThisFrame(p0: number, p1: number): void { 
	return _in(0x7a556143, 0xa1c03898, _fv(p0), _fv(p1)); 
}

export function setScenarioPedsSpawnInSphereArea(x: number, y: number, z: number, range: number, p4: number): void { 
	return _in(0x28157d43, 0xcf600981, _fv(x), _fv(y), _fv(z), _fv(range), p4); 
}

/**
 * Sets a value indicating whether scenario peds should be returned by the next call to a command that returns peds. Eg. GET_CLOSEST_PED.
 * @param value
 */
export function setScenarioPedsToBeReturnedByNextCommand(value: boolean): void { 
	return _in(0x14f19a87, 0x82c8071e, value); 
}

/**
 * Full list of scenario types used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenariosCompact.json
 * seems to enable/disable specific scenario-types from happening in the game world.
 * 
 * Here are some scenario types from the scripts:
 * "WORLD_MOUNTAIN_LION_REST"
 * "WORLD_MOUNTAIN_LION_WANDER"
 * "DRIVE"
 * "WORLD_VEHICLE_POLICE_BIKE"
 * "WORLD_VEHICLE_POLICE_CAR"
 * "WORLD_VEHICLE_POLICE_NEXT_TO_CAR"
 * "WORLD_VEHICLE_DRIVE_SOLO"
 * "WORLD_VEHICLE_BIKER"
 * "WORLD_VEHICLE_DRIVE_PASSENGERS"
 * "WORLD_VEHICLE_SALTON_DIRT_BIKE"
 * "WORLD_VEHICLE_BICYCLE_MOUNTAIN"
 * "PROP_HUMAN_SEAT_CHAIR"
 * "WORLD_VEHICLE_ATTRACTOR"
 * "WORLD_HUMAN_LEANING"
 * "WORLD_HUMAN_HANG_OUT_STREET"
 * "WORLD_HUMAN_DRINKING"
 * "WORLD_HUMAN_SMOKING"
 * "WORLD_HUMAN_GUARD_STAND"
 * "WORLD_HUMAN_CLIPBOARD"
 * "WORLD_HUMAN_HIKER"
 * "WORLD_VEHICLE_EMPTY"
 * "WORLD_VEHICLE_BIKE_OFF_ROAD_RACE"
 * "WORLD_HUMAN_PAPARAZZI"
 * "WORLD_VEHICLE_PARK_PERPENDICULAR_NOSE_IN"
 * "WORLD_VEHICLE_PARK_PARALLEL"
 * "WORLD_VEHICLE_CONSTRUCTION_SOLO"
 * "WORLD_VEHICLE_CONSTRUCTION_PASSENGERS"
 * "WORLD_VEHICLE_TRUCK_LOGS"
 * 
 * scenarioType could be the same as scenarioName, used in for example TASK::TASK_START_SCENARIO_AT_POSITION.
 * @param scenarioType
 * @param toggle
 */
export function setScenarioTypeEnabled(scenarioType: string, toggle: boolean): void { 
	return _in(0xeb47ec4e, 0x34fb7ee1, _ts(scenarioType), toggle); 
}

export function setSceneStreamingTracksCamPosThisFrame(): void { 
	return _in(0x1e9057a7, 0x4fd73e23); 
}

export function setScriptAsNoLongerNeeded(scriptName: string): void { 
	return _in(0xc90d2dca, 0xcd56184c, _ts(scriptName)); 
}

/**
 * Sets the cutscene's owning thread ID.
 * @param threadId
 */
export function setScriptCanStartCutscene(threadId: number): void { 
	return _in(0x8d9df6ec, 0xa8768583, threadId); 
}

export function setScriptFirePosition(coordX: number, coordY: number, coordZ: number): void { 
	return _in(0x70a382ad, 0xec069dd3, _fv(coordX), _fv(coordY), _fv(coordZ)); 
}

/**
 * horizontalAlign: The horizontal alignment. This can be 67 ('C'), 76 ('L'), or 82 ('R').
 * verticalAlign: The vertical alignment. This can be 67 ('C'), 66 ('B'), or 84 ('T').
 * 
 * This function anchors script draws to a side of the safe zone. This needs to be called to make the interface independent of the player's safe zone configuration.
 * 
 * These values are equivalent to alignX and alignY in common:/data/ui/frontend.xml, which can be used as a baseline for default alignment.
 * 
 * Using any other value (including 0) will result in the safe zone not being taken into account for this draw. The canonical value for this is 'I' (73).
 * 
 * For example, you can use SET_SCRIPT_GFX_ALIGN(0, 84) to only scale on the Y axis (to the top), but not change the X axis.
 * 
 * To reset the value, use RESET_SCRIPT_GFX_ALIGN.
 * @param horizontalAlign
 * @param verticalAlign
 */
export function setScriptGfxAlign(horizontalAlign: number, verticalAlign: number): void { 
	return _in(0xb8a850f2, 0x0a067eb6, horizontalAlign, verticalAlign); 
}

/**
 * Sets the draw offset/calculated size for SET_SCRIPT_GFX_ALIGN. If using any alignment other than left/top, the game expects the width/height to be configured using this native in order to get a proper starting position for the draw command.
 * @param x
 * @param y
 * @param w
 * @param h
 */
export function setScriptGfxAlignParams(x: number, y: number, w: number, h: number): void { 
	return _in(0xf5a2c681, 0x787e579d, _fv(x), _fv(y), _fv(w), _fv(h)); 
}

/**
 * Sets a flag defining whether or not script draw commands should continue being drawn behind the pause menu. This is usually used for TV channels and other draw commands that are used with a world render target.
 * @param toggle
 */
export function setScriptGfxDrawBehindPausemenu(toggle: boolean): void { 
	return _in(0xc6372ecd, 0x45d73bcd, toggle); 
}

/**
 * Sets the draw order for script draw commands.
 * 
 * Examples from decompiled scripts:
 * GRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER(7);
 * GRAPHICS::DRAW_RECT(0.5, 0.5, 3.0, 3.0, v_4, v_5, v_6, a_0._f172, 0);
 * 
 * GRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER(1);
 * GRAPHICS::DRAW_RECT(0.5, 0.5, 1.5, 1.5, 0, 0, 0, 255, 0);
 * @param drawOrder
 */
export function setScriptGfxDrawOrder(drawOrder: number): void { 
	return _in(0x61bb1d9b, 0x3a95d802, drawOrder); 
}

/**
 * Sets GtaThread+0x14A
 * @param toggle
 */
export function setScriptHighPrio(toggle: boolean): void { 
	return _in(0x65d2ebb4, 0x7e1cec21, toggle); 
}

export function setScriptRampImpulseScale(vehicle: number, impulseScale: number): void { 
	return _in(0xefc13b1c, 0xe30d755d, vehicle, _fv(impulseScale)); 
}

export function setScriptRocketBoostRechargeTime(vehicle: number, seconds: number): void { 
	return _in(0xe00f2ab1, 0x00b76e89, vehicle, _fv(seconds)); 
}

export function setScriptTaskEnableCollisionOnNetworkCloneWhenFixed(ped: number, enable: boolean): void { 
	return _in(0x32f6eef0, 0x31f943dc, ped, enable); 
}

export function setScriptUpdateDoorAudio(doorHash: number, toggle: boolean): void { 
	return _in(0x06c0023b, 0xed16dd6b, _ch(doorHash), toggle); 
}

/**
 * Sets the color of HUD_COLOUR_SCRIPT_VARIABLE
 * @param r
 * @param g
 * @param b
 * @param a
 */
export function setScriptVariableHudColour(r: number, g: number, b: number, a: number): void { 
	return _in(0xd68a5ff8, 0xa3a89874, r, g, b, a); 
}

/**
 * Only called once in the decompiled scripts. Presumably activates the specified generator.
 * @param vehicleGenerator
 * @param enabled
 */
export function setScriptVehicleGenerator(vehicleGenerator: number, enabled: boolean): void { 
	return _in(0xd9d620e0, 0xac6dc4b0, vehicleGenerator, enabled); 
}

export function setScriptWithNameHashAsNoLongerNeeded(scriptHash: number): void { 
	return _in(0xc5bc0389, 0x60e9db27, _ch(scriptHash)); 
}

export function setScriptedAnimSeatOffset(ped: number, p1: number): void { 
	return _in(0x5917bba3, 0x2d06c230, ped, _fv(p1)); 
}

export function setScriptedCameraIsFirstPersonThisFrame(p0: boolean): void { 
	return _in(0x469f2ecd, 0xec046337, p0); 
}

export function setScriptedConversionCoordThisFrame(x: number, y: number, z: number): void { 
	return _in(0x5086c784, 0x3552cf85, _fv(x), _fv(y), _fv(z)); 
}

/**
 * Disables some other rendering (internal)
 */
export function setScriptsHaveCleanedUpForReplaySystem(): void { 
	return _in(0x5ad3932d, 0xaeb1e5d3); 
}

/**
 * Sets the color of HUD_COLOUR_SCRIPT_VARIABLE_2
 * @param r
 * @param g
 * @param b
 * @param a
 */
export function setSecondScriptVariableHudColour(r: number, g: number, b: number, a: number): void { 
	return _in(0x16a304e6, 0xcb2bfab9, r, g, b, a); 
}

/**
 * Toggles Heatvision on/off.
 * @param toggle
 */
export function setSeethrough(toggle: boolean): void { 
	return _in(0x7e089242, 0x59e08ce0, toggle); 
}

export function setSequenceToRepeat(taskSequenceId: number, repeat: boolean): void { 
	return _in(0x58c70cf3, 0xa41e4ae7, taskSequenceId, repeat); 
}

/**
 * Used on helicopters and blimps during the CTaskVehicleLand task. Sets a value on the task to 10f
 * @param vehicle
 */
export function setShortSlowdownForLanding(vehicle: number): void { 
	return _in(0x107a473d, 0x7a6647a9, vehicle); 
}

/**
 * A vehicle recording playback flag only used in jewelry_heist
 * @param vehicle
 * @param p1
 */
export function setShouldLerpFromAiToFullRecording(vehicle: number, p1: boolean): void { 
	return _in(0x063ae2b2, 0xcc273588, vehicle, p1); 
}

/**
 * Resets the vehicle's turret to its default position in scripted cameras. Doesn't seem to affect turrets that are occupied by a ped.
 * @param vehicle
 * @param shouldReset
 */
export function setShouldResetTurretInScriptedCameras(vehicle: number, shouldReset: boolean): void { 
	return _in(0x78ceee41, 0xf49f421f, vehicle, shouldReset); 
}

export function setSirenBypassMpDriverCheck(vehicle: number, toggle: boolean): void { 
	return _in(0xf584cf85, 0x29b51434, vehicle, toggle); 
}

export function setSirenCanBeControlledByAudio(vehicle: number, p1: boolean): void { 
	return _in(0x43fa0dfc, 0x5df87815, vehicle, p1); 
}

export function setSirenWithNoDriver(vehicle: number, toggle: boolean): void { 
	return _in(0x1fef0683, 0xb96ebcf2, vehicle, toggle); 
}

export function setSkidmarkRangeScale(scale: number): void { 
	return _in(0x5dbf05db, 0x5926d089, _fv(scale)); 
}

export function setSkipMinigunSpinUpAudio(p0: boolean): void { 
	return _in(0xbef34b1d, 0x9624d5dd, p0); 
}

/**
 * Disables the screen effects and sound effects when driving over a slowdown pad.
 * @param disabled
 */
export function setSlowDownEffectDisabled(disabled: boolean): void { 
	return _in(0x65b08055, 0x5ea48149, disabled); 
}

export function setSnow(level: number): void { 
	return _in(0x7f06937b, 0x0cdcbc1a, _fv(level)); 
}

/**
 * HUD::SET_SOCIAL_CLUB_TOUR("Gallery");
 * HUD::SET_SOCIAL_CLUB_TOUR("Missions");
 * HUD::SET_SOCIAL_CLUB_TOUR("General");
 * HUD::SET_SOCIAL_CLUB_TOUR("Playlists");
 * @param name
 */
export function setSocialClubTour(name: string): void { 
	return _in(0x9e778248, 0xd6685fe0, _ts(name)); 
}

export function setSpecialAbilityMp(player: number, p1: number, p2: number): void { 
	return _in(0xb214d570, 0xead7f81a, player, p1, p2); 
}

export function setSpecialAbilityMultiplier(multiplier: number): void { 
	return _in(0xa49c426e, 0xd0ca4ab7, _fv(multiplier)); 
}

/**
 * It will override the ability to transform deluxo. For oppressor it will work just like SET_DISABLE_HOVER_MODE_FLIGHT
 * @param vehicle
 * @param toggle
 */
export function setSpecialFlightModeAllowed(vehicle: number, toggle: boolean): void { 
	return _in(0xf1211889, 0xdf15a763, vehicle, toggle); 
}

/**
 * Used in conjunction with SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO, in Rockstar's scripts. Using this will instantly transform the vehicle into hover mode starting from the given ratio (ranging from 0.0 to 1.0, values greater than 1.0 will put the vehicle into a glitched state.) If this is not used alongside SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO, the vehicle will automatically transform back into car mode.
 * 
 * Usable only with the deluxo and other vehicles with deluxo-like hover mode toggle, modded or otherwise. Does nothing when used on oppressor2.
 * 
 * Example:
 * Ped playerPed = PLAYER::PLAYER_PED_ID();
 * Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);
 * VEHICLE::SET_SPECIAL_FLIGHT_MODE_RATIO(veh, 0.7f);
 * VEHICLE::SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO(veh, 1.0f);
 * @param vehicle
 * @param ratio
 */
export function setSpecialFlightModeRatio(vehicle: number, ratio: number): void { 
	return _in(0xd138fa15, 0xc9776837, vehicle, _fv(ratio)); 
}

/**
 * Used in conjunction with SET_SPECIAL_FLIGHT_MODE_RATIO, in Rockstar's scripts. The vehicle will transform into the given targetRatio, starting from the vehicle's current hover mode transform ratio (which can also be manually set by SET_SPECIAL_FLIGHT_MODE_RATIO,) i.e. setting targetRatio to 0.0 while the vehicle is in hover mode will transform the vehicle into car mode, likewise setting targetRatio to 1.0 while the vehicle is in car mode will transform the vehicle into hover mode, and if the current transform ratio is set to 0.7 while targetRatio is 1.0 the vehicle will transform into hover mode starting from being already partially transformed.
 * 
 * targetRatio is recommended to always be 0.0 or 1.0, otherwise the vehicle will transform into a glitched state.
 * 
 * Usable only with the deluxo and other vehicles with deluxo-like hover mode toggle, modded or otherwise. Does nothing when used on oppressor2.
 * 
 * Example:
 * Ped playerPed = PLAYER::PLAYER_PED_ID();
 * Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);
 * VEHICLE::SET_SPECIAL_FLIGHT_MODE_RATIO(veh, 0.7f);
 * VEHICLE::SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO(veh, 1.0f);
 * @param vehicle
 * @param targetRatio
 */
export function setSpecialFlightModeTargetRatio(vehicle: number, targetRatio: number): void { 
	return _in(0x438b3d7c, 0xa026fe91, vehicle, _fv(targetRatio)); 
}

/**
 * Disables the screen effects and sound effects when driving over a speed boost pad.
 * @param disabled
 */
export function setSpeedBoostEffectDisabled(disabled: boolean): void { 
	return _in(0x7bbe7ff6, 0x26a591fe, disabled); 
}

export function setSrlForcePrestream(p0: number): void { 
	return _in(0xf8155a7f, 0x03ddfc8e, p0); 
}

export function setSrlLongJumpMode(p0: boolean): void { 
	return _in(0x20c6c7e4, 0xeb082a7f, p0); 
}

export function setSrlPostCutsceneCamera(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number): void { 
	return _in(0xef39ee20, 0xc537e98c, p0, p1, p2, p3, p4, p5); 
}

export function setSrlReadaheadTimes(p0: number, p1: number, p2: number, p3: number): void { 
	return _in(0xbeb2d9a1, 0xd9a8f55a, p0, p1, p2, p3); 
}

export function setSrlTime(p0: number): void { 
	return _in(0xa74a541c, 0x6884e7b8, _fv(p0)); 
}

/**
 * Hardcoded to not work in multiplayer.
 * 
 * 
 * Used to lock/unlock doors to interior areas of the game.
 * 
 * (Possible) Door Types:
 * 
 * https://pastebin.com/9S2m3qA4
 * 
 * Heading is either 1, 0 or -1 in the scripts. Means default closed(0) or opened either into(1) or out(-1) of the interior.
 * Locked means that the heading is locked.
 * p6 is always 0.
 * 
 * 225 door types, model names and coords found in stripclub.c4:
 * https://pastebin.com/gywnbzsH
 * 
 * get door info: https://pastebin.com/i14rbekD
 * @param type
 * @param x
 * @param y
 * @param z
 * @param locked
 * @param heading
 * @param p6
 */
export function setStateOfClosestDoorOfType(type: number, x: number, y: number, z: number, locked: boolean, heading: number, p6: boolean): void { 
	return _in(0xf82d8f19, 0x26a02c3d, _ch(type), _fv(x), _fv(y), _fv(z), locked, _fv(heading), p6); 
}

/**
 * Defines the state of a destructible object.
 * Use the GET_RAYFIRE_MAP_OBJECT native to find an object's handle with its name / coords.
 * State 2 == object just spawned
 * State 4 == Beginning of the animation
 * State 6 == Start animation
 * State 9 == End of the animation
 * @param object
 * @param state
 */
export function setStateOfRayfireMapObject(object: number, state: number): void { 
	return _in(0x5c29f698, 0xd404c5e1, object, state); 
}

/**
 * Example:
 * AUDIO::SET_STATIC_EMITTER_ENABLED((Any*)"LOS_SANTOS_VANILLA_UNICORN_01_STAGE", false);    AUDIO::SET_STATIC_EMITTER_ENABLED((Any*)"LOS_SANTOS_VANILLA_UNICORN_02_MAIN_ROOM", false);    AUDIO::SET_STATIC_EMITTER_ENABLED((Any*)"LOS_SANTOS_VANILLA_UNICORN_03_BACK_ROOM", false);
 * 
 * This turns off surrounding sounds not connected directly to peds.
 * 
 * Full list of static emitters by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/staticEmitters.json
 * @param emitterName
 * @param toggle
 */
export function setStaticEmitterEnabled(emitterName: string, toggle: boolean): void { 
	return _in(0x399d2d3b, 0x33f1b8eb, _ts(emitterName), toggle); 
}

/**
 * Access to the store for shark cards etc...
 * @param toggle
 */
export function setStoreEnabled(toggle: boolean): void { 
	return _in(0x9641a9ff, 0x718e9c5e, toggle); 
}

export function setStreamedTextureDictAsNoLongerNeeded(textureDict: string): void { 
	return _in(0xbe2caccf, 0x5a8aa805, _ts(textureDict)); 
}

export function setStreaming(toggle: boolean): void { 
	return _in(0x6e0c6926, 0x77008888, toggle); 
}

export function setStuntJumpsCanTrigger(toggle: boolean): void { 
	return _in(0xd7918568, 0x9f8fd5df, toggle); 
}

export function setSubmarineCrushDepths(vehicle: number, p1: boolean, depth1: number, depth2: number, depth3: number): void { 
	return _in(0xc59872a5, 0x134879c7, vehicle, p1, _fv(depth1), _fv(depth2), _fv(depth3)); 
}

export function setSuperJumpThisFrame(player: number): void { 
	return _in(0x57fff03e, 0x423a4c0b, player); 
}

/**
 * Swim speed multiplier.
 * Multiplier goes up to 1.49
 * 
 * Just call it one time, it is not required to be called once every tick. - Note copied from below native.
 * 
 * Note: At least the IDA method if you change the max float multiplier from 1.5 it will change it for both this and RUN_SPRINT below. I say 1.5 as the function blrs if what you input is greater than or equal to 1.5 hence why it's 1.49 max default.
 * @param player
 * @param multiplier
 */
export function setSwimMultiplierForPlayer(player: number, multiplier: number): void { 
	return _in(0xa91c6f0f, 0xf7d16a13, player, _fv(multiplier)); 
}

export function setSynchronizedSceneHoldLastFrame(sceneID: number, toggle: boolean): void { 
	return _in(0x394b9cd1, 0x2435c981, sceneID, toggle); 
}

export function setSynchronizedSceneLooped(sceneID: number, toggle: boolean): void { 
	return _in(0xd9a897a4, 0xc6c2974f, sceneID, toggle); 
}

export function setSynchronizedSceneOrigin(sceneID: number, x: number, y: number, z: number, roll: number, pitch: number, yaw: number, p7: boolean): void { 
	return _in(0x6acf6b72, 0x25801cd7, sceneID, _fv(x), _fv(y), _fv(z), _fv(roll), _fv(pitch), _fv(yaw), p7); 
}

export function setSynchronizedScenePhase(sceneID: number, phase: number): void { 
	return _in(0x734292f4, 0xf0abf6d0, sceneID, _fv(phase)); 
}

export function setSynchronizedSceneRate(sceneID: number, rate: number): void { 
	return _in(0xb6c49f8a, 0x5e295a5d, sceneID, _fv(rate)); 
}

export function setTableGamesCameraThisUpdate(hash: number): boolean { 
	return _in(0x79c0e43e, 0xb9b944e2, _ch(hash), _r); 
}

export function setTakenPhotoIsMugshot(toggle: boolean): void { 
	return _in(0x1bbc135a, 0x4d25edde, toggle); 
}

export function setTaskMoveNetworkAnimSet(ped: number, clipSet: number, variableClipSet: number): void { 
	return _in(0x8423541e, 0x8b3a1589, ped, _ch(clipSet), _ch(variableClipSet)); 
}

/**
 * Doesn't actually return anything.
 * @param ped
 * @param enable
 */
export function setTaskMoveNetworkEnableCollisionOnNetworkCloneWhenFixed(ped: number, enable: boolean): boolean { 
	return _in(0x0ffb3c75, 0x8e8c07b9, ped, enable, _r); 
}

export function setTaskMoveNetworkSignalBool(ped: number, signalName: string, value: boolean): void { 
	return _in(0xb0a6cfd2, 0xc69c1088, ped, _ts(signalName), value); 
}

/**
 * signalName - "Phase", "Wobble", "x_axis","y_axis","introphase","speed".
 * p2 - From what i can see it goes up to 1f (maybe).
 * 
 * Example: TASK::SET_TASK_MOVE_NETWORK_SIGNAL_FLOAT(PLAYER::PLAYER_PED_ID(), "Phase", 0.5);
 * @param ped
 * @param signalName
 * @param value
 */
export function setTaskMoveNetworkSignalFloat(ped: number, signalName: string, value: number): void { 
	return _in(0xd5bb4025, 0xae449a4e, ped, _ts(signalName), _fv(value)); 
}

export function setTaskMoveNetworkSignalFloatLerpRate(ped: number, signalName: string, value: number): void { 
	return _in(0x8634cef2, 0x522d987b, ped, _ts(signalName), _fv(value)); 
}

export function setTaskMoveNetworkSignalLocalFloat(ped: number, signalName: string, value: number): void { 
	return _in(0x373ef409, 0xb82697a3, ped, _ts(signalName), _fv(value)); 
}

/**
 * Flag 8: Medium-aggressive boxing tactic with a bit of PIT
 * Flag 1: Aggressive ramming of suspect
 * Flag 2: Ram attempts
 * Flag 32: Stay back from suspect, no tactical contact. Convoy-like.
 * Flag 16: Ramming, seems to be slightly less aggressive than 1-2.
 * @param ped
 * @param flag
 * @param set
 */
export function setTaskVehicleChaseBehaviorFlag(ped: number, flag: number, set: boolean): void { 
	return _in(0xcc665aac, 0x360d31e7, ped, flag, set); 
}

export function setTaskVehicleChaseIdealPursuitDistance(ped: number, distance: number): void { 
	return _in(0x639b642f, 0xacbe4edd, ped, _fv(distance)); 
}

export function setTaskVehicleGotoPlaneMinHeightAboveTerrain(plane: number, height: number): void { 
	return _in(0xb893215d, 0x8d4c015b, plane, height); 
}

/**
 * This is not tested - it's just an assumption.
 * - Nac
 * 
 * Doesn't seem to work.  I'll try with an int instead. --JT
 * 
 * Read the scripts, im dumpass.
 * 
 * if (!VEHICLE::IS_TAXI_LIGHT_ON(l_115)) {
 * VEHICLE::SET_TAXI_LIGHTS(l_115, 1);
 * }
 * @param vehicle
 * @param state
 */
export function setTaxiLights(vehicle: number, state: boolean): void { 
	return _in(0x598803e8, 0x5e8448d9, vehicle, state); 
}

export function setTeamPickupObject(object: number, p1: number, p2: boolean): void { 
	return _in(0x53e0df1a, 0x2a3cf0ca, object, p1, p2); 
}

/**
 * From the scripts:
 * 
 * MISC::SET_TENNIS_MOVE_NETWORK_SIGNAL_FLOAT(sub_aa49(a_0), "ForcedStopDirection", v_E);
 * 
 * Related to tennis mode.
 * @param ped
 * @param p1
 * @param p2
 */
export function setTennisMoveNetworkSignalFloat(ped: number, p1: string, p2: number): void { 
	return _in(0x54f157e0, 0x336a3822, ped, _ts(p1), _fv(p2)); 
}

export function setTextCentre(align: boolean): void { 
	return _in(0xc02f4dbf, 0xb51d988b, align); 
}

/**
 * colors you input not same as you think?
 * A: for some reason its R B G A
 * @param red
 * @param green
 * @param blue
 * @param alpha
 */
export function setTextColour(red: number, green: number, blue: number, alpha: number): void { 
	return _in(0xbe6b23ff, 0xa53fb442, red, green, blue, alpha); 
}

export function setTextDropShadow(): void { 
	return _in(0x1ca3e9ea, 0xc9d93e5e); 
}

/**
 * distance - shadow distance in pixels, both horizontal and vertical
 * r, g, b, a - color
 * @param distance
 * @param r
 * @param g
 * @param b
 * @param a
 */
export function setTextDropshadow(distance: number, r: number, g: number, b: number, a: number): void { 
	return _in(0x465c84bc, 0x39f1c351, distance, r, g, b, a); 
}

/**
 * This native does absolutely nothing, just a nullsub
 * @param p0
 * @param r
 * @param g
 * @param b
 * @param a
 */
export function setTextEdge(p0: number, r: number, g: number, b: number, a: number): void { 
	return _in(0x44160324, 0x0d202fa6, p0, r, g, b, a); 
}

/**
 * fonts that mess up your text where made for number values/misc stuff
 * @param fontType
 */
export function setTextFont(fontType: number): void { 
	return _in(0x66e0276c, 0xc5f6b9da, fontType); 
}

export function setTextInputBoxEnabled(p0: boolean): void { 
	return _in(0x1185a808, 0x7587322c, p0); 
}

/**
 * Types -
 * 0: Center-Justify
 * 1: Left-Justify
 * 2: Right-Justify
 * 
 * Right-Justify requires SET_TEXT_WRAP, otherwise it will draw to the far right of the screen
 * @param justifyType
 */
export function setTextJustification(justifyType: number): void { 
	return _in(0x4e096588, 0xb13ffeca, justifyType); 
}

export function setTextLeading(p0: number): void { 
	return _in(0xa50abc31, 0xe3cdfaff, p0); 
}

export function setTextLineHeightMult(lineHeightMult: number): void { 
	return _in(0x9f4624f7, 0x6e6953d1, _fv(lineHeightMult)); 
}

export function setTextOutline(): void { 
	return _in(0x2513dfb0, 0xfb8400fe); 
}

/**
 * This native does absolutely nothing, just a nullsub
 * @param p0
 */
export function setTextProportional(p0: boolean): void { 
	return _in(0x038c1f51, 0x7d7fdcf8, p0); 
}

export function setTextRenderId(renderId: number): void { 
	return _in(0x5f153029, 0x36e07111, renderId); 
}

export function setTextRightJustify(toggle: boolean): void { 
	return _in(0x6b3c4650, 0xbc8bee47, toggle); 
}

/**
 * Size range : 0F to 1.0F
 * p0 is unknown and doesn't seem to have an effect, yet in the game scripts it changes to 1.0F sometimes.
 * @param scale
 * @param size
 */
export function setTextScale(scale: number, size: number): void { 
	return _in(0x07c837f9, 0xa01c34c9, _fv(scale), _fv(size)); 
}

/**
 * It sets the text in a specified box and wraps the text if it exceeds the boundries. Both values are for X axis. Useful when positioning text set to center or aligned to the right.
 * 
 * start - left boundry on screen position (0.0 - 1.0)
 * end - right boundry on screen position (0.0 - 1.0)
 * @param start
 * @param end
 */
export function setTextWrap(start: number, end: number): void { 
	return _in(0x63145d9c, 0x883a1a70, _fv(start), _fv(end)); 
}

export function setThirdPersonAimCamNearClipThisUpdate(p0: number): void { 
	return _in(0x42156508, 0x606de65e, _fv(p0)); 
}

/**
 * Seems to animate the gameplay camera zoom.
 * 
 * Eg. SET_THIRD_PERSON_CAM_ORBIT_DISTANCE_LIMITS_THIS_UPDATE(1f, 1000f);
 * will animate the camera zooming in from 1000 meters away.
 * 
 * Game scripts use it like this:
 * 
 * // Setting this to 1 prevents V key from changing zoom
 * PLAYER::SET_PLAYER_FORCED_ZOOM(PLAYER::PLAYER_ID(), 1);
 * 
 * // These restrict how far you can move cam up/down left/right
 * CAM::SET_THIRD_PERSON_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE(-20f, 50f);
 * CAM::SET_THIRD_PERSON_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE(-60f, 0f);
 * 
 * CAM::SET_THIRD_PERSON_CAM_ORBIT_DISTANCE_LIMITS_THIS_UPDATE(1f, 1f);
 * @param p0
 * @param distance
 */
export function setThirdPersonCamOrbitDistanceLimitsThisUpdate(p0: number, distance: number): void { 
	return _in(0xdf2e1f77, 0x42402e81, _fv(p0), _fv(distance)); 
}

/**
 * minimum: Degrees between -180f and 180f.
 * maximum: Degrees between -180f and 180f.
 * 
 * Clamps the gameplay camera's current yaw.
 * 
 * Eg. SET_THIRD_PERSON_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE(0.0f, 0.0f) will set the horizontal angle directly behind the player.
 * @param minimum
 * @param maximum
 */
export function setThirdPersonCamRelativeHeadingLimitsThisUpdate(minimum: number, maximum: number): void { 
	return _in(0x8f993d26, 0xe0ca5e8e, _fv(minimum), _fv(maximum)); 
}

/**
 * minimum: Degrees between -90f and 90f.
 * maximum: Degrees between -90f and 90f.
 * 
 * Clamps the gameplay camera's current pitch.
 * 
 * Eg. SET_THIRD_PERSON_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE(0.0f, 0.0f) will set the vertical angle directly behind the player.
 * @param minimum
 * @param maximum
 */
export function setThirdPersonCamRelativePitchLimitsThisUpdate(minimum: number, maximum: number): void { 
	return _in(0xa516c198, 0xb7dca1e1, _fv(minimum), _fv(maximum)); 
}

/**
 * Sets bit 3 in GtaThread+0x150
 * @param toggle
 */
export function setThisIsATriggerScript(toggle: boolean): void { 
	return _in(0x6f2135b6, 0x129620c1, toggle); 
}

export function setThisScriptCanBePaused(toggle: boolean): void { 
	return _in(0xaa391c72, 0x8106f7af, toggle); 
}

export function setThisScriptCanRemoveBlipsCreatedByAnyScript(toggle: boolean): void { 
	return _in(0xb98236ca, 0xaecef897, toggle); 
}

/**
 * THREAD_PRIO_HIGHEST = 0
 * THREAD_PRIO_NORMAL = 1
 * THREAD_PRIO_LOWEST = 2
 * THREAD_PRIO_MANUAL_UPDATE = 100
 * @param priority
 */
export function setThisThreadPriority(priority: number): void { 
	return _in(0x42b65dee, 0xf2edf2a1, priority); 
}

export function setTickerJohnmarstonIsDone(): void { 
	return _in(0xfb00ca71, 0xda386228); 
}

/**
 * Maximum value is 1.
 * At a value of 0 the game will still run at a minimum time scale.
 * 
 * Slow Motion 1: 0.6
 * Slow Motion 2: 0.4
 * Slow Motion 3: 0.2
 * @param timeScale
 */
export function setTimeScale(timeScale: number): void { 
	return _in(0x1d408577, 0xd440e81e, _fv(timeScale)); 
}

/**
 * Loads the specified timecycle modifier. Modifiers are defined separately in another file (e.g. "timecycle_mods_1.xml")
 * 
 * Parameters:
 * modifierName - The modifier to load (e.g. "V_FIB_IT3", "scanline_cam", etc.)
 * 
 * Full list of timecycle modifiers by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/timecycleModifiers.json
 * @param modifierName
 */
export function setTimecycleModifier(modifierName: string): void { 
	return _in(0x2c933abf, 0x17a1df41, _ts(modifierName)); 
}

export function setTimecycleModifierStrength(strength: number): void { 
	return _in(0x82e7ffcd, 0x5b2326b3, _fv(strength)); 
}

export function setTintIndexClosestBuildingOfType(x: number, y: number, z: number, radius: number, modelHash: number, textureVariation: number): boolean { 
	return _in(0xf12e3303, 0x4d887f66, _fv(x), _fv(y), _fv(z), _fv(radius), _ch(modelHash), textureVariation, _r); 
}

export function setTrackedPointInfo(point: number, x: number, y: number, z: number, radius: number): void { 
	return _in(0x164ecbb3, 0xcf750cb0, point, _fv(x), _fv(y), _fv(z), _fv(radius)); 
}

export function setTrailerAttachmentEnabled(p0: number, p1: number): void { 
	return _in(0x2fa2494b, 0x47fdd009, p0, p1); 
}

export function setTrailerInverseMassScale(vehicle: number, p1: number): void { 
	return _in(0x2a8f319b, 0x392e7b3f, vehicle, _fv(p1)); 
}

export function setTrailerLegsLowered(vehicle: number): void { 
	return _in(0x878c75c0, 0x9fbdb942, vehicle); 
}

/**
 * in the decompiled scripts, seems to be always called on the vehicle right after being attached to a trailer.
 * @param vehicle
 */
export function setTrailerLegsRaised(vehicle: number): void { 
	return _in(0x95cf53b3, 0xd687f9fa, vehicle); 
}

export function setTrainCruiseSpeed(train: number, speed: number): void { 
	return _in(0x16469284, 0xdb8c62b5, train, _fv(speed)); 
}

export function setTrainSpeed(train: number, speed: number): void { 
	return _in(0xaa0bc91b, 0xe0b796e3, train, _fv(speed)); 
}

/**
 * Only called once inside main_persitant with the parameters p0 = 0, p1 = 120000
 * 
 * trackIndex: 0 - 26
 * Full list of all train tracks + track nodes by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/traintracks.json
 * @param trackIndex
 * @param frequency
 */
export function setTrainTrackSpawnFrequency(trackIndex: number, frequency: number): void { 
	return _in(0x21973bbf, 0x8d17edfa, trackIndex, frequency); 
}

/**
 * Affects the playback speed of the submarine car conversion animations. Does not affect hardcoded animations such as the wheels being retracted.
 * @param vehicle
 * @param transformRate
 */
export function setTransformRateForAnimation(vehicle: number, transformRate: number): void { 
	return _in(0x49821825, 0x9fb7c72d, vehicle, _fv(transformRate)); 
}

/**
 * When set to true, the key to transform a car to submarine mode changes from raise/lower convertible roof (hold H by default) to special vehicle transform (press X by default.)
 * @param vehicle
 * @param toggle
 */
export function setTransformToSubmarineUsesAlternateInput(vehicle: number, toggle: boolean): void { 
	return _in(0x41b9fb92, 0xeded32a6, vehicle, toggle); 
}

export function setTransitionOutOfTimecycleModifier(strength: number): void { 
	return _in(0x1cba05ae, 0x7bd7ee05, _fv(strength)); 
}

/**
 * Full list of timecycle modifiers by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/timecycleModifiers.json
 * @param modifierName
 * @param transition
 */
export function setTransitionTimecycleModifier(modifierName: string, transition: number): void { 
	return _in(0x3bcf5674, 0x85e1971c, _ts(modifierName), _fv(transition)); 
}

export function setTransmissionReducedGearRatio(vehicle: number, toggle: boolean): void { 
	return _in(0x337ef33d, 0xa3ddb990, vehicle, toggle); 
}

export function setTreatAsAmbientPedForDriverLockon(ped: number, p1: boolean): void { 
	return _in(0x2f3c3d9f, 0x50681de4, ped, p1); 
}

/**
 * Toggles specific flag on turret
 * @param vehicle
 * @param index
 * @param toggle
 */
export function setTurretHidden(vehicle: number, index: number, toggle: boolean): void { 
	return _in(0xc60060eb, 0x0d8ac7b1, vehicle, index, toggle); 
}

/**
 * Probably changes tvs from being a 3d audio to being "global" audio
 * @param toggle
 */
export function setTvAudioFrontend(toggle: boolean): void { 
	return _in(0x113d2c5d, 0xc57e1774, toggle); 
}

export function setTvChannel(channel: number): void { 
	return _in(0xbaabbb23, 0xeb6e484e, channel); 
}

/**
 * Loads specified video sequence into the TV Channel
 * TV_Channel ranges from 0-2
 * VideoSequence can be any of the following:
 * "PL_STD_CNT" CNT Standard Channel
 * "PL_STD_WZL" Weazel Standard Channel
 * "PL_LO_CNT"
 * "PL_LO_WZL"
 * "PL_SP_WORKOUT"
 * "PL_SP_INV" - Jay Norris Assassination Mission Fail
 * "PL_SP_INV_EXP" - Jay Norris Assassination Mission Success
 * "PL_LO_RS" - Righteous Slaughter Ad
 * "PL_LO_RS_CUTSCENE" - Righteous Slaughter Cut-scene
 * "PL_SP_PLSH1_INTRO"
 * "PL_LES1_FAME_OR_SHAME"
 * "PL_STD_WZL_FOS_EP2"
 * "PL_MP_WEAZEL" - Weazel Logo on loop
 * "PL_MP_CCTV" - Generic CCTV loop
 * 
 * Restart:
 * 0=video sequence continues as normal
 * 1=sequence restarts from beginning every time that channel is selected
 * 
 * 
 * The above playlists work as intended, and are commonly used, but there are many more playlists, as seen in `tvplaylists.xml`. A pastebin below outlines all playlists, they will be surronded by the name tag I.E. (<Name>PL_STD_CNT</Name> = PL_STD_CNT).
 * https://pastebin.com/zUzGB6h7
 * @param tvChannel
 * @param playlistName
 * @param restart
 */
export function setTvChannelPlaylist(tvChannel: number, playlistName: string, restart: boolean): void { 
	return _in(0xf7b38b83, 0x05f1fe8b, tvChannel, _ts(playlistName), restart); 
}

export function setTvChannelPlaylistAtHour(tvChannel: number, playlistName: string, hour: number): void { 
	return _in(0x2201c576, 0xfacaebe8, tvChannel, _ts(playlistName), hour); 
}

/**
 * Does not actually return anything.
 * @param tvChannel
 * @param p1
 */
export function setTvChannelPlaylistDirty(tvChannel: number, p1: boolean): number { 
	return _in(0xee831f15, 0xa8d0d94a, tvChannel, p1, _r, _ri); 
}

export function setTvPlayerWatchingThisFrame(p0: number): void { 
	return _in(0xd1c55b11, 0x0e4df534, p0); 
}

export function setTvVolume(volume: number): void { 
	return _in(0x2982bf73, 0xf66e9ddc, _fv(volume)); 
}

/**
 * SET_TYRE_WEAR_RATE must be active, otherwise values set to <1000.0f will default to 350.0f
 * 
 * Usable wheels:
 * 0: wheel_lf
 * 1: wheel_rf
 * 2: wheel_lm1
 * 3: wheel_rm1
 * 4: wheel_lr
 * 5: wheel_rr
 * @param vehicle
 * @param wheelIndex
 * @param health
 */
export function setTyreHealth(vehicle: number, wheelIndex: number, health: number): void { 
	return _in(0x74c68ef9, 0x7645e79d, vehicle, wheelIndex, _fv(health)); 
}

/**
 * Controls how much traction the wheel loses.
 * 
 * Default values from Rockstar's Open Wheel Race JSON's:
 * "owrtds" (Soft): 0.05
 * "owrtdm" (Medium): 0.45
 * "owrtdh" (Hard): 0.8
 * 
 * Usable wheels:
 * 0: wheel_lf
 * 1: wheel_rf
 * 2: wheel_lm1
 * 3: wheel_rm1
 * 4: wheel_lr
 * 5: wheel_rr
 * @param vehicle
 * @param wheelIndex
 * @param multiplier
 */
export function setTyreMaximumGripDifferenceDueToWearRate(vehicle: number, wheelIndex: number, multiplier: number): void { 
	return _in(0xc970d0e0, 0xfc31d768, vehicle, wheelIndex, _fv(multiplier)); 
}

/**
 * Needs to be run for tire wear to work. Multiplier affects the downforce and how fast the tires will wear out, higher values essentially make the vehicle slower on straights and its tires will wear down quicker when cornering. Value must be >0f.
 * Default value in Rockstar's Open Wheel Race JSON's ("owrtws", "owrtwm", "owrtwh") is 1.0
 * 
 * Usable wheels:
 * 0: wheel_lf
 * 1: wheel_rf
 * 2: wheel_lm1
 * 3: wheel_rm1
 * 4: wheel_lr
 * 5: wheel_rr
 * @param vehicle
 * @param wheelIndex
 * @param multiplier
 */
export function setTyreWearRate(vehicle: number, wheelIndex: number, multiplier: number): void { 
	return _in(0x01894e2e, 0xde923ca2, vehicle, wheelIndex, _fv(multiplier)); 
}

/**
 * Controls how fast the tires wear out.
 * 
 * Default values from Rockstar's Open Wheel Race JSON's:
 * "owrtss" (Soft): 2.2
 * "owrtsm" (Medium): 1.7
 * "owrtsh" (Hard): 1.2
 * 
 * Usable wheels:
 * 0: wheel_lf
 * 1: wheel_rf
 * 2: wheel_lm1
 * 3: wheel_rm1
 * 4: wheel_lr
 * 5: wheel_rr
 * @param vehicle
 * @param wheelIndex
 * @param multiplier
 */
export function setTyreWearRateScale(vehicle: number, wheelIndex: number, multiplier: number): void { 
	return _in(0x392183bb, 0x9ea57697, vehicle, wheelIndex, _fv(multiplier)); 
}

export function setUseAdjustedMouseCoords(toggle: boolean): void { 
	return _in(0x5b73c77d, 0x9eb66e24, toggle); 
}

export function setUseCameraHeadingForDesiredDirectionLockOnTest(ped: number, toggle: boolean): void { 
	return _in(0xfd325494, 0x792302d7, ped, toggle); 
}

export function setUseDesiredZCruiseSpeedForLanding(vehicle: number, toggle: boolean): void { 
	return _in(0xb68cfaf8, 0x3a02768d, vehicle, toggle); 
}

/**
 * Changes the car jump control to require a double-tap to activate.
 * @param toggle
 */
export function setUseDoubleClickForCarJump(toggle: boolean): void { 
	return _in(0x5bbcf35b, 0xf6e456f7, toggle); 
}

export function setUseHiDof(): void { 
	return _in(0xa13b0222, 0xf3d94a94); 
}

/**
 * Only used in R* Script fm_mission_controller_2020
 */
export function setUseHiDofOnSyncedSceneThisUpdate(): void { 
	return _in(0x731a8805, 0x55da3647); 
}

/**
 * Allows vehicles with the FLAG_JUMPING_CAR flag to jump higher (i.e. Ruiner 2000).
 * @param vehicle
 * @param toggle
 */
export function setUseHigherCarJump(vehicle: number, toggle: boolean): void { 
	return _in(0xf06a16ca, 0x55d138d8, vehicle, toggle); 
}

/**
 * Toggles the Cayo Perico map.
 * @param toggle
 */
export function setUseIslandMap(toggle: boolean): void { 
	return _in(0x5e146062, 0x4d194a38, toggle); 
}

/**
 * PED_RAGDOLL_BUMP Proof?
 * @param entity
 * @param toggle
 */
export function setUseKinematicPhysics(entity: number, toggle: boolean): void { 
	return _in(0x15f94473, 0x0c832252, entity, toggle); 
}

export function setUseSetDestinationInPauseMap(toggle: boolean): void { 
	return _in(0x6cdd5814, 0x6a436083, toggle); 
}

export function setUserRadioControlEnabled(toggle: boolean): void { 
	return _in(0x19f21e63, 0xae6eae4e, toggle); 
}

export function setVariableOnSound(soundId: number, variable: string, p2: number): void { 
	return _in(0xad6b3148, 0xa78ae9b6, soundId, _ts(variable), _fv(p2)); 
}

/**
 * From the scripts, p0:
 * 
 * "ArmWrestlingIntensity",
 * "INOUT",
 * "Monkey_Stream",
 * "ZoomLevel"
 * @param variable
 * @param p1
 */
export function setVariableOnStream(variable: string, p1: number): void { 
	return _in(0x2f9d3834, 0xaeb9ef79, _ts(variable), _fv(p1)); 
}

export function setVariableOnSynchSceneAudio(variableName: string, value: number): void { 
	return _in(0xbcc29f93, 0x5ed07688, _ts(variableName), _fv(value)); 
}

/**
 * AUDIO::SET_VARIABLE_ON_UNDER_WATER_STREAM("inTunnel", 1.0);
 * AUDIO::SET_VARIABLE_ON_UNDER_WATER_STREAM("inTunnel", 0.0);
 * @param variableName
 * @param value
 */
export function setVariableOnUnderWaterStream(variableName: string, value: number): void { 
	return _in(0x733adf24, 0x1531e5c2, _ts(variableName), _fv(value)); 
}

export function setVehForcedRadioThisFrame(vehicle: number): void { 
	return _in(0xc1805d05, 0xe6d4fe10, vehicle); 
}

export function setVehHasNormalRadio(vehicle: number): void { 
	return _in(0x3e45765f, 0x3fbb582f, vehicle); 
}

/**
 * List of radio stations that are in the wheel, in clockwise order, as of LS Tuners DLC: https://git.io/J8a3k
 * An older list including hidden radio stations: https://pastebin.com/Kj9t38KF
 * @param vehicle
 * @param radioStation
 */
export function setVehRadioStation(vehicle: number, radioStation: string): void { 
	return _in(0x1b9c0099, 0xcb942ac6, vehicle, _ts(radioStation)); 
}

export function setVehicleActAsIfHasSirenOn(vehicle: number, p1: boolean): void { 
	return _in(0x9becd4b9, 0xfef3f8a6, vehicle, p1); 
}

export function setVehicleActAsIfHighSpeedForFragSmashing(vehicle: number, p1: boolean): void { 
	return _in(0x1f9fb66f, 0x3a3842d2, vehicle, p1); 
}

export function setVehicleActiveDuringPlayback(vehicle: number, toggle: boolean): void { 
	return _in(0xdffcef48, 0xe511db48, vehicle, toggle); 
}

export function setVehicleActiveForPedNavigation(vehicle: number, toggle: boolean): void { 
	return _in(0x21115bcd, 0x6e44656a, vehicle, toggle); 
}

/**
 * Used to be incorrectly named SET_VEHICLE_EXCLUSIVE_DRIVER
 * Toggles a flag related to SET_VEHICLE_EXCLUSIVE_DRIVER, however, doesn't enable that feature (or trigger script events related to it).
 * @param vehicle
 * @param toggle
 */
export function setVehicleAiCanUseExclusiveSeats(vehicle: number, toggle: boolean): void { 
	return _in(0x41062318, 0xf23ed854, vehicle, toggle); 
}

export function setVehicleAlarm(vehicle: number, state: boolean): void { 
	return _in(0xcde5e70c, 0x1ddb954c, vehicle, state); 
}

export function setVehicleAllowHomingMissleLockon(vehicle: number, toggle: boolean, p2: boolean): void { 
	return _in(0x7d6f9a3e, 0xf26136a0, vehicle, toggle, p2); 
}

export function setVehicleAllowHomingMissleLockonSynced(vehicle: number, canBeLockedOn: boolean, p2: boolean): void { 
	return _in(0x1dda078d, 0x12879eee, vehicle, canBeLockedOn, p2); 
}

/**
 * Makes the vehicle accept no passengers.
 * @param veh
 * @param toggle
 */
export function setVehicleAllowNoPassengersLockon(veh: number, toggle: boolean): void { 
	return _in(0x5d14d415, 0x4bfe7b2c, veh, toggle); 
}

/**
 * This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.
 * @param vehicle
 */
export function setVehicleAsNoLongerNeeded(vehicle: number): number { 
	return _in(0x629bfa74, 0x418d6239, _ii(vehicle)); 
}

/**
 * intensity: 0.0f - 1.0f, only used once with 1.0f in R* Scripts (nigel2)
 * Makes an engine rattling noise when you decelerate, you need to be going faster to hear lower values
 * @param vehicle
 * @param intensity
 */
export function setVehicleAudioBodyDamageFactor(vehicle: number, intensity: number): void { 
	return _in(0x01bb4d57, 0x7d38bd9e, vehicle, _fv(intensity)); 
}

export function setVehicleAudioEngineDamageFactor(vehicle: number, damageFactor: number): void { 
	return _in(0x59e7b488, 0x451f4d3a, vehicle, _fv(damageFactor)); 
}

export function setVehicleAutomaticallyAttaches(vehicle: number, p1: boolean, p2: number): number { 
	return _in(0x8ba6f76b, 0xc53a1493, vehicle, p1, p2, _r, _ri); 
}

export function setVehicleAvoidPlayerVehicleRiotVanMission(p0: number): void { 
	return _in(0xd3301660, 0xa57c9272, p0); 
}

export function setVehicleBlipThrottleRandomly(vehicle: number, p1: boolean): void { 
	return _in(0x9f3f689b, 0x814f2599, vehicle, p1); 
}

/**
 * Controls how fast bobbleheads and tsurikawas move on each axis.
 * 
 * p2 is probably z, but changing that value didn't seem to have a noticeable effect.
 * @param x
 * @param y
 * @param p2
 */
export function setVehicleBobbleheadVelocity(x: number, y: number, p2: number): void { 
	return _in(0x870b8b7a, 0x766615c8, _fv(x), _fv(y), _fv(p2)); 
}

/**
 * p2 often set to 1000.0 in the decompiled scripts.
 * @param vehicle
 * @param value
 */
export function setVehicleBodyHealth(vehicle: number, value: number): void { 
	return _in(0xb77d05ac, 0x8c78aadb, vehicle, _fv(value)); 
}

/**
 * Sets the amount of bombs that this vehicle has. As far as I know, this does _not_ impact vehicle weapons or the ammo of those weapons in any way, it is just a way to keep track of the amount of bombs in a specific plane.
 * @param vehicle
 * @param bombCount
 */
export function setVehicleBombAmmo(vehicle: number, bombCount: number): void { 
	return _in(0xf4b2ed59, 0xdeb5d774, vehicle, bombCount); 
}

/**
 * SET_VEHICLE_BOOST_ACTIVE(vehicle, 1, 0);
 * SET_VEHICLE_BOOST_ACTIVE(vehicle, 0, 0);
 * 
 * Will give a boost-soundeffect.
 * @param vehicle
 * @param toggle
 */
export function setVehicleBoostActive(vehicle: number, toggle: boolean): void { 
	return _in(0x4a04de7c, 0xab2739a1, vehicle, toggle); 
}

export function setVehicleBrake(vehicle: number, toggle: boolean): void { 
	return _in(0xe4e2fd32, 0x3574965c, vehicle, toggle); 
}

export function setVehicleBrakeLights(vehicle: number, toggle: boolean): void { 
	return _in(0x92b35082, 0xe0b42f66, vehicle, toggle); 
}

export function setVehicleBrokenPartsDontAffectAiHandling(vehicle: number, p1: boolean): void { 
	return _in(0xc361aa04, 0x0d6637a8, vehicle, p1); 
}

/**
 * Sets the arm position of a bulldozer. Position must be a value between 0.0 and 1.0. Ignored when `p2` is set to false, instead incrementing arm position by 0.1 (or 10%).
 * @param vehicle
 * @param position
 * @param p2
 */
export function setVehicleBulldozerArmPosition(vehicle: number, position: number, p2: boolean): void { 
	return _in(0xf8ebccc9, 0x6adb9fb7, vehicle, _fv(position), p2); 
}

/**
 * On accelerating, spins the driven wheels with the others braked, so you don't go anywhere.
 * @param vehicle
 * @param toggle
 */
export function setVehicleBurnout(vehicle: number, toggle: boolean): void { 
	return _in(0xfb879444, 0x4a7d60fb, vehicle, toggle); 
}

/**
 * This has not yet been tested - it's just an assumption of what the types could be.
 * @param vehicle
 * @param state
 */
export function setVehicleCanBeTargetted(vehicle: number, state: boolean): void { 
	return _in(0x3750146a, 0x28097a82, vehicle, state); 
}

export function setVehicleCanBeUsedByFleeingPeds(vehicle: number, toggle: boolean): void { 
	return _in(0x300504b2, 0x3bd3b711, vehicle, toggle); 
}

export function setVehicleCanBeVisiblyDamaged(vehicle: number, state: boolean): void { 
	return _in(0x4c7028f7, 0x8ffd3681, vehicle, state); 
}

export function setVehicleCanBreak(vehicle: number, toggle: boolean): void { 
	return _in(0x59bf8c3d, 0x52c92f66, vehicle, toggle); 
}

export function setVehicleCanDeformWheels(vehicle: number, toggle: boolean): void { 
	return _in(0x0cdda42f, 0x9e360ca6, vehicle, toggle); 
}

export function setVehicleCanEjectPassengersIfLocked(p0: number, p1: number): void { 
	return _in(0x065d03a9, 0xd6b2c6b5, p0, p1); 
}

export function setVehicleCanEngineMissfire(vehicle: number, toggle: boolean): void { 
	return _in(0x206bc5dc, 0x9d1ac70a, vehicle, toggle); 
}

export function setVehicleCanLeakOil(vehicle: number, toggle: boolean): void { 
	return _in(0x51bb2d88, 0xd31a914b, vehicle, toggle); 
}

export function setVehicleCanLeakPetrol(vehicle: number, toggle: boolean): void { 
	return _in(0x19254724, 0x7864dfdd, vehicle, toggle); 
}

export function setVehicleCanSaveInGarage(vehicle: number, toggle: boolean): void { 
	return _in(0x428baccd, 0xf5e26ead, vehicle, toggle); 
}

export function setVehicleCausesSwerving(vehicle: number, toggle: boolean): void { 
	return _in(0x9849de24, 0xfcf23ccc, vehicle, toggle); 
}

export function setVehicleCeilingHeight(vehicle: number, height: number): void { 
	return _in(0xa4641306, 0x6687a328, vehicle, _fv(height)); 
}

/**
 * <1.0 - Decreased torque
 * =1.0 - Default torque
 * >1.0 - Increased torque
 * 
 * Negative values will cause the vehicle to go backwards instead of forwards while accelerating.
 * 
 * value - is between 0.2 and 1.8 in the decompiled scripts.
 * 
 * This needs to be called every frame to take effect.
 * @param vehicle
 * @param value
 */
export function setVehicleCheatPowerIncrease(vehicle: number, value: number): void { 
	return _in(0xb59e4bd3, 0x7ae292db, vehicle, _fv(value)); 
}

/**
 * Sets the selected vehicle's colors to the specified index of the color combination found in the vehicle's carvariations.meta entry.
 * @param vehicle
 * @param colorCombination
 */
export function setVehicleColourCombination(vehicle: number, colorCombination: number): void { 
	return _in(0x33e8cd33, 0x22e2fe31, vehicle, colorCombination); 
}

/**
 * colorPrimary & colorSecondary are the paint index for the vehicle.
 * For a list of valid paint indexes, view: https://pastebin.com/pwHci0xK
 * -------------------------------------------------------------------------
 * Note: minimum color index is 0, maximum color index is (numColorIndices - 1)
 * 
 * Full list of vehicle colors by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleColors.json
 * @param vehicle
 * @param colorPrimary
 * @param colorSecondary
 */
export function setVehicleColours(vehicle: number, colorPrimary: number, colorSecondary: number): void { 
	return _in(0x4f1d4be3, 0xa7f24601, vehicle, colorPrimary, colorSecondary); 
}

/**
 * Does nothing. It's a nullsub.
 * @param toggle
 */
export function setVehicleCombatMode(toggle: boolean): void { 
	return _in(0x36de1095, 0x27a2c0c4, toggle); 
}

/**
 * SET_VEHICLE_CONVERSATIONS_PERSIST?
 * @param p0
 * @param p1
 */
export function setVehicleConversationsPersist(p0: boolean, p1: boolean): void { 
	return _in(0x58bb377b, 0xec7cd5f4, p0, p1); 
}

export function setVehicleConversationsPersistNew(p0: boolean, p1: boolean, p2: boolean): void { 
	return _in(0x9bd7bd55, 0xe4533183, p0, p1, p2); 
}

/**
 * Similar to SET_VEHICLE_BOMB_AMMO, this sets the amount of countermeasures that are present on this vehicle.
 * Use GET_VEHICLE_BOMB_AMMO to get the current amount.
 * @param vehicle
 * @param counterMeasureCount
 */
export function setVehicleCountermeasureAmmo(vehicle: number, counterMeasureCount: number): void { 
	return _in(0x9bda23bf, 0x666f0855, vehicle, counterMeasureCount); 
}

export function setVehicleCustomPathNodeStreamingRadius(vehicle: number, p1: number): void { 
	return _in(0x182f266c, 0x2d9e2beb, vehicle, _fv(p1)); 
}

/**
 * p1, p2, p3 are RGB values for color (255,0,0 for Red, ect)
 * @param vehicle
 * @param r
 * @param g
 * @param b
 */
export function setVehicleCustomPrimaryColour(vehicle: number, r: number, g: number, b: number): void { 
	return _in(0x7141766f, 0x91d15bea, vehicle, r, g, b); 
}

/**
 * p1, p2, p3 are RGB values for color (255,0,0 for Red, ect)
 * @param vehicle
 * @param r
 * @param g
 * @param b
 */
export function setVehicleCustomSecondaryColour(vehicle: number, r: number, g: number, b: number): void { 
	return _in(0x36ced73b, 0xfed89754, vehicle, r, g, b); 
}

/**
 * Apply damage to vehicle at a location. Location is relative to vehicle model (not world).
 * 
 * Radius of effect damage applied in a sphere at impact location
 * When `focusOnModel` set to `true`, the damage sphere will travel towards the vehicle from the given point, thus guaranteeing an impact
 * @param vehicle
 * @param xOffset
 * @param yOffset
 * @param zOffset
 * @param damage
 * @param radius
 * @param focusOnModel
 */
export function setVehicleDamage(vehicle: number, xOffset: number, yOffset: number, zOffset: number, damage: number, radius: number, focusOnModel: boolean): void { 
	return _in(0xa1dd317e, 0xa8fd4f29, vehicle, _fv(xOffset), _fv(yOffset), _fv(zOffset), _fv(damage), _fv(radius), focusOnModel); 
}

export function setVehicleDamageScale(vehicle: number, p1: number): boolean { 
	return _in(0x4e20d2a6, 0x27011e8e, vehicle, _fv(p1), _r); 
}

export function setVehicleDamageScales(vehicle: number, p1: number, p2: number, p3: number, p4: number): void { 
	return _in(0x9640e30a, 0x7f395e4b, vehicle, p1, p2, p3, p4); 
}

/**
 * This fixes the deformation of a vehicle but the vehicle health doesn't improve
 * @param vehicle
 */
export function setVehicleDeformationFixed(vehicle: number): void { 
	return _in(0x953da1e1, 0xb12c0491, vehicle); 
}

/**
 * Use this native inside a looped function.
 * Values:
 * - `0.0` = no vehicles on streets
 * - `1.0` = normal vehicles on streets
 * @param multiplier
 */
export function setVehicleDensityMultiplierThisFrame(multiplier: number): void { 
	return _in(0x245a6883, 0xd966d537, _fv(multiplier)); 
}

/**
 * Does nothing. It's a nullsub.
 * @param toggle
 */
export function setVehicleDetonationMode(toggle: boolean): void { 
	return _in(0x82e0ac41, 0x1e41a5b4, toggle); 
}

/**
 * You can't use values greater than 15.0
 * Also, R* does (float)(rand() % 15) to get a random dirt level when generating a vehicle.
 * @param vehicle
 * @param dirtLevel
 */
export function setVehicleDirtLevel(vehicle: number, dirtLevel: number): void { 
	return _in(0x79d3b596, 0xfe44ee8b, vehicle, _fv(dirtLevel)); 
}

export function setVehicleDisableCollisionUponCreation(vehicle: number, disable: boolean): void { 
	return _in(0xaf60e6a2, 0x936f982a, vehicle, disable); 
}

export function setVehicleDisableHeightMapAvoidance(vehicle: number, p1: boolean): void { 
	return _in(0x8aa9180d, 0xe2fedd45, vehicle, p1); 
}

export function setVehicleDisableTowing(vehicle: number, toggle: boolean): void { 
	return _in(0x2b6747fa, 0xa9db9d6b, vehicle, toggle); 
}

export function setVehicleDontTerminateTaskWhenAchieved(vehicle: number): void { 
	return _in(0x76d26a22, 0x750e849e, vehicle); 
}

/**
 * doorId: see SET_VEHICLE_DOOR_SHUT
 * 
 * Usually used alongside other vehicle door natives.
 * @param vehicle
 * @param doorId
 * @param toggle
 */
export function setVehicleDoorAutoLock(vehicle: number, doorId: number, toggle: boolean): void { 
	return _in(0x3b458ddb, 0x57038f08, vehicle, doorId, toggle); 
}

/**
 * doorId: see SET_VEHICLE_DOOR_SHUT
 * @param vehicle
 * @param doorId
 * @param deleteDoor
 */
export function setVehicleDoorBroken(vehicle: number, doorId: number, deleteDoor: boolean): void { 
	return _in(0xd4d4f6a4, 0xab575a33, vehicle, doorId, deleteDoor); 
}

/**
 * doorId: see SET_VEHICLE_DOOR_SHUT
 * @param vehicle
 * @param doorId
 * @param speed
 * @param angle
 */
export function setVehicleDoorControl(vehicle: number, doorId: number, speed: number, angle: number): void { 
	return _in(0xf2bfa043, 0x0f0a0fcb, vehicle, doorId, speed, _fv(angle)); 
}

/**
 * doorId: see SET_VEHICLE_DOOR_SHUT
 * @param vehicle
 * @param doorId
 * @param p2
 * @param p3
 * @param p4
 */
export function setVehicleDoorLatched(vehicle: number, doorId: number, p2: boolean, p3: boolean, p4: boolean): void { 
	return _in(0xa5a9653a, 0x8d2caf48, vehicle, doorId, p2, p3, p4); 
}

/**
 * doorId: see SET_VEHICLE_DOOR_SHUT
 * @param vehicle
 * @param doorId
 * @param loose
 * @param openInstantly
 */
export function setVehicleDoorOpen(vehicle: number, doorId: number, loose: boolean, openInstantly: boolean): void { 
	return _in(0x7c65dac7, 0x3c35c862, vehicle, doorId, loose, openInstantly); 
}

/**
 * enum eDoorId
 * {
 * VEH_EXT_DOOR_INVALID_ID = -1,
 * VEH_EXT_DOOR_DSIDE_F,
 * VEH_EXT_DOOR_DSIDE_R,
 * VEH_EXT_DOOR_PSIDE_F,
 * VEH_EXT_DOOR_PSIDE_R,
 * VEH_EXT_BONNET,
 * VEH_EXT_BOOT
 * };
 * @param vehicle
 * @param doorId
 * @param closeInstantly
 */
export function setVehicleDoorShut(vehicle: number, doorId: number, closeInstantly: boolean): void { 
	return _in(0x93d9bd30, 0x0d7789e5, vehicle, doorId, closeInstantly); 
}

/**
 * enum eVehicleLockState
 * {
 * VEHICLELOCK_NONE,
 * VEHICLELOCK_UNLOCKED,
 * VEHICLELOCK_LOCKED,
 * VEHICLELOCK_LOCKOUT_PLAYER_ONLY,
 * VEHICLELOCK_LOCKED_PLAYER_INSIDE,
 * VEHICLELOCK_LOCKED_INITIALLY,
 * VEHICLELOCK_FORCE_SHUT_DOORS,
 * VEHICLELOCK_LOCKED_BUT_CAN_BE_DAMAGED,
 * VEHICLELOCK_LOCKED_BUT_BOOT_UNLOCKED,
 * VEHICLELOCK_LOCKED_NO_PASSENGERS,
 * VEHICLELOCK_CANNOT_ENTER
 * };
 * @param vehicle
 * @param doorLockStatus
 */
export function setVehicleDoorsLocked(vehicle: number, doorLockStatus: number): void { 
	return _in(0xb664292e, 0xaecf7fa6, vehicle, doorLockStatus); 
}

/**
 * After some analysis, I've decided that these are what the parameters are.
 * 
 * We can see this being used in R* scripts such as "am_mp_property_int.ysc.c4":
 * l_11A1 = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 1);
 * ...
 * VEHICLE::SET_VEHICLE_DOORS_LOCKED_FOR_ALL_PLAYERS(l_11A1, 1);
 * @param vehicle
 * @param toggle
 */
export function setVehicleDoorsLockedForAllPlayers(vehicle: number, toggle: boolean): void { 
	return _in(0xa2f80b8d, 0x040727cc, vehicle, toggle); 
}

export function setVehicleDoorsLockedForAllTeams(vehicle: number, toggle: boolean): void { 
	return _in(0x203b527d, 0x1b77904c, vehicle, toggle); 
}

export function setVehicleDoorsLockedForNonScriptPlayers(vehicle: number, toggle: boolean): void { 
	return _in(0x9737a371, 0x36f07e75, vehicle, toggle); 
}

export function setVehicleDoorsLockedForPlayer(vehicle: number, player: number, toggle: boolean): void { 
	return _in(0x517aaf68, 0x4bb50cd1, vehicle, player, toggle); 
}

export function setVehicleDoorsLockedForTeam(vehicle: number, team: number, toggle: boolean): void { 
	return _in(0xb81f6d4a, 0x8f5eeba8, vehicle, team, toggle); 
}

/**
 * Closes all doors of a vehicle:
 * @param vehicle
 * @param closeInstantly
 */
export function setVehicleDoorsShut(vehicle: number, closeInstantly: boolean): void { 
	return _in(0x781b3d62, 0xbb013ef5, vehicle, closeInstantly); 
}

/**
 * Money pickups are created around cars when they explode. Only works when the vehicle model is a car. A single pickup is between 1 and 18 dollars in size. All car models seem to give the same amount of money.
 * 
 * youtu.be/3arlUxzHl5Y
 * i.imgur.com/WrNpYFs.jpg
 * @param vehicle
 * @param toggle
 */
export function setVehicleDropsMoneyWhenBlownUp(vehicle: number, toggle: boolean): void { 
	return _in(0x068f64f2, 0x470f9656, vehicle, toggle); 
}

export function setVehicleEngineCanDegrade(vehicle: number, toggle: boolean): void { 
	return _in(0x98376585, 0x6f2564f9, vehicle, toggle); 
}

/**
 * 1000 is max health
 * Begins leaking gas at around 650 health
 * Minimum: -4000
 * Maximum: 1000
 * 
 * -4000: Engine is destroyed
 * 0 and below: Engine catches fire and health rapidly declines
 * 300: Engine is smoking and losing functionality
 * 1000: Engine is perfect
 * @param vehicle
 * @param health
 */
export function setVehicleEngineHealth(vehicle: number, health: number): void { 
	return _in(0x45f6d8ee, 0xf34abef1, vehicle, _fv(health)); 
}

/**
 * Starts or stops the engine on the specified vehicle.
 * 
 * vehicle: The vehicle to start or stop the engine on.
 * value: true to turn the vehicle on; false to turn it off.
 * instantly: if true, the vehicle will be set to the state immediately; otherwise, the current driver will physically turn on or off the engine.
 * disableAutoStart: If true, the system will prevent the engine from starting when the player got into it.
 * 
 * from what I've tested when I do this to a helicopter the propellers turn off after the engine has started. so is there any way to keep the heli propellers on?
 * @param vehicle
 * @param value
 * @param instantly
 * @param disableAutoStart
 */
export function setVehicleEngineOn(vehicle: number, value: boolean, instantly: boolean, disableAutoStart: boolean): void { 
	return _in(0x2497c471, 0x7c8b881e, vehicle, value, instantly, disableAutoStart); 
}

/**
 * The parameter fade is a value from 0-1, where 0 is fresh paint.
 * @param vehicle
 * @param fade
 */
export function setVehicleEnveffScale(vehicle: number, fade: number): void { 
	return _in(0x3afdc536, 0xc3d01674, vehicle, _fv(fade)); 
}

/**
 * index: 0 - 1
 * 
 * Used to be incorrectly named _SET_VEHICLE_EXCLUSIVE_DRIVER_2
 * @param vehicle
 * @param ped
 * @param index
 */
export function setVehicleExclusiveDriver(vehicle: number, ped: number, index: number): void { 
	return _in(0xb5c51b55, 0x02e85e83, vehicle, ped, index); 
}

export function setVehicleExplodesOnExplosionDamageAtZeroBodyHealth(vehicle: number, toggle: boolean): void { 
	return _in(0xd565f438, 0x137f0e10, vehicle, toggle); 
}

/**
 * Sets a vehicle to be strongly resistant to explosions. p0 is the vehicle; set p1 to false to toggle the effect on/off.
 * @param vehicle
 * @param toggle
 */
export function setVehicleExplodesOnHighExplosionDamage(vehicle: number, toggle: boolean): void { 
	return _in(0x71b0892e, 0xc081d60a, vehicle, toggle); 
}

/**
 * Does not actually return anything.
 * @param vehicle
 * @param scale
 */
export function setVehicleExplosiveDamageScale(vehicle: number, scale: number): number { 
	return _in(0x84d7ffd2, 0x23caaffd, vehicle, _fv(scale), _r, _ri); 
}

/**
 * Max value is 32767
 * @param vehicle
 * @param range
 */
export function setVehicleExtendedRemovalRange(vehicle: number, range: number): void { 
	return _in(0x79df7e80, 0x6202ce01, vehicle, range); 
}

/**
 * Available extraIds are 1-14, however none of the vehicles have extras above 12.
 * @param vehicle
 * @param extraId
 * @param disable
 */
export function setVehicleExtra(vehicle: number, extraId: number, disable: boolean): void { 
	return _in(0x7ee3a3c5, 0xe4a40cc9, vehicle, extraId, disable); 
}

export function setVehicleExtraColour5(vehicle: number, color: number): void { 
	return _in(0xf40dd601, 0xa65f7f19, vehicle, color); 
}

export function setVehicleExtraColour6(vehicle: number, color: number): void { 
	return _in(0x6089cdf6, 0xa57f326c, vehicle, color); 
}

/**
 * They use the same color indexs as SET_VEHICLE_COLOURS.
 * @param vehicle
 * @param pearlescentColor
 * @param wheelColor
 */
export function setVehicleExtraColours(vehicle: number, pearlescentColor: number, wheelColor: number): void { 
	return _in(0x2036f561, 0xadd12e33, vehicle, pearlescentColor, wheelColor); 
}

/**
 * This fixes a vehicle.
 * If the vehicle's engine's broken then you cannot fix it with this native.
 * @param vehicle
 */
export function setVehicleFixed(vehicle: number): void { 
	return _in(0x115722b1, 0xb9c14c1c, vehicle); 
}

export function setVehicleFlightNozzlePosition(vehicle: number, angleRatio: number): void { 
	return _in(0x30d779de, 0x7c4f6dd3, vehicle, _fv(angleRatio)); 
}

export function setVehicleFlightNozzlePositionImmediate(vehicle: number, angle: number): void { 
	return _in(0x9aa47fff, 0x660cb932, vehicle, _fv(angle)); 
}

export function setVehicleForceAfterburner(vehicle: number, toggle: boolean): void { 
	return _in(0xb055a345, 0x27cb8fd7, vehicle, toggle); 
}

/**
 * Sets some bit of vehicle
 * @param vehicle
 * @param toggle
 */
export function setVehicleForceInteriorlight(vehicle: number, toggle: boolean): void { 
	return _in(0x8821196d, 0x91fa2de5, vehicle, toggle); 
}

export function setVehicleForceReverseWarning(p0: number, p1: number): void { 
	return _in(0x97ffb4ad, 0xeed08066, p0, p1); 
}

/**
 * SCALE: Setting the speed to 30 would result in a speed of roughly 60mph, according to speedometer.
 * 
 * Speed is in meters per second
 * You can convert meters/s to mph here:
 * http://www.calculateme.com/Speed/MetersperSecond/ToMilesperHour.htm
 * @param vehicle
 * @param speed
 */
export function setVehicleForwardSpeed(vehicle: number, speed: number): void { 
	return _in(0xab54a438, 0x726d25d5, vehicle, _fv(speed)); 
}

/**
 * Seems to be identical to SET_VEHICLE_FORWARD_SPEED
 * @param vehicle
 * @param speed
 */
export function setVehicleForwardSpeedXy(vehicle: number, speed: number): void { 
	return _in(0x6501129c, 0x9e0ffa05, vehicle, _fv(speed)); 
}

/**
 * Seems to be related to the metal parts, not tyres (like i was expecting lol)
 * @param vehicle
 * @param friction
 */
export function setVehicleFrictionOverride(vehicle: number, friction: number): void { 
	return _in(0x1837af7c, 0x627009ba, vehicle, _fv(friction)); 
}

/**
 * It switch to highbeam when p1 is set to true.
 * @param vehicle
 * @param toggle
 */
export function setVehicleFullbeam(vehicle: number, toggle: boolean): void { 
	return _in(0x8b7fd87f, 0x0ddb421e, vehicle, toggle); 
}

/**
 * Allows creation of CEventShockingPlaneFlyby, CEventShockingHelicopterOverhead, and other(?) Shocking events
 * @param vehicle
 * @param toggle
 */
export function setVehicleGeneratesEngineShockingEvents(vehicle: number, toggle: boolean): void { 
	return _in(0x279d50de, 0x5652d935, vehicle, toggle); 
}

/**
 * Related to car generators & CPlayerSwitchMgrLong
 * @param x
 * @param y
 * @param z
 * @param radius
 */
export function setVehicleGeneratorAreaOfInterest(x: number, y: number, z: number, radius: number): void { 
	return _in(0x9a75585f, 0xb2e54fad, _fv(x), _fv(y), _fv(z), _fv(radius)); 
}

export function setVehicleGravity(vehicle: number, toggle: boolean): void { 
	return _in(0x89f149b6, 0x131e57da, vehicle, toggle); 
}

export function setVehicleHandbrake(vehicle: number, toggle: boolean): void { 
	return _in(0x68478556, 0x8ef26a22, vehicle, toggle); 
}

/**
 * Use the "AIHandling" string found in handling.meta
 * @param vehicle
 * @param hash
 */
export function setVehicleHandlingOverride(vehicle: number, hash: number): void { 
	return _in(0x10655fab, 0x9915623d, vehicle, _ch(hash)); 
}

export function setVehicleHasBeenDrivenFlag(vehicle: number, toggle: boolean): void { 
	return _in(0x02398b62, 0x7547189c, vehicle, toggle); 
}

export function setVehicleHasBeenOwnedByPlayer(vehicle: number, owned: boolean): void { 
	return _in(0x2b5f9d2a, 0xf1f1722d, vehicle, owned); 
}

/**
 * If set to true, prevents vehicle sirens from having sound, leaving only the lights.
 * @param vehicle
 * @param toggle
 */
export function setVehicleHasMutedSirens(vehicle: number, toggle: boolean): void { 
	return _in(0xd8050e0e, 0xb60cf274, vehicle, toggle); 
}

/**
 * if true, axles won't bend.
 * @param vehicle
 * @param toggle
 */
export function setVehicleHasStrongAxles(vehicle: number, toggle: boolean): void { 
	return _in(0x92f0cf72, 0x2bc4202f, vehicle, toggle); 
}

export function setVehicleHasUnbreakableLights(vehicle: number, toggle: boolean): void { 
	return _in(0x1aa8a837, 0xd2169d94, vehicle, toggle); 
}

/**
 * p1 can be either 0, 1 or 2.
 * 
 * Determines how vehicle lights behave when toggled.
 * 
 * 0 = Default (Lights can be toggled between off, normal and high beams)
 * 1 = Lights Disabled (Lights are fully disabled, cannot be toggled)
 * 2 = Always On (Lights can be toggled between normal and high beams)
 * @param vehicle
 * @param p1
 */
export function setVehicleHeadlightShadows(vehicle: number, p1: number): void { 
	return _in(0x1fd09e73, 0x90a74d54, vehicle, p1); 
}

export function setVehicleHomingLockedontoState(p0: number, p1: number): void { 
	return _in(0x407dc5e9, 0x7db1a4d3, p0, p1); 
}

export function setVehicleHornSoundIndex(vehicle: number, value: number): void { 
	return _in(0x0350e7e1, 0x7ba767d0, vehicle, value); 
}

/**
 * Seems to copy some values in vehicle
 * @param vehicle
 * @param p1
 */
export function setVehicleImpatienceTimer(vehicle: number, p1: number): void { 
	return _in(0x6a973569, 0xba094650, vehicle, p1); 
}

/**
 * If set to TRUE, it seems to suppress door noises and doesn't allow the horn to be continuous.
 * @param vehicle
 * @param toggle
 */
export function setVehicleInCarModShop(vehicle: number, toggle: boolean): void { 
	return _in(0x9d44fcce, 0x98450843, vehicle, toggle); 
}

export function setVehicleInactiveDuringPlayback(vehicle: number, toggle: boolean): void { 
	return _in(0x06582aff, 0x74894c75, vehicle, toggle); 
}

/**
 * Sets the turn signal enabled for a vehicle.
 * Set turnSignal to 1 for left light, 0 for right light.
 * @param vehicle
 * @param turnSignal
 * @param toggle
 */
export function setVehicleIndicatorLights(vehicle: number, turnSignal: number, toggle: boolean): void { 
	return _in(0xb5d45264, 0x751b7df0, vehicle, turnSignal, toggle); 
}

/**
 * doorId: see SET_VEHICLE_DOOR_SHUT
 * @param vehicle
 * @param doorId
 * @param doorLockStatus
 */
export function setVehicleIndividualDoorsLocked(vehicle: number, doorId: number, doorLockStatus: number): void { 
	return _in(0xbe707240, 0x27f85bcd, vehicle, doorId, doorLockStatus); 
}

export function setVehicleInfluencesWantedLevel(p0: number, p1: boolean): void { 
	return _in(0x0ad9e8f8, 0x7ff7c16f, p0, p1); 
}

export function setVehicleInteriorlight(vehicle: number, toggle: boolean): void { 
	return _in(0xbc2042f0, 0x90af6ad3, vehicle, toggle); 
}

/**
 * Setting this to false, makes the specified vehicle to where if you press Y your character doesn't even attempt the animation to enter the vehicle. Hence it's not considered aka ignored.
 * @param vehicle
 * @param toggle
 */
export function setVehicleIsConsideredByPlayer(vehicle: number, toggle: boolean): void { 
	return _in(0x31b927bb, 0xc44156cd, vehicle, toggle); 
}

/**
 * p1 (toggle) was always 1 (true) except in one case in the b678 scripts.
 * @param vehicle
 * @param toggle
 */
export function setVehicleIsRacing(vehicle: number, toggle: boolean): void { 
	return _in(0x07116e24, 0xe9d1929d, vehicle, toggle); 
}

export function setVehicleIsStolen(vehicle: number, isStolen: boolean): void { 
	return _in(0x67b2c79a, 0xa7ff5738, vehicle, isStolen); 
}

/**
 * Sets the wanted state of this vehicle.
 * @param vehicle
 * @param state
 */
export function setVehicleIsWanted(vehicle: number, state: boolean): void { 
	return _in(0xf7ec25a3, 0xebeec726, vehicle, state); 
}

export function setVehicleKeepEngineOnWhenAbandoned(vehicle: number, toggle: boolean): void { 
	return _in(0xb8fbc8b1, 0x330ca9b4, vehicle, toggle); 
}

export function setVehicleKersAllowed(vehicle: number, toggle: boolean): void { 
	return _in(0x99c82f8a, 0x139f3e4e, vehicle, toggle); 
}

/**
 * multiplier = brightness of head lights.
 * this value isn't capped afaik.
 * 
 * multiplier = 0.0 no lights
 * multiplier = 1.0 default game value
 * 
 * @param vehicle
 * @param multiplier
 */
export function setVehicleLightMultiplier(vehicle: number, multiplier: number): void { 
	return _in(0xb385454f, 0x8791f57c, vehicle, _fv(multiplier)); 
}

/**
 * set's if the vehicle has lights or not.
 * not an on off toggle.
 * p1 = 0 ;vehicle normal lights, off then lowbeams, then highbeams
 * p1 = 1 ;vehicle doesn't have lights, always off
 * p1 = 2 ;vehicle has always on lights
 * p1 = 3 ;or even larger like 4,5,... normal lights like =1
 * note1: when using =2 on day it's lowbeam,highbeam
 * but at night it's lowbeam,lowbeam,highbeam
 * note2: when using =0 it's affected by day or night for highbeams don't exist in daytime.
 * @param vehicle
 * @param state
 */
export function setVehicleLights(vehicle: number, state: number): void { 
	return _in(0x34e710ff, 0x01247c5a, vehicle, state); 
}

export function setVehicleLimitSpeedWhenPlayerInactive(vehicle: number, toggle: boolean): void { 
	return _in(0xc50ce861, 0xb55eab8b, vehicle, toggle); 
}

export function setVehicleLivery(vehicle: number, livery: number): void { 
	return _in(0x60bf608f, 0x1b8cd1b6, vehicle, livery); 
}

/**
 * Used to set the secondary livery (the roof on Tornado Custom being one such example.)
 * 
 * Livery value is dependent on the amount of liveries present in the vehicle's texture dictionary, for Tornado Custom this would be 0-6.
 * @param vehicle
 * @param livery
 */
export function setVehicleLivery2(vehicle: number, livery: number): void { 
	return _in(0xa6d3a875, 0x0dc73270, vehicle, livery); 
}

export function setVehicleLodMultiplier(vehicle: number, multiplier: number): void { 
	return _in(0x93ae6a61, 0xbe015bf1, vehicle, _fv(multiplier)); 
}

/**
 * 0.0f = engine rev minimum
 * 1.0f = engine rev limit
 * @param vehicle
 * @param modifier
 */
export function setVehicleMaxLaunchEngineRevs(vehicle: number, modifier: number): void { 
	return _in(0x5ae614ec, 0xa5fdd423, vehicle, _fv(modifier)); 
}

/**
 * To reset the max speed, set the `speed` value to `0.0` or lower.
 * @param vehicle
 * @param speed
 */
export function setVehicleMaxSpeed(vehicle: number, speed: number): void { 
	return _in(0xbaa045b4, 0xe42f3c06, vehicle, _fv(speed)); 
}

export function setVehicleMayBeUsedByGotoPointAnyMeans(vehicle: number, p1: boolean): void { 
	return _in(0xe851e480, 0xb814d4ba, vehicle, p1); 
}

export function setVehicleMissileWarningEnabled(vehicle: number, toggle: boolean): void { 
	return _in(0xf3365489, 0xe0dd50f9, vehicle, toggle); 
}

/**
 * In b944, there are 50 (0 - 49) mod types.
 * 
 * Sets the vehicle mod.
 * The vehicle must have a mod kit first.
 * 
 * Any out of range ModIndex is stock.
 * 
 * #Mod Type
 * Spoilers - 0
 * Front Bumper - 1
 * Rear Bumper - 2
 * Side Skirt - 3
 * Exhaust - 4
 * Frame - 5
 * Grille - 6
 * Hood - 7
 * Fender - 8
 * Right Fender - 9
 * Roof - 10
 * Engine - 11
 * Brakes - 12
 * Transmission - 13
 * Horns - 14 (modIndex from 0 to 51)
 * Suspension - 15
 * Armor - 16
 * Front Wheels - 23
 * Back Wheels - 24 //only for motocycles
 * Plate holders - 25
 * Trim Design - 27
 * Ornaments - 28
 * Dial Design - 30
 * Steering Wheel - 33
 * Shifter Leavers - 34
 * Plaques - 35
 * Hydraulics - 38
 * Livery - 48
 * 
 * ENUMS: https://pastebin.com/QzEAn02v
 * @param vehicle
 * @param modType
 * @param modIndex
 * @param customTires
 */
export function setVehicleMod(vehicle: number, modType: number, modIndex: number, customTires: boolean): void { 
	return _in(0x6af0636d, 0xdedcb6dd, vehicle, modType, modIndex, customTires); 
}

/**
 * paintType:
 * 0: Normal
 * 1: Metallic
 * 2: Pearl
 * 3: Matte
 * 4: Metal
 * 5: Chrome
 * 6: Chameleon
 * 
 * color: number of the color.
 * 
 * p3 seems to always be 0.
 * 
 * Full list of vehicle colors and vehicle plates by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleColors.json
 * @param vehicle
 * @param paintType
 * @param color
 * @param pearlescentColor
 */
export function setVehicleModColor1(vehicle: number, paintType: number, color: number, pearlescentColor: number): void { 
	return _in(0x43feb945, 0xee7f85b8, vehicle, paintType, color, pearlescentColor); 
}

/**
 * Changes the secondary paint type and color
 * paintType:
 * 0: Normal
 * 1: Metallic
 * 2: Pearl
 * 3: Matte
 * 4: Metal
 * 5: Chrome
 * 6: Chameleon
 * 
 * color: number of the color
 * 
 * Full list of vehicle colors and vehicle plates by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleColors.json
 * @param vehicle
 * @param paintType
 * @param color
 */
export function setVehicleModColor2(vehicle: number, paintType: number, color: number): void { 
	return _in(0x816562ba, 0xdfdec83e, vehicle, paintType, color); 
}

/**
 * Set modKit to 0 if you plan to call SET_VEHICLE_MOD. That's what the game does. Most body modifications through SET_VEHICLE_MOD will not take effect until this is set to 0.
 * 
 * Full list of vehicle mod kits and mods by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleModKits.json
 * @param vehicle
 * @param modKit
 */
export function setVehicleModKit(vehicle: number, modKit: number): void { 
	return _in(0x1f2aa07f, 0x00b3217a, vehicle, modKit); 
}

/**
 * Makes the vehicle stop spawning naturally in traffic. Here's an essential example:
 * 
 * VEHICLE::SET_VEHICLE_MODEL_IS_SUPPRESSED(MISC::GET_HASH_KEY("taco"), true);
 * 
 * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
 * @param model
 * @param suppressed
 */
export function setVehicleModelIsSuppressed(model: number, suppressed: boolean): void { 
	return _in(0x0fc2d89a, 0xc25a5814, _ch(model), suppressed); 
}

/**
 * Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
 * @param modelHash
 */
export function setVehicleModelPlayerWillExitScene(modelHash: number): void { 
	return _in(0x7f96f23f, 0xa9b73327, _ch(modelHash)); 
}

/**
 * NOTE: Debugging functions are not present in the retail version of the game.
 * @param vehicle
 * @param name
 */
export function setVehicleNameDebug(vehicle: number, name: string): void { 
	return _in(0xbfdf984e, 0x2c22b94f, vehicle, _ts(name)); 
}

export function setVehicleNeedsToBeHotwired(vehicle: number, toggle: boolean): void { 
	return _in(0xfba550ea, 0x44404ee6, vehicle, toggle); 
}

/**
 * Sets the color of the neon lights of the specified vehicle.
 * @param vehicle
 * @param r
 * @param g
 * @param b
 */
export function setVehicleNeonColour(vehicle: number, r: number, g: number, b: number): void { 
	return _in(0x8e0a5822, 0x09a62695, vehicle, r, g, b); 
}

/**
 * Sets the neon lights of the specified vehicle on/off.
 * 
 * Indices:
 * 0 = Left
 * 1 = Right
 * 2 = Front
 * 3 = Back
 * @param vehicle
 * @param index
 * @param toggle
 */
export function setVehicleNeonEnabled(vehicle: number, index: number, toggle: boolean): void { 
	return _in(0x2aa720e4, 0x287bf269, vehicle, index, toggle); 
}

/**
 * Index references CVehicleModelColor
 * @param vehicle
 * @param index
 */
export function setVehicleNeonIndexColour(vehicle: number, index: number): void { 
	return _in(0xb93b2867, 0xf7b479d1, vehicle, index); 
}

export function setVehicleNoExplosionDamageFromDriver(vehicle: number, toggle: boolean): void { 
	return _in(0x5e569ec4, 0x6ec21cae, vehicle, toggle); 
}

export function setVehicleNotStealableAmbiently(vehicle: number, p1: boolean): void { 
	return _in(0xab043250, 0x45427aae, vehicle, p1); 
}

/**
 * Sets a vehicle's license plate text.  8 chars maximum.
 * 
 * Example:
 * Ped playerPed = PLAYER::PLAYER_PED_ID();
 * Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);
 * char *plateText = "KING";
 * VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(veh, plateText);
 * @param vehicle
 * @param plateText
 */
export function setVehicleNumberPlateText(vehicle: number, plateText: string): void { 
	return _in(0x95a88f0b, 0x409cda47, vehicle, _ts(plateText)); 
}

/**
 * Plates:
 * Blue/White - 0
 * Yellow/black - 1
 * Yellow/Blue - 2
 * Blue/White2 - 3
 * Blue/White3 - 4
 * Yankton - 5
 * @param vehicle
 * @param plateIndex
 */
export function setVehicleNumberPlateTextIndex(vehicle: number, plateIndex: number): void { 
	return _in(0x9088eb5a, 0x43ffb0a1, vehicle, plateIndex); 
}

export function setVehicleOccupantsTakeExplosiveDamage(vehicle: number, toggle: boolean): void { 
	return _in(0x35bb21de, 0x06784373, vehicle, toggle); 
}

/**
 * Sets a vehicle on the ground on all wheels.  Returns whether or not the operation was successful.
 * 
 * sfink: This has an additional param(Vehicle vehicle, float p1) which is always set to 5.0f in the b944 scripts.
 * @param vehicle
 * @param p1
 */
export function setVehicleOnGroundProperly(vehicle: number, p1: number): boolean { 
	return _in(0x49733e92, 0x263139d1, vehicle, _fv(p1), _r); 
}

/**
 * Tested on the player's current vehicle. Unless you kill the driver, the vehicle doesn't loose control, however, if enabled, explodeOnImpact is still active. The moment you crash, boom.
 * @param vehicle
 * @param killDriver
 * @param explodeOnImpact
 */
export function setVehicleOutOfControl(vehicle: number, killDriver: boolean, explodeOnImpact: boolean): void { 
	return _in(0xf19d095e, 0x42d430cc, vehicle, killDriver, explodeOnImpact); 
}

/**
 * 1000 is max health
 * Begins leaking gas at around 650 health
 * -999.90002441406 appears to be minimum health, although nothing special occurs
 * @param vehicle
 * @param health
 */
export function setVehiclePetrolTankHealth(vehicle: number, health: number): void { 
	return _in(0x70db5764, 0x9fa8d0d8, vehicle, _fv(health)); 
}

export function setVehiclePopulationBudget(p0: number): void { 
	return _in(0xcb9e1eb3, 0xbe2af4e9, p0); 
}

export function setVehicleProvidesCover(vehicle: number, toggle: boolean): void { 
	return _in(0x5afeedd9, 0xbb2899d7, vehicle, toggle); 
}

/**
 * can't seem to enable radio on cop cars etc
 * @param vehicle
 * @param toggle
 */
export function setVehicleRadioEnabled(vehicle: number, toggle: boolean): void { 
	return _in(0x3b988190, 0xc0aa6c0b, vehicle, toggle); 
}

export function setVehicleRadioLoud(vehicle: number, toggle: boolean): void { 
	return _in(0xbb6f1cae, 0xc68b0bce, vehicle, toggle); 
}

export function setVehicleReadyForCleanup(p0: number): void { 
	return _in(0xcf915902, 0x4555488c, p0); 
}

/**
 * Reduces grip significantly so it's hard to go anywhere.
 * @param vehicle
 * @param toggle
 */
export function setVehicleReduceGrip(vehicle: number, toggle: boolean): void { 
	return _in(0x222ff6a8, 0x23d122e2, vehicle, toggle); 
}

/**
 * val is 0-3
 * Often used in conjunction with: SET_VEHICLE_REDUCE_GRIP
 * @param vehicle
 * @param val
 */
export function setVehicleReduceGripLevel(vehicle: number, val: number): void { 
	return _in(0x6dee944e, 0x1ee90cfb, vehicle, val); 
}

export function setVehicleRemoveAggressiveCarjackMission(p0: number): void { 
	return _in(0xc4b3347b, 0xd68bd609, p0); 
}

export function setVehicleRespectsLocksWhenHasDriver(vehicle: number, p1: boolean): void { 
	return _in(0x2311dd71, 0x59f00582, vehicle, p1); 
}

export function setVehicleRudderBroken(vehicle: number, toggle: boolean): void { 
	return _in(0x09606148, 0xb6c71def, vehicle, toggle); 
}

/**
 * Only works during nighttime.
 * @param heli
 * @param toggle
 * @param canBeUsedByAI
 */
export function setVehicleSearchlight(heli: number, toggle: boolean, canBeUsedByAI: boolean): void { 
	return _in(0x14e85c5e, 0xe7a4d542, heli, toggle, canBeUsedByAI); 
}

/**
 * Commands the driver of an armed vehicle (p0) to shoot its weapon at a target (p1). p3, p4 and p5 are the coordinates of the target. Example:
 * 
 * WEAPON::SET_CURRENT_PED_VEHICLE_WEAPON(pilot,MISC::GET_HASH_KEY("VEHICLE_WEAPON_PLANE_ROCKET"));                        VEHICLE::SET_VEHICLE_SHOOT_AT_TARGET(pilot, target, targPos.x, targPos.y, targPos.z);
 * @param driver
 * @param entity
 * @param xTarget
 * @param yTarget
 * @param zTarget
 */
export function setVehicleShootAtTarget(driver: number, entity: number, xTarget: number, yTarget: number, zTarget: number): void { 
	return _in(0x74cd9a93, 0x27a282ea, driver, entity, _fv(xTarget), _fv(yTarget), _fv(zTarget)); 
}

/**
 * Does nothing. It's a nullsub.
 * @param toggle
 */
export function setVehicleShuntOnStick(toggle: boolean): void { 
	return _in(0x99a05839, 0xc46ce316, toggle); 
}

/**
 * Activate siren on vehicle (Only works if the vehicle has a siren).
 * @param vehicle
 * @param toggle
 */
export function setVehicleSiren(vehicle: number, toggle: boolean): void { 
	return _in(0xf4924635, 0xa19eb37d, vehicle, toggle); 
}

export function setVehicleSlipstreamingShouldTimeOut(toggle: boolean): void { 
	return _in(0xf051d9bf, 0xb6ba39c0, toggle); 
}

export function setVehicleStartupRevSound(vehicle: number, p1: string, p2: string): void { 
	return _in(0xf1f8157b, 0x8c3f171c, vehicle, _ts(p1), _ts(p2)); 
}

/**
 * Has something to do with trains. Always precedes SET_MISSION_TRAIN_AS_NO_LONGER_NEEDED.
 * May be true that it can be used with trains not sure, but not specifically for trains. Go find Xbox360 decompiled scripts and search for 'func_1333' in freemode.c it isn't used just for trains. Thanks for the info tho.
 * @param vehicle
 * @param toggle
 */
export function setVehicleStaysFrozenWhenCleanedUp(vehicle: number, toggle: boolean): void { 
	return _in(0x1cf38d52, 0x9d7441d9, vehicle, toggle); 
}

/**
 * Locks the vehicle's steering to the desired angle, explained below.
 * 
 * Requires to be called onTick. Steering is unlocked the moment the function stops being called on the vehicle.
 * 
 * Steer bias:
 * -1.0 = full right
 * 0.0 = centered steering
 * 1.0 = full left
 * @param vehicle
 * @param value
 */
export function setVehicleSteerBias(vehicle: number, value: number): void { 
	return _in(0x42a8ec77, 0xd5150cbe, vehicle, _fv(value)); 
}

export function setVehicleSteerForBuildings(vehicle: number, p1: number): void { 
	return _in(0xdce97bdf, 0x8a0eabc8, vehicle, p1); 
}

export function setVehicleSteeringBiasScalar(p0: number, p1: number): void { 
	return _in(0x9007a2f2, 0x1dc108d4, p0, _fv(p1)); 
}

/**
 * sfink: sets bit in vehicle's structure, used by maintransition, fm_mission_controller, mission_race and a couple of other scripts. see dissassembly:
 * CVehicle *__fastcall sub_140CDAA10(signed int a1, char a2)
 * {
 * CVehicle *result; // rax@1
 * 
 * result = EntityAsCVehicle(a1);
 * if ( result )
 * {
 * result->field_886 &= 0xEFu;
 * result->field_886 |= 16 * (a2 & 1);
 * }
 * return result;
 * }
 * @param vehicle
 * @param toggle
 */
export function setVehicleStopInstantlyWhenPlayerInactive(vehicle: number, toggle: boolean): void { 
	return _in(0x6ebfb22d, 0x646ffc18, vehicle, toggle); 
}

/**
 * If set to true, vehicle will not take crash damage, but is still susceptible to damage from bullets and explosives
 * @param vehicle
 * @param toggle
 */
export function setVehicleStrong(vehicle: number, toggle: boolean): void { 
	return _in(0x3e8c8727, 0x991a8a0b, vehicle, toggle); 
}

export function setVehicleTailLights(vehicle: number, toggle: boolean): void { 
	return _in(0x5815bd27, 0x63178df4, vehicle, toggle); 
}

export function setVehicleTankStationary(vehicle: number, p1: boolean): void { 
	return _in(0x737e3981, 0x38550fff, vehicle, p1); 
}

export function setVehicleTankTurretPosition(vehicle: number, position: number, p2: boolean): void { 
	return _in(0x56b94c6d, 0x7127dfba, vehicle, _fv(position), p2); 
}

export function setVehicleTimedExplosion(vehicle: number, ped: number, toggle: boolean): void { 
	return _in(0x2e0a74e1, 0x002380b1, vehicle, ped, toggle); 
}

/**
 * Sets how much the crane on the tow truck is raised, where 0.0 is fully lowered and 1.0 is fully raised.
 * @param vehicle
 * @param position
 */
export function setVehicleTowTruckArmPosition(vehicle: number, position: number): void { 
	return _in(0xfe54b92a, 0x344583ca, vehicle, _fv(position)); 
}

export function setVehicleTurretSpeedThisFrame(vehicle: number, speed: number): void { 
	return _in(0x1093408b, 0x4b9d1146, vehicle, _fv(speed)); 
}

export function setVehicleTurretTarget(vehicle: number, p1: boolean, x: number, y: number, z: number, p5: boolean): void { 
	return _in(0x0581730a, 0xb9380412, vehicle, p1, _fv(x), _fv(y), _fv(z), p5); 
}

/**
 * "To burst tyres VEHICLE::SET_VEHICLE_TYRE_BURST(vehicle, 0, true, 1000.0)
 * to burst all tyres type it 8 times where p1 = 0 to 7.
 * 
 * p3 seems to be how much damage it has taken. 0 doesn't deflate them, 1000 completely deflates them.
 * 
 * '0 = wheel_lf / bike, plane or jet front
 * '1 = wheel_rf
 * '2 = wheel_lm / in 6 wheels trailer, plane or jet is first one on left
 * '3 = wheel_rm / in 6 wheels trailer, plane or jet is first one on right
 * '4 = wheel_lr / bike rear / in 6 wheels trailer, plane or jet is last one on left
 * '5 = wheel_rr / in 6 wheels trailer, plane or jet is last one on right
 * '45 = 6 wheels trailer mid wheel left
 * '47 = 6 wheels trailer mid wheel right
 * @param vehicle
 * @param index
 * @param onRim
 * @param p3
 */
export function setVehicleTyreBurst(vehicle: number, index: number, onRim: boolean, p3: number): void { 
	return _in(0xec6a202e, 0xe4960385, vehicle, index, onRim, _fv(p3)); 
}

/**
 * tyreIndex = 0 to 4 on normal vehicles
 * 
 * '0 = wheel_lf / bike, plane or jet front
 * '1 = wheel_rf
 * '2 = wheel_lm / in 6 wheels trailer, plane or jet is first one on left
 * '3 = wheel_rm / in 6 wheels trailer, plane or jet is first one on right
 * '4 = wheel_lr / bike rear / in 6 wheels trailer, plane or jet is last one on left
 * '5 = wheel_rr / in 6 wheels trailer, plane or jet is last one on right
 * '45 = 6 wheels trailer mid wheel left
 * '47 = 6 wheels trailer mid wheel right
 * @param vehicle
 * @param tyreIndex
 */
export function setVehicleTyreFixed(vehicle: number, tyreIndex: number): void { 
	return _in(0x6e13fc66, 0x2b882d1d, vehicle, tyreIndex); 
}

/**
 * Sets the tire smoke's color of this vehicle.
 * 
 * vehicle: The vehicle that is the target of this method.
 * r: The red level in the RGB color code.
 * g: The green level in the RGB color code.
 * b: The blue level in the RGB color code.
 * 
 * Note: setting r,g,b to 0 will give the car the "Patriot" tire smoke.
 * @param vehicle
 * @param r
 * @param g
 * @param b
 */
export function setVehicleTyreSmokeColor(vehicle: number, r: number, g: number, b: number): void { 
	return _in(0xb5ba80f8, 0x39791c0f, vehicle, r, g, b); 
}

/**
 * Allows you to toggle bulletproof tires.
 * @param vehicle
 * @param toggle
 */
export function setVehicleTyresCanBurst(vehicle: number, toggle: boolean): void { 
	return _in(0xeb9dc3c7, 0xd8596c46, vehicle, toggle); 
}

export function setVehicleUndriveable(vehicle: number, toggle: boolean): void { 
	return _in(0x8aba6af5, 0x4b942b95, vehicle, toggle); 
}

export function setVehicleUseAlternateHandling(vehicle: number, toggle: boolean): void { 
	return _in(0x1d97d1e3, 0xa70a649f, vehicle, toggle); 
}

/**
 * Used for blazer5. Changes the quadbike-jetski transformation input from raise/lower convertible roof (hold H by default) to horn (press E by default.)
 * @param toggle
 */
export function setVehicleUseBoostButtonForWheelRetract(toggle: boolean): void { 
	return _in(0x41290b40, 0xfa63e6da, toggle); 
}

export function setVehicleUseCutsceneWheelCompression(p0: number, p1: boolean, p2: boolean, p3: boolean): boolean { 
	return _in(0xe023e8ac, 0x4ef7c117, p0, p1, p2, p3, _r); 
}

export function setVehicleUseHornButtonForNitrous(toggle: boolean): void { 
	return _in(0x1980f688, 0x72cc2c3d, toggle); 
}

export function setVehicleUseMoreRestrictiveSpawnChecks(vehicle: number, p1: boolean): void { 
	return _in(0x88bc673c, 0xa9e0ae99, vehicle, p1); 
}

export function setVehicleUsePlayerLightSettings(vehicle: number, toggle: boolean): void { 
	return _in(0xc45c27ef, 0x50f36adc, vehicle, toggle); 
}

export function setVehicleUsedForPilotSchool(vehicle: number, toggle: boolean): void { 
	return _in(0xe05dd0e9, 0x707003a3, vehicle, toggle); 
}

/**
 * vehicle must be a plane
 * @param vehicle
 * @param toggle
 */
export function setVehicleUsesLargeRearRamp(vehicle: number, toggle: boolean): void { 
	return _in(0xcac66558, 0xb944da67, vehicle, toggle); 
}

export function setVehicleUsesMpPlayerDamageMultiplier(p0: number, p1: number): void { 
	return _in(0xbb2333bb, 0x87ddd87f, p0, p1); 
}

export function setVehicleWeaponCanTargetObjects(vehicle: number, toggle: boolean): void { 
	return _in(0x86b4b621, 0x2cb8b627, vehicle, toggle); 
}

export function setVehicleWeaponDamageScale(vehicle: number, multiplier: number): boolean { 
	return _in(0x45a561a9, 0x421ab6ad, vehicle, _fv(multiplier), _r); 
}

/**
 * Set vehicle's primary mounted weapon 2 ammo. For example, use it on APC.
 * For example, you can "remove" any vehicle weapon from any vehicle.
 * ammoAmount -1 = infinite ammo (default value for any spawned vehicle tho)
 * @param vehicle
 * @param weaponIndex
 * @param capacity
 */
export function setVehicleWeaponRestrictedAmmo(vehicle: number, weaponIndex: number, capacity: number): void { 
	return _in(0x44cd1f49, 0x3db2a0a6, vehicle, weaponIndex, capacity); 
}

/**
 * 0: Sport
 * 1: Muscle
 * 2: Lowrider
 * 3: SUV
 * 4: Offroad
 * 5: Tuner
 * 6: Bike Wheels
 * 7: High End
 * 8: Benny's Originals
 * 9: Benny's Bespoke
 * 10: Racing
 * 11: Street
 * 12: Track
 * @param vehicle
 * @param WheelType
 */
export function setVehicleWheelType(vehicle: number, WheelType: number): void { 
	return _in(0x487eb21c, 0xc7295ba1, vehicle, WheelType); 
}

export function setVehicleWheelsCanBreak(vehicle: number, enabled: boolean): void { 
	return _in(0x29b18b4f, 0xd460ca8f, vehicle, enabled); 
}

export function setVehicleWheelsCanBreakOffWhenBlowUp(vehicle: number, toggle: boolean): void { 
	return _in(0xa37b9a51, 0x7b133349, vehicle, toggle); 
}

export function setVehicleWillForceOtherVehiclesToStop(vehicle: number, toggle: boolean): void { 
	return _in(0xbe5c1255, 0xa1830ff5, vehicle, toggle); 
}

export function setVehicleWillTellOthersToHurry(vehicle: number, p1: boolean): void { 
	return _in(0x2c4a1590, 0xabf43e8b, vehicle, p1); 
}

/**
 * enum WindowTints
 * {
 * WINDOWTINT_NONE,
 * WINDOWTINT_PURE_BLACK,
 * WINDOWTINT_DARKSMOKE,
 * WINDOWTINT_LIGHTSMOKE,
 * WINDOWTINT_STOCK,
 * WINDOWTINT_LIMO,
 * WINDOWTINT_GREEN
 * };
 * Full list of all vehicle window tints by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleColors.json
 * @param vehicle
 * @param tint
 */
export function setVehicleWindowTint(vehicle: number, tint: number): void { 
	return _in(0x57c51e6b, 0xad752696, vehicle, tint); 
}

/**
 * `color`: is the paint index for the vehicle.
 * Paint index goes from 0 to 12.
 * Be aware that it only works on xenon lights. Example: https://i.imgur.com/yV3cpG9.png
 * Full list of all vehicle xenon lights by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleColors.json
 * @param vehicle
 * @param colorIndex
 */
export function setVehicleXenonLightColorIndex(vehicle: number, colorIndex: number): void { 
	return _in(0xe41033b2, 0x5d003a07, vehicle, colorIndex); 
}

/**
 * Only called within 1 script for x360. 'fm_mission_controller' and it used on an object.
 * 
 * Ran after these 2 natives,
 * set_object_targettable(uParam0, 0);
 * set_entity_invincible(uParam0, 1);
 * @param entity
 * @param toggle
 */
export function setWaitForCollisionsBeforeProbe(entity: number, toggle: boolean): void { 
	return _in(0xdc6f8601, 0xfaf2e893, entity, toggle); 
}

/**
 * Max value is 1.0
 * @param player
 * @param difficulty
 */
export function setWantedLevelDifficulty(player: number, difficulty: number): void { 
	return _in(0x9b0bb33b, 0x04405e7a, player, _fv(difficulty)); 
}

export function setWantedLevelHiddenEscapeTime(player: number, wantedLevel: number, lossTime: number): void { 
	return _in(0x49b856b1, 0x360c47c7, player, wantedLevel, lossTime); 
}

export function setWantedLevelMultiplier(multiplier: number): void { 
	return _in(0x020e5f00, 0xcda207ba, _fv(multiplier)); 
}

export function setWantedResponseNumPedsToSpawn(p0: number, p1: number): void { 
	return _in(0xe532ec1a, 0x63231b4f, p0, p1); 
}

/**
 * You can only use text entries. No custom text.
 * 
 * Example: SET_WARNING_MESSAGE("t20", 3, "adder", false, -1, 0, 0, true);
 * errorCode: shows an error code at the bottom left if nonzero
 * @param titleMsg
 * @param flags
 * @param promptMsg
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param showBackground
 * @param errorCode
 */
export function setWarningMessage(titleMsg: string, flags: number, promptMsg: string, p3: boolean, p4: number, p5: string, p6: string, showBackground: boolean, errorCode: number): void { 
	return _in(0x7b1776b3, 0xb53f8d74, _ts(titleMsg), flags, _ts(promptMsg), p3, p4, _ts(p5), _ts(p6), showBackground, errorCode); 
}

export function setWarningMessageOptionHighlight(p0: number): boolean { 
	return _in(0xdaf87174, 0xbe7454ff, p0, _r); 
}

/**
 * Some sort of list displayed in a warning message. Yet unknown how to prevent repeating.
 * Param names copied from the corresponding scaleform function "SET_LIST_ROW".
 * Example: https://i.imgur.com/arKvOYx.png
 * @param index
 * @param name
 * @param cash
 * @param rp
 * @param lvl
 * @param colour
 */
export function setWarningMessageOptionItems(index: number, name: string, cash: number, rp: number, lvl: number, colour: number): boolean { 
	return _in(0x0c5a80a9, 0xe096d529, index, _ts(name), cash, rp, lvl, colour, _r); 
}

/**
 * Shows a warning message on screen with a header.
 * Note: You can only use text entries. No custom text. You can recreate this easily with scaleforms.
 * Example: https://i.imgur.com/ITJt8bJ.png
 * @param entryHeader
 * @param entryLine1
 * @param instructionalKey
 * @param entryLine2
 * @param p4
 * @param p5
 * @param showBackground
 * @param p7
 * @param p8
 * @param p9
 */
export function setWarningMessageWithHeader(entryHeader: string, entryLine1: string, instructionalKey: number, entryLine2: string, p4: boolean, p5: number, p8: boolean, p9: number): [number, number] { 
	const [showBackground_out, p7_out] = _in(0xdc38cc1e, 0x35b6a5d7, _ts(entryHeader), _ts(entryLine1), instructionalKey, _ts(entryLine2), p4, p5, _i, _i, p8, p9);
	return [showBackground_out as number, p7_out as number]; 
}

/**
 * You can use this native for custom input, without having to use any scaleform-related natives.
 * The native must be called on tick.
 * The entryHeader must be a valid label.
 * For Single lines use JL_INVITE_N as entryLine1, JL_INVITE_ND for multiple.
 * Notes:
 * - additionalIntInfo: replaces first occurrence of ~1~ in provided label with an integer
 * - additionalTextInfoLine1: replaces first occurrence of ~a~ in provided label, with your custom text
 * - additionalTextInfoLine2: replaces second occurrence of ~a~ in provided label, with your custom text
 * - showBackground: shows black background of the warning screen
 * - errorCode: shows an error code at the bottom left if nonzero
 * Example of usage:
 * SET_WARNING_MESSAGE_WITH_HEADER_AND_SUBSTRING_FLAGS("ALERT", "JL_INVITE_ND", 66, "", true, -1, -1, "Testing line 1", "Testing line 2", true, 0);
 * Screenshot:
 * https://imgur.com/a/IYA7vJ8
 * @param entryHeader
 * @param entryLine1
 * @param instructionalKey
 * @param entryLine2
 * @param p4
 * @param p5
 * @param additionalIntInfo
 * @param additionalTextInfoLine1
 * @param additionalTextInfoLine2
 * @param showBackground
 * @param errorCode
 */
export function setWarningMessageWithHeaderAndSubstringFlags(entryHeader: string, entryLine1: string, instructionalKey: number, entryLine2: string, p4: boolean, p5: number, additionalIntInfo: number, additionalTextInfoLine1: string, additionalTextInfoLine2: string, showBackground: boolean, errorCode: number): void { 
	return _in(0x70191948, 0x2c74b5ab, _ts(entryHeader), _ts(entryLine1), instructionalKey, _ts(entryLine2), p4, p5, additionalIntInfo, _ts(additionalTextInfoLine1), _ts(additionalTextInfoLine2), showBackground, errorCode); 
}

/**
 * labelTitle: Label of the alert's title.
 * labelMsg: Label of the alert's message.
 * p2: This is an enum, check the description for a list.
 * p3: This is an enum, check the description for a list.
 * labelMsg2: Label of another message line
 * p5: usually 0
 * p6: usually -1
 * p7: usually 0
 * p8: unknown label
 * p9: unknown label
 * background: Set to anything other than 0 or false (even any string) and it will draw a background. Setting it to 0 or false will draw no background.
 * errorCode: Error code, shown at the bottom left if set to value other than 0.
 * 
 * instructionalKey enum list:
 * Buttons = {
 * Empty = 0,
 * Select = 1, -- (RETURN)
 * Ok = 2, -- (RETURN)
 * Yes = 4, -- (RETURN)
 * Back = 8, -- (ESC)
 * Cancel = 16, -- (ESC)
 * No = 32, -- (ESC)
 * RetrySpace = 64, -- (SPACE)
 * Restart = 128, -- (SPACE)
 * Skip = 256, -- (SPACE)
 * Quit = 512, -- (ESC)
 * Adjust = 1024, -- (ARROWS)
 * SpaceKey = 2048, -- (SPACE)
 * Share = 4096, -- (SPACE)
 * SignIn = 8192, -- (SPACE)
 * Continue = 16384, -- (RETURN)
 * AdjustLeftRight = 32768, -- (SCROLL L/R)
 * AdjustUpDown = 65536, -- (SCROLL U/D)
 * Overwrite = 131072, -- (SPACE)
 * SocialClubSignup = 262144, -- (RETURN)
 * Confirm = 524288, -- (RETURN)
 * Queue = 1048576, -- (RETURN)
 * RetryReturn = 2097152, -- (RETURN)
 * BackEsc = 4194304, -- (ESC)
 * SocialClub = 8388608, -- (RETURN)
 * Spectate = 16777216, -- (SPACE)
 * OkEsc = 33554432, -- (ESC)
 * CancelTransfer = 67108864, -- (ESC)
 * LoadingSpinner = 134217728,
 * NoReturnToGTA = 268435456, -- (ESC)
 * CancelEsc = 536870912, -- (ESC)
 * }
 * 
 * Alt = {
 * Empty = 0,
 * No = 1, -- (SPACE)
 * Host = 2, -- (ESC)
 * SearchForJob = 4, -- (RETURN)
 * ReturnKey = 8, -- (TURN)
 * Freemode = 16, -- (ESC)
 * }
 * 
 * Example: https://i.imgur.com/TvmNF4k.png
 * @param labelTitle
 * @param labelMessage
 * @param p2
 * @param p3
 * @param labelMessage2
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 * @param p9
 * @param background
 * @param errorCode
 */
export function setWarningMessageWithHeaderAndSubstringFlagsExtended(labelTitle: string, labelMessage: string, p2: number, p3: number, labelMessage2: string, p5: boolean, p6: number, p7: number, p8: string, p9: string, background: boolean, errorCode: number): void { 
	return _in(0x15803fec, 0x3b9a872b, _ts(labelTitle), _ts(labelMessage), p2, p3, _ts(labelMessage2), p5, p6, p7, _ts(p8), _ts(p9), background, errorCode); 
}

export function setWarningMessageWithHeaderExtended(entryHeader: string, entryLine1: string, flags: number, entryLine2: string, p4: boolean, p5: number, showBg: boolean, p9: number, p10: number): [number, number] { 
	const [p6_out, p7_out] = _in(0x38b55259, 0xc2e078ed, _ts(entryHeader), _ts(entryLine1), flags, _ts(entryLine2), p4, p5, _i, _i, showBg, p9, p10);
	return [p6_out as number, p7_out as number]; 
}

/**
 * This native removes the current waypoint from the map.
 * 
 * Example:
 * C#:
 * Function.Call(Hash.SET_WAYPOINT_OFF);
 * 
 * C++:
 * HUD::SET_WAYPOINT_OFF();
 */
export function setWaypointOff(): void { 
	return _in(0xa7e4e2d3, 0x61c2627f); 
}

/**
 * Changes the selected ped aiming animation style.
 * Note : You must use GET_HASH_KEY!
 * 
 * Strings to use with GET_HASH_KEY :
 * 
 * "Ballistic",
 * "Default",
 * "Fat",
 * "Female",
 * "FirstPerson",
 * "FirstPersonAiming",
 * "FirstPersonFranklin",
 * "FirstPersonFranklinAiming",
 * "FirstPersonFranklinRNG",
 * "FirstPersonFranklinScope",
 * "FirstPersonMPFemale",
 * "FirstPersonMichael",
 * "FirstPersonMichaelAiming",
 * "FirstPersonMichaelRNG",
 * "FirstPersonMichaelScope",
 * "FirstPersonRNG",
 * "FirstPersonScope",
 * "FirstPersonTrevor",
 * "FirstPersonTrevorAiming",
 * "FirstPersonTrevorRNG",
 * "FirstPersonTrevorScope",
 * "Franklin",
 * "Gang",
 * "Gang1H",
 * "GangFemale",
 * "Hillbilly",
 * "MP_F_Freemode",
 * "Michael",
 * "SuperFat",
 * "Trevor"
 * @param ped
 * @param animStyle
 */
export function setWeaponAnimationOverride(ped: number, animStyle: number): void { 
	return _in(0x1055ac3a, 0x667f09d9, ped, _ch(animStyle)); 
}

export function setWeaponAoeModifier(weaponHash: number, multiplier: number): void { 
	return _in(0x4ae5ac8b, 0x852d642c, _ch(weaponHash), _fv(multiplier)); 
}

/**
 * Changes the weapon damage output by the given multiplier value. Must be run every frame.
 * Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param weaponHash
 * @param damageMultiplier
 */
export function setWeaponDamageModifier(weaponHash: number, damageMultiplier: number): void { 
	return _in(0x4757f00b, 0xc6323cfe, _ch(weaponHash), _fv(damageMultiplier)); 
}

/**
 * ex, WEAPON::SET_WEAPON_EFFECT_DURATION_MODIFIER(joaat("vehicle_weapon_mine_slick"), 1.0);
 * @param p0
 * @param p1
 */
export function setWeaponEffectDurationModifier(p0: number, p1: number): void { 
	return _in(0xe6d2cedd, 0x370ff98e, _ch(p0), _fv(p1)); 
}

export function setWeaponImpactsApplyGreaterForce(object: number, p1: boolean): void { 
	return _in(0x1a6cbb06, 0xe2d0d79d, object, p1); 
}

export function setWeaponObjectCamoIndex(weaponObject: number, p1: number): void { 
	return _in(0x977ca989, 0x39e82e4b, weaponObject, p1); 
}

/**
 * Colors:
 * 0 = Gray
 * 1 = Dark Gray
 * 2 = Black
 * 3 = White
 * 4 = Blue
 * 5 = Cyan
 * 6 = Aqua
 * 7 = Cool Blue
 * 8 = Dark Blue
 * 9 = Royal Blue
 * 10 = Plum
 * 11 = Dark Purple
 * 12 = Purple
 * 13 = Red
 * 14 = Wine Red
 * 15 = Magenta
 * 16 = Pink
 * 17 = Salmon
 * 18 = Hot Pink
 * 19 = Rust Orange
 * 20 = Brown
 * 21 = Earth
 * 22 = Orange
 * 23 = Light Orange
 * 24 = Dark Yellow
 * 25 = Yellow
 * 26 = Light Brown
 * 27 = Lime Green
 * 28 = Olive
 * 29 = Moss
 * 30 = Turquoise
 * 31 = Dark Green
 * Full list of weapons, components, tint indexes & weapon liveries by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param weaponObject
 * @param camoComponentHash
 * @param colorIndex
 */
export function setWeaponObjectComponentTintIndex(weaponObject: number, camoComponentHash: number, colorIndex: number): void { 
	return _in(0x5da825a8, 0x5d0ea6e6, weaponObject, _ch(camoComponentHash), colorIndex); 
}

/**
 * Full list of weapons, components & tint indexes by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
 * @param weapon
 * @param tintIndex
 */
export function setWeaponObjectTintIndex(weapon: number, tintIndex: number): void { 
	return _in(0xf8275890, 0x17d4e4a9, weapon, tintIndex); 
}

export function setWeaponPedDamageModifier(weapon: number, damageModifier: number): void { 
	return _in(0x10919227, 0x15b68df0, _ch(weapon), _fv(damageModifier)); 
}

export function setWeatherPtfxOverrideCurrLevel(p0: number): void { 
	return _in(0xf78b8030, 0x82d4386f, _fv(p0)); 
}

export function setWeatherPtfxUseOverrideSettings(p0: boolean): void { 
	return _in(0xa46b73fa, 0xa3460ae1, p0); 
}

/**
 * The following weatherTypes are used in the scripts:
 * "CLEAR"
 * "EXTRASUNNY"
 * "CLOUDS"
 * "OVERCAST"
 * "RAIN"
 * "CLEARING"
 * "THUNDER"
 * "SMOG"
 * "FOGGY"
 * "XMAS"
 * "SNOW"
 * "SNOWLIGHT"
 * "BLIZZARD"
 * "HALLOWEEN"
 * "NEUTRAL"
 * @param weatherType
 */
export function setWeatherTypeNow(weatherType: string): void { 
	return _in(0x29b487c3, 0x59e19889, _ts(weatherType)); 
}

/**
 * The following weatherTypes are used in the scripts:
 * "CLEAR"
 * "EXTRASUNNY"
 * "CLOUDS"
 * "OVERCAST"
 * "RAIN"
 * "CLEARING"
 * "THUNDER"
 * "SMOG"
 * "FOGGY"
 * "XMAS"
 * "SNOW"
 * "SNOWLIGHT"
 * "BLIZZARD"
 * "HALLOWEEN"
 * "NEUTRAL"
 * @param weatherType
 */
export function setWeatherTypeNowPersist(weatherType: string): void { 
	return _in(0xed712ca3, 0x27900c8a, _ts(weatherType)); 
}

export function setWeatherTypeOvertimePersist(weatherType: string, time: number): void { 
	return _in(0xfb5045b7, 0xc42b75bf, _ts(weatherType), _fv(time)); 
}

/**
 * The following weatherTypes are used in the scripts:
 * "CLEAR"
 * "EXTRASUNNY"
 * "CLOUDS"
 * "OVERCAST"
 * "RAIN"
 * "CLEARING"
 * "THUNDER"
 * "SMOG"
 * "FOGGY"
 * "XMAS"
 * "SNOW"
 * "SNOWLIGHT"
 * "BLIZZARD"
 * "HALLOWEEN"
 * "NEUTRAL"
 * @param weatherType
 */
export function setWeatherTypePersist(weatherType: string): void { 
	return _in(0x704983df, 0x373b198f, _ts(weatherType)); 
}

/**
 * Enables/disables the ability to wheelie on motorcycles.
 * @param vehicle
 * @param enabled
 */
export function setWheelieEnabled(vehicle: number, enabled: boolean): void { 
	return _in(0x1312ddd8, 0x385aee4e, vehicle, enabled); 
}

export function setWheelsExtendedInstantly(vehicle: number): void { 
	return _in(0xf6606025, 0x46d27ba8, vehicle); 
}

export function setWheelsRetractedInstantly(vehicle: number): void { 
	return _in(0x5335be58, 0xc083e74e, vehicle); 
}

export function setWidescreenBorders(p0: boolean, p1: number): void { 
	return _in(0xdcd4ea92, 0x4f42d01a, p0, p1); 
}

export function setWidescreenFormat(p0: number): void { 
	return _in(0xc3b07ba0, 0x0a83b0f1, p0); 
}

/**
 * Sets the the normalized wind speed value. The wind speed clamps always at 12.0, SET_WIND sets the wind in a percentage, 0.0 is 0 and 1.0 is 12.0. Setting this value to a negative number resumes the random wind speed changes provided by the game.
 * @param speed
 */
export function setWind(speed: number): void { 
	return _in(0xac3a74e8, 0x384a9919, _fv(speed)); 
}

/**
 * The wind direction in radians
 * 180 degrees (PI), wind will blow from the south. Setting this value to a negative number resumes the random wind direction changes provided by the game.
 * @param direction
 */
export function setWindDirection(direction: number): void { 
	return _in(0xeb0f4468, 0x467b4528, _fv(direction)); 
}

/**
 * Using this native will set the absolute wind speed value. The wind speed clamps to a range of 0.0- 12.0. Setting this value to a negative number resumes the random wind speed changes provided by the game.
 * @param speed
 */
export function setWindSpeed(speed: number): void { 
	return _in(0xee09eced, 0xbabe47fc, _fv(speed)); 
}

export function setZoneEnabled(zoneId: number, toggle: boolean): void { 
	return _in(0xba5eceea, 0x120e5611, zoneId, toggle); 
}

export function settimera(value: number): void { 
	return _in(0xc1b1e9a0, 0x34a63a62, value); 
}

export function settimerb(value: number): void { 
	return _in(0x5ae11bc3, 0x6633de4e, value); 
}

export function setupFakeConeData(blip: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number): void { 
	return _in(0xf83d0feb, 0xe75e62c9, blip, _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), _fv(p6), p7, p8); 
}

export function setupShopPedApparelQuery(p0: number, p1: number, p2: number, p3: number): number { 
	return _in(0x50f45782, 0x3ce6eb5f, p0, p1, p2, p3, _r, _ri); 
}

/**
 * character is 0 for Michael, 1 for Franklin, 2 for Trevor, 3 for freemode male, and 4 for freemode female.
 * 
 * componentId is between 0 and 11 and corresponds to the usual component slots.
 * 
 * p1 could be the outfit number; unsure.
 * 
 * p2 is usually -1; unknown function.
 * 
 * p3 appears to be for selecting between clothes and props; false is used with components/clothes, true is used with props.
 * 
 * p4 is usually -1; unknown function.
 * 
 * componentId is -1 when p3 is true in decompiled scripts.
 * @param character
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param componentId
 */
export function setupShopPedApparelQueryTu(character: number, p1: number, p2: number, p3: boolean, p4: number, componentId: number): number { 
	return _in(0x9bdf5981, 0x8b1e38c1, character, p1, p2, p3, p4, componentId, _r, _ri); 
}

/**
 * characters
 * 
 * 0: Michael
 * 1: Franklin
 * 2: Trevor
 * 3: MPMale
 * 4: MPFemale
 * @param character
 * @param p1
 */
export function setupShopPedOutfitQuery(character: number, p1: boolean): number { 
	return _in(0xf3fbe2d5, 0x0a6a8c28, character, p1, _r, _ri); 
}

/**
 * Possible shake types (updated b617d):
 * 
 * DEATH_FAIL_IN_EFFECT_SHAKE
 * DRUNK_SHAKE
 * FAMILY5_DRUG_TRIP_SHAKE
 * HAND_SHAKE
 * JOLT_SHAKE
 * LARGE_EXPLOSION_SHAKE
 * MEDIUM_EXPLOSION_SHAKE
 * SMALL_EXPLOSION_SHAKE
 * ROAD_VIBRATION_SHAKE
 * SKY_DIVING_SHAKE
 * VIBRATE_SHAKE
 * 
 * Full list of cam shake types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/camShakeTypesCompact.json
 * @param cam
 * @param type
 * @param amplitude
 */
export function shakeCam(cam: number, type: string, amplitude: number): void { 
	return _in(0x6a25241c, 0x340d3822, cam, _ts(type), _fv(amplitude)); 
}

/**
 * p0 argument found in the b617d scripts: "DRUNK_SHAKE"
 * 
 * Full list of cam shake types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/camShakeTypesCompact.json
 * @param shakeType
 * @param amount
 */
export function shakeCinematicCam(shakeType: string, amount: number): void { 
	return _in(0xdce214d9, 0xed58f3cf, _ts(shakeType), _fv(amount)); 
}

/**
 * Possible shake types (updated b617d):
 * 
 * DEATH_FAIL_IN_EFFECT_SHAKE
 * DRUNK_SHAKE
 * FAMILY5_DRUG_TRIP_SHAKE
 * HAND_SHAKE
 * JOLT_SHAKE
 * LARGE_EXPLOSION_SHAKE
 * MEDIUM_EXPLOSION_SHAKE
 * SMALL_EXPLOSION_SHAKE
 * ROAD_VIBRATION_SHAKE
 * SKY_DIVING_SHAKE
 * VIBRATE_SHAKE
 * 
 * Full list of cam shake types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/camShakeTypesCompact.json
 * @param shakeName
 * @param intensity
 */
export function shakeGameplayCam(shakeName: string, intensity: number): void { 
	return _in(0xfd55e495, 0x55e017cf, _ts(shakeName), _fv(intensity)); 
}

/**
 * CAM::SHAKE_SCRIPT_GLOBAL("HAND_SHAKE", 0.2);
 * 
 * Full list of cam shake types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/camShakeTypesCompact.json
 * @param p0
 * @param p1
 */
export function shakeScriptGlobal(p0: string, p1: number): void { 
	return _in(0xf4c8cf9e, 0x353afeca, _ts(p0), _fv(p1)); 
}

export function shiftLeft(value: number, bitShift: number): number { 
	return _in(0xedd95a39, 0xe5544de8, value, bitShift, _r, _ri); 
}

export function shiftRight(value: number, bitShift: number): number { 
	return _in(0x97ef1e5b, 0xce9dc075, value, bitShift, _r, _ri); 
}

export function shootSingleBulletBetweenCoords(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, damage: number, p7: boolean, weaponHash: number, ownerPed: number, isAudible: boolean, isInvisible: boolean, speed: number): void { 
	return _in(0x867654cb, 0xc7606f2c, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), damage, p7, _ch(weaponHash), ownerPed, isAudible, isInvisible, _fv(speed)); 
}

/**
 * entity - entity to ignore
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param damage
 * @param p7
 * @param weaponHash
 * @param ownerPed
 * @param isAudible
 * @param isInvisible
 * @param speed
 * @param entity
 * @param p14
 */
export function shootSingleBulletBetweenCoordsIgnoreEntity(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, damage: number, p7: boolean, weaponHash: number, ownerPed: number, isAudible: boolean, isInvisible: boolean, speed: number, entity: number, p14: number): void { 
	return _in(0xe3a7742e, 0x0b7a2f8b, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), damage, p7, _ch(weaponHash), ownerPed, isAudible, isInvisible, _fv(speed), entity, p14); 
}

/**
 * entity - entity to ignore
 * targetEntity - entity to home in on, if the weapon hash provided supports homing
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param damage
 * @param p7
 * @param weaponHash
 * @param ownerPed
 * @param isAudible
 * @param isInvisible
 * @param speed
 * @param entity
 * @param p14
 * @param p15
 * @param targetEntity
 * @param p17
 * @param p18
 * @param p19
 * @param p20
 */
export function shootSingleBulletBetweenCoordsIgnoreEntityNew(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, damage: number, p7: boolean, weaponHash: number, ownerPed: number, isAudible: boolean, isInvisible: boolean, speed: number, entity: number, p14: boolean, p15: boolean, targetEntity: number, p17: boolean, p18: number, p19: number, p20: number): void { 
	return _in(0xbfe5756e, 0x7407064a, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), damage, p7, _ch(weaponHash), ownerPed, isAudible, isInvisible, _fv(speed), entity, p14, p15, targetEntity, p17, p18, p19, p20); 
}

/**
 * Returns true if the game is using the metric measurement system (profile setting 227), false if imperial is used.
 */
export function shouldUseMetricMeasurements(): boolean { 
	return _in(0xd3d15555, 0x431ab793, _r); 
}

export function showAccountPicker(): void { 
	return _in(0x60e892ba, 0x4f5bdca4); 
}

export function showContactInstructionalButton(toggle: boolean): void { 
	return _in(0xc772a904, 0xcde1186f, toggle); 
}

/**
 * Enables or disables the blue half circle https://i.imgur.com/iZes9Ec.png around the specified blip on the left side of the blip. This is used to indicate that the player is in your crew in GTA:O. Color is changeable by using `SET_BLIP_SECONDARY_COLOUR`.
 * @param blip
 * @param toggle
 */
export function showCrewIndicatorOnBlip(blip: number, toggle: boolean): void { 
	return _in(0xdcfb5d4d, 0xb8bf367e, blip, toggle); 
}

export function showForSaleIconOnBlip(blip: number, toggle: boolean): void { 
	return _in(0x19bd6e3c, 0x0e16a8fa, blip, toggle); 
}

/**
 * Highlights a blip by a half cyan circle on the right side of the blip. https://i.imgur.com/FrV9M4e.png
 * .Indicating that that player is a friend (in GTA:O). This color can not be changed.
 * To toggle the left side (crew member indicator) of the half circle around the blip, use: `SHOW_CREW_INDICATOR_ON_BLIP`
 * @param blip
 * @param toggle
 */
export function showFriendIndicatorOnBlip(blip: number, toggle: boolean): void { 
	return _in(0x23c3eb80, 0x7312f01a, blip, toggle); 
}

/**
 * Adds a orange checkmark on top of a given blip handle: https://imgur.com/a/aw5OTMF
 * _SHOW_FRIEND_INDICATOR_ON_BLIP* - _SHOW_HEADING_INDICATOR_ON_BLIP*
 * @param blip
 * @param toggle
 */
export function showGoldTickOnBlip(blip: number, toggle: boolean): void { 
	return _in(0xcac2031e, 0xbf79b1a8, blip, toggle); 
}

/**
 * Adds the GTA: Online player heading indicator to a blip.
 * @param blip
 * @param toggle
 */
export function showHeadingIndicatorOnBlip(blip: number, toggle: boolean): void { 
	return _in(0x5fbca483, 0x27b914df, blip, toggle); 
}

export function showHeightOnBlip(blip: number, toggle: boolean): void { 
	return _in(0x75a16c3d, 0xa34f1245, blip, toggle); 
}

/**
 * This function hides various HUD (Heads-up Display) components.
 * Listed below are the integers and the corresponding HUD component.
 * - 1 : WANTED_STARS
 * - 2 : WEAPON_ICON
 * - 3 : CASH
 * - 4 : MP_CASH
 * - 5 : MP_MESSAGE
 * - 6 : VEHICLE_NAME
 * - 7 : AREA_NAME
 * - 8 : VEHICLE_CLASS
 * - 9 : STREET_NAME
 * - 10 : HELP_TEXT
 * - 11 : FLOATING_HELP_TEXT_1
 * - 12 : FLOATING_HELP_TEXT_2
 * - 13 : CASH_CHANGE
 * - 14 : RETICLE
 * - 15 : SUBTITLE_TEXT
 * - 16 : RADIO_STATIONS
 * - 17 : SAVING_GAME
 * - 18 : GAME_STREAM
 * - 19 : WEAPON_WHEEL
 * - 20 : WEAPON_WHEEL_STATS
 * - 21 : HUD_COMPONENTS
 * - 22 : HUD_WEAPONS
 * 
 * These integers also work for the `HIDE_HUD_COMPONENT_THIS_FRAME` native, but instead hides the HUD Component.
 * @param id
 */
export function showHudComponentThisFrame(id: number): void { 
	return _in(0x0b4df1fa, 0x60c0e664, id); 
}

export function showNumberOnBlip(blip: number, number: number): void { 
	return _in(0xa3c0b359, 0xdcb848b6, blip, number); 
}

/**
 * Highlights a blip by a cyan color circle.
 * 
 * Color can be changed with SET_BLIP_SECONDARY_COLOUR
 * @param blip
 * @param toggle
 */
export function showOutlineIndicatorOnBlip(blip: number, toggle: boolean): void { 
	return _in(0xb81656bc, 0x81fe24d1, blip, toggle); 
}

export function showPurchaseInstructionalButton(toggle: boolean): void { 
	return _in(0xf6865e26, 0x067b708c, toggle); 
}

export function showScriptedHudComponentThisFrame(id: number): void { 
	return _in(0x4f38dca1, 0x27daaea2, id); 
}

export function showStartMissionInstructionalButton(toggle: boolean): void { 
	return _in(0xf1a6c18b, 0x35bcade6, toggle); 
}

/**
 * Adds a green checkmark on top of a blip.
 * @param blip
 * @param toggle
 */
export function showTickOnBlip(blip: number, toggle: boolean): void { 
	return _in(0x74513ea3, 0xe505181e, blip, toggle); 
}

/**
 * Starts a new singleplayer game (at the prologue).
 */
export function shutdownAndLaunchSinglePlayerGame(): void { 
	return _in(0x593850c1, 0x6a36b692); 
}

/**
 * In singleplayer this will re-load your game.
 * 
 * In FiveM / GTA:Online this disconnects you from the session, and starts loading single player, however you still remain connected to the server (only if you're the host, if you're not then you also (most likely) get disconnected from the server) and other players will not be able to join until you exit the game.
 * 
 * You might need to DoScreenFadeIn and ShutdownLoadingScreen otherwise you probably won't end up loading into SP at all.
 * 
 * Somewhat related note: opening the pause menu after loading into this 'singleplayer' mode crashes the game.
 */
export function shutdownAndLoadMostRecentSave(): boolean { 
	return _in(0x9eca15ad, 0xfe141431, _r); 
}

export function shutdownCreatorBudget(): void { 
	return _in(0xcce26000, 0xe9a6fad7); 
}

export function shutdownLoadingScreen(): void { 
	return _in(0x078ebe98, 0x09ccd637); 
}

export function shutdownPcScriptedControls(): void { 
	return _in(0x643ed62d, 0x5ea3bebd); 
}

export function shutdownSessionClearsAutoMultiplayer(toggle: boolean): void { 
	return _in(0xfa1e0e89, 0x3d915215, toggle); 
}

/**
 * This is to make the player walk without accepting input from INPUT.
 * 
 * gaitType is in increments of 100s. 2000, 500, 300, 200, etc.
 * 
 * p4 is always 1 and p5 is always 0.
 * 
 * C# Example :
 * 
 * Function.Call(Hash.SIMULATE_PLAYER_INPUT_GAIT, Game.Player, 1.0f, 100, 1.0f, 1, 0); //Player will go forward for 100ms
 * @param player
 * @param amount
 * @param gaitType
 * @param speed
 * @param p4
 * @param p5
 * @param p6
 */
export function simulatePlayerInputGait(player: number, amount: number, gaitType: number, speed: number, p4: boolean, p5: boolean, p6: number): void { 
	return _in(0x477d5d63, 0xe63eca5d, player, _fv(amount), gaitType, _fv(speed), p4, p5, p6); 
}

export function sin(value: number): number { 
	return _in(0x0badbfa3, 0xb172435f, _fv(value), _r, _rf); 
}

export function skipRadioForward(): void { 
	return _in(0x6ddbbdd9, 0x8e2e9c25); 
}

/**
 * SET_TIME_POSITION_IN_RECORDING can be emulated by: desired_time - GET_TIME_POSITION_IN_RECORDING(vehicle)
 * @param vehicle
 * @param time
 */
export function skipTimeInPlaybackRecordedVehicle(vehicle: number, time: number): void { 
	return _in(0x9438f7ad, 0x68771a20, vehicle, _fv(time)); 
}

export function skipToEndAndStopPlaybackRecordedVehicle(vehicle: number): void { 
	return _in(0xab8e2eda, 0x0c0a5883, vehicle); 
}

export function skipToNextScriptedConversationLine(): void { 
	return _in(0x9663fe6b, 0x7a61eb00); 
}

/**
 * This native always come right before SET_ENTITY_QUATERNION where its final 4 parameters are SLERP_NEAR_QUATERNION p9 to p12
 * @param t
 * @param x
 * @param y
 * @param z
 * @param w
 * @param x1
 * @param y1
 * @param z1
 * @param w1
 * @param outX
 * @param outY
 * @param outZ
 * @param outW
 */
export function slerpNearQuaternion(t: number, x: number, y: number, z: number, w: number, x1: number, y1: number, z1: number, w1: number): [number, number, number, number] { 
	const [outX_out, outY_out, outZ_out, outW_out] = _in(0xf2f6a2fa, 0x49278625, _fv(t), _fv(x), _fv(y), _fv(z), _fv(w), _fv(x1), _fv(y1), _fv(z1), _fv(w1), _f, _f, _f, _f);
	return [outX_out as number, outY_out as number, outZ_out as number, outW_out as number]; 
}

/**
 * Returns true if the object has finished moving.
 * 
 * If false, moves the object towards the specified X, Y and Z coordinates with the specified X, Y and Z speed.
 * 
 * See also: https://gtagmodding.com/opcode-database/opcode/034E/
 * Has to be looped until it returns true.
 * @param object
 * @param toX
 * @param toY
 * @param toZ
 * @param speedX
 * @param speedY
 * @param speedZ
 * @param collision
 */
export function slideObject(object: number, toX: number, toY: number, toZ: number, speedX: number, speedY: number, speedZ: number, collision: boolean): boolean { 
	return _in(0x2fdff410, 0x7b8c1147, object, _fv(toX), _fv(toY), _fv(toZ), _fv(speedX), _fv(speedY), _fv(speedZ), collision, _r); 
}

/**
 * windowIndex:
 * 0 = Front Left Window
 * 1 = Front Right Window
 * 2 = Rear Left Window
 * 3 = Rear Right Window
 * 4 = Front Windscreen
 * 5 = Rear Windscreen
 * 6 = Mid Left
 * 7 = Mid Right
 * 8 = Invalid
 * @param vehicle
 * @param windowIndex
 */
export function smashVehicleWindow(vehicle: number, windowIndex: number): void { 
	return _in(0x9e5b5e4d, 0x2ccd2259, vehicle, windowIndex); 
}

export function spawnpointsCancelSearch(): void { 
	return _in(0xfee4a545, 0x9472a9f8); 
}

export function spawnpointsGetNumSearchResults(): number { 
	return _in(0xa635c11b, 0x8c44afc2, _r, _ri); 
}

export function spawnpointsGetSearchResult(randomInt: number): [number, number, number] { 
	const [x_out, y_out, z_out] = _in(0x280c7e3a, 0xc7f56e90, randomInt, _f, _f, _f);
	return [x_out as number, y_out as number, z_out as number]; 
}

export function spawnpointsGetSearchResultFlags(p0: number, p1: number): number { 
	return _in(0xb782f823, 0x8512bad5, p0, _ii(p1)); 
}

export function spawnpointsIsSearchActive(): boolean { 
	return _in(0x3c675069, 0x96001f5e, _r); 
}

export function spawnpointsIsSearchComplete(): boolean { 
	return _in(0xa586fbeb, 0x32a53dbb, _r); 
}

export function spawnpointsIsSearchFailed(): boolean { 
	return _in(0xf445de8d, 0xa80a1792, _r); 
}

export function spawnpointsStartSearch(p0: number, p1: number, p2: number, p3: number, p4: number, interiorFlags: number, scale: number, duration: number): void { 
	return _in(0x2df9038c, 0x90ad5264, _fv(p0), _fv(p1), _fv(p2), _fv(p3), _fv(p4), interiorFlags, _fv(scale), duration); 
}

export function spawnpointsStartSearchInAngledArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number, interiorFlags: number, scale: number, duration: number): void { 
	return _in(0xb2aff102, 0x16defa2f, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(width), interiorFlags, _fv(scale), duration); 
}

/**
 * p1 is always 0 in the scripts
 * @param player
 * @param p1
 */
export function specialAbilityActivate(player: number, p1: number): void { 
	return _in(0x821fdc82, 0x7d6f4090, player, p1); 
}

/**
 * p1 appears as 5, 10, 15, 25, or 30. p2 is always true.
 * @param player
 * @param p1
 * @param p2
 * @param p3
 */
export function specialAbilityChargeAbsolute(player: number, p1: number, p2: boolean, p3: number): void { 
	return _in(0xb7b0870e, 0xb531d08d, player, p1, p2, p3); 
}

/**
 * p1 appears to always be 1 (only comes up twice)
 * @param player
 * @param p1
 * @param p2
 */
export function specialAbilityChargeContinuous(player: number, p1: number, p2: number): void { 
	return _in(0xed481732, 0xdff7e997, player, p1, p2); 
}

/**
 * 2 matches. p1 was always true.
 * @param player
 * @param p1
 * @param p2
 * @param p3
 */
export function specialAbilityChargeLarge(player: number, p1: boolean, p2: boolean, p3: number): void { 
	return _in(0xf733f45f, 0xa4497d93, player, p1, p2, p3); 
}

/**
 * Only 1 match. Both p1 & p2 were true.
 * @param player
 * @param p1
 * @param p2
 * @param p3
 */
export function specialAbilityChargeMedium(player: number, p1: boolean, p2: boolean, p3: number): void { 
	return _in(0xf113e3aa, 0x9bc54613, player, p1, p2, p3); 
}

/**
 * 
 * normalizedValue is from 0.0 - 1.0
 * p2 is always 1
 * @param player
 * @param normalizedValue
 * @param p2
 * @param p3
 */
export function specialAbilityChargeNormalized(player: number, normalizedValue: number, p2: boolean, p3: number): void { 
	return _in(0xa0696a65, 0xf009ee18, player, _fv(normalizedValue), p2, p3); 
}

export function specialAbilityChargeOnMissionFailed(player: number, p1: number): void { 
	return _in(0xc9a763d8, 0xfe87436a, player, p1); 
}

/**
 * Every occurrence of p1 & p2 were both true.
 * @param player
 * @param p1
 * @param p2
 * @param p3
 */
export function specialAbilityChargeSmall(player: number, p1: boolean, p2: boolean, p3: number): void { 
	return _in(0x2e7b9b68, 0x3481687d, player, p1, p2, p3); 
}

export function specialAbilityDeactivate(player: number, p1: number): void { 
	return _in(0xd6a953c6, 0xd1492057, player, p1); 
}

export function specialAbilityDeactivateFast(player: number, p1: number): void { 
	return _in(0x9cb5ce07, 0xa3968d5a, player, p1); 
}

/**
 * p1 is always 0 in the scripts
 * @param player
 * @param p1
 */
export function specialAbilityDeactivateMp(player: number, p1: number): void { 
	return _in(0x17f7471e, 0xaca78290, player, p1); 
}

/**
 * p1 was always true.
 * @param player
 * @param p1
 * @param p2
 */
export function specialAbilityDepleteMeter(player: number, p1: boolean, p2: number): void { 
	return _in(0x1d506dbb, 0xbc51e64b, player, p1, p2); 
}

/**
 * Also known as _RECHARGE_SPECIAL_ABILITY
 * @param player
 * @param p1
 * @param p2
 */
export function specialAbilityFillMeter(player: number, p1: boolean, p2: number): void { 
	return _in(0x3daca8dd, 0xc6fd4980, player, p1, p2); 
}

export function specialAbilityLock(playerModel: number, p1: number): void { 
	return _in(0x6a09d0d5, 0x90a47d13, _ch(playerModel), p1); 
}

export function specialAbilityReset(player: number, p1: number): void { 
	return _in(0x375f0e73, 0x8f861a94, player, p1); 
}

export function specialAbilityUnlock(playerModel: number, p1: number): void { 
	return _in(0xf145f3be, 0x2efa9a3b, _ch(playerModel), p1); 
}

/**
 * p1 was always 1 (true).
 * 
 * Kicks the ped from the current vehicle and keeps the rendering-focus on this ped (also disables its collision). If doing this for your player ped, you'll still be able to drive the vehicle.
 * @param ped
 * @param p1
 */
export function specialFunctionDoNotUse(ped: number, p1: boolean): void { 
	return _in(0xf9acf4a0, 0x8098ea25, ped, p1); 
}

export function sqrt(value: number): number { 
	return _in(0x71d93b57, 0xd07f9804, _fv(value), _r, _rf); 
}

export function stabiliseEntityAttachedToHeli(vehicle: number, entity: number, p2: number): void { 
	return _in(0x37470627, 0x1354cb18, vehicle, entity, _fv(p2)); 
}

/**
 * Example:
 * 
 * This will start the alarm at Fort Zancudo.
 * 
 * AUDIO::START_ALARM("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS", 1);
 * 
 * First parameter (char) is the name of the alarm.
 * Second parameter (bool) is unknown, it does not seem to make a difference if this one is 0 or 1.
 * 
 * ----------
 * 
 * It DOES make a difference but it has to do with the duration or something I dunno yet
 * 
 * ----------
 * 
 * Found in the b617d scripts:
 * 
 * AUDIO::START_ALARM("AGENCY_HEIST_FIB_TOWER_ALARMS", 0);
 * AUDIO::START_ALARM("AGENCY_HEIST_FIB_TOWER_ALARMS_UPPER", 1);
 * AUDIO::START_ALARM("AGENCY_HEIST_FIB_TOWER_ALARMS_UPPER_B", 0);
 * AUDIO::START_ALARM("BIG_SCORE_HEIST_VAULT_ALARMS", a_0);
 * AUDIO::START_ALARM("FBI_01_MORGUE_ALARMS", 1);
 * AUDIO::START_ALARM("FIB_05_BIOTECH_LAB_ALARMS", 0);
 * AUDIO::START_ALARM("JEWEL_STORE_HEIST_ALARMS", 0);
 * AUDIO::START_ALARM("PALETO_BAY_SCORE_ALARM", 1);
 * AUDIO::START_ALARM("PALETO_BAY_SCORE_CHICKEN_FACTORY_ALARM", 0);
 * AUDIO::START_ALARM("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS", 1);
 * AUDIO::START_ALARM("PORT_OF_LS_HEIST_SHIP_ALARMS", 0);
 * AUDIO::START_ALARM("PRISON_ALARMS", 0);
 * AUDIO::START_ALARM("PROLOGUE_VAULT_ALARMS", 0);
 * Full list of alarm names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/alarmSounds.json
 * @param alarmName
 * @param p2
 */
export function startAlarm(alarmName: string, p2: boolean): void { 
	return _in(0x0355ef11, 0x6c4c97b2, _ts(alarmName), p2); 
}

/**
 * Used to prepare a scene where the surrounding sound is muted or a bit changed. This does not play any sound.
 * 
 * List of all usable scene names found in b617d. Sorted alphabetically and identical names removed: https://pastebin.com/MtM9N9CC
 * Full list of audio scene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/audioSceneNames.json
 * @param scene
 */
export function startAudioScene(scene: string): boolean { 
	return _in(0x013a80fc, 0x08f6e4f2, _ts(scene), _r); 
}

export function startBeingBoss(p0: number, p1: number, p2: number): void { 
	return _in(0x3ebeac6c, 0x3f81f6bd, p0, p1, p2); 
}

export function startBeingGoon(p0: number, p1: number, p2: number): void { 
	return _in(0x96e6d515, 0x0dbf1c09, p0, p1, p2); 
}

/**
 * flags: Usually 0.
 * @param flags
 */
export function startCutscene(flags: number): void { 
	return _in(0x186d5cb5, 0xe7b0ff7b, flags); 
}

/**
 * flags: Usually 0.
 * @param x
 * @param y
 * @param z
 * @param flags
 */
export function startCutsceneAtCoords(x: number, y: number, z: number, flags: number): void { 
	return _in(0x1c9adda3, 0x244a1fbf, _fv(x), _fv(y), _fv(z), flags); 
}

export function startEndUserBenchmark(): void { 
	return _in(0x92790862, 0xe36c2ada); 
}

export function startEntityFire(entity: number): number { 
	return _in(0xf6a9d970, 0x8f6f23df, entity, _r, _ri); 
}

/**
 * Does the same as 0x7EE9F5D83DD4F90E, except blocking until the shape test completes.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param flags
 * @param entity
 * @param p8
 */
export function startExpensiveSynchronousShapeTestLosProbe(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, flags: number, entity: number, p8: number): number { 
	return _in(0x377906d8, 0xa31e5586, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), flags, entity, p8, _r, _ri); 
}

export function startFiringAmnesty(duration: number): void { 
	return _in(0xbf9bd716, 0x91857e48, duration); 
}

/**
 * Starts a new GPS custom-route, allowing you to plot lines on the map.
 * Lines are drawn directly between points.
 * The GPS custom route works like the GPS multi route, except it does not follow roads.
 * Example result: https://i.imgur.com/BDm5pzt.png
 * hudColor: The HUD color of the GPS path.
 * displayOnFoot: Draws the path regardless if the player is in a vehicle or not.
 * followPlayer: Draw the path partially between the previous and next point based on the players position between them. When false, the GPS appears to not disappear after the last leg is completed.
 * @param hudColor
 * @param displayOnFoot
 * @param followPlayer
 */
export function startGpsCustomRoute(hudColor: number, displayOnFoot: boolean, followPlayer: boolean): void { 
	return _in(0xdb34e8d5, 0x6fc13b08, hudColor, displayOnFoot, followPlayer); 
}

/**
 * Starts a new GPS multi-route, allowing you to create custom GPS paths.
 * GPS functions like the waypoint, except it can contain multiple points it's forced to go through.
 * Once the player has passed a point, the GPS will no longer force its path through it.
 * 
 * Works independently from the player-placed waypoint and blip routes.
 * Example result: https://i.imgur.com/ZZHQatX.png
 * hudColor: The HUD color of the GPS path.
 * routeFromPlayer: Makes the GPS draw a path from the player to the next point, rather than the original path from the previous point.
 * displayOnFoot: Draws the GPS path regardless if the player is in a vehicle or not.
 * @param hudColor
 * @param routeFromPlayer
 * @param displayOnFoot
 */
export function startGpsMultiRoute(hudColor: number, routeFromPlayer: boolean, displayOnFoot: boolean): void { 
	return _in(0x3d3d15af, 0x7bcaaf83, hudColor, routeFromPlayer, displayOnFoot); 
}

/**
 * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
 * @param effectName
 * @param entity
 * @param xOffset
 * @param yOffset
 * @param zOffset
 * @param xRot
 * @param yRot
 * @param zRot
 * @param scale
 * @param xAxis
 * @param yAxis
 * @param zAxis
 * @param r
 * @param g
 * @param b
 * @param a
 */
export function startNetworkedParticleFxLoopedOnEntity(effectName: string, entity: number, xOffset: number, yOffset: number, zOffset: number, xRot: number, yRot: number, zRot: number, scale: number, xAxis: boolean, yAxis: boolean, zAxis: boolean, r: number, g: number, b: number, a: number): number { 
	return _in(0x6f60e89a, 0x7b64ee1d, _ts(effectName), entity, _fv(xOffset), _fv(yOffset), _fv(zOffset), _fv(xRot), _fv(yRot), _fv(zRot), _fv(scale), xAxis, yAxis, zAxis, _fv(r), _fv(g), _fv(b), _fv(a), _r, _ri); 
}

/**
 * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
 * @param effectName
 * @param entity
 * @param xOffset
 * @param yOffset
 * @param zOffset
 * @param xRot
 * @param yRot
 * @param zRot
 * @param boneIndex
 * @param scale
 * @param xAxis
 * @param yAxis
 * @param zAxis
 * @param r
 * @param g
 * @param b
 * @param a
 */
export function startNetworkedParticleFxLoopedOnEntityBone(effectName: string, entity: number, xOffset: number, yOffset: number, zOffset: number, xRot: number, yRot: number, zRot: number, boneIndex: number, scale: number, xAxis: boolean, yAxis: boolean, zAxis: boolean, r: number, g: number, b: number, a: number): number { 
	return _in(0xdde23f30, 0xcc5a0f03, _ts(effectName), entity, _fv(xOffset), _fv(yOffset), _fv(zOffset), _fv(xRot), _fv(yRot), _fv(zRot), boneIndex, _fv(scale), xAxis, yAxis, zAxis, _fv(r), _fv(g), _fv(b), _fv(a), _r, _ri); 
}

/**
 * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
 * @param effectName
 * @param xPos
 * @param yPos
 * @param zPos
 * @param xRot
 * @param yRot
 * @param zRot
 * @param scale
 * @param xAxis
 * @param yAxis
 * @param zAxis
 * @param p11
 */
export function startNetworkedParticleFxNonLoopedAtCoord(effectName: string, xPos: number, yPos: number, zPos: number, xRot: number, yRot: number, zRot: number, scale: number, xAxis: boolean, yAxis: boolean, zAxis: boolean, p11: boolean): boolean { 
	return _in(0xf56b8137, 0xdf10135d, _ts(effectName), _fv(xPos), _fv(yPos), _fv(zPos), _fv(xRot), _fv(yRot), _fv(zRot), _fv(scale), xAxis, yAxis, zAxis, p11, _r); 
}

/**
 * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
 * @param effectName
 * @param entity
 * @param offsetX
 * @param offsetY
 * @param offsetZ
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param scale
 * @param axisX
 * @param axisY
 * @param axisZ
 */
export function startNetworkedParticleFxNonLoopedOnEntity(effectName: string, entity: number, offsetX: number, offsetY: number, offsetZ: number, rotX: number, rotY: number, rotZ: number, scale: number, axisX: boolean, axisY: boolean, axisZ: boolean): boolean { 
	return _in(0xc95eb1db, 0x6e92113d, _ts(effectName), entity, _fv(offsetX), _fv(offsetY), _fv(offsetZ), _fv(rotX), _fv(rotY), _fv(rotZ), _fv(scale), axisX, axisY, axisZ, _r); 
}

/**
 * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
 * @param effectName
 * @param ped
 * @param offsetX
 * @param offsetY
 * @param offsetZ
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param boneIndex
 * @param scale
 * @param axisX
 * @param axisY
 * @param axisZ
 */
export function startNetworkedParticleFxNonLoopedOnPedBone(effectName: string, ped: number, offsetX: number, offsetY: number, offsetZ: number, rotX: number, rotY: number, rotZ: number, boneIndex: number, scale: number, axisX: boolean, axisY: boolean, axisZ: boolean): boolean { 
	return _in(0xa41b6a43, 0x642ac2cf, _ts(effectName), ped, _fv(offsetX), _fv(offsetY), _fv(offsetZ), _fv(rotX), _fv(rotY), _fv(rotZ), boneIndex, _fv(scale), axisX, axisY, axisZ, _r); 
}

/**
 * Examples:
 * g_384A = SYSTEM::START_NEW_SCRIPT("cellphone_flashhand", 1424);
 * l_10D = SYSTEM::START_NEW_SCRIPT("taxiService", 1828);
 * SYSTEM::START_NEW_SCRIPT("AM_MP_YACHT", 5000);
 * SYSTEM::START_NEW_SCRIPT("emergencycall", 512);
 * SYSTEM::START_NEW_SCRIPT("emergencycall", 512);
 * SYSTEM::START_NEW_SCRIPT("FM_maintain_cloud_header_data", 1424);
 * SYSTEM::START_NEW_SCRIPT("FM_Mission_Controller", 31000);
 * SYSTEM::START_NEW_SCRIPT("tennis_family", 3650);
 * SYSTEM::START_NEW_SCRIPT("Celebrations", 3650);
 * 
 * Decompiled examples of usage when starting a script:
 * 
 * SCRIPT::REQUEST_SCRIPT(a_0);
 * if (SCRIPT::HAS_SCRIPT_LOADED(a_0)) {
 * SYSTEM::START_NEW_SCRIPT(a_0, v_3);
 * SCRIPT::SET_SCRIPT_AS_NO_LONGER_NEEDED(a_0);
 * return 1;
 * }
 * 
 * or:
 * 
 * v_2 = "MrsPhilips2";
 * SCRIPT::REQUEST_SCRIPT(v_2);
 * while (!SCRIPT::HAS_SCRIPT_LOADED(v_2)) {
 * SCRIPT::REQUEST_SCRIPT(v_2);
 * SYSTEM::WAIT(0);
 * }
 * sub_8792(36);
 * SYSTEM::START_NEW_SCRIPT(v_2, 17000);
 * SCRIPT::SET_SCRIPT_AS_NO_LONGER_NEEDED(v_2);
 * @param scriptName
 * @param stackSize
 */
export function startNewScript(scriptName: string, stackSize: number): number { 
	return _in(0xe81651ad, 0x79516e48, _ts(scriptName), stackSize, _r, _ri); 
}

/**
 * return : script thread id, 0 if failed
 * Pass pointer to struct of args in p1, size of struct goes into p2
 * @param scriptName
 * @param args
 * @param argCount
 * @param stackSize
 */
export function startNewScriptWithArgs(scriptName: string, argCount: number, stackSize: number): [number, number] { 
	const [retval, args_out] = _in(0xb8ba7f44, 0xdf1575e1, _ts(scriptName), _i, argCount, stackSize, _r, _ri);
	return [retval as number, args_out as number]; 
}

export function startNewScriptWithNameHash(scriptHash: number, stackSize: number): number { 
	return _in(0xeb1c67c3, 0xa5333a92, _ch(scriptHash), stackSize, _r, _ri); 
}

export function startNewScriptWithNameHashAndArgs(scriptHash: number, argCount: number, stackSize: number): [number, number] { 
	const [retval, args_out] = _in(0xc4bb298b, 0xd441be78, _ch(scriptHash), _i, argCount, stackSize, _r, _ri);
	return [retval as number, args_out as number]; 
}

/**
 * GRAPHICS::START_PARTICLE_FX_LOOPED_AT_COORD("scr_fbi_falling_debris", 93.7743f, -749.4572f, 70.86904f, 0f, 0f, 0f, 0x3F800000, 0, 0, 0, 0)
 * 
 * 
 * p11 seems to be always 0
 * 
 * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
 * @param effectName
 * @param x
 * @param y
 * @param z
 * @param xRot
 * @param yRot
 * @param zRot
 * @param scale
 * @param xAxis
 * @param yAxis
 * @param zAxis
 * @param p11
 */
export function startParticleFxLoopedAtCoord(effectName: string, x: number, y: number, z: number, xRot: number, yRot: number, zRot: number, scale: number, xAxis: boolean, yAxis: boolean, zAxis: boolean, p11: boolean): number { 
	return _in(0xe184f4f0, 0xdc5910e7, _ts(effectName), _fv(x), _fv(y), _fv(z), _fv(xRot), _fv(yRot), _fv(zRot), _fv(scale), xAxis, yAxis, zAxis, p11, _r, _ri); 
}

/**
 * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
 * @param effectName
 * @param entity
 * @param xOffset
 * @param yOffset
 * @param zOffset
 * @param xRot
 * @param yRot
 * @param zRot
 * @param scale
 * @param xAxis
 * @param yAxis
 * @param zAxis
 */
export function startParticleFxLoopedOnEntity(effectName: string, entity: number, xOffset: number, yOffset: number, zOffset: number, xRot: number, yRot: number, zRot: number, scale: number, xAxis: boolean, yAxis: boolean, zAxis: boolean): number { 
	return _in(0x1ae42c16, 0x60fd6517, _ts(effectName), entity, _fv(xOffset), _fv(yOffset), _fv(zOffset), _fv(xRot), _fv(yRot), _fv(zRot), _fv(scale), xAxis, yAxis, zAxis, _r, _ri); 
}

/**
 * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
 * @param effectName
 * @param entity
 * @param xOffset
 * @param yOffset
 * @param zOffset
 * @param xRot
 * @param yRot
 * @param zRot
 * @param boneIndex
 * @param scale
 * @param xAxis
 * @param yAxis
 * @param zAxis
 */
export function startParticleFxLoopedOnEntityBone(effectName: string, entity: number, xOffset: number, yOffset: number, zOffset: number, xRot: number, yRot: number, zRot: number, boneIndex: number, scale: number, xAxis: boolean, yAxis: boolean, zAxis: boolean): number { 
	return _in(0xc6eb449e, 0x33977f0b, _ts(effectName), entity, _fv(xOffset), _fv(yOffset), _fv(zOffset), _fv(xRot), _fv(yRot), _fv(zRot), boneIndex, _fv(scale), xAxis, yAxis, zAxis, _r, _ri); 
}

/**
 * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
 * @param effectName
 * @param ped
 * @param xOffset
 * @param yOffset
 * @param zOffset
 * @param xRot
 * @param yRot
 * @param zRot
 * @param boneIndex
 * @param scale
 * @param xAxis
 * @param yAxis
 * @param zAxis
 */
export function startParticleFxLoopedOnPedBone(effectName: string, ped: number, xOffset: number, yOffset: number, zOffset: number, xRot: number, yRot: number, zRot: number, boneIndex: number, scale: number, xAxis: boolean, yAxis: boolean, zAxis: boolean): number { 
	return _in(0xf28da9f3, 0x8cd1787c, _ts(effectName), ped, _fv(xOffset), _fv(yOffset), _fv(zOffset), _fv(xRot), _fv(yRot), _fv(zRot), boneIndex, _fv(scale), xAxis, yAxis, zAxis, _r, _ri); 
}

/**
 * GRAPHICS::START_PARTICLE_FX_NON_LOOPED_AT_COORD("scr_paleto_roof_impact", -140.8576f, 6420.789f, 41.1391f, 0f, 0f, 267.3957f, 0x3F800000, 0, 0, 0);
 * 
 * Axis - Invert Axis Flags
 * 
 * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
 * 
 * 
 * -------------------------------------------------------------------
 * C#
 * 
 * Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_AT_COORD, = you are calling this function.
 * 
 * char *effectname = This is an in-game effect name, for e.g. "scr_fbi4_trucks_crash" is used to give the effects when truck crashes etc
 * 
 * float x, y, z pos = this one is Simple, you just have to declare, where do you want this effect to take place at, so declare the ordinates
 * 
 * float xrot, yrot, zrot = Again simple? just mention the value in case if you want the effect to rotate.
 * 
 * float scale = is declare the scale of the effect, this may vary as per the effects for e.g 1.0f
 * 
 * bool xaxis, yaxis, zaxis = To bool the axis values.
 * 
 * example:
 * Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_AT_COORD, "scr_fbi4_trucks_crash", GTA.Game.Player.Character.Position.X, GTA.Game.Player.Character.Position.Y, GTA.Game.Player.Character.Position.Z + 4f, 0, 0, 0, 5.5f, 0, 0, 0);
 * @param effectName
 * @param xPos
 * @param yPos
 * @param zPos
 * @param xRot
 * @param yRot
 * @param zRot
 * @param scale
 * @param xAxis
 * @param yAxis
 * @param zAxis
 */
export function startParticleFxNonLoopedAtCoord(effectName: string, xPos: number, yPos: number, zPos: number, xRot: number, yRot: number, zRot: number, scale: number, xAxis: boolean, yAxis: boolean, zAxis: boolean): boolean { 
	return _in(0x25129531, 0xf77b9ed3, _ts(effectName), _fv(xPos), _fv(yPos), _fv(zPos), _fv(xRot), _fv(yRot), _fv(zRot), _fv(scale), xAxis, yAxis, zAxis, _r); 
}

/**
 * Starts a particle effect on an entity for example your player.
 * 
 * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
 * 
 * Example:
 * C#:
 * Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, "scr_rcbarry2");                     Function.Call(Hash.USE_PARTICLE_FX_ASSET, "scr_rcbarry2");                             Function.Call(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, "scr_clown_appears", Game.Player.Character, 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 1.0, false, false, false);
 * 
 * Internally this calls the same function as GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE
 * however it uses -1 for the specified bone index, so it should be possible to start a non looped fx on an entity bone using that native
 * 
 * -can confirm START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE does NOT work on vehicle bones.
 * @param effectName
 * @param entity
 * @param offsetX
 * @param offsetY
 * @param offsetZ
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param scale
 * @param axisX
 * @param axisY
 * @param axisZ
 */
export function startParticleFxNonLoopedOnEntity(effectName: string, entity: number, offsetX: number, offsetY: number, offsetZ: number, rotX: number, rotY: number, rotZ: number, scale: number, axisX: boolean, axisY: boolean, axisZ: boolean): boolean { 
	return _in(0x0d53a3b8, 0xda0809d2, _ts(effectName), entity, _fv(offsetX), _fv(offsetY), _fv(offsetZ), _fv(rotX), _fv(rotY), _fv(rotZ), _fv(scale), axisX, axisY, axisZ, _r); 
}

/**
 * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
 * @param effectName
 * @param entity
 * @param offsetX
 * @param offsetY
 * @param offsetZ
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param boneIndex
 * @param scale
 * @param axisX
 * @param axisY
 * @param axisZ
 */
export function startParticleFxNonLoopedOnEntityBone(effectName: string, entity: number, offsetX: number, offsetY: number, offsetZ: number, rotX: number, rotY: number, rotZ: number, boneIndex: number, scale: number, axisX: boolean, axisY: boolean, axisZ: boolean): boolean { 
	return _in(0x02b1f2a7, 0x2e0f5325, _ts(effectName), entity, _fv(offsetX), _fv(offsetY), _fv(offsetZ), _fv(rotX), _fv(rotY), _fv(rotZ), boneIndex, _fv(scale), axisX, axisY, axisZ, _r); 
}

/**
 * GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE("scr_sh_bong_smoke", PLAYER::PLAYER_PED_ID(), -0.025f, 0.13f, 0f, 0f, 0f, 0f, 31086, 0x3F800000, 0, 0, 0);
 * 
 * Axis - Invert Axis Flags
 * 
 * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
 * @param effectName
 * @param ped
 * @param offsetX
 * @param offsetY
 * @param offsetZ
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param boneIndex
 * @param scale
 * @param axisX
 * @param axisY
 * @param axisZ
 */
export function startParticleFxNonLoopedOnPedBone(effectName: string, ped: number, offsetX: number, offsetY: number, offsetZ: number, rotX: number, rotY: number, rotZ: number, boneIndex: number, scale: number, axisX: boolean, axisY: boolean, axisZ: boolean): boolean { 
	return _in(0x0e7e7296, 0x1ba18619, _ts(effectName), ped, _fv(offsetX), _fv(offsetY), _fv(offsetZ), _fv(rotX), _fv(rotY), _fv(rotZ), boneIndex, _fv(scale), axisX, axisY, axisZ, _r); 
}

export function startPetrolTrailDecals(p0: number): void { 
	return _in(0x99ac7f0d, 0x8b9c893d, _fv(p0)); 
}

/**
 * p3 is some flag related to 'trailers' (invokes CVehicle::GetTrailer).
 * 
 * See REQUEST_VEHICLE_RECORDING
 * @param vehicle
 * @param recording
 * @param script
 * @param p3
 */
export function startPlaybackRecordedVehicle(vehicle: number, recording: number, script: string, p3: boolean): void { 
	return _in(0x3f878f92, 0xb3a7a071, vehicle, recording, _ts(script), p3); 
}

/**
 * AI abides by the provided driving style (e.g., stopping at red lights or waiting behind traffic) while executing the specificed vehicle recording.
 * 
 * FORCE_PLAYBACK_RECORDED_VEHICLE_UPDATE is a related native that deals with the AI physics for such recordings.
 * @param vehicle
 * @param recording
 * @param script
 * @param speed
 * @param drivingStyle
 */
export function startPlaybackRecordedVehicleUsingAi(vehicle: number, recording: number, script: string, speed: number, drivingStyle: number): void { 
	return _in(0x29de5fa5, 0x2d00428c, vehicle, recording, _ts(script), _fv(speed), drivingStyle); 
}

/**
 * flags requires further research, e.g., 0x4/0x8 are related to the AI driving task and 0x20 is internally set and interacts with dynamic entity components.
 * 
 * time, often zero and capped at 500, is related to SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER
 * @param vehicle
 * @param recording
 * @param script
 * @param flags
 * @param time
 * @param drivingStyle
 */
export function startPlaybackRecordedVehicleWithFlags(vehicle: number, recording: number, script: string, flags: number, time: number, drivingStyle: number): void { 
	return _in(0x7d80fd64, 0x5d4da346, vehicle, recording, _ts(script), flags, time, drivingStyle); 
}

/**
 * // this enum comes directly from R* so don't edit this
 * enum ePlayerSwitchTypes
 * {
 * SWITCH_TYPE_AUTO,
 * SWITCH_TYPE_LONG,
 * SWITCH_TYPE_MEDIUM,
 * SWITCH_TYPE_SHORT
 * };
 * 
 * Use GET_IDEAL_PLAYER_SWITCH_TYPE for the best switch type.
 * 
 * ----------------------------------------------------
 * 
 * Examples from the decompiled scripts:
 * 
 * STREAMING::START_PLAYER_SWITCH(l_832._f3, PLAYER::PLAYER_PED_ID(), 0, 3);
 * STREAMING::START_PLAYER_SWITCH(l_832._f3, PLAYER::PLAYER_PED_ID(), 2050, 3);
 * STREAMING::START_PLAYER_SWITCH(PLAYER::PLAYER_PED_ID(), l_832._f3, 1024, 3);
 * STREAMING::START_PLAYER_SWITCH(g_141F27, PLAYER::PLAYER_PED_ID(), 513, v_14);
 * 
 * Note: DO NOT, use SWITCH_TYPE_LONG with flag 513. It leaves you stuck in the clouds. You'll have to call STOP_PLAYER_SWITCH() to return to your ped.
 * 
 * Flag 8 w/ SWITCH_TYPE_LONG will zoom out 3 steps, then zoom in 2/3 steps and stop on the 3rd and just hang there.
 * Flag 8 w/ SWITCH_TYPE_MEDIUM will zoom out 1 step, and just hang there.
 * @param from
 * @param to
 * @param flags
 * @param switchType
 */
export function startPlayerSwitch(from: number, to: number, flags: number, switchType: number): void { 
	return _in(0xfaa23f2c, 0xba159d67, from, to, flags, switchType); 
}

/**
 * `findCollisionLand`: This teleports the player to land when set to true and will not consider the Z coordinate parameter provided by you. It will automatically put the Z coordinate so that you don't fall from sky.
 * @param player
 * @param x
 * @param y
 * @param z
 * @param heading
 * @param p5
 * @param findCollisionLand
 * @param p7
 */
export function startPlayerTeleport(player: number, x: number, y: number, z: number, heading: number, p5: boolean, findCollisionLand: boolean, p7: boolean): void { 
	return _in(0xad15f075, 0xa4da0fde, player, _fv(x), _fv(y), _fv(z), _fv(heading), p5, findCollisionLand, p7); 
}

export function startPreloadedConversation(): void { 
	return _in(0x23641afe, 0x870af385); 
}

/**
 * Starts recording a replay.
 * If mode is 0, turns on action replay.
 * If mode is 1, starts recording.
 * If already recording a replay, does nothing.
 * @param mode
 */
export function startReplayRecording(mode: number): void { 
	return _in(0xc3ac2fff, 0x9612ac81, mode); 
}

export function startRopeUnwindingFront(ropeId: number): void { 
	return _in(0x538d1179, 0xec1aa9a9, ropeId); 
}

export function startRopeWinding(ropeId: number): void { 
	return _in(0x1461c72c, 0x889e343e, ropeId); 
}

export function startSaveArrayWithSize(size: number, arrayName: string): number { 
	return _in(0x60fe567d, 0xf1b1af9d, _i, size, _ts(arrayName)); 
}

export function startSaveData(p1: number, p2: boolean): number { 
	return _in(0xa9575f81, 0x2c6a7997, _i, p1, p2); 
}

export function startSaveStructWithSize(size: number, structName: string): number { 
	return _in(0xbf737600, 0xcddbeadd, _i, size, _ts(structName)); 
}

export function startScriptConversation(p0: boolean, p1: boolean, p2: boolean, p3: boolean): void { 
	return _in(0x6b17c62c, 0x9635d2dc, p0, p1, p2, p3); 
}

/**
 * Starts a fire:
 * 
 * xyz: Location of fire
 * maxChildren: The max amount of times a fire can spread to other objects. Must be 25 or less, or the function will do nothing.
 * isGasFire: Whether or not the fire is powered by gasoline.
 * @param X
 * @param Y
 * @param Z
 * @param maxChildren
 * @param isGasFire
 */
export function startScriptFire(X: number, Y: number, Z: number, maxChildren: number, isGasFire: boolean): number { 
	return _in(0x6b83617e, 0x04503888, _fv(X), _fv(Y), _fv(Z), maxChildren, isGasFire, _r, _ri); 
}

export function startScriptPhoneConversation(p0: boolean, p1: boolean): void { 
	return _in(0x252e5f91, 0x5eabb675, p0, p1); 
}

export function startShapeTestBound(entity: number, flags1: number, flags2: number): number { 
	return _in(0x37181417, 0xce7c8900, entity, flags1, flags2, _r, _ri); 
}

export function startShapeTestBoundingBox(entity: number, flags1: number, flags2: number): number { 
	return _in(0x05283772, 0x1a854ec7, entity, flags1, flags2, _r, _ri); 
}

export function startShapeTestBox(x: number, y: number, z: number, dimX: number, dimY: number, dimZ: number, rotX: number, rotY: number, rotZ: number, p9: number, flags: number, entity: number, p12: number): number { 
	return _in(0xfe466162, 0xc4401d18, _fv(x), _fv(y), _fv(z), _fv(dimX), _fv(dimY), _fv(dimZ), _fv(rotX), _fv(rotY), _fv(rotZ), p9, flags, entity, p12, _r, _ri); 
}

/**
 * Raycast from point to point, where the ray has a radius.
 * 
 * flags:
 * vehicles=10
 * peds =12
 * 
 * Iterating through flags yields many ped / vehicle/ object combinations
 * 
 * p9 = 7, but no idea what it does
 * 
 * Entity is an entity to ignore
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param radius
 * @param flags
 * @param entity
 * @param p9
 */
export function startShapeTestCapsule(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, radius: number, flags: number, entity: number, p9: number): number { 
	return _in(0x28579d1b, 0x8f8aac80, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(radius), flags, entity, p9, _r, _ri); 
}

/**
 * Asynchronously starts a line-of-sight (raycast) world probe shape test.
 * 
 * Use the handle with 0x3D87450E15D98694 or 0x65287525D951F6BE until it returns 0 or 2.
 * 
 * p8 is a bit mask with bits 1, 2 and/or 4, relating to collider types; 4 should usually be used.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param flags
 * @param entity
 * @param p8
 */
export function startShapeTestLosProbe(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, flags: number, entity: number, p8: number): number { 
	return _in(0x7ee9f5d8, 0x3dd4f90e, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), flags, entity, p8, _r, _ri); 
}

/**
 * Returns a ShapeTest handle that can be used with GET_SHAPE_TEST_RESULT.
 * 
 * In its only usage in game scripts its called with flag set to 511, entity to player_ped_id and flag2 set to 7
 * @param pVec1
 * @param pVec2
 * @param flag
 * @param entity
 * @param flag2
 */
export function startShapeTestMouseCursorLosProbe(flag: number, entity: number, flag2: number): [number, Vector3, Vector3] { 
	const [retval, pVec1_out, pVec2_out] = _in(0xff6be494, 0xc7987f34, _v, _v, flag, entity, flag2, _r, _ri);
	return [retval as number, _mv(pVec1_out), _mv(pVec2_out)]; 
}

export function startShapeTestSweptSphere(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, radius: number, flags: number, entity: number, p9: number): number { 
	return _in(0xe6ac6c45, 0xfbe83004, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(radius), flags, entity, p9, _r, _ri); 
}

export function startVehicleAlarm(vehicle: number): void { 
	return _in(0xb8ff7ab4, 0x5305c345, vehicle); 
}

/**
 * Sounds the horn for the specified vehicle.
 * 
 * vehicle: The vehicle to activate the horn for.
 * mode: The hash of "NORMAL" or "HELDDOWN". Can be 0.
 * duration: The duration to sound the horn, in milliseconds.
 * 
 * Note: If a player is in the vehicle, it will only sound briefly.
 * @param vehicle
 * @param duration
 * @param mode
 * @param forever
 */
export function startVehicleHorn(vehicle: number, duration: number, mode: number, forever: boolean): void { 
	return _in(0x9c8c6504, 0xb5b63d2c, vehicle, duration, _ch(mode), forever); 
}

/**
 * Returns ptfxHandle
 * effectName: scr_sv_drag_burnout
 * @param vehicle
 * @param effectName
 * @param frontBack
 * @param leftRight
 * @param localOnly
 */
export function startVehicleParticleFxLooped(vehicle: number, effectName: string, frontBack: boolean, leftRight: boolean, localOnly: boolean): number { 
	return _in(0xdf269be2, 0x909e181a, vehicle, _ts(effectName), frontBack, leftRight, localOnly, _r, _ri); 
}

export function statClearDirtyReadDetected(): void { 
	return _in(0x9b4bd21d, 0x69b1e609); 
}

export function statClearPendingSaves(p0: number): void { 
	return _in(0xa8733668, 0xd1047b51, p0); 
}

/**
 * Example:
 * 
 * for (v_2 = 0; v_2 <= 4; v_2 += 1) {
 * STATS::STAT_CLEAR_SLOT_FOR_RELOAD(v_2);
 * }
 * @param statSlot
 */
export function statClearSlotForReload(statSlot: number): boolean { 
	return _in(0xeb0a7218, 0x1d4aa4ad, statSlot, _r); 
}

export function statCloudSlotLoadFailed(p0: number): boolean { 
	return _in(0x7f2c4cdf, 0x2e82df4c, p0, _r); 
}

export function statCloudSlotLoadFailedCode(p0: number): number { 
	return _in(0xe496a53b, 0xa5f50a56, p0, _r, _ri); 
}

export function statCloudSlotSaveFailed(p0: number): boolean { 
	return _in(0x7e6946f6, 0x8a38b74f, p0, _r); 
}

export function statCommunityGetHistory(statName: number, p1: number, outValue: number): [boolean, number] { 
	const [retval, outValue_out] = _in(0xbed9f569, 0x3f34ed17, _ch(statName), p1, _fi(outValue), _r);
	return [retval as boolean, outValue_out as number]; 
}

export function statCommunityStartSynch(): boolean { 
	return _in(0x5a556b22, 0x9a169402, _r); 
}

export function statCommunitySynchIsPending(): boolean { 
	return _in(0xb1d2bb1e, 0x1631f5b1, _r); 
}

/**
 * p0 is characterSlot? seems range from 0 to 2
 * @param p0
 */
export function statDeleteSlot(p0: number): boolean { 
	return _in(0x49a49bed, 0x12794d70, p0, _r); 
}

/**
 * Prevents updates to CStatsMgr (e.g., STAT_SET_* natives)
 */
export function statDisableStatsTracking(): void { 
	return _in(0x629526ab, 0xa383bcaa); 
}

export function statEnableStatsTracking(): void { 
	return _in(0x98e2bc1c, 0xa26287c3); 
}

export function statGetBlockSaves(): boolean { 
	return _in(0x6a7f1975, 0x6f1a9016, _r); 
}

export function statGetBool(statHash: number, p2: number): [boolean, boolean] { 
	const [retval, outValue_out] = _in(0x11b5e6d2, 0xae73f48e, _ch(statHash), _i, p2, _r);
	return [retval as boolean, outValue_out as boolean]; 
}

export function statGetCancelSaveMigrationStatus(): number { 
	return _in(0x567384df, 0xa67029e6, _r, _ri); 
}

/**
 * Fly low to the ground for the longest distance
 */
export function statGetChallengeFlyingDist(): number { 
	return _in(0x6e0a5253, 0x375c4584, _r, _rf); 
}

/**
 * Drive the furthest distance in a land vehicle without crashing
 */
export function statGetCurrentDriveNocrashDistance(): number { 
	return _in(0xba9749cc, 0x94c1fd85, _r, _rf); 
}

/**
 * Reverse the longest distance without crashing
 */
export function statGetCurrentDrivingReverseDistance(): number { 
	return _in(0x32cac93c, 0x9de73d32, _r, _rf); 
}

/**
 * Perform the longest stoppie on a motorcycle
 */
export function statGetCurrentFrontWheelDistance(): number { 
	return _in(0x84a810b3, 0x75e69c0e, _r, _rf); 
}

/**
 * Perform the longest jump in a land vehicle
 */
export function statGetCurrentJumpDistance(): number { 
	return _in(0x9ec88581, 0x84cd253a, _r, _rf); 
}

/**
 * Perform the most near misses with other vehicles in a land vehicle without crashing
 */
export function statGetCurrentNearMissNocrashPrecise(): number { 
	return _in(0xe8853fbc, 0xe7d8d0d6, _r, _ri); 
}

/**
 * Perform the longest wheelie on a motorcycle
 */
export function statGetCurrentRearWheelDistance(): number { 
	return _in(0xa943fd17, 0x22e11efd, _r, _rf); 
}

/**
 * Fall the longest distance with a parachute before opening it
 */
export function statGetCurrentSkydivingDistance(): number { 
	return _in(0xaff47709, 0xf1d5dcce, _r, _rf); 
}

/**
 * Achieve the highest speed in a land vehicle
 */
export function statGetCurrentSpeed(): number { 
	return _in(0x55a8beca, 0xf28a4eb7, _r, _rf); 
}

/**
 * p3 is probably characterSlot or BOOL save, always -1
 * @param statHash
 * @param outValue
 * @param numFields
 * @param p3
 */
export function statGetDate(statHash: number, numFields: number, p3: number): [boolean, number] { 
	const [retval, outValue_out] = _in(0x8b0facef, 0xc36c824b, _ch(statHash), _i, numFields, p3, _r);
	return [retval as boolean, outValue_out as number]; 
}

export function statGetFloat(statHash: number, p2: number): [boolean, number] { 
	const [retval, outValue_out] = _in(0xd7ae6c9c, 0x9c6ac54c, _ch(statHash), _f, p2, _r);
	return [retval as boolean, outValue_out as number]; 
}

export function statGetFlyingAltitude(outValue: number): [boolean, number] { 
	const [retval, outValue_out] = _in(0x1a8ea222, 0xf9c67dbb, _fi(outValue), _r);
	return [retval as boolean, outValue_out as number]; 
}

/**
 * p2 appears to always be -1
 * 
 * @param statHash
 * @param outValue
 * @param p2
 */
export function statGetInt(statHash: number, p2: number): [boolean, number] { 
	const [retval, outValue_out] = _in(0x767fbc2a, 0xc802ef3d, _ch(statHash), _i, p2, _r);
	return [retval as boolean, outValue_out as number]; 
}

export function statGetLicensePlate(statName: number): string { 
	return _in(0x5473d419, 0x5058b2e4, _ch(statName), _r, _s); 
}

export function statGetLoadSafeToProgressToMpFromSp(): boolean { 
	return _in(0xc0e0d686, 0xddfc6eae, _r); 
}

/**
 * p4 is probably characterSlot or BOOL save
 * @param statHash
 * @param outValue
 * @param p2
 * @param p3
 * @param p4
 */
export function statGetMaskedInt(statHash: number, p2: number, p3: number, p4: number): [boolean, number] { 
	const [retval, outValue_out] = _in(0x655185a0, 0x6d9eeaab, _ch(statHash), _i, p2, p3, p4, _r);
	return [retval as boolean, outValue_out as number]; 
}

export function statGetNumberOfDays(statName: number): number { 
	return _in(0xe0e854f5, 0x280fb769, _ch(statName), _r, _ri); 
}

export function statGetNumberOfHours(statName: number): number { 
	return _in(0xf2d4b2fe, 0x415aafc3, _ch(statName), _r, _ri); 
}

export function statGetNumberOfMinutes(statName: number): number { 
	return _in(0x7583b4be, 0x4c5a41b5, _ch(statName), _r, _ri); 
}

export function statGetNumberOfSeconds(statName: number): number { 
	return _in(0x2ce056ff, 0x3723f00b, _ch(statName), _r, _ri); 
}

/**
 * p3 is probably characterSlot or BOOL save, always -1
 * @param statName
 * @param outX
 * @param outY
 * @param outZ
 * @param p4
 */
export function statGetPos(statName: number, p4: number): [boolean, number, number, number] { 
	const [retval, outX_out, outY_out, outZ_out] = _in(0x350f82cc, 0xb186aa1b, _ch(statName), _f, _f, _f, p4, _r);
	return [retval as boolean, outX_out as number, outY_out as number, outZ_out as number]; 
}

export function statGetRecordedValue(value: number): [boolean, number] { 
	const [retval, value_out] = _in(0xf11f01d9, 0x8113536a, _fi(value), _r);
	return [retval as boolean, value_out as number]; 
}

export function statGetSaveMigrationConsumeContentStatus(p0: number): [number, number] { 
	const [retval, p0_out] = _in(0xce5aa445, 0xaba8dee0, _ii(p0), _r, _ri);
	return [retval as number, p0_out as number]; 
}

export function statGetSaveMigrationStatus(data: number): [number, number] { 
	const [retval, data_out] = _in(0x886913bb, 0xeaca68c1, _ii(data), _r, _ri);
	return [retval as number, data_out as number]; 
}

/**
 * p1 is always -1 in the script files
 * @param statHash
 * @param p1
 */
export function statGetString(statHash: number, p1: number): string { 
	return _in(0xe50384ac, 0xc2c3db74, _ch(statHash), p1, _r, _s); 
}

/**
 * Returns the rockstar ID (user id) value of a given stat. Returns "STAT_UNKNOWN" if the statHash is invalid or the stat has no userId
 * @param statHash
 */
export function statGetUserId(statHash: number): string { 
	return _in(0x2365c388, 0xe393bbe2, _ch(statHash), _r, _s); 
}

/**
 * Travel the furthest distance when bailing from a vehicle
 */
export function statGetVehicleBailDistance(): number { 
	return _in(0x0b8b7f74, 0xbf061c6d, _r, _rf); 
}

export function statIncrement(statName: number, value: number): void { 
	return _in(0x9b5a68c6, 0x489e9909, _ch(statName), _fv(value)); 
}

/**
 * Or non-flyable area
 */
export function statIsPlayerVehicleAboveOcean(): boolean { 
	return _in(0xf9f29227, 0x17b819ec, _r); 
}

export function statIsRecordingStat(): boolean { 
	return _in(0x8b9cdbd6, 0xc566c38c, _r); 
}

export function statIsStatsTrackingEnabled(): boolean { 
	return _in(0xbe3db208, 0x333d9844, _r); 
}

export function statLoad(statSlot: number): boolean { 
	return _in(0xa651443f, 0x437b1ce6, statSlot, _r); 
}

export function statLoadDirtyReadDetected(): boolean { 
	return _in(0xecb41ac6, 0xab754401, _r); 
}

export function statLoadPending(statSlot: number): boolean { 
	return _in(0xa1750ffa, 0xfa181661, statSlot, _r); 
}

/**
 * p0 seems to range from 0 to 7
 * @param p0
 */
export function statLocalResetAllOnlineCharacterStats(p0: number): void { 
	return _in(0xa78b8fa5, 0x8200da56, p0); 
}

export function statMigrateCheckAlreadyDone(): boolean { 
	return _in(0x4c89fe2b, 0xdeb3f169, _r); 
}

export function statMigrateCheckGetIsPlatformAvailable(p0: number): number { 
	return _in(0x5bd5f255, 0x321c4aaf, p0, _r, _ri); 
}

export function statMigrateCheckGetPlatformStatus(p0: number, p1: number): [number, number] { 
	const [retval, p1_out] = _in(0xdeaaf77e, 0xb3687e97, p0, _ii(p1), _r, _ri);
	return [retval as number, p1_out as number]; 
}

export function statMigrateCheckStart(): boolean { 
	return _in(0xc6e0e261, 0x6a7576bb, _r); 
}

export function statMigrateClearForRestart(): void { 
	return _in(0xc847b43f, 0x369ac0b5); 
}

export function statMigrateSavegameGetStatus(): number { 
	return _in(0x9a62ec95, 0xae10e011, _r, _ri); 
}

/**
 * platformName must be one of the following: ps3, xbox360, ps4, xboxone
 * @param platformName
 */
export function statMigrateSavegameStart(platformName: string): boolean { 
	return _in(0xa5c80d8e, 0x768a9e66, _ts(platformName), _r); 
}

export function statNetworkIncrementOnSuicide(p0: number, p1: number): void { 
	return _in(0x428eaf89, 0xe24f6c36, p0, _fv(p1)); 
}

/**
 * p0 seems to range from 0 to 7
 * @param p0
 */
export function statResetAllOnlineCharacterStats(p0: number): void { 
	return _in(0x26d7399b, 0x9587fe89, p0); 
}

/**
 * This function is hard-coded to always return 1.
 */
export function statRollbackSaveMigration(): boolean { 
	return _in(0xb3da2606, 0x774a8e2d, _r); 
}

export function statSave(p0: number, p1: boolean, p2: number, p3: boolean): boolean { 
	return _in(0xe07bca30, 0x5b82d2fd, p0, p1, p2, p3, _r); 
}

export function statSaveMigrationCancelPendingOperation(): boolean { 
	return _in(0x4fef5318, 0x3c3c6414, _r); 
}

export function statSaveMigrationConsumeContent(contentId: number, srcPlatform: string, srcGamerHandle: string): boolean { 
	return _in(0x3270f67e, 0xed31fbc1, _ch(contentId), _ts(srcPlatform), _ts(srcGamerHandle), _r); 
}

export function statSavePending(): boolean { 
	return _in(0x7d3a5838, 0x56f2c5ac, _r); 
}

export function statSavePendingOrRequested(): boolean { 
	return _in(0xbbb6ad00, 0x6f1bbea3, _r); 
}

export function statSetBlockSaves(toggle: boolean): void { 
	return _in(0xf434a10b, 0xa01c37d0, toggle); 
}

/**
 * Example:
 * STATS::STAT_SET_BOOL(MISC::GET_HASH_KEY("MPPLY_MELEECHLENGECOMPLETED"), trur, true);
 * @param statName
 * @param value
 * @param save
 */
export function statSetBool(statName: number, value: boolean, save: boolean): boolean { 
	return _in(0x4b33c424, 0x3de0c432, _ch(statName), value, save, _r); 
}

export function statSetCheatIsActive(): void { 
	return _in(0x047cbed6, 0xf6f8b63c); 
}

/**
 * p1 always true.
 * @param statName
 * @param p1
 */
export function statSetCurrentPosixTime(statName: number, p1: boolean): boolean { 
	return _in(0xc2f84b7f, 0x9c4d0c61, _ch(statName), p1, _r); 
}

/**
 * 'value' is a structure to a structure, 'numFields' is how many fields there are in said structure (usually 7).
 * 
 * The structure looks like this:
 * 
 * int year
 * int month
 * int day
 * int hour
 * int minute
 * int second
 * int millisecond
 * 
 * The decompiled scripts use TIME::GET_POSIX_TIME to fill this structure.
 * @param statName
 * @param value
 * @param numFields
 * @param save
 */
export function statSetDate(statName: number, numFields: number, save: boolean): [boolean, number] { 
	const [retval, value_out] = _in(0x2c29bfb6, 0x4f4fcbe4, _ch(statName), _i, numFields, save, _r);
	return [retval as boolean, value_out as number]; 
}

/**
 * Example:
 * STATS::STAT_SET_FLOAT(MISC::GET_HASH_KEY("MP0_WEAPON_ACCURACY"), 66.6f, true);
 * @param statName
 * @param value
 * @param save
 */
export function statSetFloat(statName: number, value: number, save: boolean): boolean { 
	return _in(0x4851997f, 0x37fe9b3c, _ch(statName), _fv(value), save, _r); 
}

/**
 * The following values have been found in the decompiled scripts:
 * "RC_ABI1"
 * "RC_ABI2"
 * "RC_BA1"
 * "RC_BA2"
 * "RC_BA3"
 * "RC_BA3A"
 * "RC_BA3C"
 * "RC_BA4"
 * "RC_DRE1"
 * "RC_EPS1"
 * "RC_EPS2"
 * "RC_EPS3"
 * "RC_EPS4"
 * "RC_EPS5"
 * "RC_EPS6"
 * "RC_EPS7"
 * "RC_EPS8"
 * "RC_EXT1"
 * "RC_EXT2"
 * "RC_EXT3"
 * "RC_EXT4"
 * "RC_FAN1"
 * "RC_FAN2"
 * "RC_FAN3"
 * "RC_HAO1"
 * "RC_HUN1"
 * "RC_HUN2"
 * "RC_JOS1"
 * "RC_JOS2"
 * "RC_JOS3"
 * "RC_JOS4"
 * "RC_MAU1"
 * "RC_MIN1"
 * "RC_MIN2"
 * "RC_MIN3"
 * "RC_MRS1"
 * "RC_MRS2"
 * "RC_NI1"
 * "RC_NI1A"
 * "RC_NI1B"
 * "RC_NI1C"
 * "RC_NI1D"
 * "RC_NI2"
 * "RC_NI3"
 * "RC_OME1"
 * "RC_OME2"
 * "RC_PA1"
 * "RC_PA2"
 * "RC_PA3"
 * "RC_PA3A"
 * "RC_PA3B"
 * "RC_PA4"
 * "RC_RAM1"
 * "RC_RAM2"
 * "RC_RAM3"
 * "RC_RAM4"
 * "RC_RAM5"
 * "RC_SAS1"
 * "RC_TON1"
 * "RC_TON2"
 * "RC_TON3"
 * "RC_TON4"
 * "RC_TON5"
 * @param statName
 * @param value
 * @param save
 */
export function statSetGxtLabel(statName: number, value: string, save: boolean): boolean { 
	return _in(0x17695002, 0xfd8b2ae0, _ch(statName), _ts(value), save, _r); 
}

/**
 * Example:
 * STATS::STAT_SET_INT(MISC::GET_HASH_KEY("MPPLY_KILLS_PLAYERS"), 1337, true);
 * @param statName
 * @param value
 * @param save
 */
export function statSetInt(statName: number, value: number, save: boolean): boolean { 
	return _in(0xb3271d7a, 0xb655b441, _ch(statName), value, save, _r); 
}

export function statSetLicensePlate(statName: number, str: string): boolean { 
	return _in(0x69ff1326, 0x6d7296da, _ch(statName), _ts(str), _r); 
}

export function statSetMaskedInt(statName: number, p1: number, p2: number, p3: number, save: boolean): boolean { 
	return _in(0x7bbb1b54, 0x583ed410, _ch(statName), p1, p2, p3, save, _r); 
}

export function statSetOpenSavetypeInJob(p0: number): void { 
	return _in(0x5688585e, 0x6d563cd8, p0); 
}

export function statSetPos(statName: number, x: number, y: number, z: number, save: boolean): boolean { 
	return _in(0xdb283fde, 0x680fe72e, _ch(statName), _fv(x), _fv(y), _fv(z), save, _r); 
}

/**
 * Does not take effect immediately, unfortunately.
 * 
 * profileSetting seems to only be 936, 937 and 938 in scripts
 * @param profileSetting
 * @param value
 */
export function statSetProfileSettingValue(profileSetting: number, value: number): void { 
	return _in(0x68f01422, 0xbe1d838f, profileSetting, value); 
}

export function statSetString(statName: number, value: string, save: boolean): boolean { 
	return _in(0xa87b2335, 0xd12531d7, _ch(statName), _ts(value), save, _r); 
}

export function statSetUserId(statName: number, value: string, save: boolean): boolean { 
	return _in(0x8cddf1e4, 0x52babe11, _ch(statName), _ts(value), save, _r); 
}

export function statSlotIsLoaded(statSlot: number): boolean { 
	return _in(0x0d0a9f0e, 0x7bd91e3c, statSlot, _r); 
}

/**
 * enum StatTrackingType
 * {
 * LongestWheelie = 1,
 * LongestStoppie = 2,
 * NoCrashes = 3,
 * HighestSpeed = 4,
 * _MostFlips = 5,
 * _LongestSpin = 6,
 * _HighestJumpReached = 7,
 * LongestJump = 8,
 * _NearMissesNoCrash = 9,
 * LongestFallSurvived = 10,
 * LowestParachute = 11,
 * ReverseDriving = 12,
 * LongestFreefall = 13,
 * VehiclesStolen = 14,
 * _SomeCFireEventCount = 15,
 * _Unk16 = 16,
 * _LowFlyingTime = 17,
 * LowFlying = 18,
 * _InvertedFlyingTime = 19,
 * InvertedFlying = 20,
 * _PlaneSpinCount = 21,
 * MeleeKills = 22, // Players
 * _LongestSniperKill = 23,
 * SniperSkills = 24, // Players
 * DrivebyKills = 25, // Players
 * HeadshotKills = 26, // Players
 * LongestBail = 27,
 * _TotalRammedByCar = 28,
 * NearMissesPrecise = 29,
 * _FreefallTime = 30,
 * Unk31 = 31,
 * }
 * 
 * enum StatTrackingValueType
 * {
 * Total,
 * Max,
 * Min
 * }
 * @param statType
 * @param valueType
 */
export function statStartRecordStat(statType: number, valueType: number): boolean { 
	return _in(0x33d72899, 0xe24c3365, statType, valueType, _r); 
}

export function statStopRecordStat(): boolean { 
	return _in(0xa761d4ac, 0x6115623d, _r); 
}

/**
 * This native does absolutely nothing, just a nullsub
 * @param p0
 */
export function statsCompletedCharacterCreation(p0: number): void { 
	return _in(0xc01d2470, 0xf22cde5a, p0); 
}

/**
 * Example:
 * 
 * This will stop the alarm at Fort Zancudo.
 * 
 * AUDIO::STOP_ALARM("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS", 1);
 * 
 * First parameter (char) is the name of the alarm.
 * Second parameter (bool) has to be true (1) to have any effect.
 * Full list of alarm names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/alarmSounds.json
 * @param alarmName
 * @param toggle
 */
export function stopAlarm(alarmName: string, toggle: boolean): void { 
	return _in(0xa1caddcd, 0x98415a41, _ts(alarmName), toggle); 
}

export function stopAllAlarms(stop: boolean): void { 
	return _in(0x2f794a87, 0x7add4c92, stop); 
}

export function stopAllGarageActivity(): void { 
	return _in(0x0f87e938, 0xbdf29d66); 
}

/**
 * Looks like p1 may be a flag, still need to do some research, though.
 * @param entity
 * @param priority
 * @param secondary
 */
export function stopAnimPlayback(entity: number, priority: number, secondary: boolean): void { 
	return _in(0xee08c992, 0xd238c5d1, entity, priority, secondary); 
}

/**
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param entity
 * @param animDictionary
 * @param animationName
 * @param blendDelta
 */
export function stopAnimTask(entity: number, animDictionary: string, animationName: string, blendDelta: number): void { 
	return _in(0x97ff36a1, 0xd40ea00a, entity, _ts(animDictionary), _ts(animationName), _fv(blendDelta)); 
}

export function stopAnyPedModelBeingSuppressed(): void { 
	return _in(0xb47bd05f, 0xa66b40cf); 
}

/**
 * Full list of audio scene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/audioSceneNames.json
 * @param scene
 */
export function stopAudioScene(scene: string): void { 
	return _in(0xdfe8422b, 0x3b94e688, _ts(scene)); 
}

/**
 * ??
 */
export function stopAudioScenes(): void { 
	return _in(0xbac7fc81, 0xa75ec1a1); 
}

export function stopBinkMovie(binkMovie: number): void { 
	return _in(0x63606a61, 0xde68898a, binkMovie); 
}

/**
 * Stops CTaskBringVehicleToHalt
 * @param vehicle
 */
export function stopBringingVehicleToHalt(vehicle: number): void { 
	return _in(0x7c06330b, 0xfdda182e, vehicle); 
}

export function stopCamPointing(cam: number): void { 
	return _in(0xf33ab757, 0x80ba57de, cam); 
}

export function stopCamShaking(cam: number, p1: boolean): void { 
	return _in(0xbdecf643, 0x67884ac3, cam, p1); 
}

export function stopCinematicCamShaking(p0: boolean): void { 
	return _in(0x2238e588, 0xe588a6d7, p0); 
}

/**
 * Only used once in carsteal3 with p0 set to -1096069633 (CAMERA_MAN_SHOT)
 * @param p0
 */
export function stopCinematicShot(p0: number): void { 
	return _in(0x7660c6e7, 0x5d3a078e, _ch(p0)); 
}

export function stopCodeGameplayHint(p0: boolean): void { 
	return _in(0x247acbc4, 0xabbc9d1c, p0); 
}

/**
 * control: see IS_CONTROL_ENABLED
 * @param control
 */
export function stopControlShake(control: number): void { 
	return _in(0x38c16a30, 0x5e8cdc8d, control); 
}

export function stopCurrentPlayingAmbientSpeech(ped: number): void { 
	return _in(0xb8bec0ca, 0x6f0edb0f, ped); 
}

export function stopCurrentPlayingSpeech(ped: number): void { 
	return _in(0x7a73d05a, 0x607734c7, ped); 
}

export function stopCutscene(p0: boolean): void { 
	return _in(0xc7272775, 0xb4dc786e, p0); 
}

export function stopCutsceneAudio(): void { 
	return _in(0x806058bb, 0xdc136e06); 
}

export function stopCutsceneCamShaking(p0: number): void { 
	return _in(0x324c5aa4, 0x11da7737, p0); 
}

export function stopCutsceneImmediately(): void { 
	return _in(0xd220bdd2, 0x22ac4a1e); 
}

export function stopEndUserBenchmark(): void { 
	return _in(0xc7db36c2, 0x4634f52b); 
}

/**
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * 
 * RAGEPluginHook list: docs.ragepluginhook.net/html/62951c37-a440-478c-b389-c471230ddfc5.htm
 * @param entity
 * @param animation
 * @param animGroup
 * @param p3
 */
export function stopEntityAnim(entity: number, animation: string, animGroup: string, p3: number): boolean { 
	return _in(0x28004f88, 0x151e03e0, entity, _ts(animation), _ts(animGroup), _fv(p3), _r); 
}

export function stopEntityFire(entity: number): void { 
	return _in(0x7f0dd2eb, 0xbb651aff, entity); 
}

export function stopFireInRange(x: number, y: number, z: number, radius: number): void { 
	return _in(0x056a8a21, 0x9b8e829f, _fv(x), _fv(y), _fv(z), _fv(radius)); 
}

export function stopGameplayCamShaking(p0: boolean): void { 
	return _in(0x0ef93e9f, 0x3d08c178, p0); 
}

export function stopGameplayHint(p0: boolean): void { 
	return _in(0xf46c581c, 0x61718916, p0); 
}

/**
 * This native does absolutely nothing, just a nullsub
 * @param p0
 */
export function stopGameplayHintBeingCancelledThisUpdate(p0: boolean): void { 
	return _in(0xccd078c2, 0x665d2973, p0); 
}

/**
 * p1 is always 0 in the native scripts
 * @param ptfxHandle
 * @param p1
 */
export function stopParticleFxLooped(ptfxHandle: number, p1: boolean): void { 
	return _in(0x8f759988, 0x77616996, ptfxHandle, p1); 
}

export function stopPedRingtone(ped: number): void { 
	return _in(0x6c5ae23e, 0xfa885092, ped); 
}

export function stopPedSpeaking(ped: number, shaking: boolean): void { 
	return _in(0x9d64d740, 0x5520e3d3, ped, shaking); 
}

export function stopPedSpeakingSynced(ped: number, p1: boolean): void { 
	return _in(0xab6781a5, 0xf3101470, ped, p1); 
}

export function stopPedWeaponFiringWhenDropped(ped: number): void { 
	return _in(0xc158d281, 0x42a34608, ped); 
}

export function stopPlaybackRecordedVehicle(vehicle: number): void { 
	return _in(0x54833611, 0xc17abdea, vehicle); 
}

export function stopPlayerSwitch(): void { 
	return _in(0x95c0a5bb, 0xdc189aa1); 
}

/**
 * Disables the player's teleportation
 */
export function stopPlayerTeleport(): void { 
	return _in(0xc449eded, 0x9d73009c); 
}

/**
 * This native makes the gameplay camera zoom into first person/third person with a special effect.
 * @param render
 * @param p1
 * @param p2
 * @param p3
 */
export function stopRenderingScriptCamsUsingCatchUp(render: boolean, p1: number, p2: number, p3: number): void { 
	return _in(0xc819f3cb, 0xb62bf692, render, _fv(p1), p2, p3); 
}

/**
 * Stops recording and saves the recorded clip.
 */
export function stopReplayRecording(): void { 
	return _in(0x071a5197, 0xd6afc8b3); 
}

export function stopRopeUnwindingFront(ropeId: number): void { 
	return _in(0xfff3a507, 0x79efbbb3, ropeId); 
}

export function stopRopeWinding(ropeId: number): void { 
	return _in(0xcb2d4ab8, 0x4a19aa7c, ropeId); 
}

export function stopSaveArray(): void { 
	return _in(0x04456f95, 0x153c6be4); 
}

export function stopSaveData(): void { 
	return _in(0x74e20c91, 0x45fb66fd); 
}

export function stopSaveStruct(): void { 
	return _in(0xeb1774df, 0x12bb9f12); 
}

/**
 * In drunk_controller.c4, sub_309
 * if (CAM::IS_SCRIPT_GLOBAL_SHAKING()) {
 * CAM::STOP_SCRIPT_GLOBAL_SHAKING(0);
 * }
 * @param p0
 */
export function stopScriptGlobalShaking(p0: boolean): void { 
	return _in(0x1c9d7949, 0xfa533490, p0); 
}

export function stopScriptedConversation(p0: boolean): number { 
	return _in(0xd79deefb, 0x53455eba, p0, _r, _ri); 
}

/**
 * STOP_S[MOKE_GRENADE_EXPLOSION_SOUNDS]?
 */
export function stopSmokeGrenadeExplosionSounds(): void { 
	return _in(0xe4e6dd55, 0x66d28c82); 
}

export function stopSound(soundId: number): void { 
	return _in(0xa3b0c41b, 0xa5cc0bb5, soundId); 
}

export function stopStream(): void { 
	return _in(0xa4718a14, 0x19d18151); 
}

export function stopSynchronizedAudioEvent(sceneID: number): boolean { 
	return _in(0x92d6a88e, 0x64a94430, sceneID, _r); 
}

/**
 * p1 sync task id?
 * @param entity
 * @param p1
 * @param p2
 */
export function stopSynchronizedEntityAnim(entity: number, p1: number, p2: boolean): boolean { 
	return _in(0x43d3807c, 0x077261e3, entity, _fv(p1), p2, _r); 
}

export function stopSynchronizedMapEntityAnim(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): boolean { 
	return _in(0x11e79cab, 0x7183b6f5, _fv(x1), _fv(y1), _fv(z1), _fv(x2), y2, _fv(z2), _r); 
}

/**
 * Always returns zero.
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 */
export function streamvolCreateFrustum(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number): number { 
	return _in(0x1f3f018b, 0xc3afa77c, _fv(p0), _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), _fv(p6), p7, p8, _r, _ri); 
}

/**
 * Always returns zero.
 * @param p0
 * @param p1
 * @param p2
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 */
export function streamvolCreateLine(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): number { 
	return _in(0x0ad9710c, 0xee2f590f, _fv(p0), _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), p6, _r, _ri); 
}

/**
 * Always returns zero.
 * @param x
 * @param y
 * @param z
 * @param rad
 * @param p4
 * @param p5
 */
export function streamvolCreateSphere(x: number, y: number, z: number, rad: number, p4: number, p5: number): number { 
	return _in(0x219c7b8d, 0x53e429fd, _fv(x), _fv(y), _fv(z), _fv(rad), p4, p5, _r, _ri); 
}

export function streamvolDelete(unused: number): void { 
	return _in(0x1ee7d8df, 0x4425f053, unused); 
}

export function streamvolHasLoaded(unused: number): boolean { 
	return _in(0x7d41e9d2, 0xd17c5b2d, unused, _r); 
}

export function streamvolIsValid(unused: number): boolean { 
	return _in(0x07c313f9, 0x4746702c, unused, _r); 
}

/**
 * Returns false if it's a null or empty string or if the string is too long. outInteger will be set to -999 in that case.
 * 
 * If all checks have passed successfully, the return value will be set to whatever strtol(string, 0i64, 10); returns.
 * @param string
 * @param outInteger
 */
export function stringToInt(string: string, outInteger: number): [boolean, number] { 
	const [retval, outInteger_out] = _in(0x5a5f40fe, 0x637eb584, _ts(string), _ii(outInteger), _r);
	return [retval as boolean, outInteger_out as number]; 
}

export function suppressAgitationEventsNextFrame(): void { 
	return _in(0x5f3b7749, 0xc112d552); 
}

export function suppressAmbientPedAggressiveCleanupThisFrame(): void { 
	return _in(0x5a7f62fd, 0xa59759bd); 
}

/**
 * crimeType: see REPORT_CRIME
 * @param player
 * @param crimeType
 */
export function suppressCrimeThisFrame(player: number, crimeType: number): void { 
	return _in(0x9a987297, 0xed8bd838, player, crimeType); 
}

export function suppressFrontendRenderingThisFrame(): void { 
	return _in(0xba751764, 0xf0821256); 
}

export function suppressHdMapStreamingThisFrame(): void { 
	return _in(0x47239732, 0x2e92a856); 
}

/**
 * This has been found in use in the decompiled files.
 * @param player
 */
export function suppressLosingWantedLevelIfHiddenThisFrame(player: number): void { 
	return _in(0x4669b3ed, 0x80f24b4e, player); 
}

export function suppressNeonsOnVehicle(vehicle: number, toggle: boolean): void { 
	return _in(0x83f81357, 0x0ff519de, vehicle, toggle); 
}

/**
 * enum ePickupRewardType
 * {
 * PICKUP_REWARD_TYPE_AMMO = (1 << 0),
 * PICKUP_REWARD_TYPE_BULLET_MP = (1 << 1),
 * PICKUP_REWARD_TYPE_MISSILE_MP = (1 << 2),
 * PICKUP_REWARD_TYPE_GRENADE_LAUNCHER_MP = (1 << 3),
 * PICKUP_REWARD_TYPE_ARMOUR = (1 << 4),
 * PICKUP_REWARD_TYPE_HEALTH = (1 << 5),
 * PICKUP_REWARD_TYPE_HEALTH_VARIABLE = PICKUP_REWARD_TYPE_HEALTH,
 * PICKUP_REWARD_TYPE_MONEY_FIXED = (1 << 6),
 * PICKUP_REWARD_TYPE_MONEY_VARIABLE = PICKUP_REWARD_TYPE_MONEY_FIXED,
 * PICKUP_REWARD_TYPE_WEAPON = (1 << 7),
 * PICKUP_REWARD_TYPE_STAT = (1 << 8),
 * PICKUP_REWARD_TYPE_STAT_VARIABLE = PICKUP_REWARD_TYPE_STAT,
 * PICKUP_REWARD_TYPE_VEHICLE_FIX = (1 << 9),
 * PICKUP_REWARD_TYPE_FIREWORK_MP = (1 << 10),
 * };
 * @param rewardType
 * @param suppress
 */
export function suppressPickupRewardType(rewardType: number, suppress: boolean): void { 
	return _in(0xf9209952, 0x7db8e2a7, rewardType, suppress); 
}

export function suppressPickupSoundForPickup(p0: number, p1: number): void { 
	return _in(0x8dca505a, 0x5c196f05, p0, p1); 
}

/**
 * eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
 * @param eventType
 */
export function suppressShockingEventTypeNextFrame(eventType: number): void { 
	return _in(0x3fd2ec8b, 0xf1f1cf30, eventType); 
}

export function suppressShockingEventsNextFrame(): void { 
	return _in(0x2f9a292a, 0xd0a3bd89); 
}

export function suppressWitnessesCallingPoliceThisFrame(player: number): void { 
	return _in(0x36f1b388, 0x55f2a8df, player); 
}

export function supressRandomEventThisFrame(eventType: number, suppress: boolean): void { 
	return _in(0x1eae0a6e, 0x978894a2, eventType, suppress); 
}

/**
 * Same call as ALLOW_BOAT_BOOM_TO_ANIMATE
 * @param vehicle
 * @param toggle
 */
export function swingBoatBoomFreely(vehicle: number, toggle: boolean): void { 
	return _in(0xc1f981a6, 0xf74f0c23, vehicle, toggle); 
}

/**
 * Sets the boat boom position for the `TR3` trailer.
 * Ratio value is between `0.0` and `1.0`, where `0.0` is 90 degrees to the left of the boat, and `1.0` is just slightly to the right/back of the boat.
 * To get the current boom position ratio, use GET_BOAT_BOOM_POSITION_RATIO
 * @param vehicle
 * @param ratio
 */
export function swingBoatBoomToRatio(vehicle: number, ratio: number): void { 
	return _in(0xf488c566, 0x413b4232, vehicle, _fv(ratio)); 
}

/**
 * Same as INIT_PC_SCRIPTED_CONTROLS
 * @param schemeName
 */
export function switchPcScriptedControls(schemeName: string): boolean { 
	return _in(0x4683149e, 0xd1dde7a1, _ts(schemeName), _r); 
}

/**
 * doesn't act normally when used on mount chilliad
 * Flags is a bitflag:
 * 2^n - Enabled Functionality:
 * 0 - Skip camera rotate up
 * 3 - Wait for SET_PLAYER_SWITCH_ESTABLISHING_SHOT / hang at last step. You will still need to run 0x74DE2E8739086740 to exit "properly" and then STOP_PLAYER_SWITCH
 * 6 - Invert Switch Direction (false = out, true = in)
 * 8 - Hang above ped
 * 
 * switchType: 0 - 3
 * 0: 1 step towards ped
 * 1: 3 steps out from ped
 * 2: 1 step out from ped
 * 3: 1 step towards ped
 * @param ped
 * @param flags
 * @param switchType
 */
export function switchToMultiFirstpart(ped: number, flags: number, switchType: number): void { 
	return _in(0xaab3200e, 0xd59016bc, ped, flags, switchType); 
}

export function switchToMultiSecondpart(ped: number): void { 
	return _in(0xd8295af6, 0x39fd9cb8, ped); 
}

/**
 * Toggles whether ambient trains can spawn on the specified track or not
 * 
 * `trackId` is the internal id of the train track to switch.
 * `state` is whether ambient trains can spawn or not
 * 
 * trackIds
 * 0 (`trains1.dat`) Main track around SA
 * 1 (`trains2.dat`) Davis Quartz Quarry branch
 * 2 (`trains3.dat`) Second track alongside live track along Roy Lewenstein Blv.
 * 3 (`trains4.dat`) Metro track circuit
 * 4 (`trains5.dat`) Branch in Mirror Park Railyard
 * 5 (`trains6.dat`) Branch in Mirror Park Railyard
 * 6 (`trains7.dat`) LS branch to Mirror Park Railyard
 * 7 (`trains8.dat`) Overground part of metro track along Forum Dr.
 * 8 (`trains9.dat`) Branch to Mirror Park Railyard
 * 9 (`trains10.dat`) Yankton train
 * 10 (`trains11.dat`) Part of metro track near mission row
 * 11 (`trains12.dat`) Yankton prologue mission train
 * Full list of all train tracks + track nodes by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/traintracks.json
 * @param trackId
 * @param state
 */
export function switchTrainTrack(trackId: number, state: boolean): void { 
	return _in(0xfd813bb7, 0xdb977f20, trackId, state); 
}

/**
 * Disables frontend (works in custom frontends, not sure about regular pause menu) navigation keys on keyboard. Not sure about controller. Does not disable mouse controls. No need to call this every tick.
 * 
 * To enable the keys again, use `0x14621BB1DF14E2B2`.
 */
export function takeControlOfFrontend(): void { 
	return _in(0xec926472, 0x7eec0f28); 
}

export function takeOwnershipOfSynchronizedScene(scene: number): void { 
	return _in(0xcd9cc7e2, 0x00a52a6f, scene); 
}

export function tan(p0: number): number { 
	return _in(0x632106cc, 0x96e82e91, _fv(p0), _r, _rf); 
}

/**
 * Makes the specified ped achieve the specified heading.
 * 
 * pedHandle: The handle of the ped to assign the task to.
 * heading: The desired heading.
 * timeout: The time, in milliseconds, to allow the task to complete. If the task times out, it is cancelled, and the ped will stay at the heading it managed to reach in the time.
 * @param ped
 * @param heading
 * @param timeout
 */
export function taskAchieveHeading(ped: number, heading: number, timeout: number): void { 
	return _in(0x93b93a37, 0x987f1f3d, ped, _fv(heading), timeout); 
}

export function taskAgitatedActionConfrontResponse(ped: number, ped2: number): void { 
	return _in(0x19d1b791, 0xcb3670fe, ped, ped2); 
}

export function taskAimGunAtCoord(ped: number, x: number, y: number, z: number, time: number, instantBlendToAim: boolean, playAnimIntro: boolean): void { 
	return _in(0x6671f3ee, 0xc681bda1, ped, _fv(x), _fv(y), _fv(z), time, instantBlendToAim, playAnimIntro); 
}

/**
 * duration: the amount of time in milliseconds to do the task.  -1 will keep the task going until either another task is applied, or CLEAR_ALL_TASKS() is called with the ped
 * @param ped
 * @param entity
 * @param duration
 * @param instantBlendToAim
 */
export function taskAimGunAtEntity(ped: number, entity: number, duration: number, instantBlendToAim: boolean): void { 
	return _in(0x9b53bb6e, 0x8943af53, ped, entity, duration, instantBlendToAim); 
}

export function taskAimGunScripted(ped: number, scriptTask: number, disableBlockingClip: boolean, instantBlendToAim: boolean): void { 
	return _in(0x7a192be1, 0x6d373d00, ped, _ch(scriptTask), disableBlockingClip, instantBlendToAim); 
}

export function taskAimGunScriptedWithTarget(ped: number, target: number, x: number, y: number, z: number, gunTaskType: number, disableBlockingClip: boolean, forceAim: boolean): void { 
	return _in(0x8605af0d, 0xe8b3a5ac, ped, target, _fv(x), _fv(y), _fv(z), gunTaskType, disableBlockingClip, forceAim); 
}

/**
 * Example from "me_amanda1.ysc.c4":
 * TASK::TASK_ARREST_PED(l_19F  -- [[ This is a Ped ]]  , PLAYER::PLAYER_PED_ID());
 * 
 * Example from "armenian1.ysc.c4":
 * if (!PED::IS_PED_INJURED(l_B18[0 -- [[1]] ])) {
 * TASK::TASK_ARREST_PED(l_B18[0 -- [[1]] ], PLAYER::PLAYER_PED_ID());
 * }
 * 
 * I would love to have time to experiment to see if a player Ped can arrest another Ped. Might make for a good cop mod.
 * 
 * 
 * Looks like only the player can be arrested this way. Peds react and try to arrest you if you task them, but the player charater doesn't do anything if tasked to arrest another ped.
 * @param ped
 * @param target
 */
export function taskArrestPed(ped: number, target: number): void { 
	return _in(0xf3b9a78a, 0x178572b1, ped, target); 
}

/**
 * You need to call PED::SET_BLOCKING_OF_NON_TEMPORARY_EVENTS after TASK_BOAT_MISSION in order for the task to execute.
 * 
 * Working example
 * float vehicleMaxSpeed = VEHICLE::GET_VEHICLE_ESTIMATED_MAX_SPEED(ENTITY::GET_ENTITY_MODEL(pedVehicle));
 * TASK::TASK_BOAT_MISSION(pedDriver, pedVehicle, 0, 0, waypointCoord.x, waypointCoord.y, waypointCoord.z, 4, vehicleMaxSpeed, 786469, -1.0, 7);
 * PED::SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(pedDriver, 1);
 * 
 * P8 appears to be driving style flag - see gtaforums.com/topic/822314-guide-driving-styles/ for documentation
 * @param pedDriver
 * @param vehicle
 * @param targetVehicle
 * @param targetPed
 * @param x
 * @param y
 * @param z
 * @param mission
 * @param maxSpeed
 * @param drivingStyle
 * @param targetReached
 * @param boatFlags
 */
export function taskBoatMission(pedDriver: number, vehicle: number, targetVehicle: number, targetPed: number, x: number, y: number, z: number, mission: number, maxSpeed: number, drivingStyle: number, targetReached: number, boatFlags: number): void { 
	return _in(0x15c86013, 0x127ce63f, pedDriver, vehicle, targetVehicle, targetPed, _fv(x), _fv(y), _fv(z), mission, _fv(maxSpeed), drivingStyle, _fv(targetReached), boatFlags); 
}

/**
 * p2 tend to be 16, 17 or 1
 * p3 to p7 tend to be 0.0
 * @param ped
 * @param target
 * @param flags
 * @param goToLocationX
 * @param goToLocationY
 * @param goToLocationZ
 * @param headingDegs
 * @param idleTime
 */
export function taskChatToPed(ped: number, target: number, flags: number, goToLocationX: number, goToLocationY: number, goToLocationZ: number, headingDegs: number, idleTime: number): void { 
	return _in(0x8c338e02, 0x63e4fd19, ped, target, flags, _fv(goToLocationX), _fv(goToLocationY), _fv(goToLocationZ), _fv(headingDegs), _fv(idleTime)); 
}

export function taskClearDefensiveArea(ped: number): void { 
	return _in(0x95a6c46a, 0x31d1917d, ped); 
}

export function taskClearLookAt(ped: number): void { 
	return _in(0x0f804f1d, 0xb19b9689, ped); 
}

/**
 * Climbs or vaults the nearest thing.
 * usePlayerLaunchForce is unused.
 * @param ped
 * @param usePlayerLaunchForce
 */
export function taskClimb(ped: number, usePlayerLaunchForce: boolean): void { 
	return _in(0x89d9fcc2, 0x435112f1, ped, usePlayerLaunchForce); 
}

export function taskClimbLadder(ped: number, fast: boolean): void { 
	return _in(0xb6c987f9, 0x285a3814, ped, fast); 
}

/**
 * Despite its name, it only attacks ONE hated target. The one closest hated target.
 * 
 * p2 seems to be always 0
 * @param ped
 * @param radius
 * @param combatFlags
 */
export function taskCombatHatedTargetsAroundPed(ped: number, radius: number, combatFlags: number): void { 
	return _in(0x7bf835bb, 0x9e2698c8, ped, _fv(radius), combatFlags); 
}

export function taskCombatHatedTargetsAroundPedTimed(ped: number, radius: number, time: number, combatFlags: number): void { 
	return _in(0x2bba30b8, 0x54534a0c, ped, _fv(radius), time, combatFlags); 
}

/**
 * Despite its name, it only attacks ONE hated target. The one closest to the specified position.
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param combatFlags
 */
export function taskCombatHatedTargetsInArea(ped: number, x: number, y: number, z: number, radius: number, combatFlags: number): void { 
	return _in(0x4cf5f55d, 0xac3280a0, ped, _fv(x), _fv(y), _fv(z), _fv(radius), combatFlags); 
}

/**
 * Makes the specified ped attack the target ped.
 * p2 should be 0
 * p3 should be 16
 * @param ped
 * @param targetPed
 * @param combatFlags
 * @param threatResponseFlags
 */
export function taskCombatPed(ped: number, targetPed: number, combatFlags: number, threatResponseFlags: number): void { 
	return _in(0xf166e484, 0x07bac484, ped, targetPed, combatFlags, threatResponseFlags); 
}

export function taskCombatPedTimed(ped: number, target: number, time: number, flags: number): void { 
	return _in(0x944f30dc, 0xb7096bde, ped, target, time, flags); 
}

export function taskCower(ped: number, duration: number): void { 
	return _in(0x3eb1fe9e, 0x8e908e15, ped, duration); 
}

/**
 * Example:
 * 
 * TASK::TASK_DRIVE_BY(l_467[1 -- [[22]] ], PLAYER::PLAYER_PED_ID(), 0, 0.0, 0.0, 2.0, 300.0, 100, 0, ${firing_pattern_burst_fire_driveby});
 * 
 * 
 * 
 * 
 * Needs working example. Doesn't seem to do anything.
 * 
 * I marked p2 as targetVehicle as all these shooting related tasks seem to have that in common.
 * I marked p6 as distanceToShoot as if you think of GTA's Logic with the native SET_VEHICLE_SHOOT natives, it won't shoot till it gets within a certain distance of the target.
 * I marked p7 as pedAccuracy as it seems it's mostly 100 (Completely Accurate), 75, 90, etc. Although this could be the ammo count within the gun, but I highly doubt it. I will change this comment once I find out if it's ammo count or not.
 * @param driverPed
 * @param targetPed
 * @param targetVehicle
 * @param targetX
 * @param targetY
 * @param targetZ
 * @param distanceToShoot
 * @param pedAccuracy
 * @param pushUnderneathDrivingTaskIfDriving
 * @param firingPattern
 */
export function taskDriveBy(driverPed: number, targetPed: number, targetVehicle: number, targetX: number, targetY: number, targetZ: number, distanceToShoot: number, pedAccuracy: number, pushUnderneathDrivingTaskIfDriving: boolean, firingPattern: number): void { 
	return _in(0x2f8af0e8, 0x2773a171, driverPed, targetPed, targetVehicle, _fv(targetX), _fv(targetY), _fv(targetZ), _fv(distanceToShoot), pedAccuracy, pushUnderneathDrivingTaskIfDriving, _ch(firingPattern)); 
}

/**
 * speed 1.0 = walk, 2.0 = run
 * p5 1 = normal, 3 = teleport to vehicle, 16 = teleport directly into vehicle
 * p6 is always 0
 * 
 * Usage of seat
 * -1 = driver
 * 0 = passenger
 * 1 = left back seat
 * 2 = right back seat
 * 3 = outside left
 * 4 = outside right
 * @param ped
 * @param vehicle
 * @param timeout
 * @param seat
 * @param speed
 * @param flag
 * @param overrideEntryClipsetName
 * @param p7
 */
export function taskEnterVehicle(ped: number, vehicle: number, timeout: number, seat: number, speed: number, flag: number, overrideEntryClipsetName: string, p7: number): void { 
	return _in(0xc20e50aa, 0x46d09ca8, ped, vehicle, timeout, seat, _fv(speed), flag, _ts(overrideEntryClipsetName), p7); 
}

export function taskEveryoneLeaveVehicle(vehicle: number): void { 
	return _in(0x7f93691a, 0xb4b92272, vehicle); 
}

/**
 * p1 is 1, 2, or 3 in scripts
 * @param ped
 * @param exitType
 * @param x
 * @param y
 * @param z
 */
export function taskExitCover(ped: number, exitType: number, x: number, y: number, z: number): void { 
	return _in(0x79b258e3, 0x97854d29, ped, exitType, _fv(x), _fv(y), _fv(z)); 
}

/**
 * MulleKD19: Adds a new point to the current point route. Call TASK_FLUSH_ROUTE before the first call to this. Call TASK_FOLLOW_POINT_ROUTE to make the Ped go the route.
 * 
 * A maximum of 8 points can be added.
 * @param x
 * @param y
 * @param z
 */
export function taskExtendRoute(x: number, y: number, z: number): void { 
	return _in(0x1e788977, 0x8264843a, _fv(x), _fv(y), _fv(z)); 
}

/**
 * MulleKD19: Clears the current point route. Call this before TASK_EXTEND_ROUTE and TASK_FOLLOW_POINT_ROUTE.
 */
export function taskFlushRoute(): void { 
	return _in(0x841142a1, 0x376e9006); 
}

/**
 * If no timeout, set timeout to -1.
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param moveBlendRatio
 * @param time
 * @param targetRadius
 * @param flags
 * @param targetHeading
 */
export function taskFollowNavMeshToCoord(ped: number, x: number, y: number, z: number, moveBlendRatio: number, time: number, targetRadius: number, flags: number, targetHeading: number): void { 
	return _in(0x15d3a79d, 0x4e44b913, ped, _fv(x), _fv(y), _fv(z), _fv(moveBlendRatio), time, _fv(targetRadius), flags, _fv(targetHeading)); 
}

export function taskFollowNavMeshToCoordAdvanced(ped: number, x: number, y: number, z: number, moveBlendRatio: number, time: number, targetRadius: number, flags: number, slideToCoordHeading: number, maxSlopeNavigable: number, clampMaxSearchDistance: number, targetHeading: number): void { 
	return _in(0x17f58b88, 0xd085dbac, ped, _fv(x), _fv(y), _fv(z), _fv(moveBlendRatio), time, _fv(targetRadius), flags, _fv(slideToCoordHeading), _fv(maxSlopeNavigable), _fv(clampMaxSearchDistance), _fv(targetHeading)); 
}

/**
 * MulleKD19: Makes the ped go on the created point route.
 * 
 * ped: The ped to give the task to.
 * speed: The speed to move at in m/s.
 * int: Unknown. Can be 0, 1, 2 or 3.
 * 
 * Example:
 * TASK_FLUSH_ROUTE();
 * TASK_EXTEND_ROUTE(0f, 0f, 70f);
 * TASK_EXTEND_ROUTE(10f, 0f, 70f);
 * TASK_EXTEND_ROUTE(10f, 10f, 70f);
 * TASK_FOLLOW_POINT_ROUTE(GET_PLAYER_PED(), 1f, 0);
 * @param ped
 * @param speed
 * @param mode
 */
export function taskFollowPointRoute(ped: number, speed: number, mode: number): void { 
	return _in(0x59558328, 0x1858626e, ped, _fv(speed), mode); 
}

/**
 * p6 always -1
 * p7 always 10.0
 * p8 always 1
 * @param ped
 * @param entity
 * @param offsetX
 * @param offsetY
 * @param offsetZ
 * @param movementSpeed
 * @param timeout
 * @param stoppingRange
 * @param persistFollowing
 */
export function taskFollowToOffsetOfEntity(ped: number, entity: number, offsetX: number, offsetY: number, offsetZ: number, movementSpeed: number, timeout: number, stoppingRange: number, persistFollowing: boolean): void { 
	return _in(0x304ae42e, 0x357b8c7e, ped, entity, _fv(offsetX), _fv(offsetY), _fv(offsetZ), _fv(movementSpeed), timeout, _fv(stoppingRange), persistFollowing); 
}

export function taskFollowWaypointRecording(ped: number, name: string, p2: number, p3: number, p4: number): void { 
	return _in(0x07595918, 0x19534f7b, ped, _ts(name), p2, p3, p4); 
}

/**
 * p2 always false
 * 
 * [30/03/2017] ins1de :
 * 
 * See FORCE_PED_MOTION_STATE
 * @param ped
 * @param state
 * @param forceRestart
 */
export function taskForceMotionState(ped: number, state: number, forceRestart: boolean): void { 
	return _in(0x4f056e1a, 0xffef17ab, ped, _ch(state), forceRestart); 
}

export function taskGetOffBoat(ped: number, boat: number): void { 
	return _in(0x9c00e77a, 0xf14b2dff, ped, boat); 
}

export function taskGoStraightToCoord(ped: number, x: number, y: number, z: number, speed: number, timeout: number, targetHeading: number, distanceToSlide: number): void { 
	return _in(0xd76b57b4, 0x4f1e6f8b, ped, _fv(x), _fv(y), _fv(z), _fv(speed), timeout, _fv(targetHeading), _fv(distanceToSlide)); 
}

export function taskGoStraightToCoordRelativeToEntity(ped: number, entity: number, x: number, y: number, z: number, moveBlendRatio: number, time: number): void { 
	return _in(0x61e360b7, 0xe040d12e, ped, entity, _fv(x), _fv(y), _fv(z), _fv(moveBlendRatio), time); 
}

/**
 * The ped will walk or run towards goToLocation, aiming towards goToLocation or focusLocation (depending on the aimingFlag) and shooting if shootAtEnemies = true to any enemy in his path.
 * 
 * If the ped is closer than noRoadsDistance, the ped will ignore pathing/navmesh and go towards goToLocation directly. This could cause the ped to get stuck behind tall walls if the goToLocation is on the other side. To avoid this, use 0.0f and the ped will always use pathing/navmesh to reach his destination.
 * 
 * If the speed is set to 0.0f, the ped will just stand there while aiming, if set to 1.0f he will walk while aiming, 2.0f will run while aiming.
 * 
 * The ped will stop aiming when he is closer than distanceToStopAt to goToLocation.
 * 
 * I still can't figure out what unkTrue is used for. I don't notice any difference if I set it to false but in the decompiled scripts is always true.
 * 
 * I think that unkFlag, like the driving styles, could be a flag that "work as a list of 32 bits converted to a decimal integer. Each bit acts as a flag, and enables or disables a function". What leads me to this conclusion is the fact that in the decompiled scripts, unkFlag takes values like: 0, 1, 5 (101 in binary) and 4097 (4096 + 1 or 1000000000001 in binary). For now, I don't know what behavior enable or disable this possible flag so I leave it at 0.
 * 
 * Note: After some testing, using unkFlag = 16 (0x10) enables the use of sidewalks while moving towards goToLocation.
 * 
 * The aimingFlag takes 2 values: 0 to aim at the focusLocation, 1 to aim at where the ped is heading (goToLocation).
 * 
 * Example:
 * 
 * enum AimFlag
 * {
 * AimAtFocusLocation,
 * AimAtGoToLocation
 * };
 * 
 * Vector3 goToLocation1 = { 996.2867f, 0, -2143.044f, 0, 28.4763f, 0 }; // remember the padding.
 * 
 * Vector3 goToLocation2 = { 990.2867f, 0, -2140.044f, 0, 28.4763f, 0 }; // remember the padding.
 * 
 * Vector3 focusLocation = { 994.3478f, 0, -2136.118f, 0, 29.2463f, 0 }; // the coord z should be a little higher, around +1.0f to avoid aiming at the ground
 * 
 * // 1st example
 * TASK::TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD(pedHandle, goToLocation1.x, goToLocation1.y, goToLocation1.z, focusLocation.x, focusLocation.y, focusLocation.z, 2.0f  -- [[run]] , true  -- [[shoot]] , 3.0f  -- [[stop at]] , 0.0f  -- [[noRoadsDistance]] , true  -- [[always true]] , 0  -- [[possible flag]] , AimFlag::AimAtGoToLocation, -957453492  -- [[FullAuto pattern]] );
 * 
 * // 2nd example
 * TASK::TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD(pedHandle, goToLocation2.x, goToLocation2.y, goToLocation2.z, focusLocation.x, focusLocation.y, focusLocation.z, 1.0f  -- [[walk]] , false  -- [[don't shoot]] , 3.0f  -- [[stop at]] , 0.0f  -- [[noRoadsDistance]] , true  -- [[always true]] , 0  -- [[possible flag]] , AimFlag::AimAtFocusLocation, -957453492  -- [[FullAuto pattern]] );
 * 
 * 
 * 1st example: The ped (pedhandle) will run towards goToLocation1. While running and aiming towards goToLocation1, the ped will shoot on sight to any enemy in his path, using "FullAuto" firing pattern. The ped will stop once he is closer than distanceToStopAt to goToLocation1.
 * 
 * 2nd example: The ped will walk towards goToLocation2. This time, while walking towards goToLocation2 and aiming at focusLocation, the ped will point his weapon on sight to any enemy in his path without shooting. The ped will stop once he is closer than distanceToStopAt to goToLocation2.
 * @param pedHandle
 * @param goToLocationX
 * @param goToLocationY
 * @param goToLocationZ
 * @param focusLocationX
 * @param focusLocationY
 * @param focusLocationZ
 * @param speed
 * @param shootAtEnemies
 * @param distanceToStopAt
 * @param noRoadsDistance
 * @param useNavMesh
 * @param navFlags
 * @param taskFlags
 * @param firingPattern
 */
export function taskGoToCoordAndAimAtHatedEntitiesNearCoord(pedHandle: number, goToLocationX: number, goToLocationY: number, goToLocationZ: number, focusLocationX: number, focusLocationY: number, focusLocationZ: number, speed: number, shootAtEnemies: boolean, distanceToStopAt: number, noRoadsDistance: number, useNavMesh: boolean, navFlags: number, taskFlags: number, firingPattern: number): void { 
	return _in(0xa5554780, 0x1eb331fc, pedHandle, _fv(goToLocationX), _fv(goToLocationY), _fv(goToLocationZ), _fv(focusLocationX), _fv(focusLocationY), _fv(focusLocationZ), _fv(speed), shootAtEnemies, _fv(distanceToStopAt), _fv(noRoadsDistance), useNavMesh, navFlags, taskFlags, _ch(firingPattern)); 
}

/**
 * example from fm_mission_controller
 * 
 * TASK::TASK_GO_TO_COORD_ANY_MEANS(l_649, sub_f7e86(-1, 0), 1.0, 0, 0, 786603, 0xbf800000);
 * 
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param moveBlendRatio
 * @param vehicle
 * @param useLongRangeVehiclePathing
 * @param drivingFlags
 * @param maxRangeToShootTargets
 */
export function taskGoToCoordAnyMeans(ped: number, x: number, y: number, z: number, moveBlendRatio: number, vehicle: number, useLongRangeVehiclePathing: boolean, drivingFlags: number, maxRangeToShootTargets: number): void { 
	return _in(0x5bc448cb, 0x78fa3e88, ped, _fv(x), _fv(y), _fv(z), _fv(moveBlendRatio), vehicle, useLongRangeVehiclePathing, drivingFlags, _fv(maxRangeToShootTargets)); 
}

export function taskGoToCoordAnyMeansExtraParams(ped: number, x: number, y: number, z: number, moveBlendRatio: number, vehicle: number, useLongRangeVehiclePathing: boolean, drivingFlags: number, maxRangeToShootTargets: number, extraVehToTargetDistToPreferVehicle: number, driveStraightLineDistance: number, extraFlags: number, warpTimerMS: number): void { 
	return _in(0x1dd45f9e, 0xcfdb1bc9, ped, _fv(x), _fv(y), _fv(z), _fv(moveBlendRatio), vehicle, useLongRangeVehiclePathing, drivingFlags, _fv(maxRangeToShootTargets), _fv(extraVehToTargetDistToPreferVehicle), _fv(driveStraightLineDistance), extraFlags, _fv(warpTimerMS)); 
}

export function taskGoToCoordAnyMeansExtraParamsWithCruiseSpeed(ped: number, x: number, y: number, z: number, moveBlendRatio: number, vehicle: number, useLongRangeVehiclePathing: boolean, drivingFlags: number, maxRangeToShootTargets: number, extraVehToTargetDistToPreferVehicle: number, driveStraightLineDistance: number, extraFlags: number, cruiseSpeed: number, targetArriveDist: number): void { 
	return _in(0xb8ecd61f, 0x531a7b02, ped, _fv(x), _fv(y), _fv(z), _fv(moveBlendRatio), vehicle, useLongRangeVehiclePathing, drivingFlags, _fv(maxRangeToShootTargets), _fv(extraVehToTargetDistToPreferVehicle), _fv(driveStraightLineDistance), extraFlags, _fv(cruiseSpeed), _fv(targetArriveDist)); 
}

/**
 * movement_speed: mostly 2f, but also 1/1.2f, etc.
 * p8: always false
 * p9: 2f
 * p10: 0.5f
 * p11: true
 * p12: 0 / 512 / 513, etc.
 * p13: 0
 * firing_pattern: ${firing_pattern_full_auto}, 0xC6EE6B4C
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param aimAtX
 * @param aimAtY
 * @param aimAtZ
 * @param moveBlendRatio
 * @param shoot
 * @param targetRadius
 * @param slowDistance
 * @param useNavMesh
 * @param navFlags
 * @param instantBlendToAim
 * @param firingPattern
 */
export function taskGoToCoordWhileAimingAtCoord(ped: number, x: number, y: number, z: number, aimAtX: number, aimAtY: number, aimAtZ: number, moveBlendRatio: number, shoot: boolean, targetRadius: number, slowDistance: number, useNavMesh: boolean, navFlags: number, instantBlendToAim: boolean, firingPattern: number): void { 
	return _in(0x11315ab3, 0x385b8ac0, ped, _fv(x), _fv(y), _fv(z), _fv(aimAtX), _fv(aimAtY), _fv(aimAtZ), _fv(moveBlendRatio), shoot, _fv(targetRadius), _fv(slowDistance), useNavMesh, navFlags, instantBlendToAim, _ch(firingPattern)); 
}

export function taskGoToCoordWhileAimingAtEntity(ped: number, x: number, y: number, z: number, aimAtID: number, moveBlendRatio: number, shoot: boolean, targetRadius: number, slowDistance: number, useNavMesh: boolean, navFlags: number, instantBlendToAim: boolean, firingPattern: number, time: number): void { 
	return _in(0xb2a16444, 0xead9ae47, ped, _fv(x), _fv(y), _fv(z), aimAtID, _fv(moveBlendRatio), shoot, _fv(targetRadius), _fv(slowDistance), useNavMesh, navFlags, instantBlendToAim, _ch(firingPattern), time); 
}

/**
 * The entity will move towards the target until time is over (duration) or get in target's range (distance). p5 and p6 are unknown, but you could leave p5 = 1073741824 or 100 or even 0 (didn't see any difference but on the decompiled scripts, they use 1073741824 mostly) and p6 = 0
 * 
 * Note: I've only tested it on entity -> ped and target -> vehicle. It could work differently on other entities, didn't try it yet.
 * 
 * Example: TASK::TASK_GO_TO_ENTITY(pedHandle, vehicleHandle, 5000, 4.0, 100, 1073741824, 0)
 * 
 * Ped will run towards the vehicle for 5 seconds and stop when time is over or when he gets 4 meters(?) around the vehicle (with duration = -1, the task duration will be ignored).
 * 
 * enum EGOTO_ENTITY_SCRIPT_FLAGS
 * {
 * EGOTO_ENTITY_NEVER_SLOW_FOR_PATH_LENGTH = 0x01,
 * };
 * @param entity
 * @param target
 * @param duration
 * @param distance
 * @param moveBlendRatio
 * @param slowDownDistance
 * @param flags
 */
export function taskGoToEntity(entity: number, target: number, duration: number, distance: number, moveBlendRatio: number, slowDownDistance: number, flags: number): void { 
	return _in(0x6a071245, 0xeb0d1882, entity, target, duration, _fv(distance), _fv(moveBlendRatio), _fv(slowDownDistance), flags); 
}

export function taskGoToEntityWhileAimingAtCoord(ped: number, entity: number, aimX: number, aimY: number, aimZ: number, moveBlendRatio: number, shoot: boolean, targetRadius: number, slowDistance: number, useNavMesh: boolean, instantBlendToAim: boolean, firingPattern: number): void { 
	return _in(0x04701832, 0xb739dce5, ped, entity, _fv(aimX), _fv(aimY), _fv(aimZ), _fv(moveBlendRatio), shoot, _fv(targetRadius), _fv(slowDistance), useNavMesh, instantBlendToAim, _ch(firingPattern)); 
}

/**
 * shootatEntity:
 * If true, peds will shoot at Entity till it is dead.
 * If false, peds will just walk till they reach the entity and will cease shooting.
 * @param ped
 * @param entityToWalkTo
 * @param entityToAimAt
 * @param speed
 * @param shootatEntity
 * @param targetRadius
 * @param slowDistance
 * @param useNavMesh
 * @param instantBlendToAim
 * @param firingPattern
 */
export function taskGoToEntityWhileAimingAtEntity(ped: number, entityToWalkTo: number, entityToAimAt: number, speed: number, shootatEntity: boolean, targetRadius: number, slowDistance: number, useNavMesh: boolean, instantBlendToAim: boolean, firingPattern: number): void { 
	return _in(0x97465886, 0xd35210e9, ped, entityToWalkTo, entityToAimAt, _fv(speed), shootatEntity, _fv(targetRadius), _fv(slowDistance), useNavMesh, instantBlendToAim, _ch(firingPattern)); 
}

/**
 * eg
 * 
 * TASK::TASK_GOTO_ENTITY_AIMING(v_2, PLAYER::PLAYER_PED_ID(), 5.0, 25.0);
 * 
 * ped = Ped you want to perform this task.
 * target = the Entity they should aim at.
 * distanceToStopAt = distance from the target, where the ped should stop to aim.
 * StartAimingDist = distance where the ped should start to aim.
 * @param ped
 * @param target
 * @param distanceToStopAt
 * @param StartAimingDist
 */
export function taskGotoEntityAiming(ped: number, target: number, distanceToStopAt: number, StartAimingDist: number): void { 
	return _in(0xa9da48fa, 0xb8a76c12, ped, target, _fv(distanceToStopAt), _fv(StartAimingDist)); 
}

/**
 * enum ESEEK_ENTITY_OFFSET_FLAGS
 * {
 * ESEEK_OFFSET_ORIENTATES_WITH_ENTITY = 0x01,
 * ESEEK_KEEP_TO_PAVEMENTS = 0x02
 * };
 * @param ped
 * @param entity
 * @param time
 * @param seekRadius
 * @param seekAngleDeg
 * @param moveBlendRatio
 * @param gotoEntityOffsetFlags
 */
export function taskGotoEntityOffset(ped: number, entity: number, time: number, seekRadius: number, seekAngleDeg: number, moveBlendRatio: number, gotoEntityOffsetFlags: number): void { 
	return _in(0xe39b4ff4, 0xfdebde27, ped, entity, time, _fv(seekRadius), _fv(seekAngleDeg), _fv(moveBlendRatio), gotoEntityOffsetFlags); 
}

export function taskGotoEntityOffsetXy(ped: number, entity: number, duration: number, targetRadius: number, offsetX: number, offsetY: number, moveBlendRatio: number, gotoEntityOffsetFlags: number): void { 
	return _in(0x338e7ef5, 0x2b6095a9, ped, entity, duration, _fv(targetRadius), _fv(offsetX), _fv(offsetY), _fv(moveBlendRatio), gotoEntityOffsetFlags); 
}

export function taskGuardAssignedDefensiveArea(ped: number, x: number, y: number, z: number, heading: number, maxPatrolProximity: number, timer: number): void { 
	return _in(0xd2a207ee, 0xbdf9889b, ped, _fv(x), _fv(y), _fv(z), _fv(heading), _fv(maxPatrolProximity), timer); 
}

/**
 * From re_prisonvanbreak:
 * 
 * TASK::TASK_GUARD_CURRENT_POSITION(l_DD, 35.0, 35.0, 1);
 * @param ped
 * @param maxPatrolProximity
 * @param defensiveAreaRadius
 * @param setDefensiveArea
 */
export function taskGuardCurrentPosition(ped: number, maxPatrolProximity: number, defensiveAreaRadius: number, setDefensiveArea: boolean): void { 
	return _in(0x4a58a47a, 0x72e3fcb4, ped, _fv(maxPatrolProximity), _fv(defensiveAreaRadius), setDefensiveArea); 
}

export function taskGuardSphereDefensiveArea(ped: number, defendPositionX: number, defendPositionY: number, defendPositionZ: number, heading: number, maxPatrolProximity: number, time: number, x: number, y: number, z: number, defensiveAreaRadius: number): void { 
	return _in(0xc946fe14, 0xbe0eb5e2, ped, _fv(defendPositionX), _fv(defendPositionY), _fv(defendPositionZ), _fv(heading), _fv(maxPatrolProximity), time, _fv(x), _fv(y), _fv(z), _fv(defensiveAreaRadius)); 
}

/**
 * In the scripts, p3 was always -1.
 * 
 * p3 seems to be duration or timeout of turn animation.
 * Also facingPed can be 0 or -1 so ped will just raise hands up.
 * @param ped
 * @param duration
 * @param facingPed
 * @param timeToFacePed
 * @param flags
 */
export function taskHandsUp(ped: number, duration: number, facingPed: number, timeToFacePed: number, flags: number): void { 
	return _in(0xf2eab319, 0x79a7f910, ped, duration, facingPed, timeToFacePed, flags); 
}

/**
 * Ped pilot should be in a heli.
 * EntityToFollow can be a vehicle or Ped.
 * 
 * x,y,z appear to be how close to the EntityToFollow the heli should be. Scripts use 0.0, 0.0, 80.0. Then the heli tries to position itself 80 units above the EntityToFollow. If you reduce it to -5.0, it tries to go below (if the EntityToFollow is a heli or plane)
 * 
 * 
 * NOTE: If the pilot finds enemies, it will engage them, then remain there idle, not continuing to chase the Entity given.
 * @param pilot
 * @param entityToFollow
 * @param x
 * @param y
 * @param z
 */
export function taskHeliChase(pilot: number, entityToFollow: number, x: number, y: number, z: number): void { 
	return _in(0xac83b1db, 0x38d0ada0, pilot, entityToFollow, _fv(x), _fv(y), _fv(z)); 
}

export function taskHeliEscortHeli(pilot: number, heli1: number, heli2: number, offsetX: number, offsetY: number, offsetZ: number): void { 
	return _in(0xb3855233, 0x25077210, pilot, heli1, heli2, _fv(offsetX), _fv(offsetY), _fv(offsetZ)); 
}

/**
 * Must have targetVehicle, targetPed, OR destination X/Y/Z set
 * Will follow targeted vehicle/ped, or fly to destination
 * Set whichever is not being used to 0
 * 
 * 
 * Mission mode type:
 * - 4, 7: Forces heli to snap to the heading if set, flies to destination or tracks specified entity (mode 4 only works for coordinates, 7 works for coordinates OR ped/vehicle)
 * - 6: Attacks the target ped/vehicle with mounted weapons. If radius is set, will maintain that distance from target.
 * - 8: Makes the heli flee from the ped/vehicle/coordinate
 * - 9: Circles around target ped/vehicle, snaps to angle if set. Behavior flag (last parameter) of 2048 switches from counter-clockwise to clockwise circling. Does not work with coordinate destination.
 * - 10, 11: Follows ped/vehicle target and imitates target heading. Only works with ped/vehicle target, not coord target
 * - 19: Heli lands at specified coordinate, ignores heading (lands facing whatever direction it is facing when the task is started)
 * - 20: Makes the heli land when near target ped. It won't resume chasing.
 * - 21: Emulates a helicopter crash
 * - 23: makes the heli circle erratically around ped
 * 
 * 
 * Heli will fly at maxSpeed (up to actual maximum speed defined by the model's handling config)
 * You can use SET_DRIVE_TASK_CRUISE_SPEED to modulate the speed based on distance to the target without having to re-invoke the task native. Setting to 8.0 when close to the destination results in a much smoother approach.
 * 
 * If minHeight and maxHeight are set, heli will fly between those specified elevations, relative to ground level and any obstructions/buildings below. You can specify -1 for either if you only want to specify one. Usually it is easiest to leave maxHeight at -1, and specify a reasonable minHeight to ensure clearance over any obstacles. Note this MUST be passed as an INT, not a FLOAT.
 * 
 * Radius affects how closely the heli will follow tracked ped/vehicle, and when circling (mission type 9) sets the radius (in meters) that it will circle the target from
 * 
 * Heading is -1.0 for default behavior, which will point the nose of the helicopter towards the destination. Set a heading and the heli will lock to that direction when near its destination/target, but may still turn towards the destination when flying at higher speed from a further distance.
 * 
 * Behavior Flags is a bitwise value that modifies the AI behavior. Not clear what all flags do, but here are some guesses/notes:
 * 1: Forces heading to face E
 * 2: Unknown
 * 4: Tight circles around coordinate destination
 * 8: Unknown
 * 16: Circles around coordinate destination facing towards destination
 * 32: Flys to normally, then lands at coordinate destination and stays on the ground (using mission type 4)
 * 64: Ignores obstacles when flying, will follow at specified minHeight above ground level but will not avoid buildings, vehicles, etc.
 * 128: Unknown
 * 256: Unknown
 * 512: Unknown
 * 1024: Unknown
 * 2048: Reverses direction of circling (mission type 9) to clockwise
 * 4096: Hugs closer to the ground, maintains minHeight from ground generally, but barely clears buildings and dips down more between buildings instead of taking a more efficient/safe route
 * 8192: Unknown
 * 
 * Unk3 is a float value, you may see -1082130432 for this value in decompiled native scripts, this is the equivalent to -1.0f. Seems to affect acceleration/aggressiveness, but not sure exactly how it works. Higher value seems to result in lower acceleration/less aggressive flying. Almost always -1.0 in native scripts, occasionally 20.0 or 50.0. Setting to 400.0 seems to work well for making the pilot not overshoot the destination when using coordinate destination.
 * 
 * Notes updated by PNWParksFan, May 2021
 * 
 * @param pilot
 * @param aircraft
 * @param targetVehicle
 * @param targetPed
 * @param destinationX
 * @param destinationY
 * @param destinationZ
 * @param missionFlag
 * @param maxSpeed
 * @param radius
 * @param targetHeading
 * @param maxHeight
 * @param minHeight
 * @param slowDownDistance
 * @param behaviorFlags
 */
export function taskHeliMission(pilot: number, aircraft: number, targetVehicle: number, targetPed: number, destinationX: number, destinationY: number, destinationZ: number, missionFlag: number, maxSpeed: number, radius: number, targetHeading: number, maxHeight: number, minHeight: number, slowDownDistance: number, behaviorFlags: number): void { 
	return _in(0xdad029e1, 0x87a2beb4, pilot, aircraft, targetVehicle, targetPed, _fv(destinationX), _fv(destinationY), _fv(destinationZ), missionFlag, _fv(maxSpeed), _fv(radius), _fv(targetHeading), maxHeight, minHeight, _fv(slowDownDistance), behaviorFlags); 
}

/**
 * Definition is wrong. This has 4 parameters (Not sure when they were added. v350 has 2, v678 has 4).
 * 
 * v350: Ped ped, bool unused
 * v678: Ped ped, bool unused, bool flag1, bool flag2
 * 
 * flag1 = super jump, flag2 = do nothing if flag1 is false and doubles super jump height if flag1 is true.
 * @param ped
 * @param usePlayerLaunchForce
 * @param doSuperJump
 * @param useFullSuperJumpForce
 */
export function taskJump(ped: number, usePlayerLaunchForce: boolean, doSuperJump: boolean, useFullSuperJumpForce: boolean): void { 
	return _in(0x0ae40861, 0x04e067b1, ped, usePlayerLaunchForce, doSuperJump, useFullSuperJumpForce); 
}

/**
 * Flags are the same flags used in TASK_LEAVE_VEHICLE
 * @param ped
 * @param delayTime
 * @param flags
 */
export function taskLeaveAnyVehicle(ped: number, delayTime: number, flags: number): void { 
	return _in(0x504d54df, 0x3f6f2247, ped, delayTime, flags); 
}

/**
 * Flags from decompiled scripts:
 * 0 = normal exit and closes door.
 * 1 = normal exit and closes door.
 * 16 = teleports outside, door kept closed.
 * 64 = normal exit and closes door, maybe a bit slower animation than 0.
 * 256 = normal exit but does not close the door.
 * 4160 = ped is throwing himself out, even when the vehicle is still.
 * 262144 = ped moves to passenger seat first, then exits normally
 * 
 * Others to be tried out: 320, 512, 131072.
 * @param ped
 * @param vehicle
 * @param flags
 */
export function taskLeaveVehicle(ped: number, vehicle: number, flags: number): void { 
	return _in(0xd3dbce61, 0xa490be02, ped, vehicle, flags); 
}

/**
 * enum eScriptLookatFlags
 * {
 * SLF_SLOW_TURN_RATE            = 1,    // turn the head toward the target slowly
 * SLF_FAST_TURN_RATE            = 2,    // turn the head toward the target quickly
 * SLF_EXTEND_YAW_LIMIT        = 4,    // wide yaw head limits
 * SLF_EXTEND_PITCH_LIMIT        = 8,    // wide pitch head limit
 * SLF_WIDEST_YAW_LIMIT        = 16,   // widest yaw head limit
 * SLF_WIDEST_PITCH_LIMIT        = 32,   // widest pitch head limit
 * SLF_NARROW_YAW_LIMIT        = 64,   // narrow yaw head limits
 * SLF_NARROW_PITCH_LIMIT        = 128,  // narrow pitch head limit
 * SLF_NARROWEST_YAW_LIMIT        = 256,  // narrowest yaw head limit
 * SLF_NARROWEST_PITCH_LIMIT    = 512,  // narrowest pitch head limit
 * SLF_USE_TORSO                = 1024, // use the torso aswell as the neck and head (currently disabled)
 * SLF_WHILE_NOT_IN_FOV        = 2048, // keep tracking the target even if they are not in the hard coded FOV
 * SLF_USE_CAMERA_FOCUS        = 4096, // use the camera as the target
 * SLF_USE_EYES_ONLY            = 8192, // only track the target with the eyes
 * SLF_USE_LOOK_DIR            = 16384, // use information in look dir DOF
 * SLF_FROM_SCRIPT                = 32768, // internal use only
 * SLF_USE_REF_DIR_ABSOLUTE    = 65536  // use absolute reference direction mode for solver
 * };
 * @param entity
 * @param x
 * @param y
 * @param z
 * @param duration
 * @param flags
 * @param priority
 */
export function taskLookAtCoord(entity: number, x: number, y: number, z: number, duration: number, flags: number, priority: number): void { 
	return _in(0x6fa46612, 0x594f7973, entity, _fv(x), _fv(y), _fv(z), duration, flags, priority); 
}

/**
 * For flags, please refer to TASK_LOOK_AT_COORD.
 * @param ped
 * @param lookAt
 * @param duration
 * @param flags
 * @param priority
 */
export function taskLookAtEntity(ped: number, lookAt: number, duration: number, flags: number, priority: number): void { 
	return _in(0x69f4be8c, 0x8cc4796c, ped, lookAt, duration, flags, priority); 
}

/**
 * Example:
 * TASK::TASK_MOVE_NETWORK_ADVANCED_BY_NAME(PLAYER::PLAYER_PED_ID(), "minigame_tattoo_michael_parts", 324.13f, 181.29f, 102.6f, 0.0f, 0.0f, 22.32f, 2, 0, false, 0, 0);
 * @param ped
 * @param network
 * @param x
 * @param y
 * @param z
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param rotOrder
 * @param blendDuration
 * @param allowOverrideCloneUpdate
 * @param animDict
 * @param flags
 */
export function taskMoveNetworkAdvancedByName(ped: number, network: string, x: number, y: number, z: number, rotX: number, rotY: number, rotZ: number, rotOrder: number, blendDuration: number, allowOverrideCloneUpdate: boolean, animDict: string, flags: number): void { 
	return _in(0xd5b35bea, 0x41919acb, ped, _ts(network), _fv(x), _fv(y), _fv(z), _fv(rotX), _fv(rotY), _fv(rotZ), rotOrder, _fv(blendDuration), allowOverrideCloneUpdate, _ts(animDict), flags); 
}

export function taskMoveNetworkAdvancedByNameWithInitParams(ped: number, network: string, x: number, y: number, z: number, rotX: number, rotY: number, rotZ: number, rotOrder: number, blendDuration: number, allowOverrideCloneUpdate: boolean, dictionary: string, flags: number): number { 
	return _in(0x29682e2c, 0xcf21e9b5, ped, _ts(network), _i, _fv(x), _fv(y), _fv(z), _fv(rotX), _fv(rotY), _fv(rotZ), rotOrder, _fv(blendDuration), allowOverrideCloneUpdate, _ts(dictionary), flags); 
}

/**
 * Example:
 * TASK::TASK_MOVE_NETWORK_BY_NAME(PLAYER::PLAYER_PED_ID(), "arm_wrestling_sweep_paired_a_rev3", 0.0f, true, "mini@arm_wrestling", 0);
 * @param ped
 * @param task
 * @param multiplier
 * @param allowOverrideCloneUpdate
 * @param animDict
 * @param flags
 */
export function taskMoveNetworkByName(ped: number, task: string, multiplier: number, allowOverrideCloneUpdate: boolean, animDict: string, flags: number): void { 
	return _in(0x2d537ba1, 0x94896636, ped, _ts(task), _fv(multiplier), allowOverrideCloneUpdate, _ts(animDict), flags); 
}

/**
 * Used only once in the scripts (am_mp_nightclub)
 * @param ped
 * @param network
 * @param initialParameters
 * @param blendDuration
 * @param allowOverrideCloneUpdate
 * @param animDict
 * @param flags
 */
export function taskMoveNetworkByNameWithInitParams(ped: number, network: string, blendDuration: number, allowOverrideCloneUpdate: boolean, animDict: string, flags: number): number { 
	return _in(0x3d45b0b3, 0x55c5e0c9, ped, _ts(network), _i, _fv(blendDuration), allowOverrideCloneUpdate, _ts(animDict), flags); 
}

/**
 * The given ped will try to open the nearest door to 'seat'.
 * Example: telling the ped to open the door for the driver seat does not necessarily mean it will open the driver door, it may choose to open the passenger door instead if that one is closer.
 * @param ped
 * @param vehicle
 * @param timeOut
 * @param seat
 * @param speed
 */
export function taskOpenVehicleDoor(ped: number, vehicle: number, timeOut: number, seat: number, speed: number): void { 
	return _in(0x965791a9, 0xa488a062, ped, vehicle, timeOut, seat, _fv(speed)); 
}

/**
 * Second parameter is unused.
 * 
 * second parameter was for jetpack in the early stages of gta and the hard coded code is now removed
 * @param ped
 * @param giveParachuteItem
 * @param instant
 */
export function taskParachute(ped: number, giveParachuteItem: boolean, instant: boolean): void { 
	return _in(0xd2f1c53c, 0x97ee81ab, ped, giveParachuteItem, instant); 
}

/**
 * makes ped parachute to coords x y z. Works well with PATHFIND::GET_SAFE_COORD_FOR_PED
 * @param ped
 * @param x
 * @param y
 * @param z
 */
export function taskParachuteToTarget(ped: number, x: number, y: number, z: number): void { 
	return _in(0xb33e291a, 0xfa6bd03a, ped, _fv(x), _fv(y), _fv(z)); 
}

/**
 * After looking at some scripts the second parameter seems to be an id of some kind. Here are some I found from some R* scripts:
 * 
 * "miss_Tower_01" (this went from 01 - 10)
 * "miss_Ass0" (0, 4, 6, 3)
 * "MISS_PATROL_8"
 * 
 * I think they're patrol routes, but I'm not sure. And I believe the 3rd parameter is a BOOL, but I can't confirm other than only seeing 0 and 1 being passed.
 * 
 * 
 * As far as I can see the patrol routes names such as "miss_Ass0" have been defined earlier in the scripts. This leads me to believe we can defined our own new patrol routes by following the same approach.
 * From the scripts
 * 
 * TASK::OPEN_PATROL_ROUTE("miss_Ass0");
 * TASK::ADD_PATROL_ROUTE_NODE(0, "WORLD_HUMAN_GUARD_STAND", l_738[0 -- [[3]] ], -139.4076690673828, -993.4732055664062, 26.2754, MISC::GET_RANDOM_INT_IN_RANGE(5000, 10000));
 * TASK::ADD_PATROL_ROUTE_NODE(1, "WORLD_HUMAN_GUARD_STAND", l_738[1 -- [[3]] ], -116.1391830444336, -987.4984130859375, 26.38541030883789, MISC::GET_RANDOM_INT_IN_RANGE(5000, 10000));
 * TASK::ADD_PATROL_ROUTE_NODE(2, "WORLD_HUMAN_GUARD_STAND", l_738[2 -- [[3]] ], -128.46847534179688, -979.0340576171875, 26.2754, MISC::GET_RANDOM_INT_IN_RANGE(5000, 10000));
 * TASK::ADD_PATROL_ROUTE_LINK(0, 1);
 * TASK::ADD_PATROL_ROUTE_LINK(1, 2);
 * TASK::ADD_PATROL_ROUTE_LINK(2, 0);
 * TASK::CLOSE_PATROL_ROUTE();
 * TASK::CREATE_PATROL_ROUTE();
 * 
 * 
 * @param ped
 * @param patrolRouteName
 * @param alertState
 * @param canChatToPeds
 * @param useHeadLookAt
 */
export function taskPatrol(ped: number, patrolRouteName: string, alertState: number, canChatToPeds: boolean, useHeadLookAt: boolean): void { 
	return _in(0xbda5df49, 0xd080fe4e, ped, _ts(patrolRouteName), alertState, canChatToPeds, useHeadLookAt); 
}

/**
 * Stand still (?)
 * @param ped
 * @param ms
 */
export function taskPause(ped: number, ms: number): void { 
	return _in(0xe73a266d, 0xb0ca9042, ped, ms); 
}

export function taskPedSlideToCoord(ped: number, x: number, y: number, z: number, heading: number, speed: number): void { 
	return _in(0xd04fe676, 0x5d990a06, ped, _fv(x), _fv(y), _fv(z), _fv(heading), _fv(speed)); 
}

export function taskPedSlideToCoordHdgRate(ped: number, x: number, y: number, z: number, heading: number, speed: number, headingChangeRate: number): void { 
	return _in(0x5a4a6a6d, 0x3dc64f52, ped, _fv(x), _fv(y), _fv(z), _fv(heading), _fv(speed), _fv(headingChangeRate)); 
}

export function taskPerformSequence(ped: number, taskSequenceId: number): void { 
	return _in(0x5aba3986, 0xd90d8a3b, ped, taskSequenceId); 
}

export function taskPerformSequenceFromProgress(ped: number, taskIndex: number, progress1: number, progress2: number): void { 
	return _in(0x89221b16, 0x730234f0, ped, taskIndex, progress1, progress2); 
}

export function taskPerformSequenceLocally(ped: number, taskSequenceId: number): void { 
	return _in(0x8c33220c, 0x8d78ca0d, ped, taskSequenceId); 
}

export function taskPlaneChase(pilot: number, entityToFollow: number, x: number, y: number, z: number): void { 
	return _in(0x2d2386f2, 0x73ff7a25, pilot, entityToFollow, _fv(x), _fv(y), _fv(z)); 
}

export function taskPlaneGotoPreciseVtol(ped: number, vehicle: number, x: number, y: number, z: number, flightHeight: number, minHeightAboveTerrain: number, useDesiredOrientation: boolean, desiredOrientation: number, autopilot: boolean): void { 
	return _in(0xf7f9dcca, 0x89e7505b, ped, vehicle, _fv(x), _fv(y), _fv(z), flightHeight, minHeightAboveTerrain, useDesiredOrientation, _fv(desiredOrientation), autopilot); 
}

export function taskPlaneLand(pilot: number, plane: number, runwayStartX: number, runwayStartY: number, runwayStartZ: number, runwayEndX: number, runwayEndY: number, runwayEndZ: number): void { 
	return _in(0xbf19721f, 0xa34d32c0, pilot, plane, _fv(runwayStartX), _fv(runwayStartY), _fv(runwayStartZ), _fv(runwayEndX), _fv(runwayEndY), _fv(runwayEndZ)); 
}

/**
 * EXAMPLE USAGE:
 * 
 * Fly around target (Precautiously, keeps high altitude):
 * Function.Call(Hash.TASK_PLANE_MISSION, pilot, selectedAirplane, 0, 0, Target.X, Target.Y, Target.Z, 4, 100f, 0f, 90f, 0, 200f);
 * 
 * Fly around target (Dangerously, keeps VERY low altitude):
 * Function.Call(Hash.TASK_PLANE_MISSION, pilot, selectedAirplane, 0, 0, Target.X, Target.Y, Target.Z, 4, 100f, 0f, 90f, 0, -500f);
 * 
 * Fly directly into target:
 * Function.Call(Hash.TASK_PLANE_MISSION, pilot, selectedAirplane, 0, 0, Target.X, Target.Y, Target.Z, 4, 100f, 0f, 90f, 0, -5000f);
 * 
 * EXPANDED INFORMATION FOR ADVANCED USAGE (custom pilot)
 * 
 * 'physicsSpeed': (THIS IS NOT YOUR ORDINARY SPEED PARAMETER: READ!!)
 * Think of this -first- as a radius value, not a true speed value.  The ACTUAL effective speed of the plane will be that of the maximum speed permissible to successfully fly in a -circle- with a radius of 'physicsSpeed'.  This also means that the plane must complete a circle before it can begin its "bombing run", its straight line pass towards the target.  p9 appears to influence the angle at which a "bombing run" begins, although I can't confirm yet.
 * 
 * VERY IMPORTANT: A "bombing run" will only occur if a plane can successfully determine a possible navigable route (the slower the value of 'physicsSpeed', the more precise the pilot can be due to less influence of physics on flightpath).  Otherwise, the pilot will continue to patrol around Destination (be it a dynamic Entity position vector or a fixed world coordinate vector.)
 * 
 * 0 = Plane's physics are almost entirely frozen, plane appears to "orbit" around precise destination point
 * 1-299 = Blend of "frozen, small radius" vs. normal vs. "accelerated, hyperfast, large radius"
 * 300+ =  Vehicle behaves entirely like a normal gameplay plane.
 * 
 * 'patrolBlend' (The lower the value, the more the Destination is treated as a "fly AT" rather than a "fly AROUND point".)
 * 
 * Scenario: Destination is an Entity on ground level, wide open field
 * -5000 = Pilot kamikazes directly into Entity
 * -1000 = Pilot flies extremely low -around- Entity, very prone to crashing
 * -200 = Pilot flies lower than average around Entity.
 * 0 = Pilot flies around Entity, normal altitude
 * 200 = Pilot flies an extra eighty units or so higher than 0 while flying around Destination (this doesn't seem to correlate directly into distance units.)
 * 
 * -- Valid mission types found in the exe: --
 * 
 * 0 = None
 * 1 = Unk
 * 2 = CTaskVehicleRam
 * 3 = CTaskVehicleBlock
 * 4 = CTaskVehicleGoToPlane
 * 5 = CTaskVehicleStop
 * 6 = CTaskVehicleAttack
 * 7 = CTaskVehicleFollow
 * 8 = CTaskVehicleFleeAirborne
 * 9= CTaskVehicleCircle
 * 10 = CTaskVehicleEscort
 * 15 = CTaskVehicleFollowRecording
 * 16 = CTaskVehiclePoliceBehaviour
 * 17 = CTaskVehicleCrash
 * @param pilot
 * @param aircraft
 * @param targetVehicle
 * @param targetPed
 * @param destinationX
 * @param destinationY
 * @param destinationZ
 * @param missionFlag
 * @param angularDrag
 * @param targetReached
 * @param targetHeading
 * @param maxZ
 * @param minZ
 * @param precise
 */
export function taskPlaneMission(pilot: number, aircraft: number, targetVehicle: number, targetPed: number, destinationX: number, destinationY: number, destinationZ: number, missionFlag: number, angularDrag: number, targetReached: number, targetHeading: number, maxZ: number, minZ: number, precise: boolean): void { 
	return _in(0x23703cd1, 0x54e83b88, pilot, aircraft, targetVehicle, targetPed, _fv(destinationX), _fv(destinationY), _fv(destinationZ), missionFlag, _fv(angularDrag), _fv(targetReached), _fv(targetHeading), _fv(maxZ), _fv(minZ), precise); 
}

export function taskPlaneTaxi(pilot: number, aircraft: number, x: number, y: number, z: number, cruiseSpeed: number, targetReached: number): void { 
	return _in(0x92c360b5, 0xf15d2302, pilot, aircraft, _fv(x), _fv(y), _fv(z), _fv(cruiseSpeed), _fv(targetReached)); 
}

export function taskPlantBomb(ped: number, x: number, y: number, z: number, heading: number): void { 
	return _in(0x965fec69, 0x1d55e9bf, ped, _fv(x), _fv(y), _fv(z), _fv(heading)); 
}

/**
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * 
 * float speed > normal speed is 8.0f
 * ----------------------
 * 
 * float speedMultiplier > multiply the playback speed
 * ----------------------
 * 
 * int duration: time in millisecond
 * ----------------------
 * -1 _ _ _ _ _ _ _> Default (see flag)
 * 0 _ _ _ _ _ _ _ > Not play at all
 * Small value _ _ > Slow down animation speed
 * Other _ _ _ _ _ > freeze player control until specific time (ms) has
 * _ _ _ _ _ _ _ _ _ passed. (No effect if flag is set to be
 * _ _ _ _ _ _ _ _ _ controllable.)
 * 
 * int flag:
 * ----------------------
 * enum eAnimationFlags
 * {
 * ANIM_FLAG_NORMAL = 0,
 * ANIM_FLAG_REPEAT = 1,
 * ANIM_FLAG_STOP_LAST_FRAME = 2,
 * ANIM_FLAG_UPPERBODY = 16,
 * ANIM_FLAG_ENABLE_PLAYER_CONTROL = 32,
 * ANIM_FLAG_CANCELABLE = 120,
 * };
 * Odd number : loop infinitely
 * Even number : Freeze at last frame
 * Multiple of 4: Freeze at last frame but controllable
 * 
 * 01 to 15 > Full body
 * 10 to 31 > Upper body
 * 32 to 47 > Full body > Controllable
 * 48 to 63 > Upper body > Controllable
 * ...
 * 001 to 255 > Normal
 * 256 to 511 > Garbled
 * ...
 * 
 * playbackRate:
 * 
 * values are between 0.0 and 1.0
 * 
 * 
 * lockX:
 * 
 * 0 in most cases 1 for rcmepsilonism8 and rcmpaparazzo_3
 * > 1 for mini@sprunk
 * 
 * 
 * lockY:
 * 
 * 0 in most cases
 * 1 for missfam5_yoga, missfra1mcs_2_crew_react
 * 
 * 
 * lockZ:
 * 
 * 0 for single player
 * Can be 1 but only for MP
 * @param ped
 * @param animDictionary
 * @param animationName
 * @param blendInSpeed
 * @param blendOutSpeed
 * @param duration
 * @param flag
 * @param playbackRate
 * @param lockX
 * @param lockY
 * @param lockZ
 */
export function taskPlayAnim(ped: number, animDictionary: string, animationName: string, blendInSpeed: number, blendOutSpeed: number, duration: number, flag: number, playbackRate: number, lockX: boolean, lockY: boolean, lockZ: boolean): void { 
	return _in(0xea47fe37, 0x19165b94, ped, _ts(animDictionary), _ts(animationName), _fv(blendInSpeed), _fv(blendOutSpeed), duration, flag, _fv(playbackRate), lockX, lockY, lockZ); 
}

/**
 * It's similar to TASK_PLAY_ANIM, except the first 6 floats let you specify the initial position and rotation of the task. (Ped gets teleported to the position).
 * 
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param ped
 * @param animDict
 * @param animName
 * @param posX
 * @param posY
 * @param posZ
 * @param rotX
 * @param rotY
 * @param rotZ
 * @param animEnterSpeed
 * @param animExitSpeed
 * @param duration
 * @param flag
 * @param animTime
 * @param rotOrder
 * @param ikFlags
 */
export function taskPlayAnimAdvanced(ped: number, animDict: string, animName: string, posX: number, posY: number, posZ: number, rotX: number, rotY: number, rotZ: number, animEnterSpeed: number, animExitSpeed: number, duration: number, flag: number, animTime: number, rotOrder: number, ikFlags: number): void { 
	return _in(0x83cdb10e, 0xa29b370b, ped, _ts(animDict), _ts(animName), _fv(posX), _fv(posY), _fv(posZ), _fv(rotX), _fv(rotY), _fv(rotZ), _fv(animEnterSpeed), _fv(animExitSpeed), duration, flag, _fv(animTime), rotOrder, ikFlags); 
}

/**
 * Example from the scripts:
 * TASK::TASK_PLAY_PHONE_GESTURE_ANIMATION(PLAYER::PLAYER_PED_ID(), v_3, v_2, v_4, 0.25, 0.25, 0, 0);
 * 
 * =========================================================
 * ^^ No offense, but Idk how that would really help anyone.
 * 
 * As for the animDict & animation, they're both store in a global in all 5 scripts. So if anyone would be so kind as to read that global and comment what strings they use. Thanks.
 * 
 * Known boneMaskTypes'
 * "BONEMASK_HEADONLY"
 * "BONEMASK_HEAD_NECK_AND_ARMS"
 * "BONEMASK_HEAD_NECK_AND_L_ARM"
 * "BONEMASK_HEAD_NECK_AND_R_ARM"
 * 
 * p4 known args - 0.0f, 0.5f, 0.25f
 * p5 known args - 0.0f, 0.25f
 * p6 known args - 1 if a global if check is passed.
 * p7 known args - 1 if a global if check is passed.
 * 
 * The values found above, I found within the 5 scripts this is ever called in. (fmmc_launcher, fm_deathmatch_controller, fm_impromptu_dm_controller, fm_mission_controller, and freemode).
 * =========================================================
 * 
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param ped
 * @param animDict
 * @param animation
 * @param boneMaskType
 * @param blendInDuration
 * @param blendOutDuration
 * @param isLooping
 * @param holdLastFrame
 */
export function taskPlayPhoneGestureAnimation(ped: number, animDict: string, animation: string, boneMaskType: string, blendInDuration: number, blendOutDuration: number, isLooping: boolean, holdLastFrame: boolean): void { 
	return _in(0x8fbb6758, 0xb3b3e9ec, ped, _ts(animDict), _ts(animation), _ts(boneMaskType), _fv(blendInDuration), _fv(blendOutDuration), isLooping, holdLastFrame); 
}

export function taskPutPedDirectlyIntoCover(ped: number, x: number, y: number, z: number, time: number, allowPeekingAndFiring: boolean, blendInDuration: number, forceInitialFacingDirection: boolean, forceFaceLeft: boolean, identifier: number, doEntry: boolean): void { 
	return _in(0x4172393e, 0x6be1fece, ped, _fv(x), _fv(y), _fv(z), time, allowPeekingAndFiring, _fv(blendInDuration), forceInitialFacingDirection, forceFaceLeft, identifier, doEntry); 
}

/**
 * from armenian3.c4
 * 
 * TASK::TASK_PUT_PED_DIRECTLY_INTO_MELEE(PlayerPed, armenianPed, 0.0, -1.0, 0.0, 0);
 * 
 * @param ped
 * @param meleeTarget
 * @param blendInDuration
 * @param timeInMelee
 * @param strafePhaseSync
 * @param aiCombatFlags
 */
export function taskPutPedDirectlyIntoMelee(ped: number, meleeTarget: number, blendInDuration: number, timeInMelee: number, strafePhaseSync: number, aiCombatFlags: number): void { 
	return _in(0x1c6cd14a, 0x876ffe39, ped, meleeTarget, _fv(blendInDuration), _fv(timeInMelee), _fv(strafePhaseSync), aiCombatFlags); 
}

/**
 * Attaches a ped to a rope and allows player control to rappel down a wall. Disables all collisions while on the rope.
 * p10: Usually 1 in the scripts, clipSet: Clipset to use for the task, minZ: Minimum Z that the player can descend to, ropeHandle: Rope to attach this task to created with ADD_ROPE
 * @param ped
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param minZ
 * @param ropeHandle
 * @param clipSet
 * @param p10
 * @param p11
 */
export function taskRappelDownWallUsingClipsetOverride(ped: number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, minZ: number, ropeHandle: number, clipSet: string, p10: number, p11: number): void { 
	return _in(0xeaf66acd, 0xdc794793, ped, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _fv(minZ), ropeHandle, _ts(clipSet), p10, p11); 
}

/**
 * minHeightAboveGround: the minimum height above ground the heli must be at before the ped can start rappelling
 * 
 * Only appears twice in the scripts.
 * 
 * TASK::TASK_RAPPEL_FROM_HELI(PLAYER::PLAYER_PED_ID(), 10.0f);
 * TASK::TASK_RAPPEL_FROM_HELI(a_0, 10.0f);
 * @param ped
 * @param minHeightAboveGround
 */
export function taskRappelFromHeli(ped: number, minHeightAboveGround: number): void { 
	return _in(0x09693b03, 0x12f91649, ped, _fv(minHeightAboveGround)); 
}

export function taskReactAndFleePed(ped: number, fleeTarget: number): void { 
	return _in(0x72c89646, 0x4915d1b1, ped, fleeTarget); 
}

/**
 * The 2nd param (drawWeapon) is not implemented.
 * 
 * -----------------------------------------------------------------------
 * 
 * The only occurrence I found in a R* script ("assassin_construction.ysc.c4"):
 * 
 * if (((v_3 < v_4) && (TASK::GET_SCRIPT_TASK_STATUS(PLAYER::PLAYER_PED_ID(), 0x6a67a5cc) != 1)) && (v_5 > v_3)) {
 * TASK::TASK_RELOAD_WEAPON(PLAYER::PLAYER_PED_ID(), 1);
 * }
 * @param ped
 * @param drawWeapon
 */
export function taskReloadWeapon(ped: number, drawWeapon: boolean): void { 
	return _in(0x62d2916f, 0x56b9cd2d, ped, drawWeapon); 
}

/**
 * From fm_mission_controller.c:
 * reserve_network_mission_objects(get_num_reserved_mission_objects(0) + 1);
 * vVar28 = {0.094f, 0.02f, -0.005f};
 * vVar29 = {-92.24f, 63.64f, 150.24f};
 * func_253(&uVar30, joaat("prop_ld_case_01"), Global_1592429.imm_34757[iParam1 <268>], 1, 1, 0, 1);
 * set_entity_lod_dist(net_to_ent(uVar30), 500);
 * attach_entity_to_entity(net_to_ent(uVar30), iParam0, get_ped_bone_index(iParam0, 28422), vVar28, vVar29, 1, 0, 0, 0, 2, 1);
 * Var31.imm_4 = 1065353216;
 * Var31.imm_5 = 1065353216;
 * Var31.imm_9 = 1065353216;
 * Var31.imm_10 = 1065353216;
 * Var31.imm_14 = 1065353216;
 * Var31.imm_15 = 1065353216;
 * Var31.imm_17 = 1040187392;
 * Var31.imm_18 = 1040187392;
 * Var31.imm_19 = -1;
 * Var32.imm_4 = 1065353216;
 * Var32.imm_5 = 1065353216;
 * Var32.imm_9 = 1065353216;
 * Var32.imm_10 = 1065353216;
 * Var32.imm_14 = 1065353216;
 * Var32.imm_15 = 1065353216;
 * Var32.imm_17 = 1040187392;
 * Var32.imm_18 = 1040187392;
 * Var32.imm_19 = -1;
 * Var31 = 1;
 * Var31.imm_1 = "weapons@misc@jerrycan@mp_male";
 * Var31.imm_2 = "idle";
 * Var31.imm_20 = 1048633;
 * Var31.imm_4 = 0.5f;
 * Var31.imm_16 = get_hash_key("BONEMASK_ARMONLY_R");
 * task_scripted_animation(iParam0, &Var31, &Var32, &Var32, 0f, 0.25f);
 * set_model_as_no_longer_needed(joaat("prop_ld_case_01"));
 * remove_anim_dict("anim@heists@biolab@");
 * @param ped
 * @param priorityLowData
 * @param priorityMidData
 * @param priorityHighData
 * @param blendInDelta
 * @param blendOutDelta
 */
export function taskScriptedAnimation(ped: number, blendInDelta: number, blendOutDelta: number): [number, number, number] { 
	const [priorityLowData_out, priorityMidData_out, priorityHighData_out] = _in(0x126ef75f, 0x1e17abe5, ped, _i, _i, _i, _fv(blendInDelta), _fv(blendOutDelta));
	return [priorityLowData_out as number, priorityMidData_out as number, priorityHighData_out as number]; 
}

export function taskSeekCoverFromPed(ped: number, target: number, duration: number, allowPeekingAndFiring: boolean): void { 
	return _in(0x84d32b3b, 0xec531324, ped, target, duration, allowPeekingAndFiring); 
}

export function taskSeekCoverFromPos(ped: number, x: number, y: number, z: number, duration: number, allowPeekingAndFiring: boolean): void { 
	return _in(0x75ac2b60, 0x386d89f2, ped, _fv(x), _fv(y), _fv(z), duration, allowPeekingAndFiring); 
}

/**
 * p8 causes the ped to take the shortest route to the cover position. It may have something to do with navmesh or pathfinding mechanics.
 * 
 * from michael2:
 * TASK::TASK_SEEK_COVER_TO_COORDS(ped, 967.5164794921875, -2121.603515625, 30.479299545288086, 978.94677734375, -2125.84130859375, 29.4752, -1, 1);
 * 
 * 
 * appears to be shorter variation
 * from michael3:
 * TASK::TASK_SEEK_COVER_TO_COORDS(ped, -2231.011474609375, 263.6326599121094, 173.60195922851562, -1, 0);
 * @param ped
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param timeout
 * @param shortRoute
 */
export function taskSeekCoverToCoords(ped: number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, timeout: number, shortRoute: boolean): void { 
	return _in(0x39246a69, 0x58ef072c, ped, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), timeout, shortRoute); 
}

/**
 * p5 is always -1
 * @param ped
 * @param coverpoint
 * @param x
 * @param y
 * @param z
 * @param time
 * @param allowPeekingAndFiring
 */
export function taskSeekCoverToCoverPoint(ped: number, coverpoint: number, x: number, y: number, z: number, time: number, allowPeekingAndFiring: boolean): void { 
	return _in(0xd43d95c7, 0xa869447f, ped, coverpoint, _fv(x), _fv(y), _fv(z), time, allowPeekingAndFiring); 
}

/**
 * I cant believe I have to define this, this is one of the best natives.
 * 
 * It makes the ped ignore basically all shocking events around it. Occasionally the ped may comment or gesture, but other than that they just continue their daily activities. This includes shooting and wounding the ped. And - most importantly - they do not flee.
 * 
 * Since it is a task, every time the native is called the ped will stop for a moment.
 * @param ped
 * @param toggle
 */
export function taskSetBlockingOfNonTemporaryEvents(ped: number, toggle: boolean): void { 
	return _in(0x90d21561, 0x98831d69, ped, toggle); 
}

/**
 * p1 is always GET_HASH_KEY("empty") in scripts, for the rare times this is used
 * @param ped
 * @param decisionMakerId
 */
export function taskSetDecisionMaker(ped: number, decisionMakerId: number): void { 
	return _in(0xeb8517dd, 0xa73720da, ped, _ch(decisionMakerId)); 
}

export function taskSetSphereDefensiveArea(ped: number, x: number, y: number, z: number, radius: number): void { 
	return _in(0x933c0651, 0x8b52a9a4, ped, _fv(x), _fv(y), _fv(z), _fv(radius)); 
}

export function taskSharkCircleCoord(ped: number, x: number, y: number, z: number, moveBlendRatio: number, radius: number): void { 
	return _in(0x60a19cf8, 0x5ff4cefa, ped, _fv(x), _fv(y), _fv(z), _fv(moveBlendRatio), _fv(radius)); 
}

export function taskShockingEventReact(ped: number, eventHandle: number): void { 
	return _in(0x452419cb, 0xd838065b, ped, eventHandle); 
}

/**
 * Firing Pattern Hash Information: https://pastebin.com/Px036isB
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param duration
 * @param firingPattern
 */
export function taskShootAtCoord(ped: number, x: number, y: number, z: number, duration: number, firingPattern: number): void { 
	return _in(0x46a6cc01, 0xe0826106, ped, _fv(x), _fv(y), _fv(z), duration, _ch(firingPattern)); 
}

/**
 * //this part of the code is to determine at which entity the player is aiming, for example if you want to create a mod where you give orders to peds
 * Entity aimedentity;
 * Player player = PLAYER::PLAYER_ID();
 * PLAYER::_GET_AIMED_ENTITY(player, &aimedentity);
 * 
 * //bg is an array of peds
 * TASK::TASK_SHOOT_AT_ENTITY(bg[i], aimedentity, 5000, MISC::GET_HASH_KEY("FIRING_PATTERN_FULL_AUTO"));
 * 
 * in practical usage, getting the entity the player is aiming at and then task the peds to shoot at the entity, at a button press event would be better.
 * 
 * Firing Pattern Hash Information: https://pastebin.com/Px036isB
 * @param entity
 * @param target
 * @param duration
 * @param firingPattern
 */
export function taskShootAtEntity(entity: number, target: number, duration: number, firingPattern: number): void { 
	return _in(0x08da95e8, 0x298ae772, entity, target, duration, _ch(firingPattern)); 
}

/**
 * Makes the specified ped shuffle to the next vehicle seat.
 * The ped MUST be in a vehicle and the vehicle parameter MUST be the ped's current vehicle.
 * @param ped
 * @param vehicle
 * @param useAlternateShuffle
 */
export function taskShuffleToNextVehicleSeat(ped: number, vehicle: number, useAlternateShuffle: boolean): void { 
	return _in(0x7aa80209, 0xbda643eb, ped, vehicle, useAlternateShuffle); 
}

export function taskSkyDive(ped: number, instant: boolean): void { 
	return _in(0x601736cf, 0xe536b0a0, ped, instant); 
}

/**
 * Makes the specified ped flee the specified distance from the specified position.
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param distance
 * @param time
 * @param preferPavements
 * @param quitIfOutOfRange
 */
export function taskSmartFleeCoord(ped: number, x: number, y: number, z: number, distance: number, time: number, preferPavements: boolean, quitIfOutOfRange: boolean): void { 
	return _in(0x94587f17, 0xe9c365d5, ped, _fv(x), _fv(y), _fv(z), _fv(distance), time, preferPavements, quitIfOutOfRange); 
}

/**
 * Makes a ped run away from another ped (fleeTarget).
 * 
 * distance = ped will flee this distance.
 * fleeTime = ped will flee for this amount of time, set to "-1" to flee forever
 * @param ped
 * @param fleeTarget
 * @param safeDistance
 * @param fleeTime
 * @param preferPavements
 * @param updateToNearestHatedPed
 */
export function taskSmartFleePed(ped: number, fleeTarget: number, safeDistance: number, fleeTime: number, preferPavements: boolean, updateToNearestHatedPed: boolean): void { 
	return _in(0x22b0d0e3, 0x7ccb840d, ped, fleeTarget, _fv(safeDistance), fleeTime, preferPavements, updateToNearestHatedPed); 
}

/**
 * scenarioName example: "WORLD_HUMAN_GUARD_STAND"
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param heading
 * @param scenarioName
 */
export function taskStandGuard(ped: number, x: number, y: number, z: number, heading: number, scenarioName: string): void { 
	return _in(0xae032f8b, 0xba959e90, ped, _fv(x), _fv(y), _fv(z), _fv(heading), _ts(scenarioName)); 
}

/**
 * Makes the specified ped stand still for (time) milliseconds.
 * @param ped
 * @param time
 */
export function taskStandStill(ped: number, time: number): void { 
	return _in(0x919be13e, 0xed931959, ped, time); 
}

/**
 * Full list of ped scenarios by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenariosCompact.json
 * 
 * Also a few more listed at TASK::TASK_START_SCENARIO_IN_PLACE just above.
 * ---------------
 * The first parameter in every scenario has always been a Ped of some sort. The second like TASK_START_SCENARIO_IN_PLACE is the name of the scenario.
 * 
 * The next 4 parameters were harder to decipher. After viewing "hairdo_shop_mp.ysc.c4", and being confused from seeing the case in other scripts, they passed the first three of the arguments as one array from a function, and it looked like it was obviously x, y, and z.
 * 
 * I haven't seen the sixth parameter go to or over 360, making me believe that it is rotation, but I really can't confirm anything.
 * 
 * I have no idea what the last 3 parameters are, but I'll try to find out.
 * 
 * -going on the last 3 parameters, they appear to always be "0, 0, 1"
 * 
 * p6 -1 also used in scrips
 * 
 * p7 used for sitting scenarios
 * 
 * p8 teleports ped to position
 * @param ped
 * @param scenarioName
 * @param x
 * @param y
 * @param z
 * @param heading
 * @param duration
 * @param sittingScenario
 * @param teleport
 */
export function taskStartScenarioAtPosition(ped: number, scenarioName: string, x: number, y: number, z: number, heading: number, duration: number, sittingScenario: boolean, teleport: boolean): void { 
	return _in(0xfa4efc79, 0xf69d4f07, ped, _ts(scenarioName), _fv(x), _fv(y), _fv(z), _fv(heading), duration, sittingScenario, teleport); 
}

/**
 * Plays a scenario on a Ped at their current location.
 * 
 * unkDelay - Usually 0 or -1, doesn't seem to have any effect. Might be a delay between sequences.
 * playEnterAnim - Plays the "Enter" anim if true, otherwise plays the "Exit" anim. Scenarios that don't have any "Enter" anims won't play if this is set to true.
 * 
 * ----
 * 
 * From "am_hold_up.ysc.c4" at line 339:
 * 
 * TASK::TASK_START_SCENARIO_IN_PLACE(NETWORK::NET_TO_PED(l_8D._f4), sub_adf(), 0, 1);
 * 
 * I'm unsure of what the last two parameters are, however sub_adf() randomly returns 1 of 3 scenarios, those being:
 * WORLD_HUMAN_SMOKING
 * WORLD_HUMAN_HANG_OUT_STREET
 * WORLD_HUMAN_STAND_MOBILE
 * 
 * This makes sense, as these are what I commonly see when going by a liquor store.
 * -------------------------
 * List of scenarioNames: https://pastebin.com/6mrYTdQv
 * (^ Thank you so fucking much for this)
 * 
 * Also these:
 * WORLD_FISH_FLEE
 * DRIVE
 * WORLD_HUMAN_HIKER
 * WORLD_VEHICLE_ATTRACTOR
 * WORLD_VEHICLE_BICYCLE_MOUNTAIN
 * WORLD_VEHICLE_BIKE_OFF_ROAD_RACE
 * WORLD_VEHICLE_BIKER
 * WORLD_VEHICLE_CONSTRUCTION_PASSENGERS
 * WORLD_VEHICLE_CONSTRUCTION_SOLO
 * WORLD_VEHICLE_DRIVE_PASSENGERS
 * WORLD_VEHICLE_DRIVE_SOLO
 * WORLD_VEHICLE_EMPTY
 * WORLD_VEHICLE_PARK_PARALLEL
 * WORLD_VEHICLE_PARK_PERPENDICULAR_NOSE_IN
 * WORLD_VEHICLE_POLICE_BIKE
 * WORLD_VEHICLE_POLICE_CAR
 * WORLD_VEHICLE_POLICE_NEXT_TO_CAR
 * WORLD_VEHICLE_SALTON_DIRT_BIKE
 * WORLD_VEHICLE_TRUCK_LOGS
 * 
 * Full list of ped scenarios by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenariosCompact.json
 * @param ped
 * @param scenarioName
 * @param unkDelay
 * @param playEnterAnim
 */
export function taskStartScenarioInPlace(ped: number, scenarioName: string, unkDelay: number, playEnterAnim: boolean): void { 
	return _in(0x142a0242, 0x5ff02bd9, ped, _ts(scenarioName), unkDelay, playEnterAnim); 
}

/**
 * Makes the ped run to take cover
 * @param ped
 */
export function taskStayInCover(ped: number): void { 
	return _in(0xe5da8615, 0xa6180789, ped); 
}

/**
 * known "killTypes" are: "AR_stealth_kill_knife" and "AR_stealth_kill_a".
 * @param killer
 * @param target
 * @param stealthKillActionResultHash
 * @param desiredMoveBlendRatio
 * @param stealthFlags
 */
export function taskStealthKill(killer: number, target: number, stealthKillActionResultHash: number, desiredMoveBlendRatio: number, stealthFlags: number): void { 
	return _in(0xaa5dc055, 0x79d60bd9, killer, target, _ch(stealthKillActionResultHash), _fv(desiredMoveBlendRatio), stealthFlags); 
}

export function taskStopPhoneGestureAnimation(ped: number, blendOutOverride: number): void { 
	return _in(0x3fa00d4f, 0x4641bfae, ped, _fv(blendOutOverride)); 
}

/**
 * Used in am_vehicle_spawn.ysc and am_mp_submarine.ysc.
 * 
 * p0 is always 0, p5 is always 1
 * 
 * p1 is the vehicle handle of the submarine. Submarine must have a driver, but the ped handle is not passed to the native.
 * 
 * Speed can be set by calling SET_DRIVE_TASK_CRUISE_SPEED after
 * @param ped
 * @param submarine
 * @param x
 * @param y
 * @param z
 * @param autopilot
 */
export function taskSubmarineGotoAndStop(ped: number, submarine: number, x: number, y: number, z: number, autopilot: boolean): void { 
	return _in(0xc22b4057, 0x9a498ca4, ped, submarine, _fv(x), _fv(y), _fv(z), autopilot); 
}

export function taskSwapWeapon(ped: number, drawWeapon: boolean): void { 
	return _in(0xa21c5125, 0x5b205245, ped, drawWeapon); 
}

/**
 * This function is called on peds in vehicles.
 * 
 * anim: animation name
 * p2, p3, p4: "sweep_low", "sweep_med" or "sweep_high"
 * p5: no idea what it does but is usually -1
 * @param ped
 * @param animDict
 * @param lowAnimName
 * @param medAnimName
 * @param hiAnimName
 * @param runtime
 * @param targetEntity
 * @param turnRate
 * @param blendInDuration
 */
export function taskSweepAimEntity(ped: number, animDict: string, lowAnimName: string, medAnimName: string, hiAnimName: string, runtime: number, targetEntity: number, turnRate: number, blendInDuration: number): void { 
	return _in(0x2047c021, 0x58d6405a, ped, _ts(animDict), _ts(lowAnimName), _ts(medAnimName), _ts(hiAnimName), runtime, targetEntity, _fv(turnRate), _fv(blendInDuration)); 
}

export function taskSweepAimPosition(ped: number, animDict: string, lowAnimName: string, medAnimName: string, hiAnimName: string, runtime: number, x: number, y: number, z: number, turnRate: number, blendInDuration: number): void { 
	return _in(0x7afe8fdc, 0x10bc07d2, ped, _ts(animDict), _ts(lowAnimName), _ts(medAnimName), _ts(hiAnimName), runtime, _fv(x), _fv(y), _fv(z), _fv(turnRate), _fv(blendInDuration)); 
}

/**
 * TASK::TASK_SYNCHRONIZED_SCENE(ped, scene, "creatures@rottweiler@in_vehicle@std_car", "get_in", 1000.0, -8.0, 4, 0, 0x447a0000, 0);
 * 
 * Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
 * @param ped
 * @param scene
 * @param animDictionary
 * @param animationName
 * @param blendIn
 * @param blendOut
 * @param flags
 * @param ragdollBlockingFlags
 * @param moverBlendDelta
 * @param ikFlags
 */
export function taskSynchronizedScene(ped: number, scene: number, animDictionary: string, animationName: string, blendIn: number, blendOut: number, flags: number, ragdollBlockingFlags: number, moverBlendDelta: number, ikFlags: number): void { 
	return _in(0xeea92914, 0x1f699854, ped, scene, _ts(animDictionary), _ts(animationName), _fv(blendIn), _fv(blendOut), flags, ragdollBlockingFlags, _fv(moverBlendDelta), ikFlags); 
}

/**
 * In every case of this native, I've only seen the first parameter passed as 0, although I believe it's a Ped after seeing tasks around it using 0. That's because it's used in a Sequence Task.
 * 
 * The last 3 parameters are definitely coordinates after seeing them passed in other scripts, and even being used straight from the player's coordinates.
 * ---
 * It seems that - in the decompiled scripts - this native was used on a ped who was in a vehicle to throw a projectile out the window at the player. This is something any ped will naturally do if they have a throwable and they are doing driveby-combat (although not very accurately).
 * It is possible, however, that this is how SWAT throws smoke grenades at the player when in cover.
 * ----------------------------------------------------
 * The first comment is right it definately is the ped as if you look in script finale_heist2b.c line 59628 in Xbox Scripts atleast you will see task_throw_projectile and the first param is Local_559[2 <14>] if you look above it a little bit line 59622 give_weapon_to_ped uses the same exact param Local_559[2 <14>] and we all know the first param of that native is ped. So it guaranteed has to be ped. 0 just may mean to use your ped by default for some reason.
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param ignoreCollisionEntityIndex
 * @param createInvincibleProjectile
 */
export function taskThrowProjectile(ped: number, x: number, y: number, z: number, ignoreCollisionEntityIndex: number, createInvincibleProjectile: boolean): void { 
	return _in(0x7285951d, 0xbf6b5a51, ped, _fv(x), _fv(y), _fv(z), ignoreCollisionEntityIndex, createInvincibleProjectile); 
}

/**
 * used in sequence task
 * 
 * both parameters seems to be always 0
 * @param ped
 * @param toggleType
 */
export function taskToggleDuck(ped: number, toggleType: number): void { 
	return _in(0xac96609b, 0x9995edf8, ped, toggleType); 
}

/**
 * duration in milliseconds
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param duration
 */
export function taskTurnPedToFaceCoord(ped: number, x: number, y: number, z: number, duration: number): void { 
	return _in(0x1dda930a, 0x0ac38571, ped, _fv(x), _fv(y), _fv(z), duration); 
}

/**
 * duration: the amount of time in milliseconds to do the task. -1 will keep the task going until either another task is applied, or CLEAR_ALL_TASKS() is called with the ped
 * @param ped
 * @param entity
 * @param duration
 */
export function taskTurnPedToFaceEntity(ped: number, entity: number, duration: number): void { 
	return _in(0x5ad23d40, 0x115353ac, ped, entity, duration); 
}

/**
 * Actually has 3 params, not 2.
 * 
 * p0: Ped
 * p1: int (or bool?)
 * p2: int
 * @param ped
 * @param usePhone
 * @param desiredPhoneMode
 */
export function taskUseMobilePhone(ped: number, usePhone: boolean, desiredPhoneMode: number): void { 
	return _in(0xbd2a8ec3, 0xaf4de7db, ped, usePhone, desiredPhoneMode); 
}

export function taskUseMobilePhoneTimed(ped: number, duration: number): void { 
	return _in(0x5ee02954, 0xa14c69db, ped, duration); 
}

/**
 * p5 is always 0 in scripts
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param maxRange
 * @param timeToLeave
 */
export function taskUseNearestScenarioChainToCoord(ped: number, x: number, y: number, z: number, maxRange: number, timeToLeave: number): void { 
	return _in(0x9fda1b3d, 0x7e7028b3, ped, _fv(x), _fv(y), _fv(z), _fv(maxRange), timeToLeave); 
}

/**
 * p5 is always -1 or 0 in scripts
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param radius
 * @param timeToLeave
 */
export function taskUseNearestScenarioChainToCoordWarp(ped: number, x: number, y: number, z: number, radius: number, timeToLeave: number): void { 
	return _in(0x97a28e63, 0xf0ba5631, ped, _fv(x), _fv(y), _fv(z), _fv(radius), timeToLeave); 
}

/**
 * Updated variables
 * 
 * An alternative to TASK::TASK_USE_NEAREST_SCENARIO_TO_COORD_WARP. Makes the ped walk to the scenario instead.
 * @param ped
 * @param x
 * @param y
 * @param z
 * @param distance
 * @param duration
 */
export function taskUseNearestScenarioToCoord(ped: number, x: number, y: number, z: number, distance: number, duration: number): void { 
	return _in(0x277f471b, 0xa9db000b, ped, _fv(x), _fv(y), _fv(z), _fv(distance), duration); 
}

export function taskUseNearestScenarioToCoordWarp(ped: number, x: number, y: number, z: number, radius: number, timeToLeave: number): void { 
	return _in(0x58e2e0f2, 0x3f6b76c3, ped, _fv(x), _fv(y), _fv(z), _fv(radius), timeToLeave); 
}

export function taskVehicleAimAtCoord(ped: number, x: number, y: number, z: number): void { 
	return _in(0x447c1e9e, 0xf844bc0f, ped, _fv(x), _fv(y), _fv(z)); 
}

export function taskVehicleAimAtPed(ped: number, target: number): void { 
	return _in(0xe4188559, 0x2b08b097, ped, target); 
}

/**
 * chases targetEnt fast and aggressively
 * --
 * Makes ped (needs to be in vehicle) chase targetEnt.
 * @param driver
 * @param targetEnt
 */
export function taskVehicleChase(driver: number, targetEnt: number): void { 
	return _in(0x3c08a8e3, 0x0363b353, driver, targetEnt); 
}

/**
 * info about driving modes: https://gtaforums.com/topic/822314-guide-driving-styles/
 * @param ped
 * @param vehicle
 * @param x
 * @param y
 * @param z
 * @param speed
 * @param p6
 * @param vehicleModel
 * @param drivingMode
 * @param stopRange
 * @param straightLineDistance
 */
export function taskVehicleDriveToCoord(ped: number, vehicle: number, x: number, y: number, z: number, speed: number, p6: number, vehicleModel: number, drivingMode: number, stopRange: number, straightLineDistance: number): void { 
	return _in(0xe2a2aa2f, 0x659d77a7, ped, vehicle, _fv(x), _fv(y), _fv(z), _fv(speed), p6, _ch(vehicleModel), drivingMode, _fv(stopRange), _fv(straightLineDistance)); 
}

export function taskVehicleDriveToCoordLongrange(ped: number, vehicle: number, x: number, y: number, z: number, speed: number, driveMode: number, stopRange: number): void { 
	return _in(0x158bb33f, 0x920d360c, ped, vehicle, _fv(x), _fv(y), _fv(z), _fv(speed), driveMode, _fv(stopRange)); 
}

export function taskVehicleDriveWander(ped: number, vehicle: number, speed: number, drivingStyle: number): void { 
	return _in(0x48014295, 0x9d337d00, ped, vehicle, _fv(speed), drivingStyle); 
}

/**
 * Makes a ped follow the targetVehicle with <minDistance> in between.
 * 
 * note: minDistance is ignored if drivingstyle is avoiding traffic, but Rushed is fine.
 * 
 * Mode: The mode defines the relative position to the targetVehicle. The ped will try to position its vehicle there.
 * -1 = behind
 * 0 = ahead
 * 1 = left
 * 2 = right
 * 3 = back left
 * 4 = back right
 * 
 * if the target is closer than noRoadsDistance, the driver will ignore pathing/roads and follow you directly.
 * 
 * Driving Styles guide: gtaforums.com/topic/822314-guide-driving-styles/
 * @param ped
 * @param vehicle
 * @param targetVehicle
 * @param mode
 * @param speed
 * @param drivingStyle
 * @param minDistance
 * @param minHeightAboveTerrain
 * @param noRoadsDistance
 */
export function taskVehicleEscort(ped: number, vehicle: number, targetVehicle: number, mode: number, speed: number, drivingStyle: number, minDistance: number, minHeightAboveTerrain: number, noRoadsDistance: number): void { 
	return _in(0x0fa6e4b7, 0x5f302400, ped, vehicle, targetVehicle, mode, _fv(speed), drivingStyle, _fv(minDistance), minHeightAboveTerrain, _fv(noRoadsDistance)); 
}

/**
 * Makes a ped in a vehicle follow an entity (ped, vehicle, etc.)
 * 
 * drivingStyle: http://gtaforums.com/topic/822314-guide-driving-styles/
 * @param driver
 * @param vehicle
 * @param targetEntity
 * @param speed
 * @param drivingStyle
 * @param minDistance
 */
export function taskVehicleFollow(driver: number, vehicle: number, targetEntity: number, speed: number, drivingStyle: number, minDistance: number): void { 
	return _in(0xfc545a9f, 0x0626e3b6, driver, vehicle, targetEntity, _fv(speed), drivingStyle, minDistance); 
}

/**
 * 
 * 
 * p2 = Waypoint recording string (found in update\update.rpf\x64\levels\gta5\waypointrec.rpf
 * p3 = 786468
 * p4 = 0
 * p5 = 16
 * p6 = -1 (angle?)
 * p7/8/9 = usually v3.zero
 * p10 = bool (repeat?)
 * p11 = 1073741824
 * 
 * Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
 * @param ped
 * @param vehicle
 * @param WPRecording
 * @param p3
 * @param p4
 * @param p5
 * @param p6
 * @param p7
 * @param p8
 * @param p9
 */
export function taskVehicleFollowWaypointRecording(ped: number, vehicle: number, WPRecording: string, p3: number, p4: number, p5: number, p6: number, p7: number, p8: boolean, p9: number): void { 
	return _in(0x3123faa6, 0xdb1cf7ed, ped, vehicle, _ts(WPRecording), p3, p4, p5, p6, _fv(p7), p8, _fv(p9)); 
}

/**
 * Differs from TASK_VEHICLE_DRIVE_TO_COORDS in that it will pick the shortest possible road route without taking one-way streets and other "road laws" into consideration.
 * 
 * WARNING:
 * A behaviorFlag value of 0 will result in a clunky, stupid driver!
 * 
 * Recommended settings:
 * speed = 30.0f,
 * behaviorFlag = 156,
 * stoppingRange = 5.0f;
 * 
 * If you simply want to have your driver move to a fixed location, call it only once, or, when necessary in the event of interruption.
 * 
 * If using this to continually follow a Ped who is on foot:  You will need to run this in a tick loop.  Call it in with the Ped's updated coordinates every 20 ticks or so and you will have one hell of a smart, fast-reacting NPC driver -- provided he doesn't get stuck.  If your update frequency is too fast, the Ped may not have enough time to figure his way out of being stuck, and thus, remain stuck.  One way around this would be to implement an "anti-stuck" mechanism, which allows the driver to realize he's stuck, temporarily pause the tick, unstuck, then resume the tick.
 * 
 * EDIT:  This is being discussed in more detail at http://gtaforums.com/topic/818504-any-idea-on-how-to-make-peds-clever-and-insanely-fast-c/
 * @param ped
 * @param vehicle
 * @param x
 * @param y
 * @param z
 * @param speed
 * @param behaviorFlag
 * @param stoppingRange
 */
export function taskVehicleGotoNavmesh(ped: number, vehicle: number, x: number, y: number, z: number, speed: number, behaviorFlag: number, stoppingRange: number): void { 
	return _in(0x195aeeb1, 0x3cefe2ee, ped, vehicle, _fv(x), _fv(y), _fv(z), _fv(speed), behaviorFlag, _fv(stoppingRange)); 
}

/**
 * pilot, vehicle and altitude are rather self-explanatory.
 * 
 * p4: is unused variable in the function.
 * 
 * entityToFollow: you can provide a Vehicle entity or a Ped entity, the heli will protect them.
 * 
 * 'targetSpeed':  The pilot will dip the nose AS MUCH AS POSSIBLE so as to reach this value AS FAST AS POSSIBLE.  As such, you'll want to modulate it as opposed to calling it via a hard-wired, constant #.
 * 
 * 'radius' isn't just "stop within radius of X of target" like with ground vehicles.  In this case, the pilot will fly an entire circle around 'radius' and continue to do so.
 * 
 * NOT CONFIRMED:  p7 appears to be a FlyingStyle enum.  Still investigating it as of this writing, but playing around with values here appears to result in different -behavior- as opposed to offsetting coordinates, altitude, target speed, etc.
 * 
 * NOTE: If the pilot finds enemies, it will engage them until it kills them, but will return to protect the ped/vehicle given shortly thereafter.
 * @param pilot
 * @param vehicle
 * @param entityToFollow
 * @param targetSpeed
 * @param drivingFlags
 * @param radius
 * @param altitude
 * @param heliFlags
 */
export function taskVehicleHeliProtect(pilot: number, vehicle: number, entityToFollow: number, targetSpeed: number, drivingFlags: number, radius: number, altitude: number, heliFlags: number): void { 
	return _in(0x1e09c320, 0x48fefd1c, pilot, vehicle, entityToFollow, _fv(targetSpeed), drivingFlags, _fv(radius), altitude, heliFlags); 
}

/**
 * missionType: https://alloc8or.re/gta5/doc/enums/eVehicleMissionType.txt
 * @param driver
 * @param vehicle
 * @param vehicleTarget
 * @param missionType
 * @param cruiseSpeed
 * @param drivingStyle
 * @param targetReached
 * @param straightLineDistance
 * @param DriveAgainstTraffic
 */
export function taskVehicleMission(driver: number, vehicle: number, vehicleTarget: number, missionType: number, cruiseSpeed: number, drivingStyle: number, targetReached: number, straightLineDistance: number, DriveAgainstTraffic: boolean): void { 
	return _in(0x659427e0, 0xef36bcde, driver, vehicle, vehicleTarget, missionType, _fv(cruiseSpeed), drivingStyle, _fv(targetReached), _fv(straightLineDistance), DriveAgainstTraffic); 
}

/**
 * See TASK_VEHICLE_MISSION
 * @param ped
 * @param vehicle
 * @param x
 * @param y
 * @param z
 * @param mission
 * @param cruiseSpeed
 * @param drivingStyle
 * @param targetReached
 * @param straightLineDistance
 * @param DriveAgainstTraffic
 */
export function taskVehicleMissionCoorsTarget(ped: number, vehicle: number, x: number, y: number, z: number, mission: number, cruiseSpeed: number, drivingStyle: number, targetReached: number, straightLineDistance: number, DriveAgainstTraffic: boolean): void { 
	return _in(0xf0af20aa, 0x7731f8c3, ped, vehicle, _fv(x), _fv(y), _fv(z), mission, _fv(cruiseSpeed), drivingStyle, _fv(targetReached), _fv(straightLineDistance), DriveAgainstTraffic); 
}

/**
 * See TASK_VEHICLE_MISSION
 * @param ped
 * @param vehicle
 * @param pedTarget
 * @param missionType
 * @param maxSpeed
 * @param drivingStyle
 * @param minDistance
 * @param straightLineDistance
 * @param DriveAgainstTraffic
 */
export function taskVehicleMissionPedTarget(ped: number, vehicle: number, pedTarget: number, missionType: number, maxSpeed: number, drivingStyle: number, minDistance: number, straightLineDistance: number, DriveAgainstTraffic: boolean): void { 
	return _in(0x9454528d, 0xf15d657a, ped, vehicle, pedTarget, missionType, _fv(maxSpeed), drivingStyle, _fv(minDistance), _fv(straightLineDistance), DriveAgainstTraffic); 
}

/**
 * Modes:
 * 0 - ignore heading
 * 1 - park forward
 * 2 - park backwards
 * 
 * Depending on the angle of approach, the vehicle can park at the specified heading or at its exact opposite (-180) angle.
 * 
 * Radius seems to define how close the vehicle has to be -after parking- to the position for this task considered completed. If the value is too small, the vehicle will try to park again until it's exactly where it should be. 20.0 Works well but lower values don't, like the radius is measured in centimeters or something.
 * @param ped
 * @param vehicle
 * @param x
 * @param y
 * @param z
 * @param heading
 * @param mode
 * @param radius
 * @param keepEngineOn
 */
export function taskVehiclePark(ped: number, vehicle: number, x: number, y: number, z: number, heading: number, mode: number, radius: number, keepEngineOn: boolean): void { 
	return _in(0x0f3e34e9, 0x68ea374e, ped, vehicle, _fv(x), _fv(y), _fv(z), _fv(heading), mode, _fv(radius), keepEngineOn); 
}

/**
 * Most probably plays a specific animation on vehicle. For example getting chop out of van etc...
 * 
 * Here's how its used -
 * 
 * TASK::TASK_VEHICLE_PLAY_ANIM(l_325, "rcmnigel1b", "idle_speedo");
 * 
 * TASK::TASK_VEHICLE_PLAY_ANIM(l_556[0 -- [[1]] ], "missfra0_chop_drhome", "InCar_GetOutofBack_Speedo");
 * 
 * FYI : Speedo is the name of van in which chop was put in the mission.
 * @param vehicle
 * @param animationSet
 * @param animationName
 */
export function taskVehiclePlayAnim(vehicle: number, animationSet: string, animationName: string): void { 
	return _in(0x69f5c3bd, 0x0f3ebd89, vehicle, _ts(animationSet), _ts(animationName)); 
}

export function taskVehicleShootAtCoord(ped: number, x: number, y: number, z: number, fireTolerance: number): void { 
	return _in(0x5190796e, 0xd39c9b6d, ped, _fv(x), _fv(y), _fv(z), _fv(fireTolerance)); 
}

export function taskVehicleShootAtPed(ped: number, target: number, fireTolerance: number): void { 
	return _in(0x10ab107b, 0x887214d8, ped, target, _fv(fireTolerance)); 
}

/**
 * '1 - brake
 * '3 - brake + reverse
 * '4 - turn left 90 + braking
 * '5 - turn right 90 + braking
 * '6 - brake strong (handbrake?) until time ends
 * '7 - turn left + accelerate
 * '8 - turn right + accelerate
 * '9 - weak acceleration
 * '10 - turn left + restore wheel pos to center in the end
 * '11 - turn right + restore wheel pos to center in the end
 * '13 - turn left + go reverse
 * '14 - turn left + go reverse
 * '16 - crash the game after like 2 seconds :)
 * '17 - keep actual state, game crashed after few tries
 * '18 - game crash
 * '19 - strong brake + turn left/right
 * '20 - weak brake + turn left then turn right
 * '21 - weak brake + turn right then turn left
 * '22 - brake + reverse
 * '23 - accelerate fast
 * '24 - brake
 * '25 - brake turning left then when almost stopping it turns left more
 * '26 - brake turning right then when almost stopping it turns right more
 * '27 - brake until car stop or until time ends
 * '28 - brake + strong reverse acceleration
 * '30 - performs a burnout (brake until stop + brake and accelerate)
 * '31 - accelerate + handbrake
 * '32 - accelerate very strong
 * 
 * Seems to be this:
 * Works on NPCs, but overrides their current task. If inside a task sequence (and not being the last task), "time" will work, otherwise the task will be performed forever until tasked with something else
 * @param driver
 * @param vehicle
 * @param action
 * @param time
 */
export function taskVehicleTempAction(driver: number, vehicle: number, action: number, time: number): void { 
	return _in(0xc429dcee, 0xb339e129, driver, vehicle, action, time); 
}

export function taskWanderInArea(ped: number, x: number, y: number, z: number, radius: number, minimalLength: number, timeBetweenWalks: number): void { 
	return _in(0xe054346c, 0xa3a0f315, ped, _fv(x), _fv(y), _fv(z), _fv(radius), _fv(minimalLength), _fv(timeBetweenWalks)); 
}

export function taskWanderSpecific(ped: number, conditionalAnimGroupStr: string, conditionalAnimStr: string, heading: number): void { 
	return _in(0x6919a2f1, 0x36426098, ped, _ts(conditionalAnimGroupStr), _ts(conditionalAnimStr), _fv(heading)); 
}

/**
 * Makes ped walk around the area.
 * 
 * set p1 to 10.0f and p2 to 10 if you want the ped to walk anywhere without a duration.
 * @param ped
 * @param heading
 * @param flags
 */
export function taskWanderStandard(ped: number, heading: number, flags: number): void { 
	return _in(0xbb9ce077, 0x274f6a1b, ped, _fv(heading), flags); 
}

export function taskWarpPedDirectlyIntoCover(ped: number, time: number, allowPeekingAndFiring: boolean, forceInitialFacingDirection: boolean, forceFaceLeft: boolean, identifier: number): void { 
	return _in(0x6e01e9e8, 0xd89f8276, ped, time, allowPeekingAndFiring, forceInitialFacingDirection, forceFaceLeft, identifier); 
}

/**
 * Seat Numbers
 * -------------------------------
 * Driver = -1
 * Any = -2
 * Left-Rear = 1
 * Right-Front = 0
 * Right-Rear = 2
 * Extra seats = 3-14(This may differ from vehicle type e.g. Firetruck Rear Stand, Ambulance Rear)
 * @param ped
 * @param vehicle
 * @param seat
 */
export function taskWarpPedIntoVehicle(ped: number, vehicle: number, seat: number): void { 
	return _in(0x9a7d0914, 0x11c5f684, ped, vehicle, seat); 
}

/**
 * EX: Function.Call(Ped1, Ped2, Time, 0);
 * 
 * The last parameter is always 0 for some reason I do not know. The first parameter is the pedestrian who will writhe to the pedestrian in the other parameter. The third paremeter is how long until the Writhe task ends. When the task ends, the ped will die. If set to -1, he will not die automatically, and the task will continue until something causes it to end. This can be being touched by an entity, being shot, explosion, going into ragdoll, having task cleared. Anything that ends the current task will kill the ped at this point.
 * 
 * 
 * 
 * Third parameter does not appear to be time. The last parameter is not implemented (It's not used, regardless of value).
 * @param ped
 * @param target
 * @param minFireLoops
 * @param startState
 * @param forceShootOnGround
 * @param shootFromGroundTimer
 */
export function taskWrithe(ped: number, target: number, minFireLoops: number, startState: number, forceShootOnGround: boolean, shootFromGroundTimer: number): void { 
	return _in(0xcddc2b77, 0xce54ac6e, ped, target, minFireLoops, startState, forceShootOnGround, shootFromGroundTimer); 
}

export function tellGroupPedsInAreaToAttack(ped: number, p1: number, p2: number, hash: number, p4: number, p5: number): void { 
	return _in(0xad27d957, 0x598e49e9, ped, p1, _fv(p2), _ch(hash), p4, p5); 
}

export function terminateAllScriptsWithThisName(scriptName: string): void { 
	return _in(0x9dc711bc, 0x69c548df, _ts(scriptName)); 
}

export function terminateThisThread(): void { 
	return _in(0x1090044a, 0xd1da76fa); 
}

export function terminateThread(threadId: number): void { 
	return _in(0xc8b189ed, 0x9138bcd4, threadId); 
}

/**
 * This native enables/disables the gold putting grid display (https://i.imgur.com/TC6cku6.png).
 * This requires these two natives to be called as well to configure the grid: `TERRAINGRID_SET_PARAMS` and `TERRAINGRID_SET_COLOURS`.
 * @param toggle
 */
export function terraingridActivate(toggle: boolean): void { 
	return _in(0xa356990e, 0x161c9e65, toggle); 
}

/**
 * This native is used along with these two natives: `TERRAINGRID_ACTIVATE` and `TERRAINGRID_SET_PARAMS`.
 * This native sets the colors for the golf putting grid. the 'min...' values are for the lower areas that the grid covers, the 'max...' values are for the higher areas that the grid covers, all remaining values are for the 'normal' ground height.
 * All those natives combined they will output something like this: https://i.imgur.com/TC6cku6.png
 * @param lowR
 * @param lowG
 * @param lowB
 * @param lowAlpha
 * @param r
 * @param g
 * @param b
 * @param alpha
 * @param highR
 * @param highG
 * @param highB
 * @param highAlpha
 */
export function terraingridSetColours(lowR: number, lowG: number, lowB: number, lowAlpha: number, r: number, g: number, b: number, alpha: number, highR: number, highG: number, highB: number, highAlpha: number): void { 
	return _in(0x5ce62918, 0xf8d703c7, lowR, lowG, lowB, lowAlpha, r, g, b, alpha, highR, highG, highB, highAlpha); 
}

/**
 * This native is used along with these two natives: `TERRAINGRID_ACTIVATE` and `TERRAINGRID_SET_COLOURS`.
 * This native configures the location, size, rotation, normal height, and the difference ratio between min, normal and max.
 * 
 * All those natives combined they will output something like this: https://i.imgur.com/TC6cku6.png
 * 
 * This native renders a box at the given position, with a special shader that renders a grid on world geometry behind it. This box does not have backface culling.
 * The forward args here are a direction vector, something similar to what's returned by GET_ENTITY_FORWARD_VECTOR.
 * normalHeight and heightDiff are used for positioning the color gradient of the grid, colors specified via TERRAINGRID_SET_COLOURS.
 * 
 * Example with box superimposed on the image to demonstrate: https://i.imgur.com/wdqskxd.jpg
 * @param x
 * @param y
 * @param z
 * @param forwardX
 * @param forwardY
 * @param forwardZ
 * @param sizeX
 * @param sizeY
 * @param sizeZ
 * @param gridScale
 * @param glowIntensity
 * @param normalHeight
 * @param heightDiff
 */
export function terraingridSetParams(x: number, y: number, z: number, forwardX: number, forwardY: number, forwardZ: number, sizeX: number, sizeY: number, sizeZ: number, gridScale: number, glowIntensity: number, normalHeight: number, heightDiff: number): void { 
	return _in(0x1c4fc575, 0x2bcd8e48, _fv(x), _fv(y), _fv(z), _fv(forwardX), _fv(forwardY), _fv(forwardZ), _fv(sizeX), _fv(sizeY), _fv(sizeZ), _fv(gridScale), _fv(glowIntensity), _fv(normalHeight), _fv(heightDiff)); 
}

/**
 * enum eScriptWaterTestResult
 * {
 * SCRIPT_WATER_TEST_RESULT_NONE,
 * SCRIPT_WATER_TEST_RESULT_WATER,
 * SCRIPT_WATER_TEST_RESULT_BLOCKED,
 * };
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 * @param flags
 * @param waterHeight
 */
export function testProbeAgainstAllWater(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, flags: number, waterHeight: number): [number, number] { 
	const [retval, waterHeight_out] = _in(0x8974647e, 0xd222ea5f, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), flags, _fi(waterHeight), _r, _ri);
	return [retval as number, waterHeight_out as number]; 
}

export function testProbeAgainstWater(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, result: Vector3): [boolean, Vector3] { 
	const [retval, result_out] = _in(0xffa5d878, 0x809819db, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _v, _r);
	return [retval as boolean, _mv(result_out)]; 
}

/**
 * See TEST_PROBE_AGAINST_ALL_WATER.
 * @param x
 * @param y
 * @param z
 * @param flags
 * @param waterHeight
 */
export function testVerticalProbeAgainstAllWater(x: number, y: number, z: number, flags: number, waterHeight: number): [number, number] { 
	const [retval, waterHeight_out] = _in(0x2b3451fa, 0x1e3142e2, _fv(x), _fv(y), _fv(z), flags, _fi(waterHeight), _r, _ri);
	return [retval as number, waterHeight_out as number]; 
}

export function textureDownloadGetName(p0: number): string { 
	return _in(0x3448505b, 0x6e35262d, p0, _r, _s); 
}

export function textureDownloadHasFailed(p0: number): boolean { 
	return _in(0x5776ed56, 0x2c134687, p0, _r); 
}

export function textureDownloadRelease(p0: number): void { 
	return _in(0x487eb90b, 0x98e9fb19, p0); 
}

export function textureDownloadRequest(filePath: string, name: string, p3: boolean): [number, number] { 
	const [retval, gamerHandle_out] = _in(0x16160da7, 0x4a8e74a2, _i, _ts(filePath), _ts(name), p3, _r, _ri);
	return [retval as number, gamerHandle_out as number]; 
}

/**
 * Displays "normal" notifications again after calling `THEFEED_AUTO_POST_GAMETIPS_ON` (those that were drawn before calling this native too), though those will have a weird offset and stay on screen forever (tested with notifications created from same script).
 */
export function thefeedAutoPostGametipsOff(): void { 
	return _in(0xaded7f57, 0x48acafe6); 
}

/**
 * Enables loading screen tips to be be shown (`THEFEED_SHOW`), blocks other kinds of notifications from being displayed (at least from current script). Call `THEFEED_AUTO_POST_GAMETIPS_OFF` to display those again.
 */
export function thefeedAutoPostGametipsOn(): void { 
	return _in(0x56c8b608, 0xcfd49854); 
}

export function thefeedClearFrozenPost(): void { 
	return _in(0x80fe4f3a, 0xb4e1b62a); 
}

export function thefeedFlushQueue(): void { 
	return _in(0xa8fdb297, 0xa8d25fba); 
}

/**
 * Enables loading screen tips to be be shown (`THEFEED_SHOW`), blocks other kinds of notifications from being displayed (at least from current script). Call `0xADED7F5748ACAFE6` to display those again.
 */
export function thefeedForceRenderOff(): void { 
	return _in(0x58304988, 0x4a2eee3c); 
}

export function thefeedForceRenderOn(): void { 
	return _in(0xa13c11e1, 0xb5c06bfc); 
}

/**
 * Requires manual management of game stream handles (i.e., 0xBE4390CB40B3E627).
 */
export function thefeedFreezeNextPost(): void { 
	return _in(0xfdec055a, 0xb549e328); 
}

/**
 * Returns the handle for the notification currently displayed on the screen. Name may be a hash collision, but describes the function accurately.
 */
export function thefeedGetLastShownPhoneActivatableFeedId(): number { 
	return _in(0x82352748, 0x437638ca, _r, _ri); 
}

/**
 * Stops loading screen tips shown by invoking `THEFEED_SHOW`
 */
export function thefeedHide(): void { 
	return _in(0x32888337, 0x579a5970); 
}

/**
 * Once called each frame hides all above radar notifications.
 */
export function thefeedHideThisFrame(): void { 
	return _in(0x25f87b30, 0xc382fca7); 
}

export function thefeedIsPaused(): boolean { 
	return _in(0xa9cbfd40, 0xb3fa3010, _r); 
}

export function thefeedOnlyShowTooltips(toggle: boolean): void { 
	return _in(0x6f1554b0, 0xcc2089fa, toggle); 
}

export function thefeedPause(): void { 
	return _in(0xfdb42399, 0x7fa30340); 
}

/**
 * Removes a notification instantly instead of waiting for it to disappear
 * @param notificationId
 */
export function thefeedRemoveItem(notificationId: number): void { 
	return _in(0xbe4390cb, 0x40b3e627, notificationId); 
}

export function thefeedReportLogoOff(): void { 
	return _in(0xb695e2cd, 0x0a2da9ee); 
}

export function thefeedReportLogoOn(): void { 
	return _in(0xd4438c05, 0x64490e63); 
}

export function thefeedResetAllParameters(): void { 
	return _in(0xfdd85225, 0xb2dea55e); 
}

export function thefeedResume(): void { 
	return _in(0xe1cd1e48, 0xe025e661); 
}

/**
 * From the decompiled scripts:
 * HUD::THEFEED_SET_BACKGROUND_COLOR_FOR_NEXT_POST(6);
 * HUD::THEFEED_SET_BACKGROUND_COLOR_FOR_NEXT_POST(184);
 * HUD::THEFEED_SET_BACKGROUND_COLOR_FOR_NEXT_POST(190);
 * 
 * sets background color for the next notification
 * 6 = red
 * 184 = green
 * 190 = yellow
 * 
 * Here is a list of some colors that can be used: https://gyazo.com/68bd384455fceb0a85a8729e48216e15
 * @param hudColorIndex
 */
export function thefeedSetBackgroundColorForNextPost(hudColorIndex: number): void { 
	return _in(0x92f0da1e, 0x27db96dc, hudColorIndex); 
}

/**
 * Related to notification color flashing, setting count to 0 invalidates a `THEFEED_SET_RGBA_PARAMETER_FOR_NEXT_MESSAGE` call for the target notification.
 * @param count
 */
export function thefeedSetFlashDurationParameterForNextMessage(count: number): void { 
	return _in(0x17ad8c97, 0x06bdd88a, count); 
}

export function thefeedSetRgbaParameterForNextMessage(red: number, green: number, blue: number, alpha: number): void { 
	return _in(0x17430b91, 0x8701c342, red, green, blue, alpha); 
}

export function thefeedSetScriptedMenuHeight(pos: number): void { 
	return _in(0x55598d21, 0x339cb998, _fv(pos)); 
}

export function thefeedSetSnapFeedItemPositions(p0: boolean): void { 
	return _in(0xbae4f9b9, 0x7cd43b30, p0); 
}

export function thefeedSetVibrateParameterForNextMessage(toggle: boolean): void { 
	return _in(0x4a0c7c9b, 0xb10abb36, toggle); 
}

/**
 * Displays loading screen tips, requires `THEFEED_AUTO_POST_GAMETIPS_ON` to be called beforehand.
 */
export function thefeedShow(): void { 
	return _in(0x15cfa549, 0x788d35ef); 
}

/**
 * Used in the native scripts to reference "GET_PEDHEADSHOT_TXD_STRING" and "CHAR_DEFAULT".
 * @param txdString1
 * @param txnString1
 * @param txdString2
 * @param txnString2
 */
export function thefeedUpdateItemTexture(txdString1: string, txnString1: string, txdString2: string, txnString2: string): void { 
	return _in(0x317eba71, 0xd7543f52, _ts(txdString1), _ts(txnString1), _ts(txdString2), _ts(txnString2)); 
}

/**
 * Counts up. Every 1000 is 1 real-time second. Use SETTIMERA(int value) to set the timer (e.g.: SETTIMERA(0)).
 */
export function timera(): number { 
	return _in(0x83666f9f, 0xb8febd4b, _r, _ri); 
}

export function timerb(): number { 
	return _in(0xc9d94441, 0x86b5a374, _r, _ri); 
}

/**
 * Gets the current frame time.
 */
export function timestep(): number { 
	return _in(0x00000000, 0x50597ee2, _r, _rf); 
}

export function titleTextureDownloadRequest(filePath: string, name: string, p2: boolean): number { 
	return _in(0x0b203b4a, 0xfde53a4f, _ts(filePath), _ts(name), p2, _r, _ri); 
}

export function toFloat(value: number): number { 
	return _in(0xbbda7924, 0x48db5a89, value, _r, _rf); 
}

export function togglePausedRenderphases(toggle: boolean): void { 
	return _in(0xdfc252d8, 0xa3e15ab7, toggle); 
}

export function togglePlayerDamageOverlay(toggle: boolean): void { 
	return _in(0xe63d7c6e, 0xececb66b, toggle); 
}

export function toggleScenarioPedCowerInPlace(ped: number, toggle: boolean): void { 
	return _in(0x9a77dfd2, 0x95e29b09, ped, toggle); 
}

/**
 * Toggles some stunt jump stuff.
 * @param toggle
 */
export function toggleShowOptionalStuntJumpCamera(toggle: boolean): void { 
	return _in(0xfb80ab29, 0x9d2ee1bd, toggle); 
}

export function toggleStealthRadar(toggle: boolean): void { 
	return _in(0x6afdfb93, 0x754950c7, toggle); 
}

/**
 * Toggles:
 * UNK17 - 17
 * Turbo - 18
 * UNK19 - 19
 * Tire Smoke - 20
 * UNK21 - 21
 * Xenon Headlights - 22
 * @param vehicle
 * @param modType
 * @param toggle
 */
export function toggleVehicleMod(vehicle: number, modType: number, toggle: boolean): void { 
	return _in(0x2a1f4f37, 0xf95bad08, vehicle, modType, toggle); 
}

export function trackObjectVisibility(object: number): void { 
	return _in(0xb252bc03, 0x6b525623, object); 
}

/**
 * in script hook .net
 * 
 * Vehicle v = ...;
 * Function.Call(Hash.TRACK_VEHICLE_VISIBILITY, v.Handle);
 * @param vehicle
 */
export function trackVehicleVisibility(vehicle: number): void { 
	return _in(0x64473aef, 0xdcf47dca, vehicle); 
}

/**
 * Transforms the `stormberg`/`toreador` to its "road vehicle" variant. If the vehicle is already in that state then the vehicle transformation audio will still play, but the vehicle won't change at all.
 * @param vehicle
 * @param noAnimation
 */
export function transformToCar(vehicle: number, noAnimation: boolean): void { 
	return _in(0x2a69ffd1, 0xb42bff9e, vehicle, noAnimation); 
}

/**
 * Transforms the `stormberg`/`toreador` to its "submarine" variant. If the vehicle is already in that state then the vehicle transformation audio will still play, but the vehicle won't change at all.
 * @param vehicle
 * @param noAnimation
 */
export function transformToSubmarine(vehicle: number, noAnimation: boolean): boolean { 
	return _in(0xbe4c854f, 0xfdb6eebe, vehicle, noAnimation, _r); 
}

/**
 * Does nothing (it's a nullsub).
 * @param p0
 */
export function triggerCommerceDataFetch(p0: number): void { 
	return _in(0xb606e6cc, 0x59664972, p0); 
}

export function triggerIdleAnimationOnPed(ped: number): void { 
	return _in(0xc2ee020f, 0x5fb4db53, ped); 
}

/**
 * List of all usable event names found in b617d used with this native. Sorted alphabetically and identical names removed: https://pastebin.com/RzDFmB1W
 * 
 * All music event names found in the b617d scripts: https://pastebin.com/GnYt0R3P
 * Full list of music event names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/musicEventNames.json
 * @param eventName
 */
export function triggerMusicEvent(eventName: string): boolean { 
	return _in(0x706d57b0, 0xf50da710, _ts(eventName), _r); 
}

export function triggerPedScenarioPanicexittoflee(p0: number, p1: number, p2: number, p3: number): boolean { 
	return _in(0x25361a96, 0xe0f7e419, p0, p1, p2, p3, _r); 
}

/**
 * time in ms to transition to fully blurred screen
 * @param transitionTime
 */
export function triggerScreenblurFadeIn(transitionTime: number): boolean { 
	return _in(0xa328a24a, 0xaa6b7fdc, _fv(transitionTime), _r); 
}

/**
 * time in ms to transition from fully blurred to normal
 * @param transitionTime
 */
export function triggerScreenblurFadeOut(transitionTime: number): boolean { 
	return _in(0xefacc8ae, 0xf94430d5, _fv(transitionTime), _r); 
}

/**
 * eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)
 * 
 * Note: eventDataSize is NOT the size in bytes, it is the size determined by the SIZE_OF operator (RAGE Script operator, not C/C++ sizeof). That is, the size in bytes divided by 8 (script variables are always 8-byte aligned!).
 * 
 * playerBits (also known as playersToBroadcastTo) is a bitset that indicates which players this event should be sent to. In order to send the event to specific players only, use (1 << playerIndex). Set all bits if it should be broadcast to all players.
 * @param eventGroup
 * @param eventData
 * @param eventDataSize
 * @param playerBits
 */
export function triggerScriptEvent(eventGroup: number, eventDataSize: number, playerBits: number): number { 
	return _in(0x5ae99c57, 0x1d5bbe5d, eventGroup, _i, eventDataSize, playerBits); 
}

export function triggerSirenAudio(vehicle: number): void { 
	return _in(0x66c3fb05, 0x206041ba, vehicle); 
}

export function triggerSonarBlip(posX: number, posY: number, posZ: number, radius: number, p4: number): void { 
	return _in(0x72dd432f, 0x3cdfc0ee, _fv(posX), _fv(posY), _fv(posZ), _fv(radius), p4); 
}

/**
 * p1: 0..16
 * @param vehicle
 * @param p1
 * @param p2
 */
export function triggerVehiclePartBrokenCameraShake(vehicle: number, p1: number, p2: number): void { 
	return _in(0x5d96cfb5, 0x9da076a0, vehicle, p1, _fv(p2)); 
}

export function triggerVehicleWeaponReload(vehicle: number, seat: number, ped: number): boolean { 
	return _in(0x5b1513f2, 0x7f279a44, vehicle, seat, ped, _r); 
}

export function ugcCancelQuery(): void { 
	return _in(0xe9b99b68, 0x53181409); 
}

export function ugcClearCreateResult(): void { 
	return _in(0x17440aa1, 0x5d1d3739); 
}

export function ugcClearModifyResult(): void { 
	return _in(0xa1e5e020, 0x4a6fcc70); 
}

export function ugcClearOfflineQuery(): void { 
	return _in(0x61a885d3, 0xf7cfee9a); 
}

export function ugcClearQueryResults(): void { 
	return _in(0xba96394a, 0x0eecfa65); 
}

export function ugcCopyContent(): [boolean, number, number] { 
	const [retval, p0_out, p1_out] = _in(0x152d90e4, 0xc1b4738a, _i, _i, _r);
	return [retval as boolean, p0_out as number, p1_out as number]; 
}

export function ugcCreateContent(dataCount: number, contentName: string, description: string, tagsCsv: string, contentTypeName: string, publish: boolean, p7: number): [boolean, number] { 
	const [retval, data_out] = _in(0xc84527e2, 0x35fca219, _i, dataCount, _ts(contentName), _ts(description), _ts(tagsCsv), _ts(contentTypeName), publish, p7, _r);
	return [retval as boolean, data_out as number]; 
}

export function ugcCreateMission(contentName: string, description: string, tagsCsv: string, contentTypeName: string, publish: boolean, p5: number): boolean { 
	return _in(0xa5efc3e8, 0x47d60507, _ts(contentName), _ts(description), _ts(tagsCsv), _ts(contentTypeName), publish, p5, _r); 
}

export function ugcDidCreateSucceed(): boolean { 
	return _in(0x24e4e51f, 0xc16305f9, _r); 
}

export function ugcDidDescriptionRequestSucceed(p0: number): boolean { 
	return _in(0x162c23ca, 0x83ed0a62, p0, _r); 
}

export function ugcDidGetSucceed(): boolean { 
	return _in(0x941e5306, 0xbcd7c2c7, _r); 
}

export function ugcDidModifySucceed(): boolean { 
	return _in(0x793ff272, 0xd5b365f4, _r); 
}

export function ugcDidQueryCreatorsSucceed(): boolean { 
	return _in(0x4d02279c, 0x83be69fe, _r); 
}

export function ugcGetBookmarkedContent(p0: number, p1: number, p2: string, p3: number): [boolean, number] { 
	const [retval, p3_out] = _in(0xd5a4b599, 0x80401588, p0, p1, _ts(p2), _ii(p3), _r);
	return [retval as boolean, p3_out as number]; 
}

export function ugcGetCachedDescription(p0: number, p1: number): string { 
	return _in(0x40f7e664, 0x72df3e5c, p0, p1, _r, _s); 
}

export function ugcGetContentCategory(p0: number): number { 
	return _in(0xa7bab11e, 0x7c9c6c5a, p0, _r, _ri); 
}

export function ugcGetContentCreatedByLocalPlayer(p0: number): boolean { 
	return _in(0x8c8d2739, 0xba44af0f, p0, _r); 
}

export function ugcGetContentCreatorGamerHandle(p0: number, p1: number): [boolean, number] { 
	const [retval, p1_out] = _in(0x58477079, 0x4d758c18, p0, _ii(p1), _r);
	return [retval as boolean, p1_out as number]; 
}

export function ugcGetContentDescription(index: number): string { 
	return _in(0x4a56710b, 0xab5c4db4, index, _r, _s); 
}

export function ugcGetContentDescriptionHash(p0: number): number { 
	return _in(0x7cf04487, 0x87b23758, p0, _r, _ri); 
}

export function ugcGetContentFileVersion(p0: number, p1: number): number { 
	return _in(0x37025b27, 0xd9b658b1, p0, p1, _r, _ri); 
}

export function ugcGetContentHasHiResPhoto(p0: number): boolean { 
	return _in(0x7fcc39c4, 0x6c3c03bd, p0, _r); 
}

export function ugcGetContentHasLoResPhoto(p0: number): boolean { 
	return _in(0x1d610eb0, 0xfea716d9, p0, _r); 
}

export function ugcGetContentHasPlayerBookmarked(p0: number): boolean { 
	return _in(0x993cbe59, 0xd350d225, p0, _r); 
}

export function ugcGetContentHasPlayerRecord(p0: number): boolean { 
	return _in(0x70ea8da5, 0x7840f9be, p0, _r); 
}

export function ugcGetContentHash(): number { 
	return _in(0x3a17a27d, 0x75c74887, _r, _ri); 
}

/**
 * Return the mission id of a job.
 * @param p0
 */
export function ugcGetContentId(p0: number): string { 
	return _in(0x55aa95f4, 0x81d694d2, p0, _r, _s); 
}

export function ugcGetContentIsPublished(p0: number): boolean { 
	return _in(0x3054f114, 0x121c21ea, p0, _r); 
}

export function ugcGetContentIsUsingScNickname(p0: number): boolean { 
	return _in(0xaeab9877, 0x27c5a8a4, p0, _r); 
}

export function ugcGetContentIsVerified(p0: number): boolean { 
	return _in(0xa9240a96, 0xc74cca13, p0, _r); 
}

export function ugcGetContentLanguage(p0: number): number { 
	return _in(0x32dd916f, 0x3f7c9672, p0, _r, _ri); 
}

export function ugcGetContentName(p0: number): string { 
	return _in(0xbf09786a, 0x7fcab582, p0, _r, _s); 
}

export function ugcGetContentNum(): number { 
	return _in(0xe0a61384, 0x01bcb837, _r, _ri); 
}

export function ugcGetContentPath(p0: number, p1: number): string { 
	return _in(0xbaf6babf, 0x9e7ccc13, p0, p1, _r, _s); 
}

export function ugcGetContentRating(p0: number, p1: number): number { 
	return _in(0x1accfba3, 0xd8dab2ee, p0, p1, _r, _rf); 
}

export function ugcGetContentRatingCount(p0: number, p1: number): number { 
	return _in(0x759299c5, 0xbb31d2a9, p0, p1, _r, _ri); 
}

export function ugcGetContentRatingNegativeCount(p0: number, p1: number): number { 
	return _in(0x4e548c0d, 0x7ae39ff9, p0, p1, _r, _ri); 
}

export function ugcGetContentRatingPositiveCount(p0: number, p1: number): number { 
	return _in(0x87e5c46c, 0x187fe0ae, p0, p1, _r, _ri); 
}

export function ugcGetContentTotal(): number { 
	return _in(0x769951e2, 0x455e2eb5, _r, _ri); 
}

export function ugcGetContentUpdatedDate(p0: number, p1: number): number { 
	return _in(0xcfd115b3, 0x73c0df63, p0, _ii(p1)); 
}

export function ugcGetContentUserId(p0: number): string { 
	return _in(0xcd67ad04, 0x1a394c9c, p0, _r, _s); 
}

export function ugcGetContentUserName(p0: number): string { 
	return _in(0x703f1242, 0x5eca8bf5, p0, _r, _s); 
}

export function ugcGetCreateContentId(): string { 
	return _in(0xc55a0b40, 0xffb1ed23, _r, _s); 
}

export function ugcGetCreateResult(): number { 
	return _in(0xfbc5e768, 0xc7a77a6a, _r, _ri); 
}

export function ugcGetCreatorNum(): number { 
	return _in(0x597f8dba, 0x9b206fc7, _r, _ri); 
}

export function ugcGetCreatorsByUserId(): [boolean, number, number] { 
	const [retval, p0_out, p1_out] = _in(0xb746d20b, 0x17f2a229, _i, _i, _r);
	return [retval as boolean, p0_out as number, p1_out as number]; 
}

export function ugcGetCrewContent(p0: number, p1: number, p2: number, p3: string, p4: number): [boolean, number] { 
	const [retval, p4_out] = _in(0x9f6e2821, 0x885caee2, p0, p1, p2, _ts(p3), _ii(p4), _r);
	return [retval as boolean, p4_out as number]; 
}

export function ugcGetFriendContent(p0: number, p1: number, p2: string, p3: number): [boolean, number] { 
	const [retval, p3_out] = _in(0xf9e1ccae, 0x8ba4c281, p0, p1, _ts(p2), _ii(p3), _r);
	return [retval as boolean, p3_out as number]; 
}

export function ugcGetGetByCategory(p0: number, p1: number, p2: number, p3: string, p4: number): [boolean, number] { 
	const [retval, p4_out] = _in(0x678bb03c, 0x1a3bd51e, p0, p1, p2, _ts(p3), _ii(p4), _r);
	return [retval as boolean, p4_out as number]; 
}

export function ugcGetGetByContentId(contentId: string, contentTypeName: string): boolean { 
	return _in(0x815e5e30, 0x73da1d67, _ts(contentId), _ts(contentTypeName), _r); 
}

export function ugcGetGetByContentIds(dataCount: number, contentTypeName: string): [boolean, number] { 
	const [retval, data_out] = _in(0xb8322eeb, 0x38be7c26, _i, dataCount, _ts(contentTypeName), _r);
	return [retval as boolean, data_out as number]; 
}

export function ugcGetModifyResult(): number { 
	return _in(0x5a0a3d1a, 0x186a5508, _r, _ri); 
}

export function ugcGetMostRecentlyCreatedContent(p0: number, p1: number): [boolean, number, number] { 
	const [retval, p2_out, p3_out] = _in(0xa7862bc5, 0xed1dfd7e, p0, p1, _i, _i, _r);
	return [retval as boolean, p2_out as number, p3_out as number]; 
}

export function ugcGetMostRecentlyPlayedContent(p0: number, p1: number): [boolean, number, number] { 
	const [retval, p2_out, p3_out] = _in(0x97a770be, 0xef227e2b, p0, p1, _i, _i, _r);
	return [retval as boolean, p2_out as number, p3_out as number]; 
}

export function ugcGetMyContent(p0: number, p1: number, p2: string, p3: number): [boolean, number] { 
	const [retval, p3_out] = _in(0x3195f8dd, 0x0d531052, p0, p1, _ts(p2), _ii(p3), _r);
	return [retval as boolean, p3_out as number]; 
}

export function ugcGetQueryResult(): number { 
	return _in(0xedf7f927, 0x136c224b, _r, _ri); 
}

/**
 * Return the root content id of a job.
 * @param p0
 */
export function ugcGetRootContentId(p0: number): string { 
	return _in(0xc0173d6b, 0xff4e0348, p0, _r, _s); 
}

export function ugcGetTopRatedContent(p0: number, p1: number): [boolean, number, number] { 
	const [retval, p2_out, p3_out] = _in(0x5324a0e3, 0xe4ce3570, p0, p1, _i, _i, _r);
	return [retval as boolean, p2_out as number, p3_out as number]; 
}

export function ugcHasCreateFinished(): boolean { 
	return _in(0x5e24341a, 0x7f92a74b, _r); 
}

export function ugcHasDescriptionRequestFinished(p0: number): boolean { 
	return _in(0xebfa8d50, 0xaddc54c4, p0, _r); 
}

export function ugcHasGetFinished(): boolean { 
	return _in(0x02ada21e, 0xa2f6918f, _r); 
}

export function ugcHasModifyFinished(): boolean { 
	return _in(0x299ef3c5, 0x76773506, _r); 
}

export function ugcHasPermissionToWrite(): boolean { 
	return _in(0xc33e7cbc, 0x06ec1a8d, _r); 
}

export function ugcHasQueryCreatorsFinished(): boolean { 
	return _in(0x63b406d7, 0x884bfa95, _r); 
}

export function ugcIsCreating(): boolean { 
	return _in(0x9fedf868, 0x98f100e9, _r); 
}

export function ugcIsDescriptionRequestInProgress(p0: number): boolean { 
	return _in(0x2d5dc831, 0x176d0114, p0, _r); 
}

export function ugcIsGetting(): boolean { 
	return _in(0xd53acdbe, 0xf24a46e8, _r); 
}

export function ugcIsLanguageSupported(p0: number): boolean { 
	return _in(0xf53e4846, 0x1b71eecb, p0, _r); 
}

export function ugcIsModifying(): boolean { 
	return _in(0x45e81677, 0x2e93a9db, _r); 
}

export function ugcLoadOfflineQuery(p0: number): boolean { 
	return _in(0x5cae833b, 0x0ee0c500, p0, _r); 
}

export function ugcPublish(contentId: string, baseContentId: string, contentTypeName: string): boolean { 
	return _in(0x1de0f5f5, 0x0d723caa, _ts(contentId), _ts(baseContentId), _ts(contentTypeName), _r); 
}

export function ugcQueryByCategory(p0: number, p1: number, p2: number, p3: string, p4: number, p5: boolean): boolean { 
	return _in(0x692d58df, 0x40657e8c, p0, p1, p2, _ts(p3), p4, p5, _r); 
}

export function ugcQueryByContentId(contentId: string, latestVersion: boolean, contentTypeName: string): boolean { 
	return _in(0x158ec424, 0xf35ec469, _ts(contentId), latestVersion, _ts(contentTypeName), _r); 
}

export function ugcQueryByContentIds(count: number, latestVersion: boolean, contentTypeName: string): [boolean, number] { 
	const [retval, data_out] = _in(0xc7397a83, 0xf7a2a462, _i, count, latestVersion, _ts(contentTypeName), _r);
	return [retval as boolean, data_out as number]; 
}

export function ugcQueryMostRecentlyCreatedContent(offset: number, count: number, contentTypeName: string, p3: number): boolean { 
	return _in(0x6d4cb481, 0xfac835e8, offset, count, _ts(contentTypeName), p3, _r); 
}

export function ugcQueryMyContent(p0: number, p1: number, p3: number, p4: number, p5: number): [boolean, number] { 
	const [retval, p2_out] = _in(0x9bf43881, 0x5f5d96ea, p0, p1, _i, p3, p4, p5, _r);
	return [retval as boolean, p2_out as number]; 
}

export function ugcReleaseAllCachedDescriptions(): void { 
	return _in(0x68103e22, 0x47887242); 
}

export function ugcReleaseCachedDescription(p0: number): boolean { 
	return _in(0x5a34cd9c, 0x3c5bec44, p0, _r); 
}

export function ugcRequestCachedDescription(p0: number): number { 
	return _in(0x5e016527, 0x8f6339ee, p0, _r, _ri); 
}

export function ugcRequestContentDataFromIndex(p0: number, p1: number): number { 
	return _in(0x171df6a0, 0xc07fb3dc, p0, p1, _r, _ri); 
}

export function ugcRequestContentDataFromParams(contentTypeName: string, contentId: string, p2: number, p3: number, p4: number): number { 
	return _in(0x7fd2990a, 0xf016795e, _ts(contentTypeName), _ts(contentId), p2, p3, p4, _r, _ri); 
}

export function ugcSetBookmarked(contentId: string, bookmarked: boolean, contentTypeName: string): boolean { 
	return _in(0x274a1519, 0xdfc1094f, _ts(contentId), bookmarked, _ts(contentTypeName), _r); 
}

export function ugcSetDeleted(p1: boolean, p2: string): [boolean, number] { 
	const [retval, p0_out] = _in(0xd05d1a6c, 0x74da3498, _i, p1, _ts(p2), _r);
	return [retval as boolean, p0_out as number]; 
}

export function ugcSetPlayerData(contentId: string, rating: number, contentTypeName: string, p3: number): boolean { 
	return _in(0x692d808c, 0x34a82143, _ts(contentId), _fv(rating), _ts(contentTypeName), p3, _r); 
}

export function ugcSetQueryDataFromOffline(p0: boolean): void { 
	return _in(0xf98dde0a, 0x8ed09323, p0); 
}

export function ugcSetUsingOfflineContent(p0: boolean): void { 
	return _in(0xfd75dabc, 0x0957bf33, p0); 
}

export function ugcTextureDownloadRequest(p0: string, p1: number, p2: number, p3: number, p4: string, p5: boolean): number { 
	return _in(0x308f9645, 0x8b7087cc, _ts(p0), p1, p2, p3, _ts(p4), p5, _r, _ri); 
}

export function ugcUpdateContent(contentId: string, dataCount: number, contentName: string, description: string, tagsCsv: string, contentTypeName: string, p7: number): [boolean, number] { 
	const [retval, data_out] = _in(0x648e7a54, 0x34af7969, _ts(contentId), _i, dataCount, _ts(contentName), _ts(description), _ts(tagsCsv), _ts(contentTypeName), p7, _r);
	return [retval as boolean, data_out as number]; 
}

export function ugcUpdateMission(contentId: string, contentName: string, description: string, tagsCsv: string, contentTypeName: string, p5: number): boolean { 
	return _in(0x4645de99, 0x80999e93, _ts(contentId), _ts(contentName), _ts(description), _ts(tagsCsv), _ts(contentTypeName), p5, _r); 
}

export function ugcWasQueryForceCancelled(): boolean { 
	return _in(0xc87e740d, 0x9f3872cc, _r); 
}

/**
 * It's called after UI3DSCENE_IS_AVAILABLE and UI3DSCENE_PUSH_PRESET
 * 
 * presetName was always "CELEBRATION_WINNER"
 * All presets can be found in common\data\ui\uiscenes.meta
 * @param presetName
 * @param ped
 * @param slot
 * @param posX
 * @param posY
 * @param posZ
 */
export function ui3dsceneAssignPedToSlot(presetName: string, ped: number, slot: number, posX: number, posY: number, posZ: number): boolean { 
	return _in(0x98c4fe6e, 0xc34154ca, _ts(presetName), ped, slot, _fv(posX), _fv(posY), _fv(posZ), _r); 
}

export function ui3dsceneClearPatchedData(): void { 
	return _in(0x7a42b2e2, 0x36e71415); 
}

export function ui3dsceneIsAvailable(): boolean { 
	return _in(0xd3a10fc7, 0xfd8d98cd, _r); 
}

export function ui3dsceneMakePushedPresetPersistent(toggle: boolean): void { 
	return _in(0x108be269, 0x59a9d9bb, toggle); 
}

/**
 * All presets can be found in common\data\ui\uiscenes.meta
 * @param presetName
 */
export function ui3dscenePushPreset(presetName: string): boolean { 
	return _in(0xf1cea8a4, 0x198d8e9a, _ts(presetName), _r); 
}

/**
 * Returns true if the current frontend menu is FE_MENU_VERSION_SP_PAUSE
 */
export function uiStartedEndUserBenchmark(): boolean { 
	return _in(0xea2f2061, 0x875eed90, _r); 
}

/**
 * eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
 * @param name
 * @param eventType
 */
export function unblockDecisionMakerEvent(name: number, eventType: number): void { 
	return _in(0xd7cd9cf3, 0x4f2c99e8, _ch(name), eventType); 
}

export function unblockSpeechContextGroup(p0: string): void { 
	return _in(0x2acabed3, 0x37622df2, _ts(p0)); 
}

export function uncuffPed(ped: number): void { 
	return _in(0x67406f2c, 0x8f87fc4f, ped); 
}

export function unfreezeRadioStation(radioStation: string): void { 
	return _in(0xfc00454c, 0xf60b91dd, _ts(radioStation)); 
}

export function unhintAmbientAudioBank(): void { 
	return _in(0x19af7ed9, 0xb9d23058); 
}

export function unhintNamedScriptAudioBank(audioBank: string): void { 
	return _in(0x11579d94, 0x0949c49e, _ts(audioBank)); 
}

export function unhintScriptAudioBank(): void { 
	return _in(0x9ac92eed, 0x5e4793ab); 
}

export function unloadAllCloudHats(): void { 
	return _in(0x957e790e, 0xa1727b64); 
}

export function unloadCloudHat(name: string, p1: number): void { 
	return _in(0xa74802fb, 0x8d0b7814, _ts(name), _fv(p1)); 
}

export function unlockMinimapAngle(): void { 
	return _in(0x8183455e, 0x16c42e3a); 
}

export function unlockMinimapPosition(): void { 
	return _in(0x3e93e06d, 0xb8ef1f30); 
}

/**
 * "news" that play on the radio after you've done something in story mode(?)
 * @param newsStory
 */
export function unlockMissionNewsStory(newsStory: number): void { 
	return _in(0xb165ab7c, 0x248b2dc1, newsStory); 
}

/**
 * AUDIO::UNLOCK_RADIO_STATION_TRACK_LIST("RADIO_16_SILVERLAKE", "MIRRORPARK_LOCKED");
 * @param radioStation
 * @param trackListName
 */
export function unlockRadioStationTrackList(radioStation: string, trackListName: string): void { 
	return _in(0x031acb6a, 0xba18c729, _ts(radioStation), _ts(trackListName)); 
}

export function unpatchDecalDiffuseMap(decalType: number): void { 
	return _in(0xb7ed70c4, 0x9521a61d, decalType); 
}

export function unpausePlaybackRecordedVehicle(vehicle: number): void { 
	return _in(0x8879ee09, 0x268305d5, vehicle); 
}

/**
 * Does something similar to INTERIOR::DISABLE_INTERIOR.
 * 
 * You don't fall through the floor but everything is invisible inside and looks the same as when INTERIOR::DISABLE_INTERIOR is used. Peds behaves normally inside.
 * @param interior
 */
export function unpinInterior(interior: number): void { 
	return _in(0x261cce7e, 0xed010641, interior); 
}

export function unpinRopeVertex(ropeId: number, vertex: number): void { 
	return _in(0x4b5ae2ee, 0xe4a8f180, ropeId, vertex); 
}

/**
 * gtaforums.com/topic/885580-ped-headshotmugshot-txd/
 * @param id
 */
export function unregisterPedheadshot(id: number): void { 
	return _in(0x96b1361d, 0x9b24c2ff, id); 
}

export function unregisterScriptVariable(variable: number): number { 
	return _in(0x340a36a7, 0x00e99699, _ii(variable)); 
}

/**
 * This native does absolutely nothing, just a nullsub
 */
export function unregisterScriptWithAudio(): void { 
	return _in(0xa8638be2, 0x28d4751a); 
}

export function unrequestTennisBanks(): void { 
	return _in(0x0150b6ff, 0x25a9e2e5); 
}

export function updateLightsOnEntity(entity: number): void { 
	return _in(0xdeadc0de, 0xdeadc0de, entity); 
}

export function updateNavmeshBlockingObject(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number): void { 
	return _in(0x109e9937, 0x3f290687, p0, _fv(p1), _fv(p2), _fv(p3), _fv(p4), _fv(p5), _fv(p6), _fv(p7), p8); 
}

/**
 * Returns the current status of the onscreen keyboard, and updates the output.
 * 
 * Status Codes:
 * 
 * -1: Keyboard isn't active
 * 0: User still editing
 * 1: User has finished editing
 * 2: User has canceled editing
 */
export function updateOnscreenKeyboard(): number { 
	return _in(0x0cf2b696, 0xbbf945ae, _r, _ri); 
}

/**
 * See SET_PED_HEAD_BLEND_DATA().
 * @param ped
 * @param shapeMix
 * @param skinMix
 * @param thirdMix
 */
export function updatePedHeadBlendData(ped: number, shapeMix: number, skinMix: number, thirdMix: number): void { 
	return _in(0x723538f6, 0x1c647c5a, ped, _fv(shapeMix), _fv(skinMix), _fv(thirdMix)); 
}

export function updatePlayerTeleport(player: number): boolean { 
	return _in(0xe23d5873, 0xc2394c61, player, _r); 
}

/**
 * Does nothing (it's a nullsub).
 */
export function updateRadarZoomToBlip(): void { 
	return _in(0xd2049635, 0xdeb9c375); 
}

export function updateSoundCoord(soundId: number, x: number, y: number, z: number): void { 
	return _in(0x7ec3c679, 0xd0e7e46b, soundId, _fv(x), _fv(y), _fv(z)); 
}

export function updateSpecialAbilityFromStat(player: number, p1: number): void { 
	return _in(0xffee8fa2, 0x9ab9a18e, player, p1); 
}

export function updateTaskAimGunScriptedTarget(ped: number, target: number, x: number, y: number, z: number, disableBlockingClip: boolean): void { 
	return _in(0x9724fb59, 0xa3e72ad0, ped, target, _fv(x), _fv(y), _fv(z), disableBlockingClip); 
}

export function updateTaskHandsUpDuration(ped: number, duration: number): void { 
	return _in(0xa98fcafd, 0x7893c834, ped, duration); 
}

export function updateTaskSweepAimEntity(ped: number, entity: number): void { 
	return _in(0xe4973dbd, 0xbe6e44b3, ped, entity); 
}

export function updateTaskSweepAimPosition(ped: number, x: number, y: number, z: number): void { 
	return _in(0xbb106883, 0xf5201fc4, ped, _fv(x), _fv(y), _fv(z)); 
}

/**
 * Just a nullsub (i.e. does absolutely nothing) since build 1604.
 * @param enableMixes
 */
export function updateUnlockableDjRadioTracks(enableMixes: boolean): void { 
	return _in(0x47aed842, 0x13a47510, enableMixes); 
}

/**
 * This native is used in both singleplayer and multiplayer scripts.
 * 
 * Always used like this in scripts
 * PLAYER::UPDATE_WANTED_POSITION_THIS_FRAME(PLAYER::PLAYER_ID());
 * @param player
 */
export function updateWantedPositionThisFrame(player: number): void { 
	return _in(0xbc9490ca, 0x15aea8fb, player); 
}

export function useActiveCameraForTimeslicingCentre(): void { 
	return _in(0x693478ac, 0xbd7f18e7); 
}

/**
 * Sets gameplay camera to hash
 * @param camName
 */
export function useDedicatedStuntCameraThisUpdate(camName: string): void { 
	return _in(0x425a920f, 0xdb9a0dda, _ts(camName)); 
}

/**
 * Related to displaying cash on the HUD
 * Always called before HUD::CHANGE_FAKE_MP_CASH in decompiled scripts
 * @param toggle
 */
export function useFakeMpCash(toggle: boolean): void { 
	return _in(0x170f541e, 0x1cadd1de, toggle); 
}

export function useFootstepScriptSweeteners(ped: number, p1: boolean, hash: number): void { 
	return _in(0xbf4dc178, 0x4be94dfa, ped, p1, _ch(hash)); 
}

/**
 * From the b678d decompiled scripts:
 * 
 * GRAPHICS::USE_PARTICLE_FX_ASSET("FM_Mission_Controler");
 * GRAPHICS::USE_PARTICLE_FX_ASSET("scr_apartment_mp");
 * GRAPHICS::USE_PARTICLE_FX_ASSET("scr_indep_fireworks");
 * GRAPHICS::USE_PARTICLE_FX_ASSET("scr_mp_cig_plane");
 * GRAPHICS::USE_PARTICLE_FX_ASSET("scr_mp_creator");
 * GRAPHICS::USE_PARTICLE_FX_ASSET("scr_ornate_heist");
 * GRAPHICS::USE_PARTICLE_FX_ASSET("scr_prison_break_heist_station");
 * 
 * Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
 * @param name
 */
export function useParticleFxAsset(name: string): void { 
	return _in(0x6c38af36, 0x93a69a91, _ts(name)); 
}

export function usePlayerColourInsteadOfTeamColour(toggle: boolean): void { 
	return _in(0x77758139, 0xec9b66c7, toggle); 
}

export function useScriptCamForAmbientPopulationOriginThisFrame(p0: boolean, p1: boolean): void { 
	return _in(0x27140184, 0x6bd26e92, p0, p1); 
}

export function useSirenAsHorn(vehicle: number, toggle: boolean): void { 
	return _in(0xfa932de3, 0x50266ef8, vehicle, toggle); 
}

/**
 * Forces footstep tracks on all surfaces.
 * @param toggle
 */
export function useSnowFootVfxWhenUnsheltered(toggle: boolean): void { 
	return _in(0xaeedad14, 0x20c65cc0, toggle); 
}

/**
 * Forces vehicle trails on all surfaces.
 * @param toggle
 */
export function useSnowWheelVfxWhenUnsheltered(toggle: boolean): void { 
	return _in(0x4cc7f0fe, 0xa5283fe0, toggle); 
}

export function useVehicleCamStuntSettingsThisUpdate(): void { 
	return _in(0x6493cf69, 0x859b116a); 
}

export function useVehicleTargetingReticule(p0: number): void { 
	return _in(0x0c698d8f, 0x099174c7, p0); 
}

export function useVehicleTargetingReticuleOnVehicles(enable: boolean): void { 
	return _in(0x1bc0ea29, 0x12708625, enable); 
}

export function useWaypointRecordingAsAssistedMovementRoute(name: string, p1: boolean, p2: number, p3: number): void { 
	return _in(0x5a353b8e, 0x6b1095b5, _ts(name), p1, _fv(p2), _fv(p3)); 
}

export function usingMissionCreator(toggle: boolean): void { 
	return _in(0xf14878fc, 0x50bec6ee, toggle); 
}

/**
 * Calculates distance between vectors.
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 */
export function vdist(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): number { 
	return _in(0x2a488c17, 0x6d52cca5, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _r, _rf); 
}

/**
 * Calculates distance between vectors but does not perform Sqrt operations. (Its way faster)
 * @param x1
 * @param y1
 * @param z1
 * @param x2
 * @param y2
 * @param z2
 */
export function vdist2(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): number { 
	return _in(0xb7a62832, 0x0eff8e47, _fv(x1), _fv(y1), _fv(z1), _fv(x2), _fv(y2), _fv(z2), _r, _rf); 
}

/**
 * calls from vehicle to net.
 * 
 * @param vehicle
 */
export function vehToNet(vehicle: number): number { 
	return _in(0xb4c94523, 0xf023419c, vehicle, _r, _ri); 
}

export function vehicleSetEnableNormaliseRampCarVerticalVeloctiy(p0: number, p1: number): void { 
	return _in(0x756ae6e9, 0x62168a04, p0, p1); 
}

export function vehicleSetEnableRampCarSideImpulse(p0: number, p1: number): void { 
	return _in(0x1bbac99c, 0x0bc53656, p0, p1); 
}

export function vehicleSetExtenableSideTargetRatio(p0: number, p1: number): number { 
	return _in(0xf3b0e0ae, 0xd097a3f5, p0, p1, _r, _ri); 
}

export function vehicleSetJetWashForceEnabled(p0: number): void { 
	return _in(0x9d30687c, 0x57baa0bb, p0); 
}

export function vehicleSetOverrideExtenableSideRatio(p0: number, p1: number): number { 
	return _in(0x0419b167, 0xee128f33, p0, p1, _r, _ri); 
}

export function vehicleSetOverrideSideRatio(p0: number, p1: number): number { 
	return _in(0xd3e51c0a, 0xb8c26eee, p0, p1, _r, _ri); 
}

/**
 * Parachute models:
 * - sr_prop_specraces_para_s_01
 * - imp_prop_impexp_para_s (SecuroServ; Default)
 * Plus, many more props can be used as vehicle parachutes, like umbrellas (prop_beach_parasol_03), and unlike SET_PLAYER_PARACHUTE_MODEL_OVERRIDE, you won't get stuck mid-air when using an umbrella.
 * @param vehicle
 * @param modelHash
 */
export function vehicleSetParachuteModelOverride(vehicle: number, modelHash: number): void { 
	return _in(0x4d610c6b, 0x56031351, vehicle, _ch(modelHash)); 
}

/**
 * Variations available for the generic parachute (sr_prop_specraces_para_s_01):
 * - 0: Rainbow
 * - 1: Red
 * - 2: White, blue, yellow
 * - 3: Black, red, white
 * - 4: Red, white, blue
 * - 5: Blue
 * - 6: Black
 * - 7: Black, yellow
 * @param vehicle
 * @param textureVariation
 */
export function vehicleSetParachuteModelTintIndex(vehicle: number, textureVariation: number): void { 
	return _in(0xa74ad243, 0x9468c883, vehicle, textureVariation); 
}

export function vehicleSetRampAndRammingCarsTakeDamage(vehicle: number, toggle: boolean): void { 
	return _in(0x28d034a9, 0x3fe31bf5, vehicle, toggle); 
}

export function vehicleStartParachuting(vehicle: number, active: boolean): void { 
	return _in(0x0bffb028, 0xb3dd0a97, vehicle, active); 
}

export function vehicleWaypointPlaybackOverrideSpeed(vehicle: number, speed: number): void { 
	return _in(0x121f0593, 0xe0a431d7, vehicle, _fv(speed)); 
}

export function vehicleWaypointPlaybackPause(vehicle: number): void { 
	return _in(0x8a4e6ac3, 0x73666bc5, vehicle); 
}

export function vehicleWaypointPlaybackResume(vehicle: number): void { 
	return _in(0xdc04fcaa, 0x7839d492, vehicle); 
}

export function vehicleWaypointPlaybackUseDefaultSpeed(vehicle: number): void { 
	return _in(0x5ceb25a7, 0xd2848963, vehicle); 
}

/**
 * Calculates the magnitude of a vector.
 * @param x
 * @param y
 * @param z
 */
export function vmag(x: number, y: number, z: number): number { 
	return _in(0x652d2eee, 0xf1d3e62c, _fv(x), _fv(y), _fv(z), _r, _rf); 
}

/**
 * Calculates the magnitude of a vector but does not perform Sqrt operations. (Its way faster)
 * @param x
 * @param y
 * @param z
 */
export function vmag2(x: number, y: number, z: number): number { 
	return _in(0xa8ceacb4, 0xf35ae058, _fv(x), _fv(y), _fv(z), _r, _rf); 
}

/**
 * Pauses execution of the current script, please note this behavior is only seen when called from one of the game script files(ysc). In order to wait an asi script use "static void WAIT(DWORD time);" found in main.h
 * @param ms
 */
export function wait(ms: number): void { 
	return _in(0x4ede34fb, 0xadd967a6, ms); 
}

export function wasCutsceneSkipped(): boolean { 
	return _in(0x40c8656e, 0xdaedd569, _r); 
}

export function wasFlyCamConstrainedOnPreviousUdpate(cam: number): boolean { 
	return _in(0x5c48a1d6, 0xe3b33179, cam, _r); 
}

export function wasPedKilledByStealth(ped: number): boolean { 
	return _in(0xf9800aa1, 0xa771b000, ped, _r); 
}

export function wasPedKilledByTakedown(ped: number): boolean { 
	return _in(0x7f08e260, 0x39c7347c, ped, _r); 
}

export function wasPedKnockedOut(ped: number): boolean { 
	return _in(0x61767f73, 0xeaceed21, ped, _r); 
}

/**
 * Despite this function's name, it simply returns whether the specified handle is a Ped.
 * @param ped
 */
export function wasPedSkeletonUpdated(ped: number): boolean { 
	return _in(0x11b499c1, 0xe0ff8559, ped, _r); 
}

/**
 * This function is hard-coded to always return 1.
 * @param p0
 */
export function wasVcWithdrawalSuccessful(p0: number): boolean { 
	return _in(0x6fcf8dde, 0xa146c45b, p0, _r); 
}

export function washDecalsFromVehicle(vehicle: number, p1: number): void { 
	return _in(0x5b712761, 0x429dbc14, vehicle, _fv(p1)); 
}

export function washDecalsInRange(x: number, y: number, z: number, range: number, p4: number): void { 
	return _in(0x9c30613d, 0x50a6adef, _fv(x), _fv(y), _fv(z), _fv(range), _fv(p4)); 
}

export function waterOverrideFadeIn(p0: number): void { 
	return _in(0xa8434f1d, 0xff41d6e7, _fv(p0)); 
}

export function waterOverrideFadeOut(p0: number): void { 
	return _in(0xc3c221ad, 0xdde31a11, _fv(p0)); 
}

export function waterOverrideSetOceannoiseminamplitude(minAmplitude: number): void { 
	return _in(0x31727907, 0xb2c43c55, _fv(minAmplitude)); 
}

export function waterOverrideSetOceanwaveamplitude(amplitude: number): void { 
	return _in(0x405591ec, 0x8fd9096d, _fv(amplitude)); 
}

export function waterOverrideSetOceanwavemaxamplitude(maxAmplitude: number): void { 
	return _in(0xb3e6360d, 0xde733e82, _fv(maxAmplitude)); 
}

export function waterOverrideSetOceanwaveminamplitude(minAmplitude: number): void { 
	return _in(0xf751b16f, 0xb32abc1d, _fv(minAmplitude)); 
}

export function waterOverrideSetRipplebumpiness(bumpiness: number): void { 
	return _in(0x7c9c0b1e, 0xeb1f9072, _fv(bumpiness)); 
}

export function waterOverrideSetRippledisturb(disturb: number): void { 
	return _in(0xb9854dfd, 0xe0d833d6, _fv(disturb)); 
}

export function waterOverrideSetRipplemaxbumpiness(maxBumpiness: number): void { 
	return _in(0x9f5e6bb6, 0xb34540da, _fv(maxBumpiness)); 
}

export function waterOverrideSetRippleminbumpiness(minBumpiness: number): void { 
	return _in(0x6216b116, 0x083a7cb4, _fv(minBumpiness)); 
}

export function waterOverrideSetShorewaveamplitude(amplitude: number): void { 
	return _in(0xb8f87ead, 0x7533b176, _fv(amplitude)); 
}

export function waterOverrideSetShorewavemaxamplitude(maxAmplitude: number): void { 
	return _in(0xa7a11274, 0x90312c36, _fv(maxAmplitude)); 
}

export function waterOverrideSetShorewaveminamplitude(minAmplitude: number): void { 
	return _in(0xc3ead29a, 0xb273ece8, _fv(minAmplitude)); 
}

/**
 * This seems to edit the water wave, intensity around your current location.
 * 
 * 0.0f = Normal
 * 1.0f = So Calm and Smooth, a boat will stay still.
 * 3.0f = Really Intense.
 * @param strength
 */
export function waterOverrideSetStrength(strength: number): void { 
	return _in(0xc54a08c8, 0x5ae4d410, _fv(strength)); 
}

export function waterReflectionSetScriptObjectVisibility(p0: number): void { 
	return _in(0xca465d9c, 0xc0d231ba, p0); 
}

export function waypointPlaybackGetIsPaused(p0: number): boolean { 
	return _in(0x701375a7, 0xd43f01cb, p0, _r); 
}

export function waypointPlaybackOverrideSpeed(p0: number, p1: number, p2: boolean): void { 
	return _in(0x7d7d2b47, 0xfa788e85, p0, _fv(p1), p2); 
}

export function waypointPlaybackPause(p0: number, p1: boolean, p2: boolean): void { 
	return _in(0x0f342546, 0xaa06fed5, p0, p1, p2); 
}

export function waypointPlaybackResume(p0: number, p1: boolean, p2: number, p3: number): void { 
	return _in(0x244f70c8, 0x4c547d2d, p0, p1, p2, p3); 
}

export function waypointPlaybackStartAimingAtCoord(ped: number, x: number, y: number, z: number, p4: boolean): void { 
	return _in(0x8968400d, 0x900ed8b3, ped, _fv(x), _fv(y), _fv(z), p4); 
}

export function waypointPlaybackStartAimingAtPed(ped: number, target: number, p2: boolean): void { 
	return _in(0x20e33093, 0x7c399d29, ped, target, p2); 
}

export function waypointPlaybackStartShootingAtCoord(ped: number, x: number, y: number, z: number, p4: boolean, firingPattern: number): void { 
	return _in(0x057a25cf, 0xcc9db671, ped, _fv(x), _fv(y), _fv(z), p4, _ch(firingPattern)); 
}

export function waypointPlaybackStartShootingAtPed(ped: number, ped2: number, p2: boolean, p3: boolean): void { 
	return _in(0xe70ba7b9, 0x0f8390dc, ped, ped2, p2, p3); 
}

export function waypointPlaybackStopAimingOrShooting(ped: number): void { 
	return _in(0x47efa040, 0xebb8e2ea, ped); 
}

export function waypointPlaybackUseDefaultSpeed(p0: number): void { 
	return _in(0x6599d834, 0xb12d0800, p0); 
}

/**
 * Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
 * For a full list of the points, see here: goo.gl/wIH0vn
 * @param name
 * @param x
 * @param y
 * @param z
 * @param point
 */
export function waypointRecordingGetClosestWaypoint(name: string, x: number, y: number, z: number, point: number): [boolean, number] { 
	const [retval, point_out] = _in(0xb629a298, 0x081f876f, _ts(name), _fv(x), _fv(y), _fv(z), _ii(point), _r);
	return [retval as boolean, point_out as number]; 
}

/**
 * Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
 * For a full list of the points, see here: goo.gl/wIH0vn
 * @param name
 * @param point
 * @param coord
 */
export function waypointRecordingGetCoord(name: string, point: number, coord: Vector3): [boolean, Vector3] { 
	const [retval, coord_out] = _in(0x2fb89740, 0x5c90b361, _ts(name), point, _v, _r);
	return [retval as boolean, _mv(coord_out)]; 
}

/**
 * Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
 * For a full list of the points, see here: goo.gl/wIH0vn
 * @param name
 * @param points
 */
export function waypointRecordingGetNumPoints(name: string, points: number): [boolean, number] { 
	const [retval, points_out] = _in(0x5343532c, 0x01a07234, _ts(name), _ii(points), _r);
	return [retval as boolean, points_out as number]; 
}

/**
 * Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
 * @param name
 * @param point
 */
export function waypointRecordingGetSpeedAtPoint(name: string, point: number): number { 
	return _in(0x005622ae, 0xbc33aca9, _ts(name), point, _r, _rf); 
}

/**
 * Does nothing and always returns 0.
 * @param amount
 */
export function withdrawVc(amount: number): number { 
	return _in(0xf70efa14, 0xfe091429, amount, _r, _ri); 
}

export function wouldEntityBeOccluded(entityModelHash: number, x: number, y: number, z: number, p4: boolean): boolean { 
	return _in(0xee5d2a12, 0x2e09ec42, _ch(entityModelHash), _fv(x), _fv(y), _fv(z), p4, _r); 
}
